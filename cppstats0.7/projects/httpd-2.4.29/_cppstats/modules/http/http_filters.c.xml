<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/http/http_filters.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDARG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <name>http_filter_ctx</name> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>limit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>limit_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>chunk_used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>chunk_bws</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>chunkbits</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>BODY_NONE</name></decl>,
<decl><name>BODY_LENGTH</name></decl>,
<decl><name>BODY_CHUNK</name></decl>,
<decl><name>BODY_CHUNK_PART</name></decl>,
<decl><name>BODY_CHUNK_EXT</name></decl>,
<decl><name>BODY_CHUNK_CR</name></decl>,
<decl><name>BODY_CHUNK_LF</name></decl>,
<decl><name>BODY_CHUNK_DATA</name></decl>,
<decl><name>BODY_CHUNK_END</name></decl>,
<decl><name>BODY_CHUNK_END_LF</name></decl>,
<decl><name>BODY_CHUNK_TRAILER</name></decl>
}</block> <decl><name>state</name></decl>;</enum>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>eos_sent</name> :1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
}</block></struct></type> <name>http_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bail_out_on_error</name><parameter_list>(<param><decl><type><name>http_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>int</name></type> <name>http_error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_RESPONSE</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name>http_error</name></expr>)</condition> <block>{
<case>case <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>:
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
</case><case>case <expr><name>HTTP_REQUEST_TIME_OUT</name></expr>:
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
</case><case>case <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>:
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
</case><default>default:
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
</default>}</block></switch>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>ap_bucket_error_create</name><argument_list>(<argument><expr><name>http_error</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>parse_chunk_size</name><parameter_list>(<param><decl><type><name>http_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>int</name></type> <name>linelimit</name></decl></param>, <param><decl><type><name>int</name></type> <name>strict</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>len</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_END</name>
|| <name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_END_LF</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> == <name>LF</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>strict</name> &amp;&amp; (<name><name>ctx</name>-&gt;<name>state</name></name> != <name>BODY_CHUNK_END_LF</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == <name>CR</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_END</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_END_LF</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>apr_isxdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_PART</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>chunkbits</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>apr_off_t</name></expr></argument>)</argument_list></sizeof> * 8</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>chunk_used</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>chunk_bws</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>c</name> == <name>LF</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>strict</name> &amp;&amp; (<name><name>ctx</name>-&gt;<name>state</name></name> != <name>BODY_CHUNK_LF</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_DATA</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_TRAILER</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_LF</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == <name>CR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_LF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == ';'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_EXT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_EXT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> != '\t' &amp;&amp; <call><name>apr_iscntrl</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> == ' ' || <name>c</name> == '\t'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_CR</name></expr>;</expr_stmt>
<if>if <condition>(<expr>++<name><name>ctx</name>-&gt;<name>chunk_bws</name></name> &gt; 10</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_CR</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_PART</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>xvalue</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>remaining</name></name> &amp;&amp; <name>c</name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>chunkbits</name></name> -= 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>chunkbits</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>c</name> &gt;= '0' &amp;&amp; <name>c</name> &lt;= '9'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>xvalue</name> = <name>c</name> - '0'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 'A' &amp;&amp; <name>c</name> &lt;= 'F'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>xvalue</name> = <name>c</name> - 'A' + 0xa</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &gt;= 'a' &amp;&amp; <name>c</name> &lt;= 'f'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>xvalue</name> = <name>c</name> - 'a' + 0xa</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> = (<name><name>ctx</name>-&gt;<name>remaining</name></name> &lt;&lt; 4) | <name>xvalue</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>remaining</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>chunk_used</name></name> += <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>chunk_used</name></name> &lt; 0 || <name><name>ctx</name>-&gt;<name>chunk_used</name></name> &gt; <name>linelimit</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_chunked_trailers</name><parameter_list>(<param><decl><type><name>http_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>, <param><decl><type><name>int</name></type> <name>merge</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>saved_headers_in</name> <init>= <expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_status</name> <init>= <expr><name><name>r</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name><name>r</name>-&gt;<name>trailers_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_get_mime_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>saved_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_notes</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>,
<argument><expr>"error-notes"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02656</expr></argument>)</argument_list></call>
"Error while reading HTTP trailer: %i%s%s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>error_notes</name> ? ": " : ""</expr></argument>,
<argument><expr><name>error_notes</name> ? <name>error_notes</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if<condition>(<expr>!<name>merge</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name>saved_headers_in</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>saved_headers_in</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ap_http_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr>(<name>core_server_config</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>core_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr>(<name><name>conf</name>-&gt;<name>http_conformance</name></name> != <name>AP_HTTP_CONFORMANCE_UNSAFE</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>http_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>http_error</name> <init>= <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>again</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name> &amp;&amp; <name>mode</name> != <name>AP_MODE_GETLINE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tenc</name></decl>, *<decl><type ref="prev"/><name>lenp</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <name><name>ctx</name>-&gt;<name>bb</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>limit</name></name> = <call><name>ap_get_limit_req_body</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>limit</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>tenc</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lenp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tenc</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>tenc</name></expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call> == 0
|| <call><name>ap_find_last_token</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>tenc</name></expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_RESPONSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02555</expr></argument>)</argument_list></call>
"Unknown Transfer-Encoding: %s; "
"using read-until-close"</expr></argument>, <argument><expr><name>tenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tenc</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01585</expr></argument>)</argument_list></call>
"Unknown Transfer-Encoding: %s"</expr></argument>, <argument><expr><name>tenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>lenp</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>lenp</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endstr</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_LENGTH</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>remaining</name></name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr>&amp;<name>endstr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
|| <name>endstr</name> == <name>lenp</name> || *<name>endstr</name> || <name><name>ctx</name>-&gt;<name>remaining</name></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01587</expr></argument>)</argument_list></call>
"Invalid Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>limit</name></name> &amp;&amp; <name><name>ctx</name>-&gt;<name>limit</name></name> &lt; <name><name>ctx</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01588</expr></argument>)</argument_list></call>
"Requested content-length of %" <name>APR_OFF_T_FMT</name>
" is larger than the configured limit"
" of %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>remaining</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_NONE</name> &amp;&amp; <name><name>f</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name> != <name>PROXYREQ_RESPONSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK</name> ||
(<name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_LENGTH</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>remaining</name></name> &gt; 0)) &amp;&amp;
<name><name>f</name>-&gt;<name>r</name>-&gt;<name>expecting_100</name></name> &amp;&amp; <name><name>f</name>-&gt;<name>r</name>-&gt;<name>proto_num</name></name> &gt;= <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call> &amp;&amp;
!(<name><name>f</name>-&gt;<name>r</name>-&gt;<name>eos_sent</name></name> || <name><name>f</name>-&gt;<name>r</name>-&gt;<name>bytes_sent</name></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_SUCCESS</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>expecting_100</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <macro><name>apr_pstrcat</name><argument_list>(<argument>f-&gt;r-&gt;pool</argument>, <argument>AP_SERVER_PROTOCOL " "</argument>,
<argument>ap_get_status_line(HTTP_CONTINUE)</argument>, <argument>CRLF CRLF</argument>,
<argument>NULL</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>eos_sent</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<do>do <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>again</name> = 0</expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>BODY_CHUNK</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_PART</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_EXT</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_CR</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_LF</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_END</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_END_LF</name></expr>: <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>AP_MODE_GETLINE</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name>
&amp;&amp; ((<name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>)
|| (<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_EOF</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>parsing</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>parsing</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>parse_chunk_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>server</name>-&gt;<name>limit_req_fieldsize</name></name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01590</expr></argument>)</argument_list></call>
"Error reading/parsing chunk %s "</expr></argument>,
<argument><expr>(<name>APR_ENOSPC</name> == <name>rv</name>) ? "(overflow)" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parsing</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> != <name>APR_ENOSPC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>http_error</name> = <name>HTTP_BAD_REQUEST</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>http_error</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>again</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_TRAILER</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>read_chunked_trailers</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>merge_trailers</name></name> == <name>AP_MERGE_TRAILERS_ENABLE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>BODY_NONE</name></expr>:
</case><case>case <expr><name>BODY_LENGTH</name></expr>:
</case><case>case <expr><name>BODY_CHUNK_DATA</name></expr>: <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> != <name>BODY_NONE</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>remaining</name></name> &lt; <name>readbytes</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>readbytes</name> = <name><name>ctx</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>readbytes</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>totalread</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name>
&amp;&amp; ((<name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>)
|| (<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_EOF</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>state</name></name> != <name>BODY_NONE</name>
&amp;&amp; <name><name>ctx</name>-&gt;<name>remaining</name></name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>totalread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>totalread</name> &gt;= 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> != <name>BODY_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> -= <name>totalread</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>remaining</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_INCOMPLETE</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_CHUNK_DATA</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>BODY_CHUNK_END</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>chunk_used</name></name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>limit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>limit_used</name></name> += <name>totalread</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>limit</name></name> &lt; <name><name>ctx</name>-&gt;<name>limit_used</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01591</expr></argument>)</argument_list></call> "Read content length of "
"%" <name>APR_OFF_T_FMT</name> " is larger than the "
"configured limit of %" <name>APR_OFF_T_FMT</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>limit_used</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>,
<argument><expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>state</name></name> == <name>BODY_LENGTH</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>remaining</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block>
</case><case>case <expr><name>BODY_CHUNK_TRAILER</name></expr>: <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name>
&amp;&amp; ((<name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>)
|| (<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<break>break;</break>
}</block>
</case><default>default: <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02901</expr></argument>)</argument_list></call>
"Unexpected body state (%i)"</expr></argument>, <argument><expr>(<name>int</name>)<name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block>
</default>}</block></switch>
}</block> while <condition>(<expr><name>again</name></expr>)</condition>;</do>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<struct>struct <name>check_header_ctx</name> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strict</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_header</name><parameter_list>(<param><decl><type>struct <name>check_header_ctx</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dst</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02428</expr></argument>)</argument_list></call>
"Empty response header name, aborting request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>strict</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> = <call><name>ap_scan_http_token</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>end</name> = <call><name>ap_scan_vchar_obstext</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>*<name>end</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02429</expr></argument>)</argument_list></call>
"Response header name '%s' contains invalid "
"characters, aborting request"</expr></argument>,
<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>pos</name> = *<name>val</name></expr>;</init> <condition><expr>*<name>pos</name></expr>;</condition> <incr><expr><name>pos</name> = <name>end</name></expr></incr>) <block>{
<expr_stmt><expr><name>end</name> = <call><name>ap_scan_http_field_content</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>end</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>end</name><index>[<expr>0</expr>]</index></name> != <name>CR</name> || <name><name>end</name><index>[<expr>1</expr>]</index></name> != <name>LF</name> || (<name><name>end</name><index>[<expr>2</expr>]</index></name> != ' ' &amp;&amp;
<name><name>end</name><index>[<expr>2</expr>]</index></name> != '\t')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02430</expr></argument>)</argument_list></call>
"Response header '%s' value of '%s' contains "
"invalid characters, aborting request"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>dst</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>val</name> = <name>dst</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr>*<name>val</name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>dst</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>end</name> - <name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dst</name> += <name>end</name> - <name>pos</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>end</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> += 3 + <call><name>strspn</name><argument_list>(<argument><expr><name>end</name> + 3</expr></argument>, <argument><expr>"\t "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>dst</name>++ = ' '</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>dst</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dst</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_headers_table</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>, <param><decl><type>struct <name>check_header_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>headers</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_entry_t</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>headers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>header</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>apr_table_entry_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>header</name>-&gt;<name>key</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>check_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>header</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr>(const <name>char</name> **)&amp;<name><name>header</name>-&gt;<name>val</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>int</name></type> <name>check_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>check_header_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>strict</name></name> = (<name><name>conf</name>-&gt;<name>http_conformance</name></name> != <name>AP_HTTP_CONFORMANCE_UNSAFE</name>)</expr>;</expr_stmt>
<return>return <expr><call><name>check_headers_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call> &amp;&amp;
<call><name>check_headers_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_headers_recursion</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>check</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>check</name></expr></argument>, <argument><expr>"check_headers_recursion"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>check</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr>"true"</expr></argument>, <argument><expr>"check_headers_recursion"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>header_struct</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
}</block></struct></type> <name>header_struct</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>form_header_field</name><parameter_list>(<param><decl><type><name>header_struct</name> *</type><name>h</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fieldname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fieldval</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> *</type><name>headfield</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>headfield</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fieldname</name></expr></argument>, <argument><expr>": "</expr></argument>, <argument><expr><name>fieldval</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>headfield</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>headfield</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_write</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>headfield</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name> *</type><name>v</name> <init>= <expr><name>vec</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_base</name></name> = (<name>void</name> *)<name>fieldname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>fieldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_base</name></name> = ": "</expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr>": "</expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>v</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_base</name></name> = (<name>void</name> *)<name>fieldval</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>fieldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_base</name></name> = <name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>-&gt;<name>iov_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_writev</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uniq_field_values</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>strpp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>values</name> = (<name>apr_array_header_t</name> *)<name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>values</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<while>while <condition>(<expr>*<name>e</name> == ',' || <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>e</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>e</name> == '\0'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>start</name> = <name>e</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>e</name> != '\0' &amp;&amp; *<name>e</name> != ',' &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>e</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>e</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>e</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>e</name>++ = '\0'</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>strpp</name> = (<name>char</name> **) <name><name>values</name>-&gt;<name>elts</name></name></expr>;</init> <condition><expr><name>i</name> &lt; <name><name>values</name>-&gt;<name>nelts</name></name></expr>;</condition>
<incr><expr>++<name>i</name></expr>, <expr>++<name>strpp</name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>strpp</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr>*<name>strpp</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>i</name> == <name><name>values</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call> = <name>start</name></expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr>*<name>e</name> != '\0'</expr>)</condition>;</do>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fixup_vary</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>varies</name></decl>;</decl_stmt>
<expr_stmt><expr><name>varies</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>uniq_field_values</name></expr></argument>, <argument><expr><name>varies</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>varies</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>,
<argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>varies</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_all_header_fields</name><parameter_list>(<param><decl><type><name>header_struct</name> *</type><name>h</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>t_elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>t_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name> *</type><name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name> *</type><name>vec_next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elts</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>elts</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>t_elt</name> = (const <name>apr_table_entry_t</name> *)(<name><name>elts</name>-&gt;<name>elts</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>t_end</name> = <name>t_elt</name> + <name><name>elts</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>vec</name> = (struct <name>iovec</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4 * <name><name>elts</name>-&gt;<name>nelts</name></name> *
<sizeof>sizeof<argument_list>(<argument>struct <expr><name>iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec_next</name> = <name>vec</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_base</name></name> = <call>(<name>void</name>*)<argument_list>(<argument><expr><name><name>t_elt</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>t_elt</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec_next</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_base</name></name> = ": "</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr>": "</expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>vec_next</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_base</name></name> = <call>(<name>void</name>*)<argument_list>(<argument><expr><name><name>t_elt</name>-&gt;<name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>t_elt</name>-&gt;<name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>vec_next</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_base</name></name> = <name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec_next</name>-&gt;<name>iov_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>vec_next</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>t_elt</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>t_elt</name> &lt; <name>t_end</name></expr>)</condition>;</do>
<if>if <condition>(<expr><call><name>APLOGrtrace4</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t_elt</name> = (const <name>apr_table_entry_t</name> *)(<name><name>elts</name>-&gt;<name>elts</name></name>)</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>" %s: %s"</expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>t_elt</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>t_elt</name>-&gt;<name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t_elt</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><name>t_elt</name> &lt; <name>t_end</name></expr>)</condition>;</do>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pstrcatv</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_next</name> - <name>vec</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_brigade_write</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>apr_brigade_writev</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>vec_next</name> - <name>vec</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>validate_status_line</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status_line</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &lt; 3
|| <call><name>apr_strtoi64</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name><name>r</name>-&gt;<name>status</name></name>
|| (<name>end</name> - 3) != <name><name>r</name>-&gt;<name>status_line</name></name>
|| (<name>len</name> &gt;= 4 &amp;&amp; ! <call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> == 3</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>basic_http_header_check</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>protocol</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>assbackwards</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>validate_status_line</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>status_line</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proto_num</name></name> &gt; <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"downgrade-1.0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_num</name></name> = <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proto_num</name></name> == <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-response-1.0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>protocol</name> = "HTTP/1.0"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>protocol</name> = <name>AP_SERVER_PROTOCOL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>basic_http_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>date</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_date</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>us</name> <init>= <expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_struct</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>assbackwards</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>protocol</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)" "</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr>" "</expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>2</expr>]</index></name>.<name>iov_base</name> = <call>(<name>void</name> *)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>2</expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>3</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>3</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_pstrcatv</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_write</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>apr_brigade_writev</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>h</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>bb</name></name> = <name>bb</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> != <name>PROXYREQ_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proxy_date</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>proxy_date</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>date</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_recent_rfc822_date</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>server</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>date</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_recent_rfc822_date</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>form_header_field</name><argument_list>(<argument><expr>&amp;<name>h</name></expr></argument>, <argument><expr>"Date"</expr></argument>, <argument><expr><name>proxy_date</name> ? <name>proxy_date</name> : <name>date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>server</name> &amp;&amp; *<name>us</name></expr>)</condition><then>
<expr_stmt><expr><name>server</name> = <name>us</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>server</name></expr>)</condition><then>
<expr_stmt><expr><call><name>form_header_field</name><argument_list>(<argument><expr>&amp;<name>h</name></expr></argument>, <argument><expr>"Server"</expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>APLOGrtrace3</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Response sent with status %d%s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>,
<argument><expr><call><name>APLOGrtrace4</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> ? ", headers:" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>" Date: %s"</expr></argument>,
<argument><expr><name>proxy_date</name> ? <name>proxy_date</name> : <name>date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>server</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>" Server: %s"</expr></argument>,
<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>server</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_basic_http_header</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_bucket_brigade *bb</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>basic_http_header_check</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>basic_http_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>terminate_header</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>crlf</name><index>[]</index></name> <init>= <expr><name>CRLF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buflen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>crlf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>crlf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_write</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>crlf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_send_http_trace</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_struct</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>bodyread</name> <init>= <expr><name>NULL</name></expr></init>, *<name>bodyoff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bodylen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bodybuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>res</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_TRACE</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> == <name>AP_TRACE_DISABLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"TRACE denied by server configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>trace_enable</name></name> == <name>AP_TRACE_EXTENDED</name></expr>)</condition><then>
<expr_stmt><expr><name>body</name> = <name>REQUEST_CHUNKED_DECHUNK</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>body</name> = <name>REQUEST_NO_BODY</name></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_setup_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"TRACE with a request body is not allowed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &gt; 65536</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"Extended TRACE request bodies cannot exceed 64k\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bodybuf</name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name> + 32</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>bodybuf</name> = 73730</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>bodyoff</name> = <name>bodyread</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bodybuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(!<name>bodylen</name> || <name>bodybuf</name> &gt;= 32) &amp;&amp;
(<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bodyoff</name></expr></argument>, <argument><expr><name>bodybuf</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><name>bodylen</name> += <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bodybuf</name> -= <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bodyoff</name> += <name>res</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>res</name> &gt; 0 &amp;&amp; <name>bodybuf</name> &lt; 32</expr>)</condition><then> <block>{
<while>while <condition>(<expr><call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bodyread</name></expr></argument>, <argument><expr><name>bodylen</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition>
<empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"Extended TRACE request bodies cannot exceed 64k\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"message/http"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_putstrs</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>CRLF_ASCII</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>apr_brigade_putstrs</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>h</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>bb</name></name> = <name>bb</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>void</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>)
<name>form_header_field</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>h</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_puts</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CRLF_ASCII</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bodylen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>bodyread</name></expr></argument>, <argument><expr><name>bodylen</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block>
<typedef>typedef <type><struct>struct <name>header_filter_ctx</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>headers_sent</name></decl>;</decl_stmt>
}</block></struct></type> <name>header_filter_ctx</name>;</typedef>
<macro><name>AP_CORE_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_http_header_filter</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade *b</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>clheader</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>b2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_struct</name></type> <name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>header_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_bucket_error</name> *</type><name>eb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>recursive_error</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr>!<name><name>r</name>-&gt;<name/></name>main</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ctx</name> = <name><name>f</name>-&gt;<name>ctx</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header_filter_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>headers_sent</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name> || <name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_ERROR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>eb</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>eb</name> = <name><name>e</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_EOC</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>headers_sent</name></name> &amp;&amp; !<call><name>check_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>check_headers_recursion</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>ap_bucket_eoc_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_type</name></name> = <name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_languages</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recursive_error</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>eb</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <name><name>eb</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>assbackwards</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>sent_bodyct</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-no-vary"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_num</name></name> = <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-response-1.0"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fixup_vary</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"no-etag"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>basic_http_header_check</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_keepalive</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>chunked</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ctype</name> = <call><name>ap_make_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ctype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_languages</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>languages</name> <init>= <expr><call>(<name>char</name> **)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_languages</name>-&gt;<name>elts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>field</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Language"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>field</name> &amp;&amp; (<name>token</name> = <call><name>ap_get_list_item</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>field</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>r</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name><name>languages</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<if>if <condition>(<expr><name>i</name> == <name><name>r</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((<name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_languages</name></name></expr></argument>)</argument_list></call>) = <name>token</name></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name>field</name> = <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_languages</name></name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Language"</expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>no_cache</name></name> &amp;&amp; !<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>date</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_recent_rfc822_date</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name>
&amp;&amp; (<name>clheader</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call>)
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>clheader</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>b2</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>basic_http_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>, <argument><expr><name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>.<name>bb</name></name> = <name>b2</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>) <name>form_header_field</name></expr></argument>,
<argument><expr>(<name>void</name> *) &amp;<name>h</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Connection"</expr></argument>,
<argument><expr>"Keep-Alive"</expr></argument>,
<argument><expr>"ETag"</expr></argument>,
<argument><expr>"Content-Location"</expr></argument>,
<argument><expr>"Expires"</expr></argument>,
<argument><expr>"Cache-Control"</expr></argument>,
<argument><expr>"Vary"</expr></argument>,
<argument><expr>"Warning"</expr></argument>,
<argument><expr>"WWW-Authenticate"</expr></argument>,
<argument><expr>"Proxy-Authenticate"</expr></argument>,
<argument><expr>"Set-Cookie"</expr></argument>,
<argument><expr>"Set-Cookie2"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>send_all_header_fields</name><argument_list>(<argument><expr>&amp;<name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>terminate_header</name><argument_list>(<argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<goto>goto <name>out</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>headers_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name> || <name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>sent_bodyct</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>chunked</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"CHUNK"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>out</name>:</label>
<if>if <condition>(<expr><name>recursive_error</name></expr>)</condition><then> <block>{
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_map_http_request_error</name><argument_list>(<argument>apr_status_t rv</argument>, <argument>int status</argument>)</argument_list></macro> <block>{
<switch>switch <condition>(<expr><name>rv</name></expr>)</condition> <block>{
<case>case <expr><name>AP_FILTER_ERROR</name></expr>:
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
</case><case>case <expr><name>APR_ENOSPC</name></expr>:
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
</case><case>case <expr><name>APR_ENOTIMPL</name></expr>:
<return>return <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>;</return>
</case><case>case <expr><name>APR_TIMEUP</name></expr>:
</case><case>case <expr><name>APR_ETIMEDOUT</name></expr>:
<return>return <expr><name>HTTP_REQUEST_TIME_OUT</name></expr>;</return>
</case><default>default:
<return>return <expr><name>status</name></expr>;</return>
</default>}</block></switch>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_discard_request_body</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main || <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> == <name>AP_CONN_CLOSE</name> ||
<call><name>ap_status_drops_connection</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_eos</name> = 0</expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>bucket</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>bucket</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>bucket</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>bucket</name>-&gt;<name>length</name></name> == 0</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>!<name>seen_eos</name></expr>)</condition>;</do>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_setup_client_block</name><argument_list>(<argument>request_rec *r</argument>, <argument>int read_policy</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tenc</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lenp</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>read_body</name></name> = <name>read_policy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>read_chunked</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>remaining</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>tenc</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>tenc</name></expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01592</expr></argument>)</argument_list></call>
"Unknown Transfer-Encoding %s"</expr></argument>, <argument><expr><name>tenc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>read_body</name></name> == <name>REQUEST_CHUNKED_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01593</expr></argument>)</argument_list></call>
"chunked Transfer-Encoding forbidden: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>lenp</name>) ? <name>HTTP_BAD_REQUEST</name> : <name>HTTP_LENGTH_REQUIRED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>read_chunked</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>lenp</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endstr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>remaining</name></name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr>&amp;<name>endstr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
|| *<name>endstr</name> || <name><name>r</name>-&gt;<name>remaining</name></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>remaining</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01594</expr></argument>)</argument_list></call>
"Invalid Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>read_body</name></name> == <name>REQUEST_NO_BODY</name>)
&amp;&amp; (<name><name>r</name>-&gt;<name>read_chunked</name></name> || (<name><name>r</name>-&gt;<name>remaining</name></name> &gt; 0))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01595</expr></argument>)</argument_list></call>
"%s with body is not allowed for %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>req_cfg</name> <init>=
<expr>(<name>core_request_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>req_cfg</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_should_client_block</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>read_length</name></name> || (!<name><name>r</name>-&gt;<name>read_chunked</name></name> &amp;&amp; (<name><name>r</name>-&gt;<name>remaining</name></name> &lt;= 0))</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>long</argument>)</argument_list></macro> <macro><name>ap_get_client_block</name><argument_list>(<argument>request_rec *r</argument>, <argument>char *buffer</argument>,
<argument>apr_size_t bufsiz</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &lt; 0 || (!<name><name>r</name>-&gt;<name>read_chunked</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>remaining</name></name> == 0)</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bb</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>AP_FILTER_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>read_chunked</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>remaining</name></name> = -1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>remaining</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>read_length</name></name> += <name>bufsiz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>bufsiz</name></expr>;</return>
}</block>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>seen_eoc</name></decl>;</decl_stmt>
}</block></struct></type> <name>outerror_filter_ctx_t</name>;</typedef>
<function><type><name>apr_status_t</name></type> <name>ap_http_outerror_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>outerror_filter_ctx_t</name> *</type><name>ctx</name> <init>= <expr><call>(<name>outerror_filter_ctx_t</name> *)<argument_list>(<argument><expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>outerror_filter_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_ERROR</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<call>(<name>ap_bucket_error</name> *)<argument_list>(<argument><expr><name><name>e</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call>)-&gt;<name>status</name> == <name>HTTP_BAD_GATEWAY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_EOC</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>seen_eoc</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>seen_eoc</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
