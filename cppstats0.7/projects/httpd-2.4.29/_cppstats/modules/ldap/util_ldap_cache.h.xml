<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/ldap/util_ldap_cache.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APU_LDAP_CACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APU_LDAP_CACHE_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_LDAP</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ldap.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <name>util_cache_node_t</name> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>payload</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>add_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>util_cache_node_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_cache_node_t</name>;</typedef>
<typedef>typedef <type>struct <name>util_ald_cache</name></type> <name>util_ald_cache_t</name>;</typedef>
<struct>struct <name>util_ald_cache</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>maxentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numentries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fullmark</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>marktime</name></decl>;</decl_stmt>
<function_decl><type><name>unsigned</name> <name>long</name></type> (*<name>hash</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>compare</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type> (*<name>copy</name>)<parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (*<name>free</name>)<parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (*<name>display</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>util_cache_node_t</name> **</type><name>nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>numpurges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>avg_purgetime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_purge</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>npurged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>fetches</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>hits</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>inserts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>removes</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_shm_t</name> *</type><name>shm_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_rmm_t</name> *</type><name>rmm_addr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALD_MM_FILE_MODE</name></cpp:macro> <cpp:value>( S_IRUSR|S_IWUSR )</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALD_MM_FILE_MODE</name></cpp:macro> <cpp:value>( _S_IREAD|_S_IWRITE )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>util_url_node_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ald_cache_t</name> *</type><name>search_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ald_cache_t</name> *</type><name>compare_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ald_cache_t</name> *</type><name>dn_compare_cache</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_url_node_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_compare_subgroup_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>subgroupDNs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_compare_subgroup_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_search_node_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bindpw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>lastbind</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vals</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numvals</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_search_node_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_compare_node_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attrib</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>lastcompare</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sgl_processed</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>util_compare_subgroup_t</name> *</type><name>subgroupList</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_compare_node_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>util_dn_compare_node_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reqdn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl>;</decl_stmt>
}</block></struct></type> <name>util_dn_compare_node_t</name>;</typedef>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_url_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>util_ldap_url_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ldap_url_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_url_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_url_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_search_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>util_ldap_search_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ldap_search_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_search_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_search_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_compare_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>util_ldap_compare_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ldap_compare_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_compare_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_compare_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>util_ldap_dn_compare_node_hash</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>util_ldap_dn_compare_node_compare</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ldap_dn_compare_node_copy</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_dn_compare_node_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ldap_dn_compare_node_display</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ald_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ald_alloc</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>util_ald_strdup</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>util_compare_subgroup_t</name> *</type><name>util_ald_sgl_dup</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>util_compare_subgroup_t</name> *</type><name>sgl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ald_sgl_free</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>util_compare_subgroup_t</name> **</type><name>sgl</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>long</name></type> <name>util_ald_hash_string</name><parameter_list>(<param><decl><type><name>int</name></type> <name>nstr</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ald_cache_purge</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>util_url_node_t</name> *</type><name>util_ald_create_caches</name><parameter_list>(<param><decl><type><name>util_ldap_state_t</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>util_ald_cache_t</name> *</type><name>util_ald_create_cache</name><argument_list>(<argument><expr><name>util_ldap_state_t</name> *<name>st</name></expr></argument>,
<argument><expr><name>long</name> <name>cache_size</name></expr></argument>,
<argument><expr><name>unsigned</name> <call><call><name>long</name> <argument_list>(<argument><expr>*<name>hashfunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><call><name>int</name> <argument_list>(<argument><expr>*<name>comparefunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name> *</expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><call><name>void</name> * <argument_list>(<argument><expr>*<name>copyfunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>util_ald_cache_t</name> *<name>cache</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>freefunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>util_ald_cache_t</name> *<name>cache</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><call><name>void</name> <argument_list>(<argument><expr>*<name>displayfunc</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>util_ald_cache_t</name> *<name>cache</name></expr></argument>, <argument><expr><name>void</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>util_ald_destroy_cache</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ald_cache_fetch</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>payload</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>util_ald_cache_insert</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>payload</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>util_ald_cache_remove</name><parameter_list>(<param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>void</name> *</type><name>payload</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>char</name> *</type><name>util_ald_cache_display_stats</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ald_cache_t</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>char</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
