<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/session/mod_session_crypto.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APU_MINOR_VERSION</name> &lt; 4</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> session_crypto_module requires APU v1.4.0 or later</cpp:error>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>APU_HAVE_CRYPTO</name> == 0</expr></cpp:elif>
<cpp:error>#<cpp:directive>error</cpp:directive> Crypto support must be enabled in APR</cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_crypto.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPTO_KEY</name></cpp:macro> <cpp:value>"session_crypto_context"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>session_crypto_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>passphrases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>passphrases_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cipher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cipher_set</name></decl>;</decl_stmt>
}</block></struct></type> <name>session_crypto_dir_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>library</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>library_set</name></decl>;</decl_stmt>
}</block></struct></type> <name>session_crypto_conf</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_MAJOR_VERSION</name> &gt; 1 || (<name>APU_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APU_MINOR_VERSION</name> &gt;= 6)</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_siphash.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIPHASH_DSIZE</name></cpp:macro> <cpp:value>APR_SIPHASH_DSIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIPHASH_KSIZE</name></cpp:macro> <cpp:value>APR_SIPHASH_KSIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_siphash24_auth</name></cpp:macro> <cpp:value>apr_siphash24_auth</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_crypto_equals</name></cpp:macro> <cpp:value>apr_crypto_equals</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIPHASH_DSIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SIPHASH_KSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTL64</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (n)) | ((x) &gt;&gt; (64 - (n))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8TO64_LE</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((apr_uint64_t)((p)[0]) ) | ((apr_uint64_t)((p)[1]) &lt;&lt; 8) | ((apr_uint64_t)((p)[2]) &lt;&lt; 16) | ((apr_uint64_t)((p)[3]) &lt;&lt; 24) | ((apr_uint64_t)((p)[4]) &lt;&lt; 32) | ((apr_uint64_t)((p)[5]) &lt;&lt; 40) | ((apr_uint64_t)((p)[6]) &lt;&lt; 48) | ((apr_uint64_t)((p)[7]) &lt;&lt; 56))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U64TO8_LE</name><parameter_list>(<param><type><name>p</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { (p)[0] = (unsigned char)((v) ); (p)[1] = (unsigned char)((v) &gt;&gt; 8); (p)[2] = (unsigned char)((v) &gt;&gt; 16); (p)[3] = (unsigned char)((v) &gt;&gt; 24); (p)[4] = (unsigned char)((v) &gt;&gt; 32); (p)[5] = (unsigned char)((v) &gt;&gt; 40); (p)[6] = (unsigned char)((v) &gt;&gt; 48); (p)[7] = (unsigned char)((v) &gt;&gt; 56); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIPROUND</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { v0 += v1; v1=ROTL64(v1,13); v1 ^= v0; v0=ROTL64(v0,32); v2 += v3; v3=ROTL64(v3,16); v3 ^= v2; v0 += v3; v3=ROTL64(v3,21); v3 ^= v0; v2 += v1; v1=ROTL64(v1,17); v1 ^= v2; v2=ROTL64(v2,32); } while(0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_uint64_t</name></type> <name>ap_siphash24</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>AP_SIPHASH_KSIZE</name></expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>ptr</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>v3</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>k0</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rem</name></decl>;</decl_stmt>
<expr_stmt><expr><name>k0</name> = <call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>key</name> + 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k1</name> = <call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>key</name> + 8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> = <name>k1</name> ^ (<name>apr_uint64_t</name>)0x7465646279746573ULL</expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> = <name>k0</name> ^ (<name>apr_uint64_t</name>)0x6c7967656e657261ULL</expr>;</expr_stmt>
<expr_stmt><expr><name>v1</name> = <name>k1</name> ^ (<name>apr_uint64_t</name>)0x646f72616e646f6dULL</expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> = <name>k0</name> ^ (<name>apr_uint64_t</name>)0x736f6d6570736575ULL</expr>;</expr_stmt>
<expr_stmt><expr><name>rem</name> = <call>(<name>unsigned</name> <name>int</name>)<argument_list>(<argument><expr><name>len</name> &amp; 0x7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>ptr</name> = <name>src</name></expr>, <expr><name>end</name> = <name>ptr</name> + <name>len</name> - <name>rem</name></expr>;</init> <condition><expr><name>ptr</name> &lt; <name>end</name></expr>;</condition> <incr><expr><name>ptr</name> += 8</expr></incr>) <block>{
<expr_stmt><expr><name>m</name> = <call><name>U8TO64_LE</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v3</name> ^= <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> ^= <name>m</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>m</name> = <call>(<name>apr_uint64_t</name>)<argument_list>(<argument><expr><name>len</name> &amp; 0xff</expr></argument>)</argument_list></call> &lt;&lt; 56</expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>rem</name></expr>)</condition> <block>{
<case>case <expr>7</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>6</expr>]</index></name> &lt;&lt; 48</expr>;</expr_stmt>
</case><case>case <expr>6</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>5</expr>]</index></name> &lt;&lt; 40</expr>;</expr_stmt>
</case><case>case <expr>5</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>4</expr>]</index></name> &lt;&lt; 32</expr>;</expr_stmt>
</case><case>case <expr>4</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>3</expr>]</index></name> &lt;&lt; 24</expr>;</expr_stmt>
</case><case>case <expr>3</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>2</expr>]</index></name> &lt;&lt; 16</expr>;</expr_stmt>
</case><case>case <expr>2</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>1</expr>]</index></name> &lt;&lt; 8</expr>;</expr_stmt>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><name>m</name> |= (<name>apr_uint64_t</name>)<name><name>ptr</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
</case><case>case <expr>0</expr>:
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name>v3</name> ^= <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v0</name> ^= <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name>v2</name> ^= 0xff</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SIPROUND</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>v0</name> ^ <name>v1</name> ^ <name>v2</name> ^ <name>v3</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_siphash24_auth</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>out</name><index>[<expr><name>AP_SIPHASH_DSIZE</name></expr>]</index></name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>AP_SIPHASH_KSIZE</name></expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint64_t</name></type> <name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> = <call><name>ap_siphash24</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>U64TO8_LE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_crypto_equals</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>buf1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>buf2</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>p1</name> <init>= <expr><name>buf1</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>p2</name> <init>= <expr><name>buf2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>diff</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>diff</name> |= <name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name> ^ <name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<return>return <expr>1 &amp; ((<name>diff</name> - 1) &gt;&gt; 8)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_auth</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>passphrase</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>passlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>auth</name><index>[<expr><name>AP_SIPHASH_DSIZE</name></expr>]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>key</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_siphash24_auth</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>crypt_init</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_crypto_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_crypto_block_key_type_e</name> **</type><name>cipher</name></decl></param>,
<param><decl><type><name>session_crypto_dir_conf</name> *</type> <name>dconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ciphers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_get_block_key_types</name><argument_list>(<argument><expr>&amp;<name>ciphers</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01823</expr></argument>)</argument_list></call>
"no ciphers returned by APR. "
"session encryption not possible"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>cipher</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ciphers</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>cipher</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(*<name>cipher</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sum</name> += <name>klen</name> + 2</expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ciphers</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>hi</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>klen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>options</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>options</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sum</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>options</name><index>[<expr><name>offset</name>++</expr>]</index></name> = ','</expr>;</expr_stmt>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>offset</name>++</expr>]</index></name> = ' '</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>options</name> + <name>offset</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name>klen</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>options</name><index>[<expr><name>offset</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01824</expr></argument>)</argument_list></call>
"cipher '%s' not recognised by crypto driver. "
"session encryption not possible, options: %s"</expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>cipher</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>encrypt_string</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_crypto_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>session_crypto_dir_conf</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>char</name> **</type><name>out</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_key_t</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>ivSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_block_t</name> *</type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>encrypt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>combined</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>encryptlen</name></decl>, <decl><type ref="prev"/><name>tlen</name></decl>, <decl><type ref="prev"/><name>combinedlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>base64</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>blockSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>iv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uuid_t</name></type> <name>salt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_block_key_type_e</name> *</type><name>cipher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>passphrase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>passlen</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_uuid_get</name><argument_list>(<argument><expr>&amp;<name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>crypt_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr>&amp;<name>cipher</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>passphrase</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>passphrases</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>passlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_passphrase</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>ivSize</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>,
<argument><expr><call>(<name>unsigned</name> <name>char</name> *) <argument_list>(<argument><expr>&amp;<name>salt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>*<name>cipher</name></expr></argument>, <argument><expr><name>APR_MODE_CBC</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4096</expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOKEY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01825</expr></argument>)</argument_list></call>
"the passphrase '%s' was empty"</expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EPADDING</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01826</expr></argument>)</argument_list></call>
"padding is not supported for cipher"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EKEYTYPE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01827</expr></argument>)</argument_list></call>
"the key type is not known"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01828</expr></argument>)</argument_list></call>
"encryption could not be configured."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_block_encrypt_init</name><argument_list>(<argument><expr>&amp;<name>block</name></expr></argument>, <argument><expr>&amp;<name>iv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>blockSize</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01829</expr></argument>)</argument_list></call>
"apr_crypto_block_encrypt_init failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_block_encrypt</name><argument_list>(<argument><expr>&amp;<name>encrypt</name></expr></argument>, <argument><expr>&amp;<name>encryptlen</name></expr></argument>,
<argument><expr>(const <name>unsigned</name> <name>char</name> *)<name>in</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01830</expr></argument>)</argument_list></call>
"apr_crypto_block_encrypt failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_block_encrypt_finish</name><argument_list>(<argument><expr><name>encrypt</name> + <name>encryptlen</name></expr></argument>, <argument><expr>&amp;<name>tlen</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01831</expr></argument>)</argument_list></call>
"apr_crypto_block_encrypt_finish failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>encryptlen</name> += <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>combinedlen</name> = <name>AP_SIPHASH_DSIZE</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof> + <name>ivSize</name> + <name>encryptlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>combined</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>combinedlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>combined</name> + <name>AP_SIPHASH_DSIZE</name></expr></argument>, <argument><expr>&amp;<name>salt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>combined</name> + <name>AP_SIPHASH_DSIZE</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>ivSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>combined</name> + <name>AP_SIPHASH_DSIZE</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof> + <name>ivSize</name></expr></argument>,
<argument><expr><name>encrypt</name></expr></argument>, <argument><expr><name>encryptlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>compute_auth</name><argument_list>(<argument><expr><name>combined</name> + <name>AP_SIPHASH_DSIZE</name></expr></argument>, <argument><expr><name>combinedlen</name> - <name>AP_SIPHASH_DSIZE</name></expr></argument>,
<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>, <argument><expr><name>combined</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base64</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><name>combinedlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>base64</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>combined</name></expr></argument>, <argument><expr><name>combinedlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>out</name> = <name>base64</name></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>decrypt_string</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_crypto_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>session_crypto_dir_conf</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>char</name> **</type><name>out</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_key_t</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>ivSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_block_t</name> *</type><name>block</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>decrypted</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>decryptedlen</name></decl>, <decl><type ref="prev"/><name>tlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>decodedlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>decoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>blockSize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_block_key_type_e</name> *</type><name>cipher</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>auth</name><index>[<expr><name>AP_SIPHASH_DSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>decoded</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_base64_decode_len</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>decodedlen</name> = <call><name>apr_base64_decode</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decoded</name><index>[<expr><name>decodedlen</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>decodedlen</name> &lt; (<name>AP_SIPHASH_DSIZE</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10005</expr></argument>)</argument_list></call>
"too short to decrypt, aborting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ECRYPT</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>crypt_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr>&amp;<name>cipher</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name><name>dconf</name>-&gt;<name>passphrases</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>passphrase</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>passphrases</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>char</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>passlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>decodedlen</name> - <name>AP_SIPHASH_DSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>slider</name> <init>= <expr>(<name>unsigned</name> <name>char</name> *)<name>decoded</name> + <name>AP_SIPHASH_DSIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>compute_auth</name><argument_list>(<argument><expr><name>slider</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>, <argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_crypto_equals</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>decoded</name></expr></argument>, <argument><expr><name>AP_SIPHASH_DSIZE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10006</expr></argument>)</argument_list></call>
"auth does not match, skipping"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_passphrase</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr>&amp;<name>ivSize</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>passlen</name></expr></argument>,
<argument><expr><name>slider</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>*<name>cipher</name></expr></argument>, <argument><expr><name>APR_MODE_CBC</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>4096</expr></argument>,
<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOKEY</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01832</expr></argument>)</argument_list></call>
"the passphrase '%s' was empty"</expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EPADDING</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01833</expr></argument>)</argument_list></call>
"padding is not supported for cipher"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EKEYTYPE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01834</expr></argument>)</argument_list></call>
"the key type is not known"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01835</expr></argument>)</argument_list></call>
"encryption could not be configured."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>len</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof> + <name>ivSize</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01836</expr></argument>)</argument_list></call>
"too short to decrypt, skipping"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <name>APR_ECRYPT</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>slider</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= <sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_block_decrypt_init</name><argument_list>(<argument><expr>&amp;<name>block</name></expr></argument>, <argument><expr>&amp;<name>blockSize</name></expr></argument>, <argument><expr><name>slider</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01837</expr></argument>)</argument_list></call>
"apr_crypto_block_decrypt_init failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>slider</name> += <name>ivSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> -= <name>ivSize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_block_decrypt</name><argument_list>(<argument><expr>&amp;<name>decrypted</name></expr></argument>, <argument><expr>&amp;<name>decryptedlen</name></expr></argument>,
<argument><expr><name>slider</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01838</expr></argument>)</argument_list></call>
"apr_crypto_block_decrypt failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr>*<name>out</name> = (<name>char</name> *) <name>decrypted</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_crypto_block_decrypt_finish</name><argument_list>(<argument><expr><name>decrypted</name> + <name>decryptedlen</name></expr></argument>, <argument><expr>&amp;<name>tlen</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01839</expr></argument>)</argument_list></call>
"apr_crypto_block_decrypt_finish failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>decryptedlen</name> += <name>tlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>decrypted</name><index>[<expr><name>decryptedlen</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></for>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01840</expr></argument>)</argument_list></call>
"decryption failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_crypto_encode</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>session_rec</name> *</type> <name>z</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>encoded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_crypto_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>session_crypto_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>passphrases_set</name></name> &amp;&amp; <name><name>z</name>-&gt;<name>encoded</name></name> &amp;&amp; *<name><name>z</name>-&gt;<name>encoded</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name> **)&amp;<name>f</name></expr></argument>, <argument><expr><name>CRYPTO_KEY</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pconf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>encrypt_string</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr>&amp;<name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01841</expr></argument>)</argument_list></call>
"encrypt session failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>z</name>-&gt;<name>encoded</name></name> = <name>encoded</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_crypto_decode</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
<param><decl><type><name>session_rec</name> *</type> <name>z</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>encoded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_crypto_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>session_crypto_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>dconf</name>-&gt;<name>passphrases_set</name></name>) &amp;&amp; <name><name>z</name>-&gt;<name>encoded</name></name> &amp;&amp; *<name><name>z</name>-&gt;<name>encoded</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name> **)&amp;<name>f</name></expr></argument>, <argument><expr><name>CRYPTO_KEY</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pconf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>decrypt_string</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr>&amp;<name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01842</expr></argument>)</argument_list></call>
"decrypt session failed, wrong passphrase?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>z</name>-&gt;<name>encoded</name></name> = <name>encoded</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>session_crypto_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_crypto_driver_t</name> *</type><name>driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_crypto_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_crypto_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>session_crypto_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>library</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apu_err_t</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_crypto_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01843</expr></argument>)</argument_list></call>
"APR crypto could not be initialised"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_crypto_get_driver</name><argument_list>(<argument><expr>&amp;<name>driver</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>params</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_EREINIT</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01844</expr></argument>)</argument_list></call>
"warning: crypto for '%s' was already initialised, "
"using existing configuration"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rv</name> &amp;&amp; <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01845</expr></argument>)</argument_list></call>
"The crypto library '%s' could not be loaded: %s (%s: %d)"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>msg</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>APR_ENOTIMPL</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01846</expr></argument>)</argument_list></call>
"The crypto library '%s' could not be found"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rv</name> || !<name>driver</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01847</expr></argument>)</argument_list></call>
"The crypto library '%s' could not be loaded"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_crypto_make</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>params</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01848</expr></argument>)</argument_list></call>
"The crypto library '%s' could not be initialised"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01849</expr></argument>)</argument_list></call>
"The crypto library '%s' was loaded successfully"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *)<name>f</name></expr></argument>, <argument><expr><name>CRYPTO_KEY</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pconf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_session_crypto_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_crypto_conf</name> *</type><name>new</name> <init>=
<expr>(<name>session_crypto_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_crypto_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APU_CRYPTO_RECOMMENDED_DRIVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>library</name></name> = <name>APU_CRYPTO_RECOMMENDED_DRIVER</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_session_crypto_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>new</name> <init>=
<expr>(<name>session_crypto_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_crypto_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>passphrases</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cipher</name></name> = "aes256"</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_session_crypto_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>session_crypto_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_crypto_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>session_crypto_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>session_crypto_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>passphrases</name></name> = (<name><name>add</name>-&gt;<name>passphrases_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>passphrases</name></name> : <name><name>add</name>-&gt;<name>passphrases</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>passphrases_set</name></name> = <name><name>add</name>-&gt;<name>passphrases_set</name></name> || <name><name>base</name>-&gt;<name>passphrases_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cipher</name></name> = (<name><name>add</name>-&gt;<name>cipher_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>cipher</name></name> : <name><name>add</name>-&gt;<name>cipher</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cipher_set</name></name> = <name><name>add</name>-&gt;<name>cipher_set</name></name> || <name><name>base</name>-&gt;<name>cipher_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_crypto_driver</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_crypto_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>session_crypto_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>session_crypto_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>library</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>params</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>library_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_crypto_passphrase</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>arglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>passphrase</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>session_crypto_dir_conf</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>passphrase</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>passphrases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>arglen</name> &gt; 5) &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"exec:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr><name>arg</name>+5</expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unable to parse exec arguments from "</expr></argument>,
<argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid SessionCryptoPassphrase exec location:"</expr></argument>,
<argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ap_get_exec_line</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(const <name>char</name>*)<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(const <name>char</name> * const *)<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unable to get bind password from exec of "</expr></argument>,
<argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>passphrase</name> = <name>result</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>passphrase</name> = <name>arg</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>passphrases_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_crypto_passphrase_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>filename</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s: Could not open file %s: %pm"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>!(<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><name>args</name> = <name>buffer</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*(<name>arg</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call>) != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>arg</name> == '#'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>set_crypto_passphrase</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></while>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_crypto_cipher</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cipher</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_crypto_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>session_crypto_dir_conf</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>cipher</name></name> = <name>cipher</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>cipher_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>session_crypto_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"SessionCryptoPassphrase"</expr></argument>, <argument><expr><name>set_crypto_passphrase</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The passphrase(s) used to encrypt the session. First will be used for encryption, all phrases will be accepted for decryption"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SessionCryptoPassphraseFile"</expr></argument>, <argument><expr><name>set_crypto_passphrase_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"File containing passphrase(s) used to encrypt the session, one per line. First will be used for encryption, all phrases will be accepted for decryption"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SessionCryptoCipher"</expr></argument>, <argument><expr><name>set_crypto_cipher</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The underlying crypto cipher to use"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SessionCryptoDriver"</expr></argument>, <argument><expr><name>set_crypto_driver</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The underlying crypto library driver to use"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_session_encode</name><argument_list>(<argument><expr><name>session_crypto_encode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_session_decode</name><argument_list>(<argument><expr><name>session_crypto_decode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>session_crypto_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>session_crypto</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_session_crypto_dir_config</name></expr>,
<expr><name>merge_session_crypto_dir_config</name></expr>,
<expr><name>create_session_crypto_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>session_crypto_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
