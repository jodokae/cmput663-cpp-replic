<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/ssl/ssl_engine_config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_MOD_CONFIG_KEY</name></cpp:macro> <cpp:value>"ssl_module"</cpp:value></cpp:define>
<function><type><name>SSLModConfigRec</name> *</type><name>ssl_config_global_create</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>vmc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>vmc</name></expr></argument>, <argument><expr><name>SSL_MOD_CONFIG_KEY</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>vmc</name></expr>)</condition><then> <block>{
<return>return <expr><name>vmc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mc</name> = (<name>SSLModConfigRec</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>mc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>pPool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>bFixed</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>sesscache_mode</name></name> = <name>SSL_SESS_CACHE_OFF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>sesscache</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>pMutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>aRandSeed</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>4</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_randseed_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>tVHostKeys</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>tPrivateKey</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>stapling_cache</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>stapling_cache_mutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>stapling_refresh_mutex</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><name>SSL_MOD_CONFIG_KEY</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mc</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_config_global_fix</name><parameter_list>(<param><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>mc</name>-&gt;<name>bFixed</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>BOOL</name></type> <name>ssl_config_global_isfixed</name><parameter_list>(<param><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>mc</name>-&gt;<name>bFixed</name></name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>modssl_ctx_config_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SSL_CONF_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_init</name><parameter_list>(<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>sc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pks</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ticket_key</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>protocol</name></name> = <name>SSL_PROTOCOL_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>protocol_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pphrase_dialog_type</name></name> = <name>SSL_PPTYPE_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pphrase_dialog_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>cert_chain</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>crl_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>crl_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>crl_check_mask</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>cipher_suite</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_depth</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> = <name>SSL_CVERIFY_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_enabled</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_force_default</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_responder</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_resptime_skew</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_resp_maxage</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_responder_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_use_request_nonce</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>proxy_uri</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_noverify</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_verify_flags</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_certs_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_certs</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_enabled</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_resptime_skew</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_resp_maxage</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_cache_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_return_errors</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_fake_trylater</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_errcache_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_responder_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>stapling_force_url</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>srp_vfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>srp_unknown_user_seed</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>srp_vbase</name></name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ssl_ctx_config</name></name> = <call><name>SSL_CONF_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx_config</name></name></expr></argument>,
<argument><expr><name>modssl_ctx_config_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CONF_CTX_set_flags</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx_config</name></name></expr></argument>, <argument><expr><name>SSL_CONF_FLAG_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CONF_CTX_set_flags</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx_config</name></name></expr></argument>, <argument><expr><name>SSL_CONF_FLAG_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CONF_CTX_set_flags</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx_config</name></name></expr></argument>, <argument><expr><name>SSL_CONF_FLAG_CERTIFICATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ssl_ctx_param</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_ctx_param_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_init_proxy</name><parameter_list>(<param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mctx</name> = <name><name>sc</name>-&gt;<name>proxy</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>sc</name>-&gt;<name>proxy</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_init</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>mctx</name>-&gt;<name>pkp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>cert_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>cert_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>ca_cert_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>certs</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>ca_certs</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_init_server</name><parameter_list>(<param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mctx</name> = <name><name>sc</name>-&gt;<name>server</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>sc</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_init</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pks</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>mctx</name>-&gt;<name>pks</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>key_files</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ticket_key</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>mctx</name>-&gt;<name>ticket_key</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>SSLSrvConfigRec</name> *</type><name>ssl_config_server_new</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>mc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>enabled</name></name> = <name>SSL_ENABLED_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_enabled</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>vhost_id_len</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>session_cache_timeout</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>cipher_server_pref</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>insecure_reneg</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_expire</name></name> = <name>SSL_ENABLED_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_cn</name></name> = <name>SSL_ENABLED_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_name</name></name> = <name>SSL_ENABLED_UNSET</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>strict_sni_vhost_check</name></name> = <name>SSL_ENABLED_UNSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>fips</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_COMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>compression</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>session_tickets</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_init_proxy</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_init_server</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sc</name></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>ssl_config_server_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>ssl_config_server_new</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>mc</name></name> = <call><name>ssl_config_global_create</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sc</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfgMerge</name><parameter_list>(<param><type><name>el</name></type></param>,<param><type><name>unset</name></type></param>)</parameter_list></cpp:macro> <cpp:value>mrg-&gt;el = (add-&gt;el == (unset)) ? base-&gt;el : add-&gt;el</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfgMergeArray</name><parameter_list>(<param><type><name>el</name></type></param>)</parameter_list></cpp:macro> <cpp:value>mrg-&gt;el = apr_array_append(p, base-&gt;el, add-&gt;el)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfgMergeString</name><parameter_list>(<param><type><name>el</name></type></param>)</parameter_list></cpp:macro> <cpp:value>cfgMerge(el, NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfgMergeBool</name><parameter_list>(<param><type><name>el</name></type></param>)</parameter_list></cpp:macro> <cpp:value>cfgMerge(el, UNSET)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cfgMergeInt</name><parameter_list>(<param><type><name>el</name></type></param>)</parameter_list></cpp:macro> <cpp:value>cfgMerge(el, UNSET)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_cfg_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>base</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>add</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mrg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>protocol_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>protocol</name></name> = <name><name>add</name>-&gt;<name>protocol</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>protocol</name></name> = <name><name>base</name>-&gt;<name>protocol</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>pphrase_dialog_type</name></expr></argument>, <argument><expr><name>SSL_PPTYPE_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>pphrase_dialog_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>cert_chain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>crl_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>crl_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>crl_check_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>auth</name>.<name>ca_cert_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>auth</name>.<name>ca_cert_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>auth</name>.<name>cipher_suite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name><name>auth</name>.<name>verify_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name><name>auth</name>.<name>verify_mode</name></name></expr></argument>, <argument><expr><name>SSL_CVERIFY_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>ocsp_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>ocsp_force_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>ocsp_responder</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>ocsp_resptime_skew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>ocsp_resp_maxage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>ocsp_responder_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>ocsp_use_request_nonce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>proxy_uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>ocsp_noverify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>ocsp_certs_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>stapling_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>stapling_resptime_skew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>stapling_resp_maxage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>stapling_cache_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>stapling_return_errors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>stapling_fake_trylater</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>stapling_errcache_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>stapling_responder_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>stapling_force_url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>srp_vfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>srp_unknown_user_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMergeArray</name><argument_list>(<argument><expr><name>ssl_ctx_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_cfg_merge_proxy</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>base</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>add</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mrg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>modssl_ctx_cfg_merge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>mrg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>pkp</name>-&gt;<name>cert_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>pkp</name>-&gt;<name>cert_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>pkp</name>-&gt;<name>ca_cert_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_cfg_merge_certkeys_array</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>base</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>add</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>mrg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>add</name>-&gt;<name>nelts</name></name> &amp;&amp; <name>i</name> &lt;= <name>CERTKEYS_IDX_MAX</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>mrg</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<while>while <condition>(<expr><name>i</name> &lt; <name><name>base</name>-&gt;<name>nelts</name></name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>mrg</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<for>for (<init><expr><name>i</name> = <name>CERTKEYS_IDX_MAX</name>+1</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>add</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>mrg</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>add</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>modssl_ctx_cfg_merge_server</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>base</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>add</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mrg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>modssl_ctx_cfg_merge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><name>mrg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_cfg_merge_certkeys_array</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>,
<argument><expr><name><name>add</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>,
<argument><expr><name><name>mrg</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_cfg_merge_certkeys_array</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>pks</name>-&gt;<name>key_files</name></name></expr></argument>,
<argument><expr><name><name>add</name>-&gt;<name>pks</name>-&gt;<name>key_files</name></name></expr></argument>,
<argument><expr><name><name>mrg</name>-&gt;<name>pks</name>-&gt;<name>key_files</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>pks</name>-&gt;<name>ca_name_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>pks</name>-&gt;<name>ca_name_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name><name>ticket_key</name>-&gt;<name>file_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name> *</type><name>ssl_config_server_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>base</name> <init>= <expr>(<name>SSLSrvConfigRec</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>add</name> <init>= <expr>(<name>SSLSrvConfigRec</name> *)<name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>mrg</name> <init>= <expr><call><name>ssl_config_server_new</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>enabled</name></expr></argument>, <argument><expr><name>SSL_ENABLED_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>proxy_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>session_cache_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>cipher_server_pref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>insecure_reneg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>proxy_ssl_check_peer_expire</name></expr></argument>, <argument><expr><name>SSL_ENABLED_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>proxy_ssl_check_peer_cn</name></expr></argument>, <argument><expr><name>SSL_ENABLED_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>proxy_ssl_check_peer_name</name></expr></argument>, <argument><expr><name>SSL_ENABLED_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>strict_sni_vhost_check</name></expr></argument>, <argument><expr><name>SSL_ENABLED_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>fips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_COMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>compression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>cfgMergeBool</name><argument_list>(<argument><expr><name>session_tickets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_cfg_merge_proxy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>proxy</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>proxy</name></name></expr></argument>, <argument><expr><name><name>mrg</name>-&gt;<name>proxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_ctx_cfg_merge_server</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>mrg</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mrg</name></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>ssl_config_perdir_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>bSSLRequired</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>aRequirement</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_require_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptions</name></name> = <name>SSL_OPT_NONE</name>|<name>SSL_OPT_RELSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsAdd</name></name> = <name>SSL_OPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsDel</name></name> = <name>SSL_OPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>szCipherSuite</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nVerifyClient</name></name> = <name>SSL_CVERIFY_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nVerifyDepth</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>szCACertificatePath</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>szCACertificateFile</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>szUserName</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nRenegBufferSize</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<return>return <expr><name>dc</name></expr>;</return>
}</block></function>
<function><type><name>void</name> *</type><name>ssl_config_perdir_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>base</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>add</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>mrg</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>mrg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>bSSLRequired</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeArray</name><argument_list>(<argument><expr><name>aRequirement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>nOptions</name></name> &amp; <name>SSL_OPT_RELSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>nOptionsAdd</name></name> =
(<name><name>base</name>-&gt;<name>nOptionsAdd</name></name> &amp; ~(<name><name>add</name>-&gt;<name>nOptionsDel</name></name>)) | <name><name>add</name>-&gt;<name>nOptionsAdd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>nOptionsDel</name></name> =
(<name><name>base</name>-&gt;<name>nOptionsDel</name></name> &amp; ~(<name><name>add</name>-&gt;<name>nOptionsAdd</name></name>)) | <name><name>add</name>-&gt;<name>nOptionsDel</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>nOptions</name></name> =
(<name><name>base</name>-&gt;<name>nOptions</name></name> &amp; ~(<name><name>mrg</name>-&gt;<name>nOptionsDel</name></name>)) | <name><name>mrg</name>-&gt;<name>nOptionsAdd</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>nOptions</name></name> = <name><name>add</name>-&gt;<name>nOptions</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>nOptionsAdd</name></name> = <name><name>add</name>-&gt;<name>nOptionsAdd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mrg</name>-&gt;<name>nOptionsDel</name></name> = <name><name>add</name>-&gt;<name>nOptionsDel</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>szCipherSuite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMerge</name><argument_list>(<argument><expr><name>nVerifyClient</name></expr></argument>, <argument><expr><name>SSL_CVERIFY_UNSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>nVerifyDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>szCACertificatePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>szCACertificateFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeString</name><argument_list>(<argument><expr><name>szUserName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cfgMergeInt</name><argument_list>(<argument><expr><name>nRenegBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mrg</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLPassPhraseDialog</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arglen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"builtin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> = <name>SSL_PPTYPE_BUILTIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>arglen</name> &gt; 5) &amp;&amp; <call><name>strEQn</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"exec:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> = <name>SSL_PPTYPE_FILTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name> =
<call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name>+5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid SSLPassPhraseDialog exec: path "</expr></argument>,
<argument><expr><name>arg</name>+5</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ssl_util_path_check</name><argument_list>(<argument><expr><name>SSL_PCM_EXISTS</name></expr></argument>,
<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"SSLPassPhraseDialog: file '"</expr></argument>,
<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr></argument>,
<argument><expr>"' does not exist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name>arglen</name> &gt; 1) &amp;&amp; (<name><name>arg</name><index>[<expr>0</expr>]</index></name> == '|')</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> = <name>SSL_PPTYPE_PIPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name> = <name>arg</name> + 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"SSLPassPhraseDialog: Invalid argument"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCryptoDevice</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ENGINE</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"builtin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>e</name> = <call><name>ENGINE_by_id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENGINE_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = "SSLCryptoDevice: Invalid argument; must be one of: "
"'builtin' (none)"</expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>ENGINE_get_first</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name></expr>)</condition> <block>{
<expr_stmt><expr><name>err</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>", '"</expr></argument>, <argument><expr><call><name>ENGINE_get_id</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"' ("</expr></argument>, <argument><expr><call><name>ENGINE_get_name</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>ENGINE_get_next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>err</name></expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRandomSeed</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_randseed_t</name> *</type><name>seed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>arg2len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ssl_config_global_isfixed</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>seed</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>aRandSeed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"startup"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nCtx</name></name> = <name>SSL_RSCTX_STARTUP</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"connect"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nCtx</name></name> = <name>SSL_RSCTX_CONNECT</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"SSLRandomSeed: "
"invalid context: `"</expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr>(<name>arg2len</name> &gt; 5) &amp;&amp; <call><name>strEQn</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr>"file:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nSrc</name></name> = <name>SSL_RSSRC_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>cpPath</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>pPool</name></name></expr></argument>, <argument><expr><name>arg2</name>+5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>arg2len</name> &gt; 5) &amp;&amp; <call><name>strEQn</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr>"exec:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nSrc</name></name> = <name>SSL_RSSRC_EXEC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>cpPath</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>pPool</name></name></expr></argument>, <argument><expr><name>arg2</name>+5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>arg2len</name> &gt; 4) &amp;&amp; <call><name>strEQn</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr>"egd:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RAND_EGD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nSrc</name></name> = <name>SSL_RSSRC_EGD</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>cpPath</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>pPool</name></name></expr></argument>, <argument><expr><name>arg2</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid SSLRandomSeed entropy source `"</expr></argument>,
<argument><expr><name>arg2</name></expr></argument>, <argument><expr>"': This version of " <name>MODSSL_LIBRARY_NAME</name>
" does not support the Entropy Gathering Daemon "
"(EGD)."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg2</name></expr></argument>, <argument><expr>"builtin"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nSrc</name></name> = <name>SSL_RSSRC_BUILTIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>cpPath</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nSrc</name></name> = <name>SSL_RSSRC_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>cpPath</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>pPool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>seed</name>-&gt;<name>nSrc</name></name> != <name>SSL_RSSRC_BUILTIN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>seed</name>-&gt;<name>cpPath</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid SSLRandomSeed path "</expr></argument>,
<argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ssl_util_path_check</name><argument_list>(<argument><expr><name>SSL_PCM_EXISTS</name></expr></argument>, <argument><expr><name><name>seed</name>-&gt;<name>cpPath</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"SSLRandomSeed: source path '"</expr></argument>,
<argument><expr><name><name>seed</name>-&gt;<name>cpPath</name></name></expr></argument>, <argument><expr>"' does not exist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>arg3</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nBytes</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>seed</name>-&gt;<name>nSrc</name></name> == <name>SSL_RSSRC_BUILTIN</name></expr>)</condition><then> <block>{
<return>return <expr>"SSLRandomSeed: byte specification not "
"allowed for builtin seed source"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>seed</name>-&gt;<name>nBytes</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>seed</name>-&gt;<name>nBytes</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLRandomSeed: invalid number of bytes specified"</expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLEngine</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>enabled</name></name> = <name>SSL_ENABLED_TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>enabled</name></name> = <name>SSL_ENABLED_FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Optional"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>enabled</name></name> = <name>SSL_ENABLED_OPTIONAL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if></else></if>
<return>return <expr>"Argument must be On, Off, or Optional"</expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLFIPS</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>fips</name></name> != <name>UNSET</name>) &amp;&amp; (<name><name>sc</name>-&gt;<name>fips</name></name> != <call>(<name>BOOL</name>)<argument_list>(<argument><expr><name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr>"Conflicting SSLFIPS options, cannot be both On and Off"</expr>;</return></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>fips</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>flag</name></expr>)</condition><then>
<return>return <expr>"SSLFIPS invalid, rebuild httpd and openssl compiled for FIPS"</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCipherSuite</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>":!aNULL:!eNULL:!EXP"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>szCipherSuite</name></name> = <name>arg</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>cipher_suite</name></name> = <name>arg</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_FLAGS_CHECK_FILE</name></cpp:macro> <cpp:value>(SSL_PCM_EXISTS|SSL_PCM_ISREG|SSL_PCM_ISNONZERO)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_FLAGS_CHECK_DIR</name></cpp:macro> <cpp:value>(SSL_PCM_EXISTS|SSL_PCM_ISDIR)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_check_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>file</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filepath</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>filepath</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Invalid file path "</expr></argument>, <argument><expr>*<name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>file</name> = <name>filepath</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ssl_util_path_check</name><argument_list>(<argument><expr><name>SSL_FLAGS_CHECK_FILE</name></expr></argument>, <argument><expr>*<name>file</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": file '"</expr></argument>, <argument><expr>*<name>file</name></expr></argument>,
<argument><expr>"' does not exist or is empty"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCompression</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_COMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr>"This version of openssl does not support configuring "
"compression within &lt;VirtualHost&gt; sections."</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>compression</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>"Setting Compression mode unsupported; not implemented by the SSL library"</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLHonorCipherOrder</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_CIPHER_SERVER_PREFERENCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>cipher_server_pref</name></name> = <name>flag</name>?<name>TRUE</name>:<name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>"SSLHonorCipherOrder unsupported; not implemented by the SSL library"</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionTickets</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr>"This version of OpenSSL does not support using "
"SSLSessionTickets."</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>session_tickets</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLInsecureRenegotiation</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>insecure_reneg</name></name> = <name>flag</name>?<name>TRUE</name>:<name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>"The SSLInsecureRenegotiation directive is not available "
"with this SSL library"</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_check_dir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirpath</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>dir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>dirpath</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Invalid dir path "</expr></argument>, <argument><expr>*<name>dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>dir</name> = <name>dirpath</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ssl_util_path_check</name><argument_list>(<argument><expr><name>SSL_FLAGS_CHECK_DIR</name></expr></argument>, <argument><expr>*<name>dir</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": directory '"</expr></argument>, <argument><expr>*<name>dir</name></expr></argument>,
<argument><expr>"' does not exist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>)</argument_list></call> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCertificateKeyFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pks</name>-&gt;<name>key_files</name></name></expr></argument>)</argument_list></call> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCertificateChainFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>cert_chain</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionTicketKeyFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ticket_key</name>-&gt;<name>file_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_PER_DIR_SSL_CA</name></cpp:macro> <cpp:value>"Your SSL library does not have support for per-directory CA"</cpp:value></cpp:define>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCACertificatePath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>NO_PER_DIR_SSL_CA</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>ca_cert_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCACertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>NO_PER_DIR_SSL_CA</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>ca_cert_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCADNRequestPath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pks</name>-&gt;<name>ca_name_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCADNRequestFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pks</name>-&gt;<name>ca_name_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCARevocationPath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>crl_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCARevocationFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>crl_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_crlcheck_parse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>mask</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mask</name> = <name>SSL_CRLCHECK_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"leaf"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mask</name> = <name>SSL_CRLCHECK_LEAF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"chain"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mask</name> = <name>SSL_CRLCHECK_CHAIN</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Invalid argument '"</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"no_crl_for_cert_ok"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mask</name> |= <name>SSL_CRLCHECK_NO_CRL_FOR_CERT_OK</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Invalid argument '"</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLCARevocationCheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ssl_cmd_crlcheck_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>crl_check_mask</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_verify_parse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>ssl_verify_t</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> || <call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>id</name> = <name>SSL_CVERIFY_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"optional"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>id</name> = <name>SSL_CVERIFY_OPTIONAL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"require"</expr></argument>)</argument_list></call> || <call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>id</name> = <name>SSL_CVERIFY_REQUIRE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"optional_no_ca"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>id</name> = <name>SSL_CVERIFY_OPTIONAL_NO_CA</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Invalid argument '"</expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLVerifyClient</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_verify_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_verify_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nVerifyClient</name></name> = <name>mode</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> = <name>mode</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_verify_depth_parse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>depth</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(*<name>depth</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Invalid argument '"</expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLVerifyDepth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_verify_depth_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nVerifyDepth</name></name> = <name>depth</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>verify_depth</name></name> = <name>depth</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionCache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>sep</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>enabled_flags</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>enabled_flags</name> = <name>SSL_SESS_CACHE_SERVER</name> | <name>SSL_SESS_CACHE_NO_INTERNAL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"nonenotnull"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mc</name>-&gt;<name>sesscache_mode</name></name> = <name>enabled_flags</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sep</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sep</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>sep</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>name</name> = <name>arg</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>sesscache</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mc</name>-&gt;<name>sesscache_mode</name></name> = <name>enabled_flags</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>create</name></name><argument_list>(<argument><expr>&amp;<name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr><name>sep</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>name_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>all_names</name></decl>;</decl_stmt>
<expr_stmt><expr><name>name_list</name> = <call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>all_names</name> = <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name_list</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"'%s' session cache not supported "
"(known names: %s). Maybe you need to load the "
"appropriate socache module (mod_socache_%s?)."</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>all_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"SSLSessionCache: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSessionCacheTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>session_cache_timeout</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>session_cache_timeout</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLSessionCacheTimeout: Invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOptions</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_opt_t</name></type> <name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>action</name> = <name>NUL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(*<name>w</name> == '+') || (*<name>w</name> == '-')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = *(<name>w</name>++)</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptions</name></name> = <name>SSL_OPT_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"StdEnvVars"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>SSL_OPT_STDENVVARS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"ExportCertData"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>SSL_OPT_EXPORTCERTDATA</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"FakeBasicAuth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>SSL_OPT_FAKEBASICAUTH</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"StrictRequire"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>SSL_OPT_STRICTREQUIRE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"OptRenegotiate"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>SSL_OPT_OPTRENEGOTIATE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"LegacyDNStringFormat"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opt</name> = <name>SSL_OPT_LEGACYDNFORMAT</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"SSLOptions: Illegal option '"</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>"'"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsAdd</name></name> &amp;= ~<name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsDel</name></name> |= <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptions</name></name> &amp;= ~<name>opt</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>action</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsAdd</name></name> |= <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsDel</name></name> &amp;= ~<name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptions</name></name> |= <name>opt</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptions</name></name> = <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsAdd</name></name> = <name>opt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nOptionsDel</name></name> = <name>SSL_OPT_NONE</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRequireSSL</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>bSSLRequired</name></name> = <name>TRUE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRequire</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>info</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_expr_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_require_t</name> *</type><name>require</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstring</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>flags</name></name> = <name>AP_EXPR_FLAG_SSL_EXPR_COMPAT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>filename</name></name> = <name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>line_number</name></name> = <name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>module_index</name></name> = <name>APLOG_MODULE_INDEX</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errstring</name> = <call><name>ap_expr_parse</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errstring</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"SSLRequire: "</expr></argument>, <argument><expr><name>errstring</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>require</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dc</name>-&gt;<name>aRequirement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>require</name>-&gt;<name>cpExpr</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>require</name>-&gt;<name>mpExpr</name></name> = <name>info</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLRenegBufferSize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr><name>dcfg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid size for SSLRenegBufferSize: "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>nRenegBufferSize</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_protocol_parse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>ssl_proto_t</name> *</type><name>options</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_proto_t</name></type> <name>thisopt</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>options</name> = <name>SSL_PROTOCOL_NONE</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>w</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>action</name> <init>= <expr>'\0'</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(*<name>w</name> == '+') || (*<name>w</name> == '-')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = *(<name>w</name>++)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SSLv2"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <block>{
<return>return <expr>"SSLProtocol: SSLv2 is no longer supported"</expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SSLv3"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>action</name> != '-'</expr>)</condition><then> <block>{
<return>return <expr>"SSLv3 not supported by this version of OpenSSL"</expr>;</return>
}</block></then></if>
<continue>continue;</continue>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>thisopt</name> = <name>SSL_PROTOCOL_SSLV3</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"TLSv1"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>thisopt</name> = <name>SSL_PROTOCOL_TLSV1</name></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"TLSv1.1"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>thisopt</name> = <name>SSL_PROTOCOL_TLSV1_1</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"TLSv1.2"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>thisopt</name> = <name>SSL_PROTOCOL_TLSV1_2</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"all"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>thisopt</name> = <name>SSL_PROTOCOL_ALL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>": Illegal protocol '"</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>options</name> &amp;= ~<name>thisopt</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>action</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>options</name> |= <name>thisopt</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name>options</name> != <name>SSL_PROTOCOL_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02532</expr></argument>)</argument_list></call>
"%s: Protocol '%s' overrides already set parameter(s). "
"Check if a +/- prefix is missing."</expr></argument>,
<argument><expr><name><name>parms</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>options</name> = <name>thisopt</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProtocol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>protocol_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>ssl_cmd_protocol_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyEngine</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_enabled</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyProtocol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>protocol_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>ssl_cmd_protocol_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCipherSuite</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>":!aNULL:!eNULL:!EXP"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>auth</name>.<name>cipher_suite</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyVerify</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_verify_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_verify_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>mode</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> = <name>mode</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyVerifyDepth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_verify_depth_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>depth</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>auth</name>.<name>verify_depth</name></name> = <name>depth</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCACertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>auth</name>.<name>ca_cert_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCACertificatePath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>auth</name>.<name>ca_cert_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCARevocationPath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>crl_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCARevocationFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>crl_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCARevocationCheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>ssl_cmd_crlcheck_parse</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>crl_check_mask</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyMachineCertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>pkp</name>-&gt;<name>cert_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyMachineCertificatePath</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>pkp</name>-&gt;<name>cert_path</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyMachineCertificateChainFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>pkp</name>-&gt;<name>ca_cert_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLUserName</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLDirConfigRec</name> *</type><name>dc</name> <init>= <expr>(<name>SSLDirConfigRec</name> *)<name>dcfg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>szUserName</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPEnable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_enabled</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
<return>return <expr>"OCSP support disabled in SSL library; cannot enable "
"OCSP validation"</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPOverrideResponder</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_force_default</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPDefaultResponder</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponseTimeSkew</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resptime_skew</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resptime_skew</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLOCSPResponseTimeSkew: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponseMaxAge</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resp_maxage</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resp_maxage</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLOCSPResponseMaxAge: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponderTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder_timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder_timeout</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLOCSPResponderTimeout: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPUseRequestNonce</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_use_request_nonce</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPProxyURL</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>proxy_uri</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uri_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>proxy_uri</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"SSLOCSPProxyURL: Cannot parse URL %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPNoVerify</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_noverify</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCheckPeerExpire</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_expire</name></name> = <name>flag</name> ? <name>SSL_ENABLED_TRUE</name> : <name>SSL_ENABLED_FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCheckPeerCN</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_cn</name></name> = <name>flag</name> ? <name>SSL_ENABLED_TRUE</name> : <name>SSL_ENABLED_FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLProxyCheckPeerName</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_name</name></name> = <name>flag</name> ? <name>SSL_ENABLED_TRUE</name> : <name>SSL_ENABLED_FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStrictSNIVHostCheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>strict_sni_vhost_check</name></name> = <name>flag</name> ? <name>SSL_ENABLED_TRUE</name> : <name>SSL_ENABLED_FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>"SSLStrictSNIVHostCheck failed; OpenSSL is not built with support "
"for TLS extensions and SNI indication. Refer to the "
"documentation, and build a compatible version of OpenSSL."</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingCache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>sep</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sep</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sep</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>sep</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>name</name> = <name>arg</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>stapling_cache</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>create</name></name><argument_list>(<argument><expr>&amp;<name><name>mc</name>-&gt;<name>stapling_cache_context</name></name></expr></argument>,
<argument><expr><name>sep</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>name_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>all_names</name></decl>;</decl_stmt>
<expr_stmt><expr><name>name_list</name> = <call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>all_names</name> = <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name_list</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"'%s' stapling cache not supported "
"(known names: %s) Maybe you need to load the "
"appropriate socache module (mod_socache_%s?)"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>all_names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"SSLStaplingCache: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLUseStapling</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_enabled</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingResponseTimeSkew</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_resptime_skew</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_resptime_skew</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLStaplingResponseTimeSkew: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingResponseMaxAge</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_resp_maxage</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_resp_maxage</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLStaplingResponseMaxAge: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingStandardCacheTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_cache_timeout</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_cache_timeout</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLStaplingStandardCacheTimeout: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingErrorCacheTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_errcache_timeout</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_errcache_timeout</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLStaplingErrorCacheTimeout: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingReturnResponderErrors</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_return_errors</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingFakeTryLater</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_fake_trylater</name></name> = <name>flag</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingResponderTimeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_responder_timeout</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_responder_timeout</name></name> *= <name>APR_USEC_PER_SEC</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_responder_timeout</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"SSLStaplingResponderTimeout: invalid argument"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLStaplingForceURL</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_force_url</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOpenSSLConfCmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CONF_CTX</name> *</type><name>cctx</name> <init>= <expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value_type</name> <init>= <expr><call><name>SSL_CONF_cmd_value_type</name><argument_list>(<argument><expr><name>cctx</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_ctx_param_t</name> *</type><name>param</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value_type</name> == <name>SSL_CONF_TYPE_UNKNOWN</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"'%s': invalid OpenSSL configuration command"</expr></argument>,
<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>value_type</name> == <name>SSL_CONF_TYPE_FILE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>value_type</name> == <name>SSL_CONF_TYPE_DIR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_dir</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg2</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"CipherString"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>arg2</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr>":!aNULL:!eNULL:!EXP"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>param</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx_param</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name>-&gt;<name>name</name></name> = <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>param</name>-&gt;<name>value</name></name> = <name>arg2</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSRPVerifierFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>srp_vfile</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLSRPUnknownUserSeed</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>srp_unknown_user_seed</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_cmd_SSLOCSPResponderCertificateFile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ssl_cmd_check_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_certs_file</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_hook_ConfigTest</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_CERTS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Server certificates:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sc</name> &amp;&amp; <name><name>sc</name>-&gt;<name>server</name></name> &amp;&amp; <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pks</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>modssl_pk_server_t</name> *<specifier>const</specifier></type> <name>pks</name> <init>= <expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pks</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>(<name>i</name> &lt; <name><name>pks</name>-&gt;<name>cert_files</name>-&gt;<name>nelts</name></name>) &amp;&amp;
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" %s\n"</expr></argument>,
<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></function>
</unit>
