<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/core/mod_macro.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MOD_MACRO_DEBUG</name></cpp:undef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>debug</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>debug</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MOD_MACRO_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<param><type><name>stmt</name></type></param>)</parameter_list></cpp:macro> <cpp:value>stmt</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<param><type><name>stmt</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>macro_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>arguments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>location</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_macro_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BEGIN_MACRO</name></cpp:macro> <cpp:value>"&lt;Macro"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>END_MACRO</name></cpp:macro> <cpp:value>"&lt;/Macro&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_MACRO</name></cpp:macro> <cpp:value>"Use"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNDEF_MACRO</name></cpp:macro> <cpp:value>"UndefMacro"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>ap_macros</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>empty_string_p</name><parameter_list>(<param><type><name>p</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(!(p) || *(p) == '\0')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trim</name><parameter_list>(<param><type><name>line</name></type></param>)</parameter_list></cpp:macro> <cpp:value>while (*(line) == ' ' || *(line) == '\t') (line)++</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>get_arguments</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>trim</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>line</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>new</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new</name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trim</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>args</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>warn_if_non_blank</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>what</name></decl></param>,
<param><decl><type><name>char</name> *</type> <name>ptr</name></decl></param>,
<param><decl><type><name>ap_configfile_t</name> *</type> <name>cfg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type> <name>p</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name>=<name>ptr</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr><name>p</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*<name>p</name> == '#'</expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr>*<name>p</name> != ' ' &amp;&amp; *<name>p</name> != '\t'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02989</expr></argument>)</argument_list></call>
"%s on line %d of %s: %s"</expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>line_number</name></name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_lines_till_end_token</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>,
<param><decl><type><name>ap_configfile_t</name> *</type> <name>config_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end_token</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>begin_token</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>where</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> **</type> <name>plines</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>lines</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>macro_nesting</name> <init>= <expr>1</expr></init>, <name>any_nesting</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>line_number_start</name> <init>= <expr><name><name>config_file</name>-&gt;<name>line_number</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name> <init>= <expr><name>line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>first</name></decl>, **<decl><type ref="prev"/><name>new</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>line</name> == '#'</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>first</name> = <call><name>ap_getword_conf_nc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr>"&lt;/"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>any_nesting</name>--</expr>;</expr_stmt>
<if>if <condition>(<expr><name>any_nesting</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02793</expr></argument>)</argument_list></call>
"bad (negative) nesting on line %d of %s"</expr></argument>,
<argument><expr><name><name>config_file</name>-&gt;<name>line_number</name></name> - <name>line_number_start</name></expr></argument>,
<argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr>"&lt;"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>any_nesting</name>++</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>end_token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type> <name>endp</name> <init>= <expr>(<name>char</name> *) <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"end directive missing closing '&gt;'"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>warn_if_non_blank</name><argument_list>(
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02794</expr></argument>)</argument_list></call> "non blank chars found after directive closing"</expr></argument>,
<argument><expr><name>endp</name>+1</expr></argument>, <argument><expr><name>config_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>macro_nesting</name>--</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>macro_nesting</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>any_nesting</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>,
<argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02795</expr></argument>)</argument_list></call>
"bad cumulated nesting (%+d) in %s"</expr></argument>,
<argument><expr><name>any_nesting</name></expr></argument>, <argument><expr><name>where</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>plines</name> = <name>lines</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>begin_token</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>begin_token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>macro_nesting</name>++</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s" <name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"expected token not found: %s"</expr></argument>, <argument><expr><name>end_token</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESCAPE_ARG</name></cpp:macro> <cpp:value>'@'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_PREFIX</name></cpp:macro> <cpp:value>"$%@"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARG_CONTENT</name></cpp:macro> <cpp:value>"abcdefghijklmnopqrstuvwxyz" "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "0123456789_" ARG_PREFIX</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_like_an_argument</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>ARG_PREFIX</name></expr></argument>, <argument><expr>*<name>word</name></expr></argument>)</argument_list></call> != 0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>check_macro_arguments</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ap_macro_t</name> *</type> <name>macro</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>tab</name> <init>= <expr>(<name>char</name> **) <name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nelts</name> <init>= <expr><name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>ltabi</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ltabi</name> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"macro '%s' (%s): empty argument #%d name"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>looks_like_an_argument</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02796</expr></argument>)</argument_list></call>
"macro '%s' (%s) "
"argument name '%s' (#%d) without expected prefix, "
"better prefix argument names with one of '%s'."</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name>ARG_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<for>for (<init><expr><name>j</name> = <name>i</name> + 1</expr>;</init> <condition><expr><name>j</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>size_t</name></type> <name>ltabj</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"argument name conflict in macro '%s' (%s): "
"argument '%s': #%d and #%d, "
"change argument names!"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name>j</name> + 1</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ltabi</name> &amp;&amp; <name>ltabj</name> &amp;&amp;
!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>ltabi</name> &lt; <name>ltabj</name> ? <name>ltabi</name> : <name>ltabj</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02797</expr></argument>)</argument_list></call>
"macro '%s' (%s): "
"argument name prefix conflict (%s #%d and %s #%d), "
"be careful about your macro definition!"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_macro_use_arguments</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>where</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type> <name>array</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>tab</name> <init>= <expr>(<name>char</name> **) <name><name>array</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>array</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>empty_string_p</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02798</expr></argument>)</argument_list></call>
"%s: empty argument #%d"</expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELIM</name></cpp:macro> <cpp:value>'"'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ESCAPE</name></cpp:macro> <cpp:value>'\\'</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>number_of_escapes</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name></type> <name>delim</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nesc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>s</name> == <name>ESCAPE</name> || *<name>s</name> == <name>delim</name></expr>)</condition><then>
<expr_stmt><expr><name>nesc</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"escapes: %d ---%s---\n"</expr></argument>, <argument><expr><name>nesc</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nesc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>substitute</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>int</name></type> <name>bufsize</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>replacement</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>int</name></type> <name>do_esc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>lbuf</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init>,
<name>lname</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init>,
<name>lrepl</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr></init>,
<name>lsubs</name> <init>= <expr><name>lrepl</name> +
(<name>do_esc</name> ? (2 + <call><name>number_of_escapes</name><argument_list>(<argument><expr><name>DELIM</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call>) : 0)</expr></init>,
<name>shift</name> <init>= <expr><name>lsubs</name> - <name>lname</name></expr></init>, <name>size</name> <init>= <expr><name>lbuf</name> + <name>shift</name></expr></init>, <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>lname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"substitute(%s,%s,%s,%d,sh=%d,lbuf=%d,lrepl=%d,lsubs=%d)\n"</expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>, <argument><expr><name>do_esc</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name>lbuf</name></expr></argument>, <argument><expr><name>lrepl</name></expr></argument>, <argument><expr><name>lsubs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &gt;= <name>bufsize</name></expr>)</condition><then> <block>{
<return>return <expr>"cannot substitute, buffer size too small"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>shift</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buf</name> + <name>lname</name> + <name>shift</name></expr></argument>, <argument><expr><name>buf</name> + <name>lname</name></expr></argument>, <argument><expr><name>lbuf</name> - <name>lname</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>j</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>do_esc</name></expr>)</condition><then>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>DELIM</name></expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>lrepl</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>do_esc</name> &amp;&amp; (<name><name>replacement</name><index>[<expr><name>i</name></expr>]</index></name> == <name>DELIM</name> || <name><name>replacement</name><index>[<expr><name>i</name></expr>]</index></name> == <name>ESCAPE</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>ESCAPE</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name> = <name><name>replacement</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>do_esc</name></expr>)</condition><then>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name>DELIM</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>next_substitution</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type> <name>args</name></decl></param>, <param><decl><type><name>int</name> *</type><name>whichone</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>chosen</name> <init>= <expr><name>NULL</name></expr></init>, **<name>tab</name> <init>= <expr>(<name>char</name> **) <name><name>args</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lchosen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>args</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>found</name> <init>= <expr><call><name>ap_strstr</name><argument_list>(<argument><expr>(<name>char</name> *) <name>buf</name></expr></argument>, <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>lfound</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>found</name> &amp;&amp; (!<name>chosen</name> || <name>found</name> &lt; <name>chosen</name> ||
(<name>found</name> == <name>chosen</name> &amp;&amp; <name>lchosen</name> &lt; <name>lfound</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>chosen</name> = <name>found</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lchosen</name> = <name>lfound</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>whichone</name> = <name>i</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>chosen</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>substitute_macro_args</name><parameter_list>(
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>bufsize</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ap_macro_t</name> *</type> <name>macro</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type> <name>replacements</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type> <name>used</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name> <init>= <expr><name>buf</name></expr></init>,
**<name>atab</name> <init>= <expr>(<name>char</name> **) <name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>elts</name></name></expr></init>,
**<name>rtab</name> <init>= <expr>(<name>char</name> **) <name><name>replacements</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>whichone</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>used</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>used</name>-&gt;<name>nalloc</name></name> &gt;= <name><name>replacements</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"1#%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>ptr</name> = <call><name>next_substitution</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>arguments</name></name></expr></argument>, <argument><expr>&amp;<name>whichone</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name> <init>= <expr><call><name>substitute</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>buf</name> - <name>ptr</name> + <name>bufsize</name></expr></argument>,
<argument><expr><name><name>atab</name><index>[<expr><name>whichone</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rtab</name><index>[<expr><name>whichone</name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>atab</name><index>[<expr><name>whichone</name></expr>]</index><index>[<expr>0</expr>]</index></name> == <name>ESCAPE_ARG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>rtab</name><index>[<expr><name>whichone</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>used</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>used</name>-&gt;<name>elts</name><index>[<expr><name>whichone</name></expr>]</index></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"2#%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>process_content</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ap_macro_t</name> *</type> <name>macro</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type> <name>replacements</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type> <name>used</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> **</type> <name>result</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>contents</name> <init>= <expr><name><name>macro</name>-&gt;<name>contents</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>contents</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>contents</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>((<name>char</name> **) <name><name>contents</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>substitute_macro_args</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>,
<argument><expr><name>macro</name></expr></argument>, <argument><expr><name>replacements</name></expr></argument>, <argument><expr><name>used</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"while processing line %d of macro '%s' (%s) %s"</expr></argument>,
<argument><expr><name>i</name> + 1</expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>new</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>check_macro_contents</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>ap_macro_t</name> *</type> <name>macro</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nelts</name> <init>= <expr><name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>names</name> <init>= <expr>(<name>char</name> **) <name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>macro</name>-&gt;<name>contents</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02799</expr></argument>)</argument_list></call>
"macro '%s' (%s): empty contents!"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>used</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>nelts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>used</name>-&gt;<name>elts</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>errmsg</name> = <call><name>process_content</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>macro</name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>arguments</name></name></expr></argument>, <argument><expr><name>used</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>used</name>-&gt;<name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02800</expr></argument>)</argument_list></call>
"macro '%s' (%s): argument '%s' (#%d) never used"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>char_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>contents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_configfile_t</name> **</type><name>upper</name></decl>;</decl_stmt>
}</block></struct></type> <name>array_contents_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>next_one</name><parameter_list>(<param><decl><type><name>array_contents_t</name> *</type> <name>ml</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>ml</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>ml</name>-&gt;<name>upper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name><name>ml</name>-&gt;<name>upper</name></name>) = <name><name>ml</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>array_getch</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>ch</name></decl></param>, <param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>array_contents_t</name> *</type><name>ml</name> <init>= <expr>(<name>array_contents_t</name> *) <name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>tab</name> <init>= <expr>(<name>char</name> **) <name><name>ml</name>-&gt;<name>contents</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>ml</name>-&gt;<name>char_index</name></name> &gt;= <name><name>ml</name>-&gt;<name>length</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>ml</name>-&gt;<name>index</name></name> &gt;= <name><name>ml</name>-&gt;<name>contents</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ml</name>-&gt;<name>next</name></name> &amp;&amp; <name><name>ml</name>-&gt;<name>next</name>-&gt;<name>getch</name></name> &amp;&amp; <call><name>next_one</name><argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><call><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>getch</name></name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>param</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>ch</name>==<name>LF</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>line_number</name></name>++</expr>;</expr_stmt></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>index</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>char_index</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>length</name></name> = <name><name>ml</name>-&gt;<name>index</name></name> &gt;= <name><name>ml</name>-&gt;<name>contents</name>-&gt;<name>nelts</name></name> ?
0 : <call><name>strlen</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name><name>ml</name>-&gt;<name>index</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>ch</name> = <name><name>tab</name><index>[<expr><name><name>ml</name>-&gt;<name>index</name></name></expr>]</index><index>[<expr><name><name>ml</name>-&gt;<name>char_index</name></name>++</expr>]</index></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>array_getstr</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>bufsize</name></decl></param>, <param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>array_contents_t</name> *</type><name>ml</name> <init>= <expr>(<name>array_contents_t</name> *) <name>param</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name> <init>= <expr>(<name>char</name> *) <name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>next</name> <init>= <expr>'\0'</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>bufsize</name> - 1 &amp;&amp; <name>next</name> != <name>LF</name> &amp;&amp;
((<name>rc</name> = <call><name>array_getch</name><argument_list>(<argument><expr>&amp;<name>next</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)</expr>)</condition> <block>{
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name>++</expr>]</index></name> = <name>next</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>rc</name> == <name>APR_EOF</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>next_one</name><argument_list>(<argument><expr><name>ml</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>getstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>line_number</name></name>++</expr>;</expr_stmt>
<return>return <expr><call><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>getstr</name></name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name><name>ml</name>-&gt;<name>next</name>-&gt;<name>param</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>array_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>array_contents_t</name> *</type><name>ml</name> <init>= <expr>(<name>array_contents_t</name> *) <name>param</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>index</name></name> = <name><name>ml</name>-&gt;<name>contents</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ml</name>-&gt;<name>char_index</name></name> = <name><name>ml</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_configfile_t</name> *</type><name>make_array_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>pool</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type> <name>contents</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>where</name></decl></param>,
<param><decl><type><name>ap_configfile_t</name> *</type> <name>cfg</name></decl></param>,
<param><decl><type><name>ap_configfile_t</name> **</type> <name>upper</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>array_contents_t</name> *</type><name>ls</name> <init>=
<expr>(<name>array_contents_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>array_contents_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>ls</name>!=<name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name>-&gt;<name>index</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name>-&gt;<name>char_index</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name>-&gt;<name>contents</name></name> = <name>contents</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name>-&gt;<name>length</name></name> = <name><name>ls</name>-&gt;<name>contents</name>-&gt;<name>nelts</name></name> &lt; 1 ?
0 : <call><name>strlen</name><argument_list>(<argument><expr>((<name>char</name> **) <name><name>ls</name>-&gt;<name>contents</name>-&gt;<name>elts</name></name>)<index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name>-&gt;<name>next</name></name> = <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ls</name>-&gt;<name>upper</name></name> = <name>upper</name></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pcfg_open_custom</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>ls</name></expr></argument>,
<argument><expr><name>array_getch</name></expr></argument>, <argument><expr><name>array_getstr</name></expr></argument>, <argument><expr><name>array_close</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>macro_section</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endp</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>, *<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_macro_t</name> *</type><name>macro</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"macro_section: arg='%s'\n"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_macros</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>ap_macros</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>ap_macros</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pool</name> = <call><name>apr_hash_pool_get</name><argument_list>(<argument><expr><name>ap_macros</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>endp</name> = (<name>char</name> *) <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>BEGIN_MACRO</name> "&gt; directive missing closing '&gt;'"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>arg</name></expr>)</condition><then> <block>{
<return>return <expr><name>BEGIN_MACRO</name> " macro definition: empty name"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>warn_if_non_blank</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02801</expr></argument>)</argument_list></call> "non blank chars found after "
<name>BEGIN_MACRO</name> " closing '&gt;'"</expr></argument>,
<argument><expr><name>endp</name>+1</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>config_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>endp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>empty_string_p</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>BEGIN_MACRO</name> " macro definition: name not found"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>macro</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ap_macros</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>macro</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02802</expr></argument>)</argument_list></call>
"macro '%s' multiply defined: "
"%s, redefined on line %d of \"%s\""</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>macro</name> = (<name>ap_macro_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_macro_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>macro</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"macro_section: name=%s\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>macro</name>-&gt;<name>location</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"defined on line %d of \"%s\""</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"macro_section: location=%s\n"</expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>where</name> =
<call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"macro '%s' (%s)"</expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>looks_like_an_argument</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02803</expr></argument>)</argument_list></call>
"%s better prefix a macro name with any of '%s'"</expr></argument>,
<argument><expr><name>where</name></expr></argument>, <argument><expr><name>ARG_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>macro</name>-&gt;<name>arguments</name></name> = <call><name>get_arguments</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>check_macro_arguments</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errmsg</name> = <call><name>get_lines_till_end_token</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>config_file</name></name></expr></argument>,
<argument><expr><name>END_MACRO</name></expr></argument>, <argument><expr><name>BEGIN_MACRO</name></expr></argument>,
<argument><expr><name>where</name></expr></argument>, <argument><expr>&amp;<name><name>macro</name>-&gt;<name>contents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"%s" <name>APR_EOL_STR</name> "\tcontents error: %s"</expr></argument>,
<argument><expr><name>where</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errmsg</name> = <call><name>check_macro_contents</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"%s" <name>APR_EOL_STR</name> "\tcontents checking error: %s"</expr></argument>,
<argument><expr><name>where</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ap_macros</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>macro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>use_macro</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>recursion</name></decl>, *<decl><type ref="prev"/><name>where</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_macro_t</name> *</type><name>macro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>replacements</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>contents</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"use_macro -%s-\n"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_macros</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"no macro defined before " <name>USE_MACRO</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>empty_string_p</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"no macro name specified with " <name>USE_MACRO</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>macro</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ap_macros</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>macro</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"macro '%s' undefined"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>recursion</name> =
<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"macro '"</expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_strstr</name><argument_list>(<argument><expr>(<name>char</name> *) <name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>recursion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"recursive use of macro '%s' is invalid"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>replacements</name> = <call><name>get_arguments</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>nelts</name></name> != <name><name>replacements</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"macro '%s' (%s) used "
"with %d arguments instead of %d"</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>replacements</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>arguments</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>where</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"macro '%s' (%s) used on line %d of \"%s\""</expr></argument>,
<argument><expr><name><name>macro</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>macro</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>line_number</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_macro_use_arguments</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr><name>replacements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>process_content</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>macro</name></expr></argument>, <argument><expr><name>replacements</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>contents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"%s error while substituting: %s"</expr></argument>,
<argument><expr><name>where</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>config_file</name></name> = <call><name>make_array_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>contents</name></expr></argument>, <argument><expr><name>where</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>config_file</name></name></expr></argument>, <argument><expr>&amp;<name><name>cmd</name>-&gt;<name>config_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>undef_macro</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_macro_t</name> *</type><name>macro</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ap_macros</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"no macro defined before " <name>UNDEF_MACRO</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>empty_string_p</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"no macro name specified with " <name>UNDEF_MACRO</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>macro</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ap_macros</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>macro</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"cannot remove undefined macro '%s'"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ap_macros</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>macro_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>ap_macros</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>macro_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr><name>BEGIN_MACRO</name></expr></argument>, <argument><expr><name>macro_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Beginning of a macro definition section."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr><name>USE_MACRO</name></expr></argument>, <argument><expr><name>use_macro</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Use of a macro."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr><name>UNDEF_MACRO</name></expr></argument>, <argument><expr><name>undef_macro</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EXEC_ON_READ</name> | <name>OR_ALL</name></expr></argument>,
<argument><expr>"Remove a macro definition."</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>macro_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>macro_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>macro</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>macro_cmds</name></expr>,
<expr><name>macro_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
