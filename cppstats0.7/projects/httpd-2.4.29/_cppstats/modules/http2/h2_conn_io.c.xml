<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/http2/h2_conn_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_mpm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_eos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TLS_DATA_MAX</name></cpp:macro> <cpp:value>(16*1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_SIZE_INITIAL</name></cpp:macro> <cpp:value>1300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_SIZE_MAX</name></cpp:macro> <cpp:value>(TLS_DATA_MAX - 100)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_conn_io_bb_log</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>16 * 1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name> <init>= <expr>"(null)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bmax</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>bb</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>bmax</name>--</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>bmax</name> &amp;&amp; (<name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>)</expr>;</condition>
<incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>off</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name>+<name>off</name></expr></argument>, <argument><expr><name>bmax</name>-<name>off</name></expr></argument>, <argument><expr>"eos "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>off</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name>+<name>off</name></expr></argument>, <argument><expr><name>bmax</name>-<name>off</name></expr></argument>, <argument><expr>"flush "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>AP_BUCKET_IS_EOR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>off</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name>+<name>off</name></expr></argument>, <argument><expr><name>bmax</name>-<name>off</name></expr></argument>, <argument><expr>"eor "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>H2_BUCKET_IS_H2EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>off</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name>+<name>off</name></expr></argument>, <argument><expr><name>bmax</name>-<name>off</name></expr></argument>, <argument><expr>"h2eos "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>off</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name>+<name>off</name></expr></argument>, <argument><expr><name>bmax</name>-<name>off</name></expr></argument>, <argument><expr>"meta(unknown) "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>btype</name> <init>= <expr>"data"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FILE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "file"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_PIPE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "pipe"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_SOCKET</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "socket"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_HEAP</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "heap"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_TRANSIENT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "transient"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_IMMORTAL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "immortal"</expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_MMAP</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "mmap"</expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_POOL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>btype</name> = "pool"</expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>off</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name>+<name>off</name></expr></argument>, <argument><expr><name>bmax</name>-<name>off</name></expr></argument>, <argument><expr>"%s[%ld] "</expr></argument>,
<argument><expr><name>btype</name></expr></argument>,
<argument><expr><call>(<name>long</name>)<argument_list>(<argument><expr><name><name>b</name>-&gt;<name>length</name></name> == ((<name>apr_size_t</name>)-1)?
-1 : <name><name>b</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><name>line</name> = *<name>buffer</name>? <name>buffer</name> : "(empty)"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"h2_session(%ld)-%s: %s"</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_io_init</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>cfg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>output</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>is_tls</name></name> = <call><name>h2_h2_is_tls</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>buffer_output</name></name> = <name><name>io</name>-&gt;<name>is_tls</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>flush_threshold</name></name> = (<name>apr_size_t</name>)<call><name>h2_config_geti64</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_STREAM_MAX_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>io</name>-&gt;<name>is_tls</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>warmup_size</name></name> = <call><name>h2_config_geti64</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_TLS_WARMUP_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>cooldown_usecs</name></name> = (<call><name>h2_config_geti</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_TLS_COOLDOWN_SECS</name></expr></argument>)</argument_list></call>
* <name>APR_USEC_PER_SEC</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>write_size</name></name> = (<name><name>io</name>-&gt;<name>cooldown_usecs</name></name> &gt; 0?
<name>WRITE_SIZE_INITIAL</name> : <name>WRITE_SIZE_MAX</name>)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>warmup_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>cooldown_usecs</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>write_size</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>APLOGctrace1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_conn_io(%ld): init, buffering=%d, warmup_size=%ld, "
"cd_secs=%f"</expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>buffer_output</name></name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>io</name>-&gt;<name>warmup_size</name></name></expr></argument>,
<argument><expr>((<name>float</name>)<name><name>io</name>-&gt;<name>cooldown_usecs</name></name>/<name>APR_USEC_PER_SEC</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>append_scratch</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>io</name>-&gt;<name>scratch</name></name> &amp;&amp; <name><name>io</name>-&gt;<name>slen</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>scratch</name></name></expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>slen</name></name></expr></argument>,
<argument><expr><name>apr_bucket_free</name></expr></argument>,
<argument><expr><name><name>io</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>scratch</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>slen</name></name> = <name><name>io</name>-&gt;<name>ssize</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>assure_scratch_space</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>remain</name> <init>= <expr><name><name>io</name>-&gt;<name>ssize</name></name> - <name><name>io</name>-&gt;<name>slen</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>io</name>-&gt;<name>scratch</name></name> &amp;&amp; <name>remain</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>append_scratch</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>io</name>-&gt;<name>scratch</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>scratch</name></name> = <call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>write_size</name></name></expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>ssize</name></name> = <name><name>io</name>-&gt;<name>write_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>slen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> = <name><name>io</name>-&gt;<name>ssize</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>remain</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_to_scratch</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>b</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>b</name>-&gt;<name>length</name></name> &lt;= (<name><name>io</name>-&gt;<name>ssize</name></name> - <name><name>io</name>-&gt;<name>slen</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FILE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket_file</name> *</type><name>f</name> <init>= <expr>(<name>apr_bucket_file</name> *)<name><name>b</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name> <init>= <expr><name><name>f</name>-&gt;<name>fd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name> <init>= <expr><name><name>b</name>-&gt;<name>start</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>b</name>-&gt;<name>length</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_seek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>scratch</name></name> + <name><name>io</name>-&gt;<name>slen</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>status</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>io</name>-&gt;<name>slen</name></name> += <name>len</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>scratch</name></name>+<name><name>io</name>-&gt;<name>slen</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>slen</name></name> += <name>len</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_write_size</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>io</name>-&gt;<name>write_size</name></name> &gt; <name>WRITE_SIZE_INITIAL</name>
&amp;&amp; (<name><name>io</name>-&gt;<name>cooldown_usecs</name></name> &gt; 0)
&amp;&amp; (<call><name>apr_time_now</name><argument_list>()</argument_list></call> - <name><name>io</name>-&gt;<name>last_write</name></name>) &gt;= <name><name>io</name>-&gt;<name>cooldown_usecs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>write_size</name></name> = <name>WRITE_SIZE_INITIAL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>bytes_written</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>io</name>-&gt;<name>write_size</name></name> &lt; <name>WRITE_SIZE_MAX</name>
&amp;&amp; <name><name>io</name>-&gt;<name>bytes_written</name></name> &gt;= <name><name>io</name>-&gt;<name>warmup_size</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>write_size</name></name> = <name>WRITE_SIZE_MAX</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>pass_output</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><name>int</name></type> <name>flush</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>io</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><name><name>io</name>-&gt;<name>output</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bblen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>append_scratch</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flush</name> &amp;&amp; !<name><name>io</name>-&gt;<name>is_flushed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_conn_io_bb_log</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>"out"</expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>bytes_written</name></name> += (<name>apr_size_t</name>)<name>bblen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>last_write</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flush</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>is_flushed</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03044</expr></argument>)</argument_list></call>
"h2_conn_io(%ld): pass_out brigade %ld bytes"</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_conn_io_needs_flush</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>io</name>-&gt;<name>is_flushed</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr><call><name>h2_brigade_mem_size</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; <name><name>io</name>-&gt;<name>flush_threshold</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>len</name> &gt; (4 * <name><name>io</name>-&gt;<name>flush_threshold</name></name>)</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_io_flush</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>pass_output</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_write_size</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_io_write</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>remain</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>length</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>is_flushed</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>io</name>-&gt;<name>buffer_output</name></name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>length</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><name>remain</name> = <call><name>assure_scratch_space</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>remain</name> &gt;= <name>length</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>scratch</name></name> + <name><name>io</name>-&gt;<name>slen</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>slen</name></name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>scratch</name></name> + <name><name>io</name>-&gt;<name>slen</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>io</name>-&gt;<name>slen</name></name> += <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>data</name> += <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> -= <name>remain</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_brigade_write</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_conn_io_pass</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>io</name>-&gt;<name>is_flushed</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> &amp;&amp; <name>status</name> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<expr_stmt><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>append_scratch</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>io</name>-&gt;<name>buffer_output</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>remain</name> <init>= <expr><call><name>assure_scratch_space</name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>length</name></name> &gt; <name>remain</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>remain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>io</name>-&gt;<name>slen</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>read_to_scratch</name><argument_list>(<argument><expr><name>io</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_TRANSIENT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>io</name>-&gt;<name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>io</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
</unit>
