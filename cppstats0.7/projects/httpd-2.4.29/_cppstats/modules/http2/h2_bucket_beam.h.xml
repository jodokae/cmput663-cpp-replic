<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/http2/h2_bucket_beam.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>h2_bucket_beam_h</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h2_bucket_beam_h</name></cpp:macro></cpp:define>
<struct_decl>struct <name>apr_thread_mutex_t</name>;</struct_decl>
<struct_decl>struct <name>apr_thread_cond_t</name>;</struct_decl>
<typedef>typedef <type><struct>struct <block>{
<macro><name>APR_RING_HEAD</name><argument_list>(<argument>h2_bucket_list</argument>, <argument>apr_bucket</argument>)</argument_list></macro> <expr_stmt><expr><name>list</name></expr>;</expr_stmt>
}</block></struct></type> <name>h2_blist</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_INIT</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_INIT(&amp;(b)-&gt;list, apr_bucket, link);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_SENTINEL</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_SENTINEL(&amp;(b)-&gt;list, apr_bucket, link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_EMPTY</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_EMPTY(&amp;(b)-&gt;list, apr_bucket, link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_FIRST</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_FIRST(&amp;(b)-&gt;list)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_LAST</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_LAST(&amp;(b)-&gt;list)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_INSERT_HEAD</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { apr_bucket *ap__b = (e); APR_RING_INSERT_HEAD(&amp;(b)-&gt;list, ap__b, apr_bucket, link); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_INSERT_TAIL</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { apr_bucket *ap__b = (e); APR_RING_INSERT_TAIL(&amp;(b)-&gt;list, ap__b, apr_bucket, link); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_CONCAT</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { APR_RING_CONCAT(&amp;(a)-&gt;list, &amp;(b)-&gt;list, apr_bucket, link); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BLIST_PREPEND</name><parameter_list>(<param><type><name>a</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { APR_RING_PREPEND(&amp;(a)-&gt;list, &amp;(b)-&gt;list, apr_bucket, link); } while (0)</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>void</name></type> <name>h2_beam_mutex_leave</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type>struct <name>apr_thread_mutex_t</name> *</type><name>lock</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_beam_mutex_leave</name> *</type><name>leave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>leave_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_beam_lock</name>;</typedef>
<typedef>typedef <type>struct <name>h2_bucket_beam</name></type> <name>h2_bucket_beam</name>;</typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>h2_beam_mutex_enter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_beam_lock</name> *</type><name>pbl</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>h2_beam_io_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>h2_beam_ev_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type>struct <name>h2_beam_proxy</name></type> <name>h2_beam_proxy</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<macro><name>APR_RING_HEAD</name><argument_list>(<argument>h2_beam_proxy_list</argument>, <argument>h2_beam_proxy</argument>)</argument_list></macro> <expr_stmt><expr><name>list</name></expr>;</expr_stmt>
}</block></struct></type> <name>h2_bproxy_list</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>h2_beam_can_beam_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>H2_BEAM_OWNER_SEND</name></decl>,
<decl><name>H2_BEAM_OWNER_RECV</name></decl>
}</block></enum></type> <name>h2_beam_owner_t</name>;</typedef>
<function_decl><type><name>int</name></type> <name>h2_beam_no_files</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>)</parameter_list>;</function_decl>
<struct>struct <name>h2_bucket_beam</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_beam_owner_t</name></type> <name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_blist</name></type> <name>send_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_blist</name></type> <name>hold_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_blist</name></type> <name>purge_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>recv_buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_bproxy_list</name></type> <name>proxies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>send_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>recv_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_buf_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>sent_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>received_bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buckets_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>files_beamed</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>aborted</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>closed</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>close_sent</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>tx_mem_limits</name> : 1</expr>;</expr_stmt>
<decl_stmt><decl><type>struct <name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_thread_cond_t</name> *</type><name>change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>cons_bytes_reported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_beam_ev_callback</name> *</type><name>cons_ev_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_beam_io_callback</name> *</type><name>cons_io_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>cons_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>prod_bytes_reported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_beam_io_callback</name> *</type><name>prod_io_cb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>prod_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_beam_can_beam_callback</name> *</type><name>can_beam_fn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>can_beam_ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_create</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> **</type><name>pbeam</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>,
<param><decl><type><name>h2_beam_owner_t</name></type> <name>owner</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buffer_size</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_destroy</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_send</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_send_from</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_receive</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>green_buckets</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_beam_empty</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_beam_holds_proxies</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_abort</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_close</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_leave</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_beam_is_closed</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_beam_wait_empty</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_timeout_set</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_interval_time_t</name></type> <name>h2_beam_timeout_get</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_buffer_size_set</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buffer_size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> <name>h2_beam_buffer_size_get</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_on_consumed</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>h2_beam_ev_callback</name> *</type><name>ev_cb</name></decl></param>,
<param><decl><type><name>h2_beam_io_callback</name> *</type><name>io_cb</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_beam_report_consumption</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_on_produced</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>h2_beam_io_callback</name> *</type><name>io_cb</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_on_file_beam</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>h2_beam_can_beam_callback</name> *</type><name>cb</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_off_t</name></type> <name>h2_beam_get_buffered</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_off_t</name></type> <name>h2_beam_get_mem_used</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_beam_was_received</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_size_t</name></type> <name>h2_beam_get_files_beamed</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>apr_bucket</name> *</type><name>h2_bucket_beamer</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_bucket</name> *</type><name>src</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>void</name></type> <name>h2_register_bucket_beamer</name><parameter_list>(<param><decl><type><name>h2_bucket_beamer</name> *</type><name>beamer</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_beam_log</name><parameter_list>(<param><decl><type><name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
