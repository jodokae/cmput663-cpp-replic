<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/http2/mod_http2.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__MOD_HTTP2_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MOD_HTTP2_H__</name></cpp:macro></cpp:define>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>,
<argument><expr><name>http2_var_lookup</name></expr></argument>, <argument><expr>(<name>apr_pool_t</name> *, <name>server_rec</name> *,
<name>conn_rec</name> *, <name>request_rec</name> *, <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>,
<argument><expr><name>http2_is_h2</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<struct_decl>struct <name>apr_thread_cond_t</name>;</struct_decl>
<typedef>typedef <type>struct <name>h2_req_engine</name></type> <name>h2_req_engine</name>;</typedef>
<typedef>typedef <function_decl><type><name>void</name></type> <name>http2_output_consumed</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>consumed</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>http2_req_engine_init</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>req_buffer_size</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>http2_output_consumed</name> **</type><name>pconsumed</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>pbaton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>,
<argument><expr><name>http2_req_engine_push</name></expr></argument>, <argument><expr>(const <name>char</name> *<name>engine_type</name>,
<name>request_rec</name> *<name>r</name>,
<name>http2_req_engine_init</name> *<name>einit</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>,
<argument><expr><name>http2_req_engine_pull</name></expr></argument>, <argument><expr>(<name>h2_req_engine</name> *<name>engine</name>,
<name>apr_read_type_e</name> <name>block</name>,
<name>int</name> <name>capacity</name>,
<name>request_rec</name> **<name>pr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>,
<argument><expr><name>http2_req_engine_done</name></expr></argument>, <argument><expr>(<name>h2_req_engine</name> *<name>engine</name>,
<name>conn_rec</name> *<name>rconn</name>,
<name>apr_status_t</name> <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
