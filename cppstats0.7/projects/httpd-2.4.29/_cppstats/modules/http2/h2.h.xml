<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/http2/h2.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__mod_h2__h2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2__</name></cpp:macro></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name>H2_MAGIC_TOKEN</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_NO_ERROR</name></cpp:macro> <cpp:value>(0x00)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_PROTOCOL_ERROR</name></cpp:macro> <cpp:value>(0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_INTERNAL_ERROR</name></cpp:macro> <cpp:value>(0x02)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_FLOW_CONTROL_ERROR</name></cpp:macro> <cpp:value>(0x03)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_SETTINGS_TIMEOUT</name></cpp:macro> <cpp:value>(0x04)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_STREAM_CLOSED</name></cpp:macro> <cpp:value>(0x05)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_FRAME_SIZE_ERROR</name></cpp:macro> <cpp:value>(0x06)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_REFUSED_STREAM</name></cpp:macro> <cpp:value>(0x07)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_CANCEL</name></cpp:macro> <cpp:value>(0x08)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_COMPRESSION_ERROR</name></cpp:macro> <cpp:value>(0x09)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_CONNECT_ERROR</name></cpp:macro> <cpp:value>(0x0a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_ENHANCE_YOUR_CALM</name></cpp:macro> <cpp:value>(0x0b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_INADEQUATE_SECURITY</name></cpp:macro> <cpp:value>(0x0c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ERR_HTTP_1_1_REQUIRED</name></cpp:macro> <cpp:value>(0x0d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_METHOD</name></cpp:macro> <cpp:value>":method"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_METHOD_LEN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_SCHEME</name></cpp:macro> <cpp:value>":scheme"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_SCHEME_LEN</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_AUTH</name></cpp:macro> <cpp:value>":authority"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_AUTH_LEN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_PATH</name></cpp:macro> <cpp:value>":path"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HEADER_PATH_LEN</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_CRLF</name></cpp:macro> <cpp:value>"\r\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_DATA_CHUNK_SIZE</name></cpp:macro> <cpp:value>((16*1024) - 100 - 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MAX_PADLEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_INITIAL_WINDOW_SIZE</name></cpp:macro> <cpp:value>((64*1024)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_STREAM_CLIENT_INITIATED</name><parameter_list>(<param><type><name>id</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(id&amp;0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ALEN</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a)/sizeof((a)[0]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2MAX</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &gt; (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2MIN</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>H2_DEPENDANT_AFTER</name></decl>,
<decl><name>H2_DEPENDANT_INTERLEAVED</name></decl>,
<decl><name>H2_DEPENDANT_BEFORE</name></decl>,
}</block></enum></type> <name>h2_dependency</name>;</typedef>
<typedef>typedef <type><struct>struct <name>h2_priority</name> <block>{
<decl_stmt><decl><type><name>h2_dependency</name></type> <name>dependency</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>weight</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_priority</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>H2_PUSH_NONE</name></decl>,
<decl><name>H2_PUSH_DEFAULT</name></decl>,
<decl><name>H2_PUSH_HEAD</name></decl>,
<decl><name>H2_PUSH_FAST_LOAD</name></decl>,
}</block></enum></type> <name>h2_push_policy</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>H2_SESSION_ST_INIT</name></decl>,
<decl><name>H2_SESSION_ST_DONE</name></decl>,
<decl><name>H2_SESSION_ST_IDLE</name></decl>,
<decl><name>H2_SESSION_ST_BUSY</name></decl>,
<decl><name>H2_SESSION_ST_WAIT</name></decl>,
<decl><name>H2_SESSION_ST_CLEANUP</name></decl>,
}</block></enum></type> <name>h2_session_state</name>;</typedef>
<typedef>typedef <type><struct>struct <name>h2_session_props</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>accepted_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>completed_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emitted_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emitted_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>accepting</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>shutdown</name> : 1</expr>;</expr_stmt>
}</block></struct></type> <name>h2_session_props</name>;</typedef>
<typedef>typedef <type><enum>enum <name>h2_stream_state_t</name> <block>{
<decl><name>H2_SS_IDLE</name></decl>,
<decl><name>H2_SS_RSVD_R</name></decl>,
<decl><name>H2_SS_RSVD_L</name></decl>,
<decl><name>H2_SS_OPEN</name></decl>,
<decl><name>H2_SS_CLOSED_R</name></decl>,
<decl><name>H2_SS_CLOSED_L</name></decl>,
<decl><name>H2_SS_CLOSED</name></decl>,
<decl><name>H2_SS_CLEANUP</name></decl>,
<decl><name>H2_SS_MAX</name></decl>
}</block></enum></type> <name>h2_stream_state_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>H2_SEV_CLOSED_L</name></decl>,
<decl><name>H2_SEV_CLOSED_R</name></decl>,
<decl><name>H2_SEV_CANCELLED</name></decl>,
<decl><name>H2_SEV_EOS_SENT</name></decl>,
<decl><name>H2_SEV_IN_DATA_PENDING</name></decl>,
}</block></enum></type> <name>h2_stream_event_t</name>;</typedef>
<typedef>typedef <type>struct <name>h2_request</name></type> <name>h2_request</name>;</typedef>
<struct>struct <name>h2_request</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_time</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>chunked</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>serialize</name> : 1</expr>;</expr_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>h2_headers</name></type> <name>h2_headers</name>;</typedef>
<struct>struct <name>h2_headers</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>h2_io_data_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>h2_stream_pri_cmp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>stream_id1</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id2</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_TASK_ID_NOTE</name></cpp:macro> <cpp:value>"http2-task-id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_FILTER_DEBUG_NOTE</name></cpp:macro> <cpp:value>"http2-debug"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HDR_CONFORMANCE</name></cpp:macro> <cpp:value>"http2-hdr-conformance"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_HDR_CONFORMANCE_UNSAFE</name></cpp:macro> <cpp:value>"unsafe"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
