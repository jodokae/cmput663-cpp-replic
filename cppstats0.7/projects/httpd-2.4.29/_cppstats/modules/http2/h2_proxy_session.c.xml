<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/http2/h2_proxy_session.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpm_common.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_proxy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_proxy_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_proxy_session.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>proxy_http2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <name>h2_proxy_stream</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_request</name> *</type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real_server_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p_server_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>standalone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream_state_t</name></type> <name>state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>suspended</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>waiting_on_100</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>waiting_on_ping</name> : 1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>uint32_t</name></type> <name>error_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>data_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>data_received</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>saves</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_proxy_stream</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_event</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_proxys_event_t</name></type> <name>ev</name></decl></param>,
<param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ping_arrived</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>check_suspended</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>stream_resume</name><parameter_list>(<param><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>proxy_session_pre_close</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>theconn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name> <init>= <expr>(<name>proxy_conn_rec</name> *)<name>theconn</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name><name>p_conn</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>session</name> &amp;&amp; <name><name>session</name>-&gt;<name>ngh2</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"proxy_session(%s): pool cleanup, state=%d, streams=%d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr>(<name>int</name>)<call><name>h2_proxy_ihash_count</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_PRE_CLOSE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_del</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>ngh2</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_pass_brigade</name><parameter_list>(<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>origin</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flush</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>transferred</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>flush</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>transferred</name> != -1</expr>)</condition><then>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name> += <name>transferred</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>origin</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03357</expr></argument>)</argument_list></call>
"pass output failed to %pI (%s)"</expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>raw_send</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>length</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(const <name>char</name>*)<name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>proxy_pass_brigade</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>p_conn</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_sesssion(%s): raw_send %d bytes, flush=%d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>length</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>length</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame_recv</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h2_proxy_util_frame_print</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03341</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): recv FRAME[%s]"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>session</name>-&gt;<name>last_frame_received</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>frame</name>-&gt;<name>hd</name>.<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>NGHTTP2_HEADERS</name></expr>:
<expr_stmt><expr><name>stream</name> = <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>r</name> = <name><name>stream</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> &gt;= 100 &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> &lt; 200</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>forward</name> <init>= <expr><name><name>session</name>-&gt;<name>h2_front</name></name></expr></init></decl>;</decl_stmt>
<switch>switch<condition>(<expr><name><name>r</name>-&gt;<name>status</name></name></expr>)</condition> <block>{
<case>case <expr>100</expr>:
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>waiting_on_100</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>waiting_on_100</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>forward</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>103</expr>:
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = "103 Early Hints"</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03487</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): got interim HEADERS, "
"status=%d, will forward=%d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>forward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>forward</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_send_interim_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>stream_resume</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_PING</name></expr>:
<if>if <condition>(<expr><name><name>session</name>-&gt;<name>check_ping</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>check_ping</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ping_arrived</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_PUSH_PROMISE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_SETTINGS</name></expr>:
<if>if <condition>(<expr><name><name>frame</name>-&gt;<name>settings</name>.<name>niv</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name>NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>remote_max_concurrent</name></name> = <name>n</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>NGHTTP2_GOAWAY</name></expr>:
<expr_stmt><expr><name><name>session</name>-&gt;<name>last_stream_id</name></name> = <name><name>frame</name>-&gt;<name>goaway</name>.<name>last_stream_id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_REMOTE_GOAWAY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>before_frame_send</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h2_proxy_util_frame_print</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03343</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): sent FRAME[%s]"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>table</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>process_proxy_header</name><parameter_list>(<param><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_proxy_header_reverse_map_fn</name></type> <name>func</name></decl>;</decl_stmt>
}</block> <decl><name><name>transform_hdrs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"Location"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"Content-Location"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"URI"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"Destination"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"Set-Cookie"</expr>, <expr><name>ap_proxy_cookie_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>stream</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>preserve_host</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>transform_hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name><name>transform_hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr>(*<name><name>transform_hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>func</name>)(<name>r</name>, <name>dconf</name>, <name>v</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr>"Link"</expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>,
<argument><expr><call><name>h2_proxy_link_reverse_map</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>real_server_uri</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>p_server_uri</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_proxy_stream_add_header_out</name><parameter_list>(<param><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>nlen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>vlen</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>n</name><index>[<expr>0</expr>]</index></name> == ':'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>data_received</name></name> &amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr>":status"</expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-status"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d): got status %s"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>status</name></name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = 500</expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>h2_proxy_res_ignore_header</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>hname</name></decl>, *<decl><type ref="prev"/><name>hvalue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hname</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_util_camel_case_header</name><argument_list>(<argument><expr><name>hname</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hvalue</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d): got header %s: %s"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>hname</name></expr></argument>, <argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>process_proxy_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>hname</name></expr></argument>, <argument><expr><name>hvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d), header_out %s: %s"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_proxy_stream_end_headers_out</name><parameter_list>(<param><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>stream</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>add_header</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>saves</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>saves</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>saves</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>session</name>-&gt;<name>conf</name>-&gt;<name>viaopt</name></name> != <name>via_off</name>
&amp;&amp; <name><name>session</name>-&gt;<name>conf</name>-&gt;<name>viaopt</name></name> != <name>via_block</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_name</name> <init>= <expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name> <init>= <expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>portstr</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server_name</name> == <name><name>stream</name>-&gt;<name>r</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>server_name</name> = <name><name>stream</name>-&gt;<name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_is_default_port</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>portstr</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>portstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Via"</expr></argument>,
<argument><expr>(<name><name>session</name>-&gt;<name>conf</name>-&gt;<name>viaopt</name></name> == <name>via_full</name>)
? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d %s%s (%s)"</expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>,
<argument><expr><name>AP_SERVER_BASEVERSION</name></expr></argument>)</argument_list></call>
: <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d %s%s"</expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>server_name</name></expr></argument>, <argument><expr><name>portstr</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APLOGrtrace2</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d), header_out after merging"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>log_header</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_response_data</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03358</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): recv data chunk for "
"unknown stream %d, ignored"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>data_received</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_proxy_stream_end_headers_out</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>data_received</name></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(const <name>char</name>*)<name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03359</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): stream=%d, response DATA %ld, %ld"
" total"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr>(<name>long</name>)<name>len</name></expr></argument>,
<argument><expr>(<name>long</name>)<name><name>stream</name>-&gt;<name>data_received</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03344</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): passing output on stream %d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,
<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>NGHTTP2_STREAM_CLOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NGHTTP2_ERR_STREAM_CLOSING</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>standalone</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>nghttp2_session_consume</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): stream %d, win_update %d bytes"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr>(<name>int</name>)<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_stream_close</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></param>,
<param><decl><type><name>uint32_t</name></type> <name>error_code</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03360</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): stream=%d, closed, err=%d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>h2_proxy_ihash_get</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>error_code</name></name> = <name>error_code</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_STREAM_DONE</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_header</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>namearg</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>nlen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>valuearg</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>vlen</name></decl></param>, <param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name> <init>= <expr>(const <name>char</name>*)<name>namearg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name> <init>= <expr>(const <name>char</name>*)<name>valuearg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>)<name>session</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>frame</name>-&gt;<name>hd</name>.<name>type</name></name> == <name>NGHTTP2_HEADERS</name> &amp;&amp; <name>nlen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>stream</name> = <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>h2_proxy_stream_add_header_out</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>vlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>frame</name>-&gt;<name>hd</name>.<name>type</name></name> == <name>NGHTTP2_PUSH_PROMISE</name></expr>)</condition><then> <block>{
}</block></then></if></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>stream_request_data</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></param>,
<param><decl><type><name>uint8_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>,
<param><decl><type><name>uint32_t</name> *</type><name>data_flags</name></decl></param>,
<param><decl><type><name>nghttp2_data_source</name> *</type><name>source</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>data_flags</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03361</expr></argument>)</argument_list></call>
"h2_proxy_stream(%s): data_read, stream %d not found"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>check_ping</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>waiting_on_ping</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>expecting_100</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>waiting_on_100</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>,
<argument><expr><call><name>H2MAX</name><argument_list>(<argument><expr><name>APR_BUCKET_BUFF_SIZE</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d): request body read"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>readlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name>
&amp;&amp; (<name>readlen</name> &lt; <name>length</name>)
&amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>data_flags</name> |= <name>NGHTTP2_DATA_FLAG_EOF</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>blen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>bdata</name></expr></argument>, <argument><expr>&amp;<name>blen</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>blen</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ssize_t</name></type> <name>copylen</name> <init>= <expr><call><name>H2MIN</name><argument_list>(<argument><expr><name>length</name> - <name>readlen</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bdata</name></expr></argument>, <argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += <name>copylen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>readlen</name> += <name>copylen</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>copylen</name> &lt; <name>blen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>copylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>data_sent</name></name> += <name>readlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03468</expr></argument>)</argument_list></call>
"h2_proxy_stream(%d): request DATA %ld, %ld"
" total, flags=%d"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>readlen</name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>stream</name>-&gt;<name>data_sent</name></name></expr></argument>,
<argument><expr>(<name>int</name>)*<name>data_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>readlen</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d): suspending"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>suspended</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_iq_add</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>session</name>-&gt;<name>suspended</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NGHTTP2_ERR_DEFERRED</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name>ngh2</name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,
<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>NGHTTP2_STREAM_CLOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NGHTTP2_ERR_STREAM_CLOSING</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_INVALID_HEADER_CB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_invalid_header_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>namelen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>valuelen</name></decl></param>,
<param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03469</expr></argument>)</argument_list></call>
"h2_proxy_session(%s-%d): denying stream with invalid header "
"'%s: %s'"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,
<argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>,
<argument><expr><name>NGHTTP2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>h2_proxy_session</name> *</type><name>h2_proxy_session_setup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>h2_front</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name></type> <name>window_bits_connection</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name></type> <name>window_bits_stream</name></decl></param>,
<param><decl><type><name>h2_proxy_request_done</name> *</type><name>done</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>p_conn</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>p_conn</name>-&gt;<name>scpool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nghttp2_session_callbacks</name> *</type><name>cbs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nghttp2_option</name> *</type><name>option</name></decl>;</decl_stmt>
<expr_stmt><expr><name>session</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_pre_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>proxy_session_pre_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>data</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>id</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>p_conn</name>-&gt;<name>scpool</name></name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>c</name></name> = <name><name>p_conn</name>-&gt;<name>connection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>p_conn</name></name> = <name>p_conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>conf</name></name> = <name>conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>pool</name></name> = <name><name>p_conn</name>-&gt;<name>scpool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>state</name></name> = <name>H2_PROXYS_ST_INIT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>h2_front</name></name> = <name>h2_front</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>window_bits_stream</name></name> = <name>window_bits_stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>window_bits_connection</name></name> = <name>window_bits_connection</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>streams</name></name> = <call><name>h2_proxy_ihash_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>h2_proxy_stream</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>suspended</name></name> = <call><name>h2_proxy_iq_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>done</name></name> = <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>input</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>output</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_new</name><argument_list>(<argument><expr>&amp;<name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_frame_recv_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>on_frame_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_data_chunk_recv_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>stream_response_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_stream_close_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>on_stream_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_header_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>on_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_before_frame_send_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>before_frame_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_send_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>raw_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_INVALID_HEADER_CB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_set_on_invalid_header_callback</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>on_invalid_header_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>nghttp2_option_new</name><argument_list>(<argument><expr>&amp;<name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_option_set_peer_max_concurrent_streams</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_option_set_no_auto_window_update</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_client_new2</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>cbs</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_option_del</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_callbacks_del</name><argument_list>(<argument><expr><name>cbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03362</expr></argument>)</argument_list></call>
"setup session for %s"</expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name><name>p_conn</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>age</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> - <name><name>session</name>-&gt;<name>last_frame_received</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>age</name> &gt; <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>check_ping</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_submit_ping</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(const <name>uint8_t</name> *)"nevergonnagiveyouup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr><name><name>p_conn</name>-&gt;<name>data</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_start</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>nghttp2_settings_entry</name></type> <name><name>settings</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>add_conn_window</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call>) || <call><name>defined</name><argument_list>(<argument><expr><name>DOXYGEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_sock_disable_nagle</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>settings</name><index>[<expr>0</expr>]</index></name>.<name>settings_id</name> = <name>NGHTTP2_SETTINGS_ENABLE_PUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>settings</name><index>[<expr>0</expr>]</index></name>.<name>value</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>settings</name><index>[<expr>1</expr>]</index></name>.<name>settings_id</name> = <name>NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>settings</name><index>[<expr>1</expr>]</index></name>.<name>value</name> = (1 &lt;&lt; <name><name>session</name>-&gt;<name>window_bits_stream</name></name>) - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>nghttp2_submit_settings</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>,
<argument><expr><call><name>H2_ALEN</name><argument_list>(<argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>add_conn_window</name> = ((1 &lt;&lt; <name><name>session</name>-&gt;<name>window_bits_connection</name></name>) - 1 -
<name>NGHTTP2_INITIAL_CONNECTION_WINDOW_SIZE</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rv</name> &amp;&amp; <name>add_conn_window</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>nghttp2_submit_window_update</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>add_conn_window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name>? <name>APR_EGENERAL</name> : <name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>open_stream</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>standalone</name></decl></param>,
<param><decl><type><name>h2_proxy_stream</name> **</type><name>pstream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>puri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl>, *<decl><type ref="prev"/><name>scheme</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>standalone</name></name> = <name>standalone</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>state</name></name> = <name>H2_STREAM_ST_IDLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>input</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>output</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>req</name></name> = <call><name>h2_proxy_req_create</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>puri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>status</name></expr>;</return></then></if>
<expr_stmt><expr><name>scheme</name> = (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>puri</name>.<name>scheme</name></name></expr></argument>, <argument><expr>"h2"</expr></argument>)</argument_list></call>? "http" : "https")</expr>;</expr_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>preserve_host</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>authority</name> = <name><name>r</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>authority</name> = <name><name>puri</name>.<name>hostname</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>authority</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> &amp;&amp; <name><name>puri</name>.<name>port</name></name>
&amp;&amp; <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call> != <name><name>puri</name>.<name>port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>authority</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s:%d"</expr></argument>, <argument><expr><name>authority</name></expr></argument>, <argument><expr><name><name>puri</name>.<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>real_server_uri</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s://%s"</expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>p_server_uri</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s://%s"</expr></argument>, <argument><expr><name><name>puri</name>.<name>scheme</name></name></expr></argument>, <argument><expr><name>authority</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>path</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>puri</name></expr></argument>, <argument><expr><name>APR_URI_UNP_OMITSITEPART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_req_make</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>req</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>,
<argument><expr><name>authority</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>add_forwarded_headers</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>PROXYREQ_REVERSE</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"X-Forwarded-For"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>buf</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"X-Forwarded-Host"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"X-Forwarded-Server"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>saves</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>add_header</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>saves</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pstream</name> = <name>stream</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>submit_stream</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_ngheader</name> *</type><name>hd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nghttp2_data_provider</name> *</type><name>pp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nghttp2_data_provider</name></type> <name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>may_have_request_body</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hd</name> = <call><name>h2_proxy_util_nghd_make_req</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>waiting_on_100</name></name> || <name><name>stream</name>-&gt;<name>waiting_on_ping</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>,
<argument><expr><name>APR_BUCKET_BUFF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>may_have_request_body</name> = <call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
|| (<name>status</name> == <name>APR_SUCCESS</name>
&amp;&amp; !<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>may_have_request_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>provider</name>.<name>source</name>.<name>fd</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>provider</name>.<name>source</name>.<name>ptr</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>provider</name>.<name>read_callback</name></name> = <name>stream_request_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pp</name> = &amp;<name>provider</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>nghttp2_submit_request</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>hd</name>-&gt;<name>nv</name></name></expr></argument>, <argument><expr><name><name>hd</name>-&gt;<name>nvlen</name></name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03363</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): submit %s%s -&gt; %d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>authority</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>id</name></name> = <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>state</name></name> = <name>H2_STREAM_ST_OPEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_add</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_STREAM_SUBMITTED</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>feed_brigade</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssize_t</name></type> <name>n</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>blen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>bdata</name></expr></argument>, <argument><expr>&amp;<name>blen</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>blen</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>n</name> = <call><name>nghttp2_session_mem_recv</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr>(const <name>uint8_t</name> *)<name>bdata</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): feeding %ld bytes -&gt; %ld"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>blen</name></expr></argument>, <argument><expr>(<name>long</name>)<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr>(<name>int</name>)<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>readlen</name> += <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; <name>blen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): fed %ld bytes of input to session"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>readlen</name> == 0 &amp;&amp; <name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_proxy_session_read</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>socket</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>save_timeout</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>block</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>socket</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>socket</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr>&amp;<name>save_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03379</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): unable to get conn socket"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>input</name></name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>block</name>? <name>APR_BLOCK_READ</name> : <name>APR_NONBLOCK_READ</name></expr></argument>,
<argument><expr>64 * 1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): read from conn"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>socket</name> &amp;&amp; <name>save_timeout</name> != -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>save_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>feed_brigade</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03380</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): read error"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_CONN_ERROR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_proxy_session_submit</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>int</name></type> <name>standalone</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>open_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>standalone</name></expr></argument>, <argument><expr>&amp;<name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03381</expr></argument>)</argument_list></call>
"process stream(%d): %s %s%s, original: %s"</expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>method</name></name></expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>authority</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>req</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>submit_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>stream_resume</name><parameter_list>(<param><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name> <init>= <expr><name><name>stream</name>-&gt;<name>session</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_stream(%s-%d): resuming"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>suspended</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_iq_remove</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>suspended</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_resume_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_STREAM_RESUMED</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>check_suspended</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>session</name>-&gt;<name>suspended</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>stream_id</name> = <name><name>session</name>-&gt;<name>suspended</name>-&gt;<name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>waiting_on_100</name></name> || <name><name>stream</name>-&gt;<name>waiting_on_ping</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>,
<argument><expr><name>APR_BUCKET_BUFF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>input</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>stream_resume</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_suspended</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03382</expr></argument>)</argument_list></call> "h2_proxy_stream(%s-%d): check input"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_resume</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_suspended</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>h2_proxy_iq_remove</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>suspended</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>check_suspended</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></else></if>
}</block></for>
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_shutdown</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>reason</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>msg</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>err</name> &amp;&amp; <name>reason</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>nghttp2_submit_goaway</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>reason</name></expr></argument>, <argument><expr>(<name>uint8_t</name>*)<name>err</name></expr></argument>, <argument><expr><name>err</name>? <call><name>strlen</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call>:0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_LOCAL_GOAWAY</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>StateNames</name><index>[]</index></name> <init>= <expr><block>{
<expr>"INIT"</expr>,
<expr>"DONE"</expr>,
<expr>"IDLE"</expr>,
<expr>"BUSY"</expr>,
<expr>"WAIT"</expr>,
<expr>"LSHUTDOWN"</expr>,
<expr>"RSHUTDOWN"</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>state_name</name><parameter_list>(<param><decl><type><name>h2_proxys_state</name></type> <name>state</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>state</name> &gt;= (<sizeof>sizeof<argument_list>(<argument><expr><name>StateNames</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>StateNames</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof>)</expr>)</condition><then> <block>{
<return>return <expr>"unknown"</expr>;</return>
}</block></then></if>
<return>return <expr><name><name>StateNames</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_accepting_streams</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_IDLE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_BUSY</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_WAIT</name></expr>:
<return>return <expr>1</expr>;</return>
</case><default>default:
<return>return <expr>0</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>transit</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>,
<param><decl><type><name>h2_proxys_state</name></type> <name>nstate</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03345</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): transit [%s] -- %s --&gt; [%s]"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr><call><name>state_name</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>action</name></expr></argument>, <argument><expr><call><name>state_name</name><argument_list>(<argument><expr><name>nstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>session</name>-&gt;<name>state</name></name> = <name>nstate</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_init</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_INIT</name></expr>:
<if>if <condition>(<expr><call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"init"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"init"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_local_goaway</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_ST_IDLE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_REMOTE_SHUTDOWN</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"local goaway"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"local goaway"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_remote_goaway</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_REMOTE_SHUTDOWN</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_ST_IDLE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"remote goaway"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"remote goaway"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_REMOTE_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_conn_error</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_INIT</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_DONE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"conn error"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): conn error -&gt; shutdown"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_proto_error</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_DONE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"proto error"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): proto error -&gt; shutdown"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_conn_timeout</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"conn timeout"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"conn timeout"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_no_io</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_BUSY</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_REMOTE_SHUTDOWN</name></expr>:
<if>if <condition>(<expr><call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>is_accepting_streams</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_stream_submitted</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_IDLE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_WAIT</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"stream submitted"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_stream_done</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
<expr_stmt><expr><name>stream</name> = <call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>touched</name> <init>= <expr>(<name><name>stream</name>-&gt;<name>data_sent</name></name> ||
<name>stream_id</name> &lt;= <name><name>session</name>-&gt;<name>last_stream_id</name></name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr>(<name><name>stream</name>-&gt;<name>error_code</name></name> == 0)? <name>APR_SUCCESS</name> : <name>APR_EINVAL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03364</expr></argument>)</argument_list></call>
"h2_proxy_sesssion(%s): stream(%d) closed "
"(touched=%d, error=%d)"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>touched</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = 500</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>data_received</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>h2_proxy_stream_end_headers_out</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>data_received</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>stream</name>-&gt;<name>state</name></name> = <name>H2_STREAM_ST_CLOSED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_remove</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_iq_remove</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>suspended</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>session</name>-&gt;<name>done</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>session</name>-&gt;<name>done</name></name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_stream_resumed</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_WAIT</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"stream resumed"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_data_read</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_IDLE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_WAIT</name></expr>:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"data read"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_ngh2_done</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_DONE</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"nghttp2 done"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_pre_close</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_DONE</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_event</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_proxys_event_t</name></type> <name>ev</name></decl></param>,
<param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>ev</name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_EV_INIT</name></expr>:
<expr_stmt><expr><call><name>ev_init</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_LOCAL_GOAWAY</name></expr>:
<expr_stmt><expr><call><name>ev_local_goaway</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_REMOTE_GOAWAY</name></expr>:
<expr_stmt><expr><call><name>ev_remote_goaway</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_CONN_ERROR</name></expr>:
<expr_stmt><expr><call><name>ev_conn_error</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_PROTO_ERROR</name></expr>:
<expr_stmt><expr><call><name>ev_proto_error</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_CONN_TIMEOUT</name></expr>:
<expr_stmt><expr><call><name>ev_conn_timeout</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_NO_IO</name></expr>:
<expr_stmt><expr><call><name>ev_no_io</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_STREAM_SUBMITTED</name></expr>:
<expr_stmt><expr><call><name>ev_stream_submitted</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_STREAM_DONE</name></expr>:
<expr_stmt><expr><call><name>ev_stream_done</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_STREAM_RESUMED</name></expr>:
<expr_stmt><expr><call><name>ev_stream_resumed</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_DATA_READ</name></expr>:
<expr_stmt><expr><call><name>ev_data_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_NGH2_DONE</name></expr>:
<expr_stmt><expr><call><name>ev_ngh2_done</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_EV_PRE_CLOSE</name></expr>:
<expr_stmt><expr><call><name>ev_pre_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): unknown event %d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>send_loop</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> &lt; 0 &amp;&amp; <call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): write, rv=%d"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_CONN_ERROR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></while>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_proxy_session_process</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_written</name> <init>= <expr>0</expr></init>, <name>have_read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): process"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>run_loop</name>:</label>
<switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
<case>case <expr><name>H2_PROXYS_ST_INIT</name></expr>:
<expr_stmt><expr><name>status</name> = <call><name>session_start</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_INIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>run_loop</name>;</goto>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_CONN_ERROR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_ST_BUSY</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_LOCAL_SHUTDOWN</name></expr>:
</case><case>case <expr><name>H2_PROXYS_ST_REMOTE_SHUTDOWN</name></expr>:
<expr_stmt><expr><name>have_written</name> = <call><name>send_loop</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>nghttp2_session_want_read</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_proxy_session_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>have_read</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>have_written</name> &amp;&amp; !<name>have_read</name>
&amp;&amp; !<call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_NO_IO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>run_loop</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_ST_WAIT</name></expr>:
<if>if <condition>(<expr><call><name>check_suspended</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>session</name>-&gt;<name>wait_timeout</name></name> &lt; 25</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>wait_timeout</name></name> = 25</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>wait_timeout</name></name> = <call><name>H2MIN</name><argument_list>(<argument><expr><call><name>apr_time_from_msec</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>2*<name><name>session</name>-&gt;<name>wait_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_proxy_session_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>wait_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03365</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): WAIT read, timeout=%fms"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>float</name>)<name><name>session</name>-&gt;<name>wait_timeout</name></name>/1000.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>have_read</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_DATA_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"wait cycle"</expr></argument>, <argument><expr><name>H2_PROXYS_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_ST_IDLE</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_PROXYS_ST_DONE</name></expr>:
<return>return <expr><name>APR_EOF</name></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03346</expr></argument>)</argument_list></call>"h2_proxy_session(%s): unknown state %d"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_PROTO_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>have_read</name> || <name>have_written</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>session</name>-&gt;<name>wait_timeout</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>nghttp2_session_want_read</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_PROXYS_EV_NGH2_DONE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_request_done</name> *</type><name>done</name></decl>;</decl_stmt>
}</block></struct></type> <name>cleanup_iter_ctx</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cancel_iter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>udata</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cleanup_iter_ctx</name> *</type><name>ctx</name> <init>= <expr><name>udata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,
<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_proxy_session_cancel_all</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cleanup_iter_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>done</name></name> = <name><name>session</name>-&gt;<name>done</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03366</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): cancel %d streams"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<call><name>h2_proxy_ihash_count</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_iter</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>cancel_iter</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>done_iter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>udata</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cleanup_iter_ctx</name> *</type><name>ctx</name> <init>= <expr><name>udata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>touched</name> <init>= <expr>(<name><name>stream</name>-&gt;<name>data_sent</name></name> ||
<name><name>stream</name>-&gt;<name>id</name></name> &lt;= <name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>last_stream_id</name></name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name><name>ctx</name>-&gt;<name>done</name></name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>APR_ECONNABORTED</name></expr></argument>, <argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_proxy_session_cleanup</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>h2_proxy_request_done</name> *</type><name>done</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>cleanup_iter_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>done</name></name> = <name>done</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03519</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): terminated, %d streams unfinished"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<call><name>h2_proxy_ihash_count</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_iter</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>done_iter</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_clear</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ping_arrived_iter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>udata</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>waiting_on_ping</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>stream</name>-&gt;<name>waiting_on_ping</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>stream_resume</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ping_arrived</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03470</expr></argument>)</argument_list></call>
"h2_proxy_session(%s): ping arrived, unblocking streams"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_iter</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>ping_arrived_iter</name></expr></argument>, <argument><expr>&amp;<name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>updated</name></decl>;</decl_stmt>
}</block></struct></type> <name>win_update_ctx</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>win_update_iter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>udata</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>win_update_ctx</name> *</type><name>ctx</name> <init>= <expr><name>udata</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_proxy_stream</name> *</type><name>stream</name> <init>= <expr><name>val</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>r</name></name> &amp;&amp; <name><name>stream</name>-&gt;<name>r</name>-&gt;<name>connection</name></name> == <name><name>ctx</name>-&gt;<name>c</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s-%d): win_update %ld bytes"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_consume</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>updated</name></name> = 1</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_proxy_session_update_window</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>win_update_ctx</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>bytes</name></name> = <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>updated</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_proxy_ihash_iter</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>streams</name></name></expr></argument>, <argument><expr><name>win_update_iter</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>.<name>updated</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_proxy_session(%s): win_update conn %ld bytes"</expr></argument>,
<argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>nghttp2_session_consume_connection</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr>(<name>size_t</name>)<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
</unit>
