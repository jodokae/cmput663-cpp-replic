<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/loggers/mod_log_config.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_anylock.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_log_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIMITS_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOG_FORMAT</name></cpp:macro> <cpp:value>"%h %l %u %t \"%r\" %&gt;s %b"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>log_config_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>xfer_flags</name> <init>= <expr>(<name>APR_WRITE</name> | <name>APR_APPEND</name> | <name>APR_CREATE</name> | <name>APR_LARGEFILE</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_fileperms_t</name></type> <name>xfer_perms</name> <init>= <expr><name>APR_OS_DEFAULT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>log_hash</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_default_log_writer</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>strs</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>strl</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nelts</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_buffered_log_writer</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>strs</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>strl</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nelts</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> *</type><name>ap_default_log_writer_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> *</type><name>ap_buffered_log_writer_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ap_log_writer_init</name> *</type><name>ap_log_set_writer_init</name><parameter_list>(<param><decl><type><name>ap_log_writer_init</name> *</type><name>handle</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ap_log_writer</name> *</type><name>ap_log_set_writer</name><parameter_list>(<param><decl><type><name>ap_log_writer</name> *</type><name>handle</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_log_writer</name> *</type><name>log_writer</name> <init>= <expr><name>ap_default_log_writer</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_log_writer_init</name> *</type><name>log_writer_init</name> <init>= <expr><name>ap_default_log_writer_init</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>buffered_logs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>all_buffered_logs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PIPE_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUFSIZE</name></cpp:macro> <cpp:value>PIPE_BUF</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_BUFSIZE</name></cpp:macro> <cpp:value>(512)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>default_format_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>default_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>config_logs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>server_config_logs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>formats</name></decl>;</decl_stmt>
}</block></struct></type> <name>multi_log_state</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>outcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>outbuf</name><index>[<expr><name>LOG_BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_anylock_t</name></type> <name>mutex</name></decl>;</decl_stmt>
}</block></struct></type> <name>buffered_log</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>log_writer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>condition_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inherit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>condition_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type><name>directive</name></decl>;</decl_stmt>
}</block></struct></type> <name>config_log_state</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_end_time</name></decl>;</decl_stmt>
}</block></struct></type> <name>log_request_state</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_log_handler_fn_t</name> *</type><name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>condition_sense</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>conditions</name></decl>;</decl_stmt>
}</block></struct></type> <name>log_format_item</name>;</typedef>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>pfmt</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>i</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"-"</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>constant_item</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>char</name> *</type><name>stuff</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>stuff</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_remote_host</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_remote_host</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr><name>REMOTE_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_remote_address</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>a</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"c"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>client_ip</name></name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_local_address</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_ip</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_remote_logname</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_remote_logname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_remote_user</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>rvalue</name> <init>= <expr><name><name>r</name>-&gt;<name>user</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rvalue</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rvalue</name> = "-"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>rvalue</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rvalue</name> = "\"\""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rvalue</name> = <call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>rvalue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>rvalue</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_line</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>password</name></name>)
? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>assbackwards</name></name> ? <name>NULL</name> : " "</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: <name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_file</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_uri</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_method</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_log_id</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>a</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"c"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>log_id</name></name> ? <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>log_id</name></name> : "-"</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name><name>r</name>-&gt;<name>log_id</name></name> ? <name><name>r</name>-&gt;<name>log_id</name></name> : "-"</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_protocol</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_query</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name><name>r</name>-&gt;<name>args</name></name>) ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"?"</expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: ""</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_status</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>pfmt</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>clf_log_bytes_sent</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>sent_bodyct</name></name> || !<name><name>r</name>-&gt;<name>bytes_sent</name></name></expr>)</condition><then> <block>{
<return>return <expr>"-"</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>bytes_sent</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_bytes_sent</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>sent_bodyct</name></name> || !<name><name>r</name>-&gt;<name>bytes_sent</name></name></expr>)</condition><then> <block>{
<return>return <expr>"0"</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>bytes_sent</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_header_in</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_trailer_in</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>char</name> *</type><name>find_multiple_headers</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_table_t</name> *</type><name>table</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>t_elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>t_end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<struct>struct <name>sle</name> <block>{
<decl_stmt><decl><type>struct <name>sle</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
}</block> <decl>*<name>result_list</name></decl>, *<decl><type ref="prev"/><name>rp</name></decl>;</struct>
<expr_stmt><expr><name>elts</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>elts</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>t_elt</name> = (const <name>apr_table_entry_t</name> *)<name><name>elts</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>t_end</name> = <name>t_elt</name> + <name><name>elts</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>result_list</name> = <name>rp</name> = <name>NULL</name></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>t_elt</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>result_list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result_list</name> = <name>rp</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rp</name> = <name><name>rp</name>-&gt;<name>next</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += 2</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>value</name></name> = <name><name>t_elt</name>-&gt;<name>val</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>rp</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> += <name><name>rp</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>t_elt</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>t_elt</name> &lt; <name>t_end</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>result_list</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>result</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name> <init>= <expr><name>result</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rp</name> = <name>result_list</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rp</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>rp</name> != <name>result_list</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cp</name>++ = ','</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name>++ = ' '</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>rp</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>rp</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cp</name> += <name><name>rp</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> = <name><name>rp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>cp</name> = '\0'</expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_header_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"Content-type"</expr></argument>)</argument_list></call> &amp;&amp; <name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name> = <call><name>ap_field_noparam</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cp</name> = <call><name>find_multiple_headers</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_trailer_out</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>trailers_out</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_note</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_env_var</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_cookie</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cookies_entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>cookies_entry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cookie</name></decl>, *<decl><type ref="prev"/><name>last1</name></decl>, *<decl><type ref="prev"/><name>last2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cookies</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cookies_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>cookie</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>cookies</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr>&amp;<name>last1</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_strtok</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr>&amp;<name>last2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name> <init>= <expr><name>last2</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>name</name> &amp;&amp; *<name>name</name> &amp;&amp; <name>value</name> &amp;&amp; *<name>value</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>last</name> <init>= <expr><name>value</name> - 2</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> += <call><name>strspn</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>" \t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>last</name> &gt;= <name>name</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>*<name>last</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>--<name>last</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>last</name> = <name>last1</name> - (*<name>last1</name> ? 2 : 1)</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> += <call><name>strspn</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>" \t"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>last</name> &gt;= <name>value</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>*<name>last</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>--<name>last</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>cookies</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_time_custom</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>,
<param><decl><type><name>apr_time_exp_t</name> *</type><name>xt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>retcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tstr</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_strftime</name><argument_list>(<argument><expr><name>tstr</name></expr></argument>, <argument><expr>&amp;<name>retcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tstr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>xt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>tstr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_REQUEST_TIME_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>timestr</name><index>[<expr><name>DEFAULT_REQUEST_TIME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>t_validate</name></decl>;</decl_stmt>
}</block></struct></type> <name>cached_request_time</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_CUSTOM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_CLF</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_ABS_SEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_ABS_MSEC</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_ABS_USEC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_ABS_MSEC_FRAC</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_FMT_ABS_USEC_FRAC</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_CACHE_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_CACHE_MASK</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>cached_request_time</name></type> <name><name>request_time_cache</name><index>[<expr><name>TIME_CACHE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_time_t</name></type> <name>get_request_end_time</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>log_request_state</name> *</type><name>state</name> <init>= <expr>(<name>log_request_state</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>state</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>state</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_request_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>log_config_module</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>state</name>-&gt;<name>request_end_time</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>state</name>-&gt;<name>request_end_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>state</name>-&gt;<name>request_end_time</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_time</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>xt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_time</name> <init>= <expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fmt_type</name> <init>= <expr><name>TIME_FMT_CUSTOM</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fmt</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>fmt</name> &amp;&amp; *<name>fmt</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"begin"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt</name> += 5</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_CLF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>fmt</name> == ':'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <name>fmt</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"end"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt</name> += 3</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>request_time</name> = <call><name>get_request_end_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_CLF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>fmt</name> == ':'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>a</name> = <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name>request_time</name> = <call><name>get_request_end_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"msec"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt</name> += 4</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_ABS_MSEC</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"_frac"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_ABS_MSEC_FRAC</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"usec"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt</name> += 4</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_ABS_USEC</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"_frac"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_ABS_USEC_FRAC</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr>"sec"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_ABS_SEC</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!*<name>fmt</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_CLF</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>fmt_type</name> = <name>TIME_FMT_CLF</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>fmt_type</name> &gt;= <name>TIME_FMT_ABS_SEC</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>buf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>fmt_type</name></expr>)</condition> <block>{
<case>case <expr><name>TIME_FMT_ABS_SEC</name></expr>:
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr>"%" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>TIME_FMT_ABS_MSEC</name></expr>:
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr>"%" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><call><name>apr_time_as_msec</name><argument_list>(<argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>TIME_FMT_ABS_USEC</name></expr>:
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr>"%" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>TIME_FMT_ABS_MSEC_FRAC</name></expr>:
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr>"%03" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><call><name>apr_time_msec</name><argument_list>(<argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>TIME_FMT_ABS_USEC_FRAC</name></expr>:
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr>"%06" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><call><name>apr_time_usec</name><argument_list>(<argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr>"-"</expr>;</return>
</default>}</block></switch>
<return>return <expr><name>buf</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>fmt_type</name> == <name>TIME_FMT_CUSTOM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_explode_recent_localtime</name><argument_list>(<argument><expr>&amp;<name>xt</name></expr></argument>, <argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>log_request_time_custom</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr>&amp;<name>xt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>cached_request_time</name>*</type> <name>cached_time</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>cached_time</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>t_seconds</name> <init>= <expr>(<name>unsigned</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><name>t_seconds</name> &amp; <name>TIME_CACHE_MASK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>cached_time</name> = <name><name>request_time_cache</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>t_seconds</name> != <name><name>cached_time</name>-&gt;<name>t</name></name>) ||
(<name>t_seconds</name> != <name><name>cached_time</name>-&gt;<name>t_validate</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timz</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_explode_recent_localtime</name><argument_list>(<argument><expr>&amp;<name>xt</name></expr></argument>, <argument><expr><name>request_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timz</name> = <name><name>xt</name>.<name>tm_gmtoff</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timz</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>timz</name> = -<name>timz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sign</name> = '-'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sign</name> = '+'</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>cached_time</name>-&gt;<name>t</name></name> = <name>t_seconds</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>cached_time</name>-&gt;<name>timestr</name></name></expr></argument>, <argument><expr><name>DEFAULT_REQUEST_TIME_SIZE</name></expr></argument>,
<argument><expr>"[%02d/%s/%d:%02d:%02d:%02d %c%.2d%.2d]"</expr></argument>,
<argument><expr><name><name>xt</name>.<name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>apr_month_snames</name><index>[<expr><name><name>xt</name>.<name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>xt</name>.<name>tm_year</name></name>+1900</expr></argument>, <argument><expr><name><name>xt</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>xt</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>xt</name>.<name>tm_sec</name></name></expr></argument>,
<argument><expr><name>sign</name></expr></argument>, <argument><expr><name>timz</name> / (60*60)</expr></argument>, <argument><expr>(<name>timz</name> % (60*60)) / 60</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cached_time</name>-&gt;<name>t_validate</name></name> = <name>t_seconds</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>request_time_cache</name><index>[<expr><name>i</name></expr>]</index></name> = *<name>cached_time</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>cached_time</name>-&gt;<name>timestr</name></name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_duration_microseconds</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%" <name>APR_TIME_T_FMT</name></expr></argument>,
<argument><expr>(<call><name>get_request_end_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> - <name><name>r</name>-&gt;<name>request_time</name></name>)</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_request_duration_scaled</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>duration</name> <init>= <expr><call><name>get_request_end_time</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> - <name><name>r</name>-&gt;<name>request_time</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>a</name> == '\0' || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>duration</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"ms"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>duration</name> = <call><name>apr_time_as_msec</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"us"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<return>return <expr><name>a</name></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%" <name>APR_TIME_T_FMT</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_virtual_host</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_server_port</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>a</name> == '\0' || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"canonical"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> ? <name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name> : <call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"remote"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>useragent_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"local"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>a</name></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>port</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_server_name</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_pid_tid</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>*<name>a</name> == '\0' || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"pid"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_append_pid</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"tid"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>"hextid"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_os_thread_t</name></type> <name>tid</name> <init>= <expr><call><name>apr_os_thread_current</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &gt; 1 || (<name>APR_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APR_MINOR_VERSION</name> &gt;= 2)</expr></cpp:if>
<argument><expr>*<name>a</name> == 'h' ? "%pt" : "%pT"</expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<argument><expr>"%pT"</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_connection_status</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
<return>return <expr>"X"</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> == <name>AP_CONN_KEEPALIVE</name> &amp;&amp;
(!<name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name> ||
(<name><name>r</name>-&gt;<name>server</name>-&gt;<name>keep_alive_max</name></name> - <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name>) &gt; 0)</expr>)</condition><then> <block>{
<return>return <expr>"+"</expr>;</return>
}</block></then></if>
<return>return <expr>"-"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_requests_on_connection</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name> ? <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name> - 1 : 0</expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_log_misc_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>log_format_item</name> *</type><name>it</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name>constant_item</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>conditions</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = *<name>sa</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name> &amp;&amp; *<name>s</name> != '%'</expr>)</condition> <block>{
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name> - *<name>sa</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name><name>it</name>-&gt;<name>arg</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = *<name>sa</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name> &amp;&amp; *<name>s</name> != '%'</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>s</name> != '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>d</name>++ = *<name>s</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<switch>switch <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<case>case <expr>'\\'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\\'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'r'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\r'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\n'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr>*<name>d</name>++ = '\t'</expr>;</expr_stmt>
<expr_stmt><expr><name>s</name>++</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>d</name>++ = '\\'</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></else></if>
}</block></while>
<expr_stmt><expr>*<name>d</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>parse_log_item</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>log_format_item</name> *</type><name>it</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr>*<name>sa</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_log_handler</name> *</type><name>handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>s</name> != '%'</expr>)</condition><then> <block>{
<return>return <expr><call><name>parse_log_misc_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>it</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>condition_sense</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>conditions</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>s</name> == '%'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = "%"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name>constant_item</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>sa</name> = ++<name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>want_orig</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = ""</expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<case>case <expr>'!'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>condition_sense</name></name> = !<name><name>it</name>-&gt;<name>condition_sense</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'&lt;'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>want_orig</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'&gt;'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>want_orig</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>','</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'{'</expr>:
<expr_stmt><expr>++<name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>it</name>-&gt;<name>arg</name></name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>'}'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'0'</expr>:
</case><case>case <expr>'1'</expr>:
</case><case>case <expr>'2'</expr>:
</case><case>case <expr>'3'</expr>:
</case><case>case <expr>'4'</expr>:
</case><case>case <expr>'5'</expr>:
</case><case>case <expr>'6'</expr>:
</case><case>case <expr>'7'</expr>:
</case><case>case <expr>'8'</expr>:
</case><case>case <expr>'9'</expr>:
<expr_stmt><expr><name>i</name> = *<name>s</name> - '0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*++<name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>i</name> = <name>i</name> * 10 + (*<name>s</name>) - '0'</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name><name>it</name>-&gt;<name>conditions</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>it</name>-&gt;<name>conditions</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*(<name>int</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>it</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call> = <name>i</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr>*<name>s</name> == '^' &amp;&amp; *(<name>s</name>+1) &amp;&amp; *(<name>s</name>+2)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>handler</name> = (<name>ap_log_handler</name> *)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>log_hash</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>handler</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> += 3</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>handler</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>handler</name> = (<name>ap_log_handler</name> *)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>log_hash</name></expr></argument>, <argument><expr><name>s</name>++</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>handler</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>dummy</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dummy</name><index>[<expr>0</expr>]</index></name> = <name><name>s</name><index>[<expr>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dummy</name><index>[<expr>1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Unrecognized LogFormat directive %"</expr></argument>,
<argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>it</name>-&gt;<name>func</name></name> = <name><name>handler</name>-&gt;<name>func</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>it</name>-&gt;<name>want_orig</name></name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>it</name>-&gt;<name>want_orig</name></name> = <name><name>handler</name>-&gt;<name>want_orig_default</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>sa</name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></while>
<return>return <expr>"Ran off end of LogFormat parsing args to some directive"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>parse_log_string</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>a</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>30</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_format_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>res</name></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>s</name></expr>)</condition> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>parse_log_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>log_format_item</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name>s</name> = <name>APR_EOL_STR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>parse_log_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>log_format_item</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>process_item</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>orig</name></decl></param>,
<param><decl><type><name>log_format_item</name> *</type><name>item</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>item</name>-&gt;<name>conditions</name></name> &amp;&amp; <name><name>item</name>-&gt;<name>conditions</name>-&gt;<name>nelts</name></name> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>conds</name> <init>= <expr>(<name>int</name> *) <name><name>item</name>-&gt;<name>conditions</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_list</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>item</name>-&gt;<name>conditions</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name><name>conds</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>in_list</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>(<name><name>item</name>-&gt;<name>condition_sense</name></name> &amp;&amp; <name>in_list</name>)
|| (!<name><name>item</name>-&gt;<name>condition_sense</name></name> &amp;&amp; !<name>in_list</name>)</expr>)</condition><then> <block>{
<return>return <expr>"-"</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>cp</name> = <call>(*<name><name>item</name>-&gt;<name>func</name></name>) <argument_list>(<argument><expr><name><name>item</name>-&gt;<name>want_orig</name></name> ? <name>orig</name> : <name>r</name></expr></argument>, <argument><expr><name><name>item</name>-&gt;<name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>cp</name> ? <name>cp</name> : "-"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>flush_log</name><parameter_list>(<param><decl><type><name>buffered_log</name> *</type><name>buf</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>buf</name>-&gt;<name>outcnt</name></name> &amp;&amp; <name><name>buf</name>-&gt;<name>handle</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_write</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>buf</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr>&amp;<name><name>buf</name>-&gt;<name>outcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outcnt</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>config_log_transaction</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>config_log_state</name> *</type><name>cls</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>default_format</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>log_format_item</name> *</type><name>items</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>strs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>strl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>orig</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>envar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>fname</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>condition_var</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>envar</name> = <name><name>cls</name>-&gt;<name>condition_var</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>envar</name> != '!'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>envar</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>&amp;<name><name>envar</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cls</name>-&gt;<name>condition_expr</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>condition_expr</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00644</expr></argument>)</argument_list></call>
"Error evaluating log condition: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rc</name> &lt;= 0</expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
}</block></then></if></else></if>
<expr_stmt><expr><name>format</name> = <name><name>cls</name>-&gt;<name>format</name></name> ? <name><name>cls</name>-&gt;<name>format</name></name> : <name>default_format</name></expr>;</expr_stmt>
<expr_stmt><expr><name>strs</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * (<name><name>format</name>-&gt;<name>nelts</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>strl</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> * (<name><name>format</name>-&gt;<name>nelts</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>items</name> = (<name>log_format_item</name> *) <name><name>format</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>orig</name> = <name>r</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>orig</name>-&gt;<name>prev</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>orig</name> = <name><name>orig</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>r</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>format</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>process_item</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>orig</name></expr></argument>, <argument><expr>&amp;<name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>format</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>len</name> += <name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>log_writer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00645</expr></argument>)</argument_list></call>
"log writer isn't correctly setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>log_writer</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>log_writer</name></name></expr></argument>, <argument><expr><name>strs</name></expr></argument>, <argument><expr><name>strl</name></expr></argument>, <argument><expr><name><name>format</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00646</expr></argument>)</argument_list></call>
"Error writing to %s"</expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>multi_log_transaction</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>clsarray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>log_request_state</name> *</type><name>state</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_request_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>log_config_module</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clsarray</name> = (<name>config_log_state</name> *) <name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>cls</name> <init>= <expr>&amp;<name><name>clsarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>config_log_transaction</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name><name>mls</name>-&gt;<name>default_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name><name>mls</name>-&gt;<name>server_config_logs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clsarray</name> = (<name>config_log_state</name> *) <name><name>mls</name>-&gt;<name>server_config_logs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mls</name>-&gt;<name>server_config_logs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>cls</name> <init>= <expr>&amp;<name><name>clsarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>inherit</name></name> || !<name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>config_log_transaction</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name><name>mls</name>-&gt;<name>default_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>make_config_log_state</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mls</name> = (<name>multi_log_state</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>multi_log_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mls</name>-&gt;<name>config_logs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>config_log_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mls</name>-&gt;<name>default_format_string</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mls</name>-&gt;<name>default_format</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mls</name>-&gt;<name>server_config_logs</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mls</name>-&gt;<name>formats</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>mls</name>-&gt;<name>formats</name></name></expr></argument>, <argument><expr>"CLF"</expr></argument>, <argument><expr><name>DEFAULT_LOG_FORMAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mls</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_config_log_state</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>base</name> <init>= <expr>(<name>multi_log_state</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>add</name> <init>= <expr>(<name>multi_log_state</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>add</name>-&gt;<name>server_config_logs</name></name> = <name><name>base</name>-&gt;<name>config_logs</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>add</name>-&gt;<name>default_format</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>add</name>-&gt;<name>default_format_string</name></name> = <name><name>base</name>-&gt;<name>default_format_string</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>add</name>-&gt;<name>default_format</name></name> = <name><name>base</name>-&gt;<name>default_format</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>add</name>-&gt;<name>formats</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>formats</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>formats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>add</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>log_format</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>name</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>parse_log_string</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr>&amp;<name>err_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_string</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>mls</name>-&gt;<name>formats</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>mls</name>-&gt;<name>default_format_string</name></name> = <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mls</name>-&gt;<name>default_format</name></name> = <call><name>parse_log_string</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr>&amp;<name>err_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>err_string</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_custom_log</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envclause</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>cls</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cls</name> = (<name>config_log_state</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>mls</name>-&gt;<name>config_logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>condition_var</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>condition_expr</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>envclause</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>envclause</name></expr></argument>, <argument><expr>"env="</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>envclause</name><index>[<expr>4</expr>]</index></name> == '\0')
|| ((<name><name>envclause</name><index>[<expr>4</expr>]</index></name> == '!') &amp;&amp; (<name><name>envclause</name><index>[<expr>5</expr>]</index></name> == '\0'))</expr>)</condition><then> <block>{
<return>return <expr>"missing environment variable name"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>condition_var</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>envclause</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>envclause</name></expr></argument>, <argument><expr>"expr="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>envclause</name><index>[<expr>5</expr>]</index></name> == '\0')</expr>)</condition><then>
<return>return <expr>"missing condition"</expr>;</return></then></if>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>condition_expr</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name><name>envclause</name><index>[<expr>5</expr>]</index></name></expr></argument>,
<argument><expr><name>AP_EXPR_FLAG_DONT_VARY</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
}</block></then> <else>else <block>{
<return>return <expr>"error in condition clause"</expr>;</return>
}</block></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>fname</name></name> = <name>fn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>format_string</name></name> = <name>fmt</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>directive</name></name> = <name><name>cmd</name>-&gt;<name>directive</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fmt</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cls</name>-&gt;<name>format</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cls</name>-&gt;<name>format</name></name> = <call><name>parse_log_string</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr>&amp;<name>err_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>log_writer</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>err_string</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_global_log</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envclause</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>clsarray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>cls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>add_custom_log</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>envclause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clsarray</name> = (<name>config_log_state</name>*)<name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>cls</name> = &amp;<name><name>clsarray</name><index>[<expr><name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name>-1</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>inherit</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_transfer_log</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_custom_log</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_buffered_logs_on</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>buffered_logs</name> = <name>flag</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buffered_logs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_set_writer_init</name><argument_list>(<argument><expr><name>ap_buffered_log_writer_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_set_writer</name><argument_list>(<argument><expr><name>ap_buffered_log_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_set_writer_init</name><argument_list>(<argument><expr><name>ap_default_log_writer_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_set_writer</name><argument_list>(<argument><expr><name>ap_default_log_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>config_log_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"CustomLog"</expr></argument>, <argument><expr><name>add_custom_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a file name, a custom log format string or format name, "
"and an optional \"env=\" or \"expr=\" clause (see docs)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"GlobalLog"</expr></argument>, <argument><expr><name>add_global_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Same as CustomLog, but forces virtualhosts to inherit the log"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"TransferLog"</expr></argument>, <argument><expr><name>set_transfer_log</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the filename of the access log"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"LogFormat"</expr></argument>, <argument><expr><name>log_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a log format string (see docs) and an optional format name"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"BufferedLogs"</expr></argument>, <argument><expr><name>set_buffered_logs_on</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Enable Buffered Logging (experimental)"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>config_log_state</name> *</type><name>open_config_log</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>config_log_state</name> *</type><name>cls</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>default_format</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>log_writer</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>cls</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>fname</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>cls</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>log_writer</name></name> = <call><name>log_writer_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>log_writer</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<return>return <expr><name>cls</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>open_multi_logs</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>clsarray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dummy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>format</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mls</name>-&gt;<name>default_format_string</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>format</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>mls</name>-&gt;<name>formats</name></name></expr></argument>, <argument><expr><name><name>mls</name>-&gt;<name>default_format_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mls</name>-&gt;<name>default_format</name></name> = <call><name>parse_log_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>mls</name>-&gt;<name>default_format</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mls</name>-&gt;<name>default_format</name></name> = <call><name>parse_log_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DEFAULT_LOG_FORMAT</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clsarray</name> = (<name>config_log_state</name> *) <name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>cls</name> <init>= <expr>&amp;<name><name>clsarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>format_string</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>format</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>mls</name>-&gt;<name>formats</name></name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>format_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cls</name>-&gt;<name>format</name></name> = <call><name>parse_log_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>open_config_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name><name>mls</name>-&gt;<name>default_format</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr><name><name>mls</name>-&gt;<name>server_config_logs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clsarray</name> = (<name>config_log_state</name> *) <name><name>mls</name>-&gt;<name>server_config_logs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mls</name>-&gt;<name>server_config_logs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>cls</name> <init>= <expr>&amp;<name><name>clsarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cls</name>-&gt;<name>format_string</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>format</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>mls</name>-&gt;<name>formats</name></name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>format_string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cls</name>-&gt;<name>format</name></name> = <call><name>parse_log_string</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr>&amp;<name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>open_config_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>, <argument><expr><name><name>mls</name>-&gt;<name>default_format</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then></if></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>flush_all_logs</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>log_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>clsarray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buffered_log</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>buffered_logs</name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<for>for (<init>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>mls</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_list</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mls</name>-&gt;<name>config_logs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>log_list</name> = <name><name>mls</name>-&gt;<name>config_logs</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>mls</name>-&gt;<name>server_config_logs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>log_list</name> = <name><name>mls</name>-&gt;<name>server_config_logs</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>log_list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clsarray</name> = (<name>config_log_state</name> *) <name><name>log_list</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>log_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>buf</name> = <name><name>clsarray</name><index>[<expr><name>i</name></expr>]</index></name>.<name>log_writer</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>flush_log</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>init_config_log</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pc</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pt</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>buffered_logs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>all_buffered_logs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffered_log</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>open_multi_logs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</init> <condition><expr>(<name>res</name> == <name>OK</name>) &amp;&amp; <name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>res</name> = <call><name>open_multi_logs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_child</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mpm_threads</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_THREADS</name></expr></argument>, <argument><expr>&amp;<name>mpm_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>buffered_logs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buffered_log</name> **</type><name>array</name> <init>= <expr>(<name>buffered_log</name> **)<name><name>all_buffered_logs</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>flush_all_logs</name></expr></argument>, <argument><expr><name>flush_all_logs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>all_buffered_logs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>buffered_log</name> *</type><name>this</name> <init>= <expr><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>mpm_threads</name> &gt; 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>this</name>-&gt;<name>mutex</name>.<name>type</name></name> = <name>apr_anylock_threadmutex</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>this</name>-&gt;<name>mutex</name>.<name>lock</name>.<name>tm</name></name></expr></argument>,
<argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00647</expr></argument>)</argument_list></call>
"could not initialize buffered log mutex, "
"transfer log may become corrupted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>this</name>-&gt;<name>mutex</name>.<name>type</name></name> = <name>apr_anylock_none</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<expr_stmt><expr><name><name>this</name>-&gt;<name>mutex</name>.<name>type</name></name> = <name>apr_anylock_none</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_register_log_handler</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>tag</name></decl></param>,
<param><decl><type><name>ap_log_handler_fn_t</name> *</type><name>handler</name></decl></param>, <param><decl><type><name>int</name></type> <name>def</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_log_handler</name> *</type><name>log_struct</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>log_struct</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>log_struct</name>-&gt;<name>func</name></name> = <name>handler</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>log_struct</name>-&gt;<name>want_orig_default</name></name> = <name>def</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>log_hash</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(const <name>void</name> *)<name>log_struct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_log_writer_init</name> *</type><name>ap_log_set_writer_init</name><parameter_list>(<param><decl><type><name>ap_log_writer_init</name> *</type><name>handle</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_log_writer_init</name> *</type><name>old</name> <init>= <expr><name>log_writer_init</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>log_writer_init</name> = <name>handle</name></expr>;</expr_stmt>
<return>return <expr><name>old</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_log_writer</name> *</type><name>ap_log_set_writer</name><parameter_list>(<param><decl><type><name>ap_log_writer</name> *</type><name>handle</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_log_writer</name> *</type><name>old</name> <init>= <expr><name>log_writer</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>log_writer</name> = <name>handle</name></expr>;</expr_stmt>
<return>return <expr><name>old</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_default_log_writer</name><parameter_list>( <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>strs</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>strl</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nelts</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>s</name> = <name>str</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> += <name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write</name><argument_list>(<argument><expr>(<name>apr_file_t</name>*)<name>handle</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>ap_default_log_writer_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>*<name>name</name> == '|'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>piped_log</name> *</type><name>pl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pl</name> = <call><name>ap_open_piped_log</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ap_piped_log_write_fd</name><argument_list>(<argument><expr><name>pl</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>fname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00648</expr></argument>)</argument_list></call>
"invalid transfer log path %s."</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>xfer_flags</name></expr></argument>, <argument><expr><name>xfer_perms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00649</expr></argument>)</argument_list></call>
"could not open transfer log file %s."</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>fd</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>ap_buffered_log_writer_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>buffered_log</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffered_log</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>handle</name></name> = <call><name>ap_default_log_writer_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>buffered_log</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>all_buffered_logs</name></expr></argument>)</argument_list></call> = <name>b</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_buffered_log_writer</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>handle</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>strs</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>strl</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nelts</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>buffered_log</name> *</type><name>buf</name> <init>= <expr>(<name>buffered_log</name>*)<name>handle</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>APR_ANYLOCK_LOCK</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> + <name><name>buf</name>-&gt;<name>outcnt</name></name> &gt; <name>LOG_BUFSIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>flush_log</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt;= <name>LOG_BUFSIZE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>s</name> = <name>str</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> += <name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>w</name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write</name><argument_list>(<argument><expr><name><name>buf</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>s</name> = &amp;<name><name>buf</name>-&gt;<name>outbuf</name><index>[<expr><name><name>buf</name>-&gt;<name>outcnt</name></name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>strs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> += <name><name>strl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>buf</name>-&gt;<name>outcnt</name></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>APR_ANYLOCK_UNLOCK</name><argument_list>(<argument><expr>&amp;<name><name>buf</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_register_log_handler</name></expr></argument>)</argument_list></call> *<name>log_pfn_register</name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_pfn_register</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_register_log_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>log_pfn_register</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"h"</expr></argument>, <argument><expr><name>log_remote_host</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"a"</expr></argument>, <argument><expr><name>log_remote_address</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"A"</expr></argument>, <argument><expr><name>log_local_address</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"l"</expr></argument>, <argument><expr><name>log_remote_logname</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"u"</expr></argument>, <argument><expr><name>log_remote_user</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"t"</expr></argument>, <argument><expr><name>log_request_time</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"f"</expr></argument>, <argument><expr><name>log_request_file</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"b"</expr></argument>, <argument><expr><name>clf_log_bytes_sent</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"B"</expr></argument>, <argument><expr><name>log_bytes_sent</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"i"</expr></argument>, <argument><expr><name>log_header_in</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"o"</expr></argument>, <argument><expr><name>log_header_out</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"n"</expr></argument>, <argument><expr><name>log_note</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"L"</expr></argument>, <argument><expr><name>log_log_id</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"e"</expr></argument>, <argument><expr><name>log_env_var</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"V"</expr></argument>, <argument><expr><name>log_server_name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"v"</expr></argument>, <argument><expr><name>log_virtual_host</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"p"</expr></argument>, <argument><expr><name>log_server_port</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"P"</expr></argument>, <argument><expr><name>log_pid_tid</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"H"</expr></argument>, <argument><expr><name>log_request_protocol</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"m"</expr></argument>, <argument><expr><name>log_request_method</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"q"</expr></argument>, <argument><expr><name>log_request_query</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"X"</expr></argument>, <argument><expr><name>log_connection_status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"C"</expr></argument>, <argument><expr><name>log_cookie</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"k"</expr></argument>, <argument><expr><name>log_requests_on_connection</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"r"</expr></argument>, <argument><expr><name>log_request_line</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"D"</expr></argument>, <argument><expr><name>log_request_duration_microseconds</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"T"</expr></argument>, <argument><expr><name>log_request_duration_scaled</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"U"</expr></argument>, <argument><expr><name>log_request_uri</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"s"</expr></argument>, <argument><expr><name>log_status</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"R"</expr></argument>, <argument><expr><name>log_handler</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"^ti"</expr></argument>, <argument><expr><name>log_trailer_in</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_pfn_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"^to"</expr></argument>, <argument><expr><name>log_trailer_out</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_set_writer_init</name><argument_list>(<argument><expr><name>ap_default_log_writer_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_set_writer</name><argument_list>(<argument><expr><name>ap_default_log_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffered_logs</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_log_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>config_log_state</name> *</type><name>cls</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>cls</name>-&gt;<name>fname</name></name> || <name><name>cls</name>-&gt;<name>fname</name><index>[<expr>0</expr>]</index></name> == '|' || !<name><name>cls</name>-&gt;<name>directive</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>abs</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>fname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name> <init>= <expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>abs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type><name>directive</name> <init>= <expr><name><name>cls</name>-&gt;<name>directive</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>APR_FINFO_TYPE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cls</name>-&gt;<name>directive</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <name>APR_ENOTDIR</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02297</expr></argument>)</argument_list></call>
"Cannot access directory '%s' for log file '%s' "
"defined at %s:%d"</expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>cls</name>-&gt;<name>fname</name></name></expr></argument>,
<argument><expr><name><name>directive</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>directive</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>multi_log_state</name> *</type><name>mls</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>log_config_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>log_list</name> <init>= <expr><name><name>mls</name>-&gt;<name>config_logs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>config_log_state</name> *</type><name>clsarray</name> <init>= <expr>(<name>config_log_state</name> *) <name><name>log_list</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>log_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>check_log_dir</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name><name>clsarray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = !<name>OK</name></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>log_pre_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>log_check_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>init_child</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_open_logs</name><argument_list>(<argument><expr><name>init_config_log</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_log_transaction</name><argument_list>(<argument><expr><name>multi_log_transaction</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>log_hash</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_register_log_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_log_set_writer_init</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_log_set_writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>log_config</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>make_config_log_state</name></expr>,
<expr><name>merge_config_log_state</name></expr>,
<expr><name>config_log_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
