<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/generators/mod_autoindex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>autoindex_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO_OPTIONS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICONS_ARE_LINKS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCAN_HTML_TITLES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_ICON</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_LAST_MOD</name></cpp:macro> <cpp:value>(1 &lt;&lt; 4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_SIZE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 5)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_DESC</name></cpp:macro> <cpp:value>(1 &lt;&lt; 6)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_PREAMBLE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_COLSORT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 8)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUPPRESS_RULES</name></cpp:macro> <cpp:value>(1 &lt;&lt; 9)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLDERS_FIRST</name></cpp:macro> <cpp:value>(1 &lt;&lt; 10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERSION_SORT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACK_MODIFIED</name></cpp:macro> <cpp:value>(1 &lt;&lt; 12)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FANCY_INDEXING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 13)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TABLE_INDEXING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 14)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_CLIENT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 15)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IGNORE_CASE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EMIT_XHTML</name></cpp:macro> <cpp:value>(1 &lt;&lt; 17)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_FORBIDDEN</name></cpp:macro> <cpp:value>(1 &lt;&lt; 18)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADDALTCLASS</name></cpp:macro> <cpp:value>(1 &lt;&lt; 19)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPTION_UNSET</name></cpp:macro> <cpp:value>(1 &lt;&lt; 20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_NOADJUST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_ADJUST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_UNSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_NAME</name></cpp:macro> <cpp:value>'N'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_LAST_MOD</name></cpp:macro> <cpp:value>'M'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_SIZE</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_DESC</name></cpp:macro> <cpp:value>'D'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>K_VALID</name></cpp:macro> <cpp:value>"NMSD"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_ASCENDING</name></cpp:macro> <cpp:value>'A'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_DESCENDING</name></cpp:macro> <cpp:value>'D'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D_VALID</name></cpp:macro> <cpp:value>"AD"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ICON_WIDTH</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ICON_HEIGHT</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NAME_WIDTH</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DESC_WIDTH</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<struct>struct <name>item</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>apply_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>apply_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <name>ai_desc_t</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pattern</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>full_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wildcards</name></decl>;</decl_stmt>
}</block></struct></type> <name>ai_desc_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>autoindex_config_struct</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>default_icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>style_sheet</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>head_insert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>readme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>incremented_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>decremented_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_adjust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_adjust</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>icon_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>icon_height</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>default_keyid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>default_direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>icon_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>alt_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>desc_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ign_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ign_noinherit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>charset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>datetime_format</name></decl>;</decl_stmt>
}</block></struct></type> <name>autoindex_config_rec</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>c_by_encoding</name></decl>, <decl><type ref="prev"/><name>c_by_type</name></decl>, <decl><type ref="prev"/><name>c_by_path</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BY_ENCODING</name></cpp:macro> <cpp:value>&amp;c_by_encoding</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BY_TYPE</name></cpp:macro> <cpp:value>&amp;c_by_type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BY_PATH</name></cpp:macro> <cpp:value>&amp;c_by_path</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>int</name></type> <name>response_is_html</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ctype</name> <init>= <expr><call><name>ap_field_noparam</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>!<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call>
|| !<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr>"application/xhtml+xml"</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_preamble</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>xhtml</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>title</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> = (<name>autoindex_config_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>autoindex_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>xhtml</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DOCTYPE_XHTML_1_0T</name></expr></argument>,
<argument><expr>"&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n"
" &lt;head&gt;\n &lt;title&gt;Index of "</expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr>"&lt;/title&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DOCTYPE_HTML_3_2</name></expr></argument>,
<argument><expr>"&lt;html&gt;\n &lt;head&gt;\n"
" &lt;title&gt;Index of "</expr></argument>, <argument><expr><name>title</name></expr></argument>,
<argument><expr>"&lt;/title&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;link rel=\"stylesheet\" href=\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>style_sheet</name></name></expr></argument>,
<argument><expr>"\" type=\"text/css\""</expr></argument>, <argument><expr><name>xhtml</name> ? " /&gt;\n" : "&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>head_insert</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>head_insert</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;/head&gt;\n &lt;body&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>push_item</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>, <param><decl><type><name>char</name> *</type><name>type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>item</name> *</type><name>p</name> <init>= <expr>(struct <name>item</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>to</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>to</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>data</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>arr</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>apply_path</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>arr</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>"*"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>type</name> == <name>BY_PATH</name>) &amp;&amp; (!<call><name>ap_is_matchexp</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>apply_to</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>arr</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"*"</expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>apply_to</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>arr</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_alt</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alt</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>info</name></name> == <name>BY_PATH</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr>"**DIRECTORY**"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>to</name> = "^^DIRECTORY^^"</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>info</name></name> == <name>BY_ENCODING</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>push_item</name><argument_list>(<argument><expr>((<name>autoindex_config_rec</name> *) <name>d</name>)-&gt;<name>alt_list</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_icon</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>icon</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>iconbak</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>icon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>icon</name><index>[<expr>0</expr>]</index></name> == '('</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>alt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cl</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>iconbak</name></expr></argument>, <argument><expr>')'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"missing closing paren"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>alt</name> = <call><name>ap_getword_nc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>iconbak</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cl</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_alt</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr>&amp;<name><name>alt</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>info</name></name> == <name>BY_PATH</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr>"**DIRECTORY**"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>to</name> = "^^DIRECTORY^^"</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>info</name></name> == <name>BY_ENCODING</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>to</name> = <name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>push_item</name><argument_list>(<argument><expr>((<name>autoindex_config_rec</name> *) <name>d</name>)-&gt;<name>icon_list</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>iconbak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDCARDS_REQUIRED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WILDCARDS_REQUIRED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_desc</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>dcfg</name> <init>= <expr>(<name>autoindex_config_rec</name> *) <name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ai_desc_t</name> *</type><name>desc_entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>prefix</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>desc_entry</name> = (<name>ai_desc_t</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dcfg</name>-&gt;<name>desc_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc_entry</name>-&gt;<name>full_path</name></name> = (<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> == <name>NULL</name>) ? 0 : 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc_entry</name>-&gt;<name>wildcards</name></name> = (<name>WILDCARDS_REQUIRED</name>
|| <name><name>desc_entry</name>-&gt;<name>full_path</name></name>
|| <call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>desc_entry</name>-&gt;<name>wildcards</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prefix</name> = <name><name>desc_entry</name>-&gt;<name>full_path</name></name> ? "*/" : "*"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc_entry</name>-&gt;<name>pattern</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>dcfg</name>-&gt;<name>desc_list</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr>"*"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>desc_entry</name>-&gt;<name>pattern</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dcfg</name>-&gt;<name>desc_list</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>desc_entry</name>-&gt;<name>description</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>dcfg</name>-&gt;<name>desc_list</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_ignore</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ext</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>push_item</name><argument_list>(<argument><expr>((<name>autoindex_config_rec</name> *) <name>d</name>)-&gt;<name>ign_list</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_opts</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>opts_add</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>opts_remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>d_cfg</name> <init>= <expr>(<name>autoindex_config_rec</name> *) <name>d</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>opts</name> = <name><name>d_cfg</name>-&gt;<name>opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opts_add</name> = <name><name>d_cfg</name>-&gt;<name>incremented_opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>opts_remove</name> = <name><name>d_cfg</name>-&gt;<name>decremented_opts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>option</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>w</name> = <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(*<name>w</name> == '+') || (*<name>w</name> == '-')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>action</name> = *(<name>w</name>++)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>action</name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"FancyIndexing"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>FANCY_INDEXING</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"FoldersFirst"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>FOLDERS_FIRST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"HTMLTable"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>TABLE_INDEXING</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IconsAreLinks"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>ICONS_ARE_LINKS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IgnoreCase"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>IGNORE_CASE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IgnoreClient"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>IGNORE_CLIENT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"ScanHTMLTitles"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SCAN_HTML_TITLES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressColumnSorting"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_COLSORT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressDescription"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_DESC</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressHTMLPreamble"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_PREAMBLE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressIcon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_ICON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressLastModified"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_LAST_MOD</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressSize"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_SIZE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"SuppressRules"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SUPPRESS_RULES</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"TrackModified"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>TRACK_MODIFIED</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"VersionSort"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>VERSION_SORT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"XHTML"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>EMIT_XHTML</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"ShowForbidden"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>SHOW_FORBIDDEN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"AddAltClass"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>option</name> = <name>ADDALTCLASS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine '+' or '-' with 'None' keyword"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>opts</name> = <name>NO_OPTIONS</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opts_add</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>opts_remove</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IconWidth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>icon_width</name></name> = <name>DEFAULT_ICON_WIDTH</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>icon_width</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IconWidth="</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine '-' with IconWidth=n"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>icon_width</name></name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>w</name><index>[<expr>10</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IconHeight"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>icon_height</name></name> = <name>DEFAULT_ICON_HEIGHT</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>icon_height</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"IconHeight="</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine '-' with IconHeight=n"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>icon_height</name></name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>w</name><index>[<expr>11</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"NameWidth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '-'</expr>)</condition><then> <block>{
<return>return <expr>"NameWidth with no value may only appear as "
"'-NameWidth'"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>name_width</name></name> = <name>DEFAULT_NAME_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>name_adjust</name></name> = <name>K_NOADJUST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"NameWidth="</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine '-' with NameWidth=n"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>w</name><index>[<expr>10</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>name_adjust</name></name> = <name>K_ADJUST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>w</name><index>[<expr>10</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>width</name> &amp;&amp; (<name>width</name> &lt; 5)</expr>)</condition><then> <block>{
<return>return <expr>"NameWidth value must be greater than 5"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>name_width</name></name> = <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>name_adjust</name></name> = <name>K_NOADJUST</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"DescriptionWidth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> != '-'</expr>)</condition><then> <block>{
<return>return <expr>"DescriptionWidth with no value may only appear as "
"'-DescriptionWidth'"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>desc_width</name></name> = <name>DEFAULT_DESC_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>desc_adjust</name></name> = <name>K_NOADJUST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"DescriptionWidth="</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>action</name> == '-'</expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine '-' with DescriptionWidth=n"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>w</name><index>[<expr>17</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>desc_adjust</name></name> = <name>K_ADJUST</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>w</name><index>[<expr>17</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>width</name> &amp;&amp; (<name>width</name> &lt; 12)</expr>)</condition><then> <block>{
<return>return <expr>"DescriptionWidth value must be greater than 12"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>desc_width</name></name> = <name>width</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>desc_adjust</name></name> = <name>K_NOADJUST</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Type="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>ctype</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>w</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Charset="</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>charset</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>w</name><index>[<expr>8</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"UseOldDateFormat"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>datetime_format</name></name> = "%d-%b-%Y %H:%M"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Invalid directory indexing option"</expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>action</name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>opts</name> |= <name>option</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opts_add</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>opts_remove</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>action</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>opts_add</name> |= <name>option</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opts_remove</name> &amp;= ~<name>option</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>opts_remove</name> |= <name>option</name></expr>;</expr_stmt>
<expr_stmt><expr><name>opts_add</name> &amp;= ~<name>option</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr>(<name>opts</name> &amp; <name>NO_OPTIONS</name>) &amp;&amp; (<name>opts</name> &amp; ~<name>NO_OPTIONS</name>)</expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine other IndexOptions keywords with 'None'"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>incremented_opts</name></name> = <name>opts_add</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>decremented_opts</name></name> = <name>opts_remove</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>opts</name></name> = <name>opts</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_default_order</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>direction</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>d_cfg</name> <init>= <expr>(<name>autoindex_config_rec</name> *) <name>m</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr>"Ascending"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>default_direction</name></name> = <name>D_ASCENDING</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr>"Descending"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>default_direction</name></name> = <name>D_DESCENDING</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"First keyword must be 'Ascending' or 'Descending'"</expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Name"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>default_keyid</name></name> = <name>K_NAME</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>default_keyid</name></name> = <name>K_LAST_MOD</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Size"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>default_keyid</name></name> = <name>K_SIZE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Description"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d_cfg</name>-&gt;<name>default_keyid</name></name> = <name>K_DESC</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Second keyword must be 'Name', 'Date', 'Size', or "
"'Description'"</expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_CMD_PERMS</name></cpp:macro> <cpp:value>OR_INDEXES</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>autoindex_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddIcon"</expr></argument>, <argument><expr><name>add_icon</name></expr></argument>, <argument><expr><name>BY_PATH</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"an icon URL followed by one or more filenames"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddIconByType"</expr></argument>, <argument><expr><name>add_icon</name></expr></argument>, <argument><expr><name>BY_TYPE</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"an icon URL followed by one or more MIME types"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddIconByEncoding"</expr></argument>, <argument><expr><name>add_icon</name></expr></argument>, <argument><expr><name>BY_ENCODING</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"an icon URL followed by one or more content encodings"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddAlt"</expr></argument>, <argument><expr><name>add_alt</name></expr></argument>, <argument><expr><name>BY_PATH</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"alternate descriptive text followed by one or more "
"filenames"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddAltByType"</expr></argument>, <argument><expr><name>add_alt</name></expr></argument>, <argument><expr><name>BY_TYPE</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"alternate descriptive text followed by one or more MIME "
"types"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddAltByEncoding"</expr></argument>, <argument><expr><name>add_alt</name></expr></argument>, <argument><expr><name>BY_ENCODING</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"alternate descriptive text followed by one or more "
"content encodings"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE_ARGV</name><argument_list>(<argument><expr>"IndexOptions"</expr></argument>, <argument><expr><name>add_opts</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"one or more index options [+|-][]"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"IndexOrderDefault"</expr></argument>, <argument><expr><name>set_default_order</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"{Ascending,Descending} {Name,Size,Description,Date}"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"IndexIgnore"</expr></argument>, <argument><expr><name>add_ignore</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"one or more file extensions"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"IndexIgnoreReset"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>, <argument><expr><name>ign_noinherit</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"Reset the inherited list of IndexIgnore filenames"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"AddDescription"</expr></argument>, <argument><expr><name>add_desc</name></expr></argument>, <argument><expr><name>BY_PATH</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"Descriptive text followed by one or more filenames"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"HeaderName"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DIR_CMD_PERMS</name></expr></argument>, <argument><expr>"a filename"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ReadmeName"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>, <argument><expr><name>readme</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DIR_CMD_PERMS</name></expr></argument>, <argument><expr>"a filename"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"FancyIndexing"</expr></argument>, <argument><expr><name>ap_set_deprecated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"The FancyIndexing directive is no longer supported. "
"Use IndexOptions FancyIndexing."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"DefaultIcon"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>, <argument><expr><name>default_icon</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DIR_CMD_PERMS</name></expr></argument>, <argument><expr>"an icon URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"IndexStyleSheet"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>, <argument><expr><name>style_sheet</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DIR_CMD_PERMS</name></expr></argument>, <argument><expr>"URL to style sheet"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"IndexHeadInsert"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>, <argument><expr><name>head_insert</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DIR_CMD_PERMS</name></expr></argument>, <argument><expr>"String to insert in HTML HEAD section"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_autoindex_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>new</name> <init>=
<expr>(<name>autoindex_config_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>icon_width</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>icon_height</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_width</name></name> = <name>DEFAULT_NAME_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_adjust</name></name> = <name>K_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_width</name></name> = <name>DEFAULT_DESC_WIDTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_adjust</name></name> = <name>K_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>icon_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>alt_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ai_desc_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ign_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>opts</name></name> = <name>OPTION_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>incremented_opts</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>decremented_opts</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_keyid</name></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_direction</name></name> = '\0'</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_autoindex_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>base</name> <init>= <expr>(<name>autoindex_config_rec</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>add</name> <init>= <expr>(<name>autoindex_config_rec</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = (<name>autoindex_config_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>autoindex_config_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_icon</name></name> = <name><name>add</name>-&gt;<name>default_icon</name></name> ? <name><name>add</name>-&gt;<name>default_icon</name></name>
: <name><name>base</name>-&gt;<name>default_icon</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>style_sheet</name></name> = <name><name>add</name>-&gt;<name>style_sheet</name></name> ? <name><name>add</name>-&gt;<name>style_sheet</name></name>
: <name><name>base</name>-&gt;<name>style_sheet</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>head_insert</name></name> = <name><name>add</name>-&gt;<name>head_insert</name></name> ? <name><name>add</name>-&gt;<name>head_insert</name></name>
: <name><name>base</name>-&gt;<name>head_insert</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>header</name></name> = <name><name>add</name>-&gt;<name>header</name></name> ? <name><name>add</name>-&gt;<name>header</name></name>
: <name><name>base</name>-&gt;<name>header</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>readme</name></name> = <name><name>add</name>-&gt;<name>readme</name></name> ? <name><name>add</name>-&gt;<name>readme</name></name>
: <name><name>base</name>-&gt;<name>readme</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>icon_height</name></name> = <name><name>add</name>-&gt;<name>icon_height</name></name> ? <name><name>add</name>-&gt;<name>icon_height</name></name> : <name><name>base</name>-&gt;<name>icon_height</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>icon_width</name></name> = <name><name>add</name>-&gt;<name>icon_width</name></name> ? <name><name>add</name>-&gt;<name>icon_width</name></name> : <name><name>base</name>-&gt;<name>icon_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ctype</name></name> = <name><name>add</name>-&gt;<name>ctype</name></name> ? <name><name>add</name>-&gt;<name>ctype</name></name> : <name><name>base</name>-&gt;<name>ctype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>charset</name></name> = <name><name>add</name>-&gt;<name>charset</name></name> ? <name><name>add</name>-&gt;<name>charset</name></name> : <name><name>base</name>-&gt;<name>charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>datetime_format</name></name> = <name><name>add</name>-&gt;<name>datetime_format</name></name> ? <name><name>add</name>-&gt;<name>datetime_format</name></name> : <name><name>base</name>-&gt;<name>datetime_format</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>alt_list</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>alt_list</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>alt_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_list</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>desc_list</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>desc_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>icon_list</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>icon_list</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>icon_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>ign_list</name></name> = <name><name>add</name>-&gt;<name>ign_noinherit</name></name> ? <name><name>add</name>-&gt;<name>ign_list</name></name> : <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>ign_list</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>ign_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>opts</name></name> == <name>NO_OPTIONS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>opts</name></name> = <name>NO_OPTIONS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>incremented_opts</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>decremented_opts</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>opts</name></name> == <name>OPTION_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>incremented_opts</name></name> = (<name><name>base</name>-&gt;<name>incremented_opts</name></name>
| <name><name>add</name>-&gt;<name>incremented_opts</name></name>)
&amp; ~<name><name>add</name>-&gt;<name>decremented_opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>decremented_opts</name></name> = (<name><name>base</name>-&gt;<name>decremented_opts</name></name>
| <name><name>add</name>-&gt;<name>decremented_opts</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>opts</name></name> = (<name><name>base</name>-&gt;<name>opts</name></name> &amp; ~<name>NO_OPTIONS</name>)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>opts</name></name> = <name><name>add</name>-&gt;<name>opts</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>opts</name></name> |= <name><name>new</name>-&gt;<name>incremented_opts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>opts</name></name> &amp;= ~<name><name>new</name>-&gt;<name>decremented_opts</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>name_adjust</name></name> == <name>K_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_width</name></name> = <name><name>base</name>-&gt;<name>name_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_adjust</name></name> = <name><name>base</name>-&gt;<name>name_adjust</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_width</name></name> = <name><name>add</name>-&gt;<name>name_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_adjust</name></name> = <name><name>add</name>-&gt;<name>name_adjust</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>desc_adjust</name></name> == <name>K_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_width</name></name> = <name><name>base</name>-&gt;<name>desc_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_adjust</name></name> = <name><name>base</name>-&gt;<name>desc_adjust</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_width</name></name> = <name><name>add</name>-&gt;<name>desc_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>desc_adjust</name></name> = <name><name>add</name>-&gt;<name>desc_adjust</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_keyid</name></name> = <name><name>add</name>-&gt;<name>default_keyid</name></name> ? <name><name>add</name>-&gt;<name>default_keyid</name></name>
: <name><name>base</name>-&gt;<name>default_keyid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>default_direction</name></name> = <name><name>add</name>-&gt;<name>default_direction</name></name> ? <name><name>add</name>-&gt;<name>default_direction</name></name>
: <name><name>base</name>-&gt;<name>default_direction</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<struct>struct <name>ent</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>icon</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>alt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>lm</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ent</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ascending</name></decl>, <decl><type ref="prev"/><name>ignore_case</name></decl>, <decl><type ref="prev"/><name>version_sort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdir</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>find_item</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_encoding</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>, <param><decl><type><name>int</name></type> <name>path_only</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>item</name> *</type><name>items</name> <init>= <expr>(struct <name>item</name> *) <name><name>list</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>item</name> *</type><name>p</name> <init>= <expr>&amp;<name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>path</name><index>[<expr>0</expr>]</index></name> == '^') || (!<call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>apply_path</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!*(<name><name>p</name>-&gt;<name>apply_to</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><name><name>p</name>-&gt;<name>data</name></name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>p</name>-&gt;<name>type</name></name> == <name>BY_PATH</name> || <name><name>path</name><index>[<expr>0</expr>]</index></name> == '^'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>apply_to</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name><name>p</name>-&gt;<name>data</name></name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<name>path_only</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>content_encoding</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>type</name></name> == <name>BY_TYPE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>content_type</name>
&amp;&amp; !<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name>content_type</name></expr></argument>,
<argument><expr><name><name>p</name>-&gt;<name>apply_to</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name><name>p</name>-&gt;<name>data</name></name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>type</name></name> == <name>BY_ENCODING</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name>content_encoding</name></expr></argument>,
<argument><expr><name><name>p</name>-&gt;<name>apply_to</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name><name>p</name>-&gt;<name>data</name></name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></else></if>
}</block></then></if></else></if></else></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>find_item_by_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>list</name></decl></param>, <param><decl><type><name>int</name></type> <name>path_only</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>find_item</name><argument_list>(<argument><expr><call><name>ap_field_noparam</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>path_only</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_icon</name><parameter_list>(<param><type><name>d</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>find_item_by_request(p,d-&gt;icon_list,t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_alt</name><parameter_list>(<param><type><name>d</name></type></param>,<param><type><name>p</name></type></param>,<param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>find_item_by_request(p,d-&gt;alt_list,t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_default_icon</name><parameter_list>(<param><type><name>d</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>find_item(NULL, NULL, n, d-&gt;icon_list, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>find_default_alt</name><parameter_list>(<param><type><name>d</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>find_item(NULL, NULL, n, d-&gt;alt_list, 1)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_FLAGS</name></cpp:macro> <cpp:value>APR_FNM_CASE_BLIND</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_FLAGS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>find_desc</name><parameter_list>(<param><decl><type><name>autoindex_config_rec</name> *</type><name>dcfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename_full</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ai_desc_t</name> *</type><name>list</name> <init>= <expr>(<name>ai_desc_t</name> *) <name><name>dcfg</name>-&gt;<name>desc_list</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>filename_only</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>filename_full</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>filename_only</name> = <name>filename_full</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>filename_only</name>++</expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>dcfg</name>-&gt;<name>desc_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>ai_desc_t</name> *</type><name>tuple</name> <init>= <expr>&amp;<name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<expr_stmt><expr><name>filename</name> = (<name><name>tuple</name>-&gt;<name>full_path</name></name>) ? <name>filename_full</name> : <name>filename_only</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tuple</name>-&gt;<name>wildcards</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = (<call><name>apr_fnmatch</name><argument_list>(<argument><expr><name><name>tuple</name>-&gt;<name>pattern</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>MATCH_FLAGS</name></expr></argument>)</argument_list></call> == 0)</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>found</name> = (<call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>tuple</name>-&gt;<name>pattern</name></name></expr></argument>)</argument_list></call> != <name>NULL</name>)</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>tuple</name>-&gt;<name>description</name></name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ignore_entry</name><parameter_list>(<param><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>list</name> <init>= <expr><name><name>d</name>-&gt;<name>ign_list</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>item</name> *</type><name>items</name> <init>= <expr>(struct <name>item</name> *) <name><name>list</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>tt</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tt</name> = <name>path</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>tt</name>++</expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>item</name> *</type><name>p</name> <init>= <expr>&amp;<name><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ap</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ap</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>apply_to</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap</name> = <name><name>p</name>-&gt;<name>apply_to</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ap</name>++</expr>;</expr_stmt>
}</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!<call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>apply_path</name></name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name>tt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr>!<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>apply_path</name></name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr><name>tt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_emit_plain</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>AP_IOBUFSIZE</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>apr_file_eof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<do>do <block>{
<expr_stmt><expr><name>n</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> * <name>AP_IOBUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if>if <condition>(<expr><name>n</name> == 0 || <name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>c</name> &lt; <name>n</name></expr>)</condition> <block>{
<for>for (<init><expr><name>i</name> = <name>c</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> == '&lt;' || <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> == '&gt;' || <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> == '&amp;'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>ch</name> = <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>&amp;<name><name>buf</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ch</name> == '&lt;'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;lt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '&gt;'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ch</name> == '&amp;'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;amp;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name>c</name> = <name>i</name> + 1</expr>;</expr_stmt>
}</block></while>
}</block></while>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_head</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>header_fname</name></decl></param>, <param><decl><type><name>int</name></type> <name>suppress_amble</name></decl></param>,
<param><decl><type><name>int</name></type> <name>emit_xhtml</name></decl></param>, <param><decl><type><name>char</name> *</type><name>title</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>hdrs</name> <init>= <expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emit_amble</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>emit_H1</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r_accept</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r_accept_enc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r_accept</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r_accept_enc</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept"</expr></argument>, <argument><expr>"text/html, text/plain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>header_fname</name> != <name>NULL</name>) &amp;&amp; <name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>header_fname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>header_fname</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>header_fname</name> != <name>NULL</name>)
&amp;&amp; (<name>rr</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name>header_fname</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call>)
&amp;&amp; (<name><name>rr</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name>)
&amp;&amp; (<name><name>rr</name>-&gt;<name>filename</name></name> != <name>NULL</name>)
&amp;&amp; (<name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_REG</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>rr</name>-&gt;<name>content_type</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>response_is_html</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name>emit_amble</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>emit_H1</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>suppress_amble</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>emit_preamble</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>emit_xhtml</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>f</name>=<name><name>rr</name>-&gt;<name>output_filters</name></name></expr>;</init>
<condition><expr><name><name>f</name>-&gt;<name>frec</name></name> != <name>ap_subreq_core_filter_handle</name></expr>;</condition> <incr><expr><name>f</name> = <name><name>f</name>-&gt;<name>next</name></name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>f</name>-&gt;<name>next</name></name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>emit_amble</name> = <name>suppress_amble</name></expr>;</expr_stmt>
<expr_stmt><expr><name>emit_H1</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr>"text/"</expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>emit_preamble</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>emit_xhtml</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>emit_amble</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>do_emit_plain</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>emit_H1</name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>r_accept</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept"</expr></argument>, <argument><expr><name>r_accept</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>r_accept_enc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>, <argument><expr><name>r_accept_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>emit_amble</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>emit_preamble</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>emit_xhtml</name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>d</name> = (<name>autoindex_config_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>autoindex_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>emit_H1</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;h1 id=\"indextitle\"&gt;Index of "</expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr>"&lt;/h1&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;h1&gt;Index of "</expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr>"&lt;/h1&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>rr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_tail</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>readme_fname</name></decl></param>, <param><decl><type><name>int</name></type> <name>suppress_amble</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suppress_post</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>suppress_sig</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>readme_fname</name> != <name>NULL</name>)
&amp;&amp; (<name>rr</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name>readme_fname</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call>)
&amp;&amp; (<name><name>rr</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name>)
&amp;&amp; (<name><name>rr</name>-&gt;<name>filename</name></name> != <name>NULL</name>)
&amp;&amp; <name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_REG</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>rr</name>-&gt;<name>content_type</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>response_is_html</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>;</decl_stmt>
<for>for (<init><expr><name>f</name>=<name><name>rr</name>-&gt;<name>output_filters</name></name></expr>;</init>
<condition><expr><name><name>f</name>-&gt;<name>frec</name></name> != <name>ap_subreq_core_filter_handle</name></expr>;</condition> <incr><expr><name>f</name> = <name><name>f</name>-&gt;<name>next</name></name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>f</name>-&gt;<name>next</name></name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>suppress_sig</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>suppress_post</name> = <name>suppress_amble</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr>"text/"</expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>do_emit_plain</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>suppress_sig</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>suppress_sig</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>suppress_post</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/body&gt;&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>find_title</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>titlebuf</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>, *<decl><type ref="prev"/><name>find</name> <init>= <expr>"&lt;title&gt;"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>thefile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>content_type</name></name> != <name>NULL</name>)
&amp;&amp; (<call><name>response_is_html</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE</name></expr></argument>)</argument_list></call>)
&amp;&amp; !<name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>thefile</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> * (<name>MAX_STRING_LEN</name> - 1)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>thefile</name></expr></argument>, <argument><expr><name>titlebuf</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>thefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>titlebuf</name><index>[<expr><name>n</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<for>for (<init><expr><name>x</name> = 0</expr>, <expr><name>p</name> = 0</expr>;</init> <condition><expr><name><name>titlebuf</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>titlebuf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call> == <name><name>find</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>find</name><index>[<expr>++<name>p</name></expr>]</index></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>p</name> = <call><name>ap_ind</name><argument_list>(<argument><expr>&amp;<name><name>titlebuf</name><index>[<expr>++<name>x</name></expr>]</index></name></expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call>) != -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>titlebuf</name><index>[<expr><name>x</name> + <name>p</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>y</name> = <name>x</name></expr>;</init> <condition><expr><name><name>titlebuf</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<name><name>titlebuf</name><index>[<expr><name>y</name></expr>]</index></name> == <name>CR</name>) || (<name><name>titlebuf</name><index>[<expr><name>y</name></expr>]</index></name> == <name>LF</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>y</name> == <name>x</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>titlebuf</name><index>[<expr><name>y</name></expr>]</index></name> = ' '</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>thefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>titlebuf</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>p</name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>thefile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> struct <name>ent</name> *</type><name>make_parent_entry</name><parameter_list>(<param><decl><type><name>apr_int32_t</name></type> <name>autoindex_opts</name></decl></param>,
<param><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name></type> <name>keyid</name></decl></param>,
<param><decl><type><name>char</name></type> <name>direction</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>ent</name> *</type><name>p</name> <init>= <expr>(struct <name>ent</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>ent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>testpath</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>name</name></name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"../"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_getparents</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name><name>p</name>-&gt;<name>name</name></name></expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>testpath</name> = <call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ignore_entry</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>testpath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>lm</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>key</name></name> = <call><name>apr_toupper</name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>ascending</name></name> = (<call><name>apr_toupper</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call> == <name>D_ASCENDING</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>version_sort</name></name> = <name>autoindex_opts</name> &amp; <name>VERSION_SORT</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>FANCY_INDEXING</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>icon</name></name> = <call><name>find_default_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>testpath</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>icon</name></name> = <call><name>find_default_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"^^DIRECTORY^^"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>alt</name></name> = <call><name>find_default_alt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>testpath</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>alt</name></name> = <call><name>find_default_alt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"^^DIRECTORY^^"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>alt</name></name> = "PARENTDIR"</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>desc</name></name> = <call><name>find_desc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>testpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>p</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> struct <name>ent</name> *</type><name>make_autoindex_entry</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_finfo_t</name> *</type><name>dirent</name></decl></param>,
<param><decl><type><name>int</name></type> <name>autoindex_opts</name></decl></param>,
<param><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name></type> <name>keyid</name></decl></param>,
<param><decl><type><name>char</name></type> <name>direction</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pattern</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ent</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>show_forbidden</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>dirent</name>-&gt;<name>name</name><index>[<expr>0</expr>]</index></name> == '.') &amp;&amp; (!<name><name>dirent</name>-&gt;<name>name</name><index>[<expr>1</expr>]</index></name>
|| ((<name><name>dirent</name>-&gt;<name>name</name><index>[<expr>1</expr>]</index></name> == '.') &amp;&amp; !<name><name>dirent</name>-&gt;<name>name</name><index>[<expr>2</expr>]</index></name>))</expr>)</condition><then>
<return>return <expr>(<name>NULL</name>)</expr>;</return></then></if>
<if>if <condition>(<expr><name>pattern</name> &amp;&amp; (<call><name>apr_fnmatch</name><argument_list>(<argument><expr><name>pattern</name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>APR_FNM_NOESCAPE</name> | <name>APR_FNM_PERIOD</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
| <name>APR_FNM_CASE_BLIND</name></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</argument_list></call>
!= <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ignore_entry</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>rr</name> = <call><name>ap_sub_req_lookup_dirent</name><argument_list>(<argument><expr><name>dirent</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>AP_SUBREQ_NO_ARGS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>autoindex_opts</name> &amp; <name>SHOW_FORBIDDEN</name>)
&amp;&amp; (<name><name>rr</name>-&gt;<name>status</name></name> == <name>HTTP_UNAUTHORIZED</name> || <name><name>rr</name>-&gt;<name>status</name></name> == <name>HTTP_FORBIDDEN</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>show_forbidden</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name> &amp;&amp; <name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_REG</name>)
|| !(<name><name>rr</name>-&gt;<name>status</name></name> == <name>OK</name> || <call><name>ap_is_HTTP_SUCCESS</name><argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call>
|| <call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call>
|| <name>show_forbidden</name> == 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>NULL</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = (struct <name>ent</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>ent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dirent</name>-&gt;<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>name</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>size</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>icon</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>alt</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>desc</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>lm</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>isdir</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>key</name></name> = <call><name>apr_toupper</name><argument_list>(<argument><expr><name>keyid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>ascending</name></name> = (<call><name>apr_toupper</name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call> == <name>D_ASCENDING</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>version_sort</name></name> = !!(<name>autoindex_opts</name> &amp; <name>VERSION_SORT</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>ignore_case</name></name> = !!(<name>autoindex_opts</name> &amp; <name>IGNORE_CASE</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; (<name>FANCY_INDEXING</name> | <name>TABLE_INDEXING</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>lm</name></name> = <name><name>rr</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dirent</name>-&gt;<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>FOLDERS_FIRST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>isdir</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>rr</name>-&gt;<name>filename</name></name> = <call><name>ap_make_dirstr_parent</name> <argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rr</name>-&gt;<name>filename</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>icon</name></name> = <call><name>find_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>icon</name></name> = <call><name>find_default_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"^^DIRECTORY^^"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>alt</name></name> = <call><name>find_alt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>p</name>-&gt;<name>alt</name></name> = <call><name>find_default_alt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"^^DIRECTORY^^"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>alt</name></name> = "DIR"</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>icon</name></name> = <call><name>find_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>alt</name></name> = <call><name>find_alt</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>size</name></name> = <name><name>rr</name>-&gt;<name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>p</name>-&gt;<name>desc</name></name> = <call><name>find_desc</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(!<name><name>p</name>-&gt;<name>desc</name></name>) &amp;&amp; (<name>autoindex_opts</name> &amp; <name>SCAN_HTML_TITLES</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>desc</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>find_title</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>keyid</name> == <name>K_LAST_MOD</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>lm</name></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>lm</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>p</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>terminate_description</name><parameter_list>(<param><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl></param>, <param><decl><type><name>char</name> *</type><name>desc</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>autoindex_opts</name></decl></param>, <param><decl><type><name>int</name></type> <name>desc_width</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>maxsize</name> <init>= <expr><name>desc_width</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>desc_adjust</name></name> == <name>K_UNSET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>SUPPRESS_ICON</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>maxsize</name> += 6</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>SUPPRESS_LAST_MOD</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>maxsize</name> += 19</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>SUPPRESS_SIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>maxsize</name> += 7</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> &amp;&amp; ((<name>maxsize</name> &gt; 0) || (<name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> == '&lt;'))</expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> == '&lt;'</expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> != '&gt;'</expr>)</condition> <block>{
<if>if <condition>(<expr>!<name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>maxsize</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr>++<name>x</name></expr>;</expr_stmt>
}</block></while>
}</block></then> <else>else <if>if <condition>(<expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> == '&amp;'</expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>maxsize</name></expr>;</expr_stmt>
<for>for ( <init>;</init> <condition><expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> != ';'</expr>;</condition> <incr><expr>++<name>x</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>maxsize</name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr>--<name>maxsize</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr>!<name>maxsize</name> &amp;&amp; <name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>desc</name><index>[<expr><name>x</name> - 1</expr>]</index></name> = '&gt;'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name><index>[<expr><name>x</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>desc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>emit_link</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>anchor</name></decl></param>, <param><decl><type><name>char</name></type> <name>column</name></decl></param>,
<param><decl><type><name>char</name></type> <name>curkey</name></decl></param>, <param><decl><type><name>char</name></type> <name>curdirection</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colargs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nosort</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>nosort</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>qvalue</name><index>[<expr>9</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>0</expr>]</index></name> = '?'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>1</expr>]</index></name> = 'C'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>2</expr>]</index></name> = '='</expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>3</expr>]</index></name> = <name>column</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>4</expr>]</index></name> = ';'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>5</expr>]</index></name> = 'O'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>6</expr>]</index></name> = '='</expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>7</expr>]</index></name> = ((<name>curkey</name> == <name>column</name>) &amp;&amp; (<name>curdirection</name> == <name>D_ASCENDING</name>))
? <name>D_DESCENDING</name> : <name>D_ASCENDING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>qvalue</name><index>[<expr>8</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>qvalue</name></expr></argument>, <argument><expr><name>colargs</name> ? <name>colargs</name> : ""</expr></argument>,
<argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>output_directories</name><parameter_list>(<param><decl><type>struct <name>ent</name> **</type><name>ar</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>,
<param><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_int32_t</name></type> <name>autoindex_opts</name></decl></param>, <param><decl><type><name>char</name></type> <name>keyid</name></decl></param>,
<param><decl><type><name>char</name></type> <name>direction</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>colargs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>static_columns</name> <init>= <expr>!!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_COLSORT</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scratch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>desc_width</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>datetime_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name_scratch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pad_scratch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>breakrow</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>scratch</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name_width</name> = <name><name>d</name>-&gt;<name>name_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>desc_width</name> = <name><name>d</name>-&gt;<name>desc_width</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>datetime_format</name> = <name><name>d</name>-&gt;<name>datetime_format</name></name> ? <name><name>d</name>-&gt;<name>datetime_format</name></name> : "%Y-%m-%d %H:%M"</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>autoindex_opts</name> &amp; (<name>FANCY_INDEXING</name> | <name>TABLE_INDEXING</name>))
== <name>FANCY_INDEXING</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>name_adjust</name></name> == <name>K_ADJUST</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>t</name> &gt; <name>name_width</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name_width</name> = <name>t</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>desc_adjust</name></name> == <name>K_ADJUST</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>t</name> &gt; <name>desc_width</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>desc_width</name> = <name>t</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>name_scratch</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name_width</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pad_scratch</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name_width</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pad_scratch</name></expr></argument>, <argument><expr>' '</expr></argument>, <argument><expr><name>name_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pad_scratch</name><index>[<expr><name>name_width</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>TABLE_INDEXING</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cols</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;table id=\"indexlist\"&gt;\n &lt;tr class=\"indexhead\"&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" &lt;table&gt;\n &lt;tr&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_ICON</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;th"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolicon\"&gt;" : " valign=\"top\"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>tp</name> = <call><name>find_default_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"^^BLANKICON^^"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;img src=\""</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\" alt=\"[ICO]\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" width=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" height=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" /"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt;&lt;/th&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;nbsp;&lt;/th&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>++<name>cols</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;th"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolname\"&gt;" : "&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Name"</expr></argument>, <argument><expr><name>K_NAME</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_LAST_MOD</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/th&gt;&lt;th"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcollastmod\"&gt;" : "&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Last modified"</expr></argument>, <argument><expr><name>K_LAST_MOD</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>cols</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_SIZE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/th&gt;&lt;th"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolsize\"&gt;" : "&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Size"</expr></argument>, <argument><expr><name>K_SIZE</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>cols</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_DESC</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/th&gt;&lt;th"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcoldesc\"&gt;" : "&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Description"</expr></argument>, <argument><expr><name>K_DESC</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>cols</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_RULES</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>breakrow</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>" &lt;tr%s&gt;&lt;th colspan=\"%d\"&gt;"
"&lt;hr%s&gt;&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexbreakrow\"" : ""</expr></argument>,
<argument><expr><name>cols</name></expr></argument>,
<argument><expr>(<name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name>) ? " /" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>breakrow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>FANCY_INDEXING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;pre&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_ICON</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>tp</name> = <call><name>find_default_icon</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr>"^^BLANKICON^^"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;img src=\""</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\" alt=\"Icon \""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" width=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" height=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" /"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt; "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Name"</expr></argument>, <argument><expr><name>K_NAME</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>pad_scratch</name> + 4</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_LAST_MOD</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Last modified"</expr></argument>, <argument><expr><name>K_LAST_MOD</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_SIZE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Size"</expr></argument>, <argument><expr><name>K_SIZE</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_DESC</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>emit_link</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Description"</expr></argument>, <argument><expr><name>K_DESC</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>,
<argument><expr><name>colargs</name></expr></argument>, <argument><expr><name>static_columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_RULES</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" /"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;ul&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<for>for (<init><expr><name>x</name> = 0</expr>;</init> <condition><expr><name>x</name> &lt; <name>n</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>anchor</name></decl>, *<decl><type ref="prev"/><name>t</name></decl>, *<decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nwidth</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name>anchor</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><call><name>ap_os_escape_path</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>x</name> &amp;&amp; <name><name>t</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>t2</name> = "Parent Directory"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>t2</name> = <name>t</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>TABLE_INDEXING</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>alt</name> &amp;&amp; (<name>autoindex_opts</name> &amp; <name>ADDALTCLASS</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>altclass</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>alt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>altclass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;tr class=\""</expr></argument>, <argument><expr>( <name>x</name> &amp; 0x1) ? "odd-" : "even-"</expr></argument>, <argument><expr><name>altclass</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" &lt;tr class=\""</expr></argument>, <argument><expr>( <name>x</name> &amp; 0x1) ? "odd" : "even"</expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_ICON</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolicon\"&gt;" : " valign=\"top\"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>ICONS_ARE_LINKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>icon</name>) || <name><name>d</name>-&gt;<name>default_icon</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;img src=\""</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>,
<argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>icon</name> ? <name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>icon</name>
: <name><name>d</name>-&gt;<name>default_icon</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\" alt=\"["</expr></argument>, <argument><expr>(<name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>alt</name> ? <name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>alt</name> : " ")</expr></argument>,
<argument><expr>"]\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" width=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" height=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" /"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;nbsp;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>ICONS_ARE_LINKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/a&gt;&lt;/td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>name_adjust</name></name> == <name>K_ADJUST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolname\"&gt;" : "&gt;"</expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>nwidth</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nwidth</name> &gt; <name>name_width</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name_scratch</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>name_width</name> - 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name> - 3</expr>]</index></name> = '.'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name> - 2</expr>]</index></name> = '.'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name> - 1</expr>]</index></name> = '&gt;'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> = <name>name_scratch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nwidth</name> = <name>name_width</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolname\"&gt;" : "&gt;"</expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>pad_scratch</name> + <name>nwidth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_LAST_MOD</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>lm</name> != -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>ts</name></expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_strftime</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_str</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>datetime_format</name></expr></argument>,
<argument><expr>&amp;<name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcollastmod\"&gt;" : " align=\"right\"&gt;"</expr></argument>, <argument><expr><name>time_str</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcollastmod\"&gt;&amp;nbsp;" : "&gt;&amp;nbsp;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_SIZE</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcolsize\"&gt;" : " align=\"right\"&gt;"</expr></argument>,
<argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_DESC</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>desc_adjust</name></name> == <name>K_ADJUST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcoldesc\"&gt;" : "&gt;"</expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcoldesc\"&gt;" : "&gt;"</expr></argument>,
<argument><expr><call><name>terminate_description</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name></expr></argument>,
<argument><expr><name>autoindex_opts</name></expr></argument>,
<argument><expr><name>desc_width</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td"</expr></argument>, <argument><expr>(<name><name>d</name>-&gt;<name>style_sheet</name></name> != <name>NULL</name>) ? " class=\"indexcoldesc\"&gt;" : "&gt;"</expr></argument>, <argument><expr>"&amp;nbsp;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>FANCY_INDEXING</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_ICON</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>ICONS_ARE_LINKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>icon</name>) || <name><name>d</name>-&gt;<name>default_icon</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;img src=\""</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>,
<argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>icon</name> ? <name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>icon</name>
: <name><name>d</name>-&gt;<name>default_icon</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\" alt=\"["</expr></argument>, <argument><expr>(<name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>alt</name> ? <name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>alt</name> : " ")</expr></argument>,
<argument><expr>"]\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" width=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>" height=\"%d\""</expr></argument>, <argument><expr><name><name>d</name>-&gt;<name>icon_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" /"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>ICONS_ARE_LINKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/a&gt; "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr>' '</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>nwidth</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nwidth</name> &gt; <name>name_width</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name_scratch</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>name_width</name> - 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name> - 3</expr>]</index></name> = '.'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name> - 2</expr>]</index></name> = '.'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name> - 1</expr>]</index></name> = '&gt;'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>name_scratch</name><index>[<expr><name>name_width</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>t2</name> = <name>name_scratch</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nwidth</name> = <name>name_width</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>pad_scratch</name> + <name>nwidth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_LAST_MOD</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>lm</name> != -1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>ts</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>ts</name></expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>lm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_strftime</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time_str</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>datetime_format</name></expr></argument>,
<argument><expr>&amp;<name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>time_str</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_SIZE</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>5</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_DESC</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>terminate_description</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>ar</name><index>[<expr><name>x</name></expr>]</index></name>-&gt;<name>desc</name></expr></argument>,
<argument><expr><name>autoindex_opts</name></expr></argument>,
<argument><expr><name>desc_width</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr>'\n'</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;li&gt;&lt;a href=\""</expr></argument>, <argument><expr><name>anchor</name></expr></argument>, <argument><expr>"\"&gt; "</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name>scratch</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"&lt;/a&gt;&lt;/li&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>TABLE_INDEXING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>breakrow</name></expr></argument>, <argument><expr>"&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>FANCY_INDEXING</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name>autoindex_opts</name> &amp; <name>SUPPRESS_RULES</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" /"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/ul&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dsortf</name><parameter_list>(<param><decl><type>struct <name>ent</name> **</type><name>e1</name></decl></param>, <param><decl><type>struct <name>ent</name> **</type><name>e2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>ent</name> *</type><name>c1</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ent</name> *</type><name>c2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>(*<name>e1</name>)-&gt;<name>name</name></name><index>[<expr>0</expr>]</index> == '/'</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>(*<name>e2</name>)-&gt;<name>name</name></name><index>[<expr>0</expr>]</index> == '/'</expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>(*<name>e1</name>)-&gt;<name>isdir</name></name> != <name>(*<name>e2</name>)-&gt;<name>isdir</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>(*<name>e1</name>)-&gt;<name>isdir</name></name> ? -1 : 1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>(*<name>e1</name>)-&gt;<name>ascending</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>c1</name> = *<name>e1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = *<name>e2</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>c1</name> = *<name>e2</name></expr>;</expr_stmt>
<expr_stmt><expr><name>c2</name> = *<name>e1</name></expr>;</expr_stmt>
}</block></else></if>
<switch>switch <condition>(<expr><name><name>c1</name>-&gt;<name>key</name></name></expr>)</condition> <block>{
<case>case <expr><name>K_LAST_MOD</name></expr>:
<if>if <condition>(<expr><name><name>c1</name>-&gt;<name>lm</name></name> &gt; <name><name>c2</name>-&gt;<name>lm</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>c1</name>-&gt;<name>lm</name></name> &lt; <name><name>c2</name>-&gt;<name>lm</name></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>K_SIZE</name></expr>:
<if>if <condition>(<expr><name><name>c1</name>-&gt;<name>size</name></name> &gt; <name><name>c2</name>-&gt;<name>size</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>c1</name>-&gt;<name>size</name></name> &lt; <name><name>c2</name>-&gt;<name>size</name></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>K_DESC</name></expr>:
<if>if <condition>(<expr><name><name>c1</name>-&gt;<name>version_sort</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_strnatcmp</name><argument_list>(<argument><expr><name><name>c1</name>-&gt;<name>desc</name></name> ? <name><name>c1</name>-&gt;<name>desc</name></name> : ""</expr></argument>,
<argument><expr><name><name>c2</name>-&gt;<name>desc</name></name> ? <name><name>c2</name>-&gt;<name>desc</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>result</name> = <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c1</name>-&gt;<name>desc</name></name> ? <name><name>c1</name>-&gt;<name>desc</name></name> : ""</expr></argument>,
<argument><expr><name><name>c2</name>-&gt;<name>desc</name></name> ? <name><name>c2</name>-&gt;<name>desc</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<if>if <condition>(<expr><name><name>c1</name>-&gt;<name>version_sort</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>c1</name>-&gt;<name>ignore_case</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_strnatcasecmp</name> <argument_list>(<argument><expr><name><name>c1</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>c2</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_strnatcmp</name><argument_list>(<argument><expr><name><name>c1</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>c2</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>result</name> &amp;&amp; <name><name>c1</name>-&gt;<name>ignore_case</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>strcasecmp</name> <argument_list>(<argument><expr><name><name>c1</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>c2</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>strcmp</name> <argument_list>(<argument><expr><name><name>c1</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>c2</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>index_directory</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>autoindex_config_rec</name> *</type><name>autoindex_conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>title_name</name> <init>= <expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>title_endp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name><name>r</name>-&gt;<name>filename</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pstring</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>thedir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_ent</name> <init>= <expr>0</expr></init>, <name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ent</name> *</type><name>head</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ent</name> **</type><name>ar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qstring</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>autoindex_opts</name> <init>= <expr><name><name>autoindex_conf</name>-&gt;<name>opts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>keyid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>direction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>colargs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fullpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>dirpathlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ctype</name> <init>= <expr>"text/html"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>charset</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>thedir</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01275</expr></argument>)</argument_list></call>
"Can't open directory for index: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>autoindex_conf</name>-&gt;<name>ctype</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ctype</name> = <name><name>autoindex_conf</name>-&gt;<name>ctype</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>autoindex_conf</name>-&gt;<name>charset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>charset</name> = <name><name>autoindex_conf</name>-&gt;<name>charset</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<expr_stmt><expr><name>charset</name> = "UTF-8"</expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>charset</name> = "ISO-8859-1"</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<if>if <condition>(<expr>*<name>charset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr>";charset="</expr></argument>,
<argument><expr><name>charset</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>TRACK_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>thedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>keyid</name> = <name><name>autoindex_conf</name>-&gt;<name>default_keyid</name></name>
? <name><name>autoindex_conf</name>-&gt;<name>default_keyid</name></name> : <name>K_NAME</name></expr>;</expr_stmt>
<expr_stmt><expr><name>direction</name> = <name><name>autoindex_conf</name>-&gt;<name>default_direction</name></name>
? <name><name>autoindex_conf</name>-&gt;<name>default_direction</name></name> : <name>D_ASCENDING</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>autoindex_opts</name> &amp; <name>IGNORE_CLIENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>qstring</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>autoindex_opts</name> |= <name>SUPPRESS_COLSORT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>colargs</name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fval</name><index>[<expr>5</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vval</name><index>[<expr>5</expr>]</index></name></decl>, *<decl><type ref="prev"/><name>ppre</name> <init>= <expr>""</expr></init>, *<name>epattern</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fval</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vval</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>qstring</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>qstring</name> &amp;&amp; *<name>qstring</name></expr>)</condition> <block>{
<if>if <condition>( <expr><name><name>qstring</name><index>[<expr>0</expr>]</index></name> == 'C' &amp;&amp; <name><name>qstring</name><index>[<expr>1</expr>]</index></name> == '='
&amp;&amp; <name><name>qstring</name><index>[<expr>2</expr>]</index></name> &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr><name>K_VALID</name></expr></argument>, <argument><expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call>
&amp;&amp; ( <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == '&amp;' || <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == ';'
|| !<name><name>qstring</name><index>[<expr>3</expr>]</index></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>keyid</name> = <name><name>qstring</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qstring</name> += <name><name>qstring</name><index>[<expr>3</expr>]</index></name> ? 4 : 3</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>( <expr><name><name>qstring</name><index>[<expr>0</expr>]</index></name> == 'O' &amp;&amp; <name><name>qstring</name><index>[<expr>1</expr>]</index></name> == '='
&amp;&amp; ( (<name><name>qstring</name><index>[<expr>2</expr>]</index></name> == <name>D_ASCENDING</name>)
|| (<name><name>qstring</name><index>[<expr>2</expr>]</index></name> == <name>D_DESCENDING</name>))
&amp;&amp; ( <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == '&amp;' || <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == ';'
|| !<name><name>qstring</name><index>[<expr>3</expr>]</index></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>direction</name> = <name><name>qstring</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qstring</name> += <name><name>qstring</name><index>[<expr>3</expr>]</index></name> ? 4 : 3</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>( <expr><name><name>qstring</name><index>[<expr>0</expr>]</index></name> == 'F' &amp;&amp; <name><name>qstring</name><index>[<expr>1</expr>]</index></name> == '='
&amp;&amp; <name><name>qstring</name><index>[<expr>2</expr>]</index></name> &amp;&amp; <call><name>strchr</name><argument_list>(<argument><expr>"012"</expr></argument>, <argument><expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call>
&amp;&amp; ( <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == '&amp;' || <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == ';'
|| !<name><name>qstring</name><index>[<expr>3</expr>]</index></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>autoindex_opts</name> &amp;= ~(<name>FANCY_INDEXING</name> | <name>TABLE_INDEXING</name>)</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '1'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>autoindex_opts</name> = (<name>autoindex_opts</name> | <name>FANCY_INDEXING</name>)
&amp; ~<name>TABLE_INDEXING</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '2'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>autoindex_opts</name> |= <name>FANCY_INDEXING</name> | <name>TABLE_INDEXING</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>fval</name></expr></argument>, <argument><expr>";F= "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fval</name><index>[<expr>3</expr>]</index></name> = <name><name>qstring</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qstring</name> += <name><name>qstring</name><index>[<expr>3</expr>]</index></name> ? 4 : 3</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>( <expr><name><name>qstring</name><index>[<expr>0</expr>]</index></name> == 'V' &amp;&amp; <name><name>qstring</name><index>[<expr>1</expr>]</index></name> == '='
&amp;&amp; (<name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '0' || <name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '1')
&amp;&amp; ( <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == '&amp;' || <name><name>qstring</name><index>[<expr>3</expr>]</index></name> == ';'
|| !<name><name>qstring</name><index>[<expr>3</expr>]</index></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>autoindex_opts</name> &amp;= ~<name>VERSION_SORT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>qstring</name><index>[<expr>2</expr>]</index></name> == '1'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>autoindex_opts</name> |= <name>VERSION_SORT</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>vval</name></expr></argument>, <argument><expr>";V= "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vval</name><index>[<expr>3</expr>]</index></name> = <name><name>qstring</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>qstring</name> += <name><name>qstring</name><index>[<expr>3</expr>]</index></name> ? 4 : 3</expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><name><name>qstring</name><index>[<expr>0</expr>]</index></name> == 'P' &amp;&amp; <name><name>qstring</name><index>[<expr>1</expr>]</index></name> == '='</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>eos</name> <init>= <expr><name>qstring</name> += 2</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>eos</name> &amp;&amp; *<name>eos</name> != '&amp;' &amp;&amp; *<name>eos</name> != ';'</expr>)</condition> <block>{
<expr_stmt><expr>++<name>eos</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>eos</name> == <name>qstring</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pstring</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>pstring</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>qstring</name></expr></argument>, <argument><expr><name>eos</name> - <name>qstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>pstring</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pstring</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ppre</name> = ";P="</expr>;</expr_stmt>
<expr_stmt><expr><name>epattern</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>pstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr>*<name>eos</name> &amp;&amp; *++<name>eos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>qstring</name> = <name>eos</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>qstring</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then>
<else>else <block>{
<expr_stmt><expr><name>qstring</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if>
}</block></while>
<expr_stmt><expr><name>colargs</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fval</name></expr></argument>, <argument><expr><name>vval</name></expr></argument>, <argument><expr><name>ppre</name></expr></argument>, <argument><expr><name>epattern</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>title_endp</name> = <name>title_name</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>title_name</name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>title_endp</name> &gt; <name>title_name</name> &amp;&amp; *<name>title_endp</name> == '/'</expr>)</condition> <block>{
<expr_stmt><expr>*<name>title_endp</name>-- = '\0'</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>emit_head</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>autoindex_conf</name>-&gt;<name>header</name></name></expr></argument>,
<argument><expr><name>autoindex_opts</name> &amp; <name>SUPPRESS_PREAMBLE</name></expr></argument>,
<argument><expr><name>autoindex_opts</name> &amp; <name>EMIT_XHTML</name></expr></argument>, <argument><expr><name>title_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>make_parent_entry</name><argument_list>(<argument><expr><name>autoindex_opts</name></expr></argument>, <argument><expr><name>autoindex_conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name>head</name></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_ent</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>fullpath</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dirpathlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fullpath</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>dirpathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name> | <name>APR_FINFO_NAME</name></expr></argument>, <argument><expr><name>thedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_INCOMPLETE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>dirent</name>.<name>filetype</name></name> == <name>APR_LNK</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>savename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>fi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>savename</name> = <name><name>dirent</name>.<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>fullpath</name> + <name>dirpathlen</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>,
<argument><expr><name>APR_PATH_MAX</name> - <name>dirpathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>fullpath</name></expr></argument>,
<argument><expr><name><name>dirent</name>.<name>valid</name></name> &amp; ~(<name>APR_FINFO_NAME</name>)</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirent</name>.<name>name</name></name> = <name>savename</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirent</name>.<name>valid</name></name> |= <name>APR_FINFO_NAME</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>make_autoindex_entry</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>autoindex_opts</name></expr></argument>, <argument><expr><name>autoindex_conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>pstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name>head</name></expr>;</expr_stmt>
<expr_stmt><expr><name>head</name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_ent</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr>1</expr>)</condition>;</do>
<if>if <condition>(<expr><name>num_ent</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ar</name> = (struct <name>ent</name> **) <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>num_ent</name> * <sizeof>sizeof<argument_list>(<argument>struct <expr><name>ent</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>head</name></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>ar</name><index>[<expr><name>x</name>++</expr>]</index></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name>ar</name></expr></argument>, <argument><expr><name>num_ent</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>ent</name> *</expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>) <name>dsortf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>output_directories</name><argument_list>(<argument><expr><name>ar</name></expr></argument>, <argument><expr><name>num_ent</name></expr></argument>, <argument><expr><name>autoindex_conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>autoindex_opts</name></expr></argument>,
<argument><expr><name>keyid</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>colargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>thedir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>emit_tail</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>autoindex_conf</name>-&gt;<name>readme</name></name></expr></argument>,
<argument><expr><name>autoindex_opts</name> &amp; <name>SUPPRESS_PREAMBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_autoindex</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>autoindex_config_rec</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>allow_opts</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>,<argument><expr><name>DIR_MAGIC_TYPE</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>AP_IS_DEFAULT_HANDLER_NAME</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>allow_opts</name> = <call><name>ap_allow_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = (<name>autoindex_config_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>autoindex_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_GET</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>allow_opts</name> &amp; <name>OPT_INDEXES</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errstatus</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>errstatus</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>errstatus</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>index_directory</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>index_names</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"dir-index-names"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01276</expr></argument>)</argument_list></call>
"Cannot serve directory %s: No matching DirectoryIndex (%s) found, and "
"server-generated directory index forbidden by "
"Options directive"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name>index_names</name> ? <name>index_names</name> : "none"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>handle_autoindex</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>autoindex</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_autoindex_config</name></expr>,
<expr><name>merge_autoindex_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>autoindex_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
