<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/aaa/mod_auth_form.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_request.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORM_LOGIN_HANDLER</name></cpp:macro> <cpp:value>"form-login-handler"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORM_LOGOUT_HANDLER</name></cpp:macro> <cpp:value>"form-logout-handler"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORM_REDIRECT_HANDLER</name></cpp:macro> <cpp:value>"form-redirect-handler"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_AUTH_FORM_HASH</name></cpp:macro> <cpp:value>"site"</cpp:value></cpp:define>
<expr_stmt><expr>static <call><call><name>int</name> <argument_list>(<argument><expr>*<name>ap_session_load_fn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>request_rec</name> * <name>r</name></expr></argument>, <argument><expr><name>session_rec</name> ** <name>z</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>apr_status_t</name> <argument_list>(<argument><expr>*<name>ap_session_get_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name> * <name>r</name></expr></argument>, <argument><expr><name>session_rec</name> * <name>z</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>key</name></expr></argument>, <argument><expr>const <name>char</name> **<name>value</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>apr_status_t</name> <argument_list>(<argument><expr>*<name>ap_session_set_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name> * <name>r</name></expr></argument>, <argument><expr><name>session_rec</name> * <name>z</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>key</name></expr></argument>, <argument><expr>const <name>char</name> *<name>value</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>void</name> <argument_list>(<argument><expr>*<name>ap_request_insert_filter_fn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>request_rec</name> * <name>r</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>void</name> <argument_list>(<argument><expr>*<name>ap_request_remove_filter_fn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>request_rec</name> * <name>r</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>authoritative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>authoritative_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>site</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>site_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>username_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>password_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>form_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>form_size_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fakebasicauth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fakebasicauth_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>location_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>method_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mimetype_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>body_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disable_no_store</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>disable_no_store_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>loginsuccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loginsuccess_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>loginrequired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loginrequired_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>logout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>logout_set</name></decl>;</decl_stmt>
}</block></struct></type> <name>auth_form_config_rec</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_auth_form_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dir</name></name> = <name>d</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authoritative</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>form_size</name></name> = <name>HUGE_STRING_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>username</name></name> = "httpd_username"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>password</name></name> = "httpd_password"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>location</name></name> = "httpd_location"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>method</name></name> = "httpd_method"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>mimetype</name></name> = "httpd_mimetype"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body</name></name> = "httpd_body"</expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_auth_form_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>new</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>auth_form_config_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>add</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>base</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>providers</name></name> = !<name><name>add</name>-&gt;<name>providers</name></name> ? <name><name>base</name>-&gt;<name>providers</name></name> : <name><name>add</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>authoritative</name></name> = (<name><name>add</name>-&gt;<name>authoritative_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>authoritative</name></name> : <name><name>add</name>-&gt;<name>authoritative</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>authoritative_set</name></name> = <name><name>add</name>-&gt;<name>authoritative_set</name></name> || <name><name>base</name>-&gt;<name>authoritative_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>site</name></name> = (<name><name>add</name>-&gt;<name>site_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>site</name></name> : <name><name>add</name>-&gt;<name>site</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>site_set</name></name> = <name><name>add</name>-&gt;<name>site_set</name></name> || <name><name>base</name>-&gt;<name>site_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>username</name></name> = (<name><name>add</name>-&gt;<name>username_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>username</name></name> : <name><name>add</name>-&gt;<name>username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>username_set</name></name> = <name><name>add</name>-&gt;<name>username_set</name></name> || <name><name>base</name>-&gt;<name>username_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>password</name></name> = (<name><name>add</name>-&gt;<name>password_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>password</name></name> : <name><name>add</name>-&gt;<name>password</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>password_set</name></name> = <name><name>add</name>-&gt;<name>password_set</name></name> || <name><name>base</name>-&gt;<name>password_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>location</name></name> = (<name><name>add</name>-&gt;<name>location_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>location</name></name> : <name><name>add</name>-&gt;<name>location</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>location_set</name></name> = <name><name>add</name>-&gt;<name>location_set</name></name> || <name><name>base</name>-&gt;<name>location_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>form_size</name></name> = (<name><name>add</name>-&gt;<name>form_size_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>form_size</name></name> : <name><name>add</name>-&gt;<name>form_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>form_size_set</name></name> = <name><name>add</name>-&gt;<name>form_size_set</name></name> || <name><name>base</name>-&gt;<name>form_size_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fakebasicauth</name></name> = (<name><name>add</name>-&gt;<name>fakebasicauth_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>fakebasicauth</name></name> : <name><name>add</name>-&gt;<name>fakebasicauth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fakebasicauth_set</name></name> = <name><name>add</name>-&gt;<name>fakebasicauth_set</name></name> || <name><name>base</name>-&gt;<name>fakebasicauth_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>method</name></name> = (<name><name>add</name>-&gt;<name>method_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>method</name></name> : <name><name>add</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>method_set</name></name> = <name><name>add</name>-&gt;<name>method_set</name></name> || <name><name>base</name>-&gt;<name>method_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>mimetype</name></name> = (<name><name>add</name>-&gt;<name>mimetype_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>mimetype</name></name> : <name><name>add</name>-&gt;<name>mimetype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>mimetype_set</name></name> = <name><name>add</name>-&gt;<name>mimetype_set</name></name> || <name><name>base</name>-&gt;<name>mimetype_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>body</name></name> = (<name><name>add</name>-&gt;<name>body_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>body</name></name> : <name><name>add</name>-&gt;<name>body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>body_set</name></name> = <name><name>add</name>-&gt;<name>body_set</name></name> || <name><name>base</name>-&gt;<name>body_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>disable_no_store</name></name> = (<name><name>add</name>-&gt;<name>disable_no_store_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>disable_no_store</name></name> : <name><name>add</name>-&gt;<name>disable_no_store</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>disable_no_store_set</name></name> = <name><name>add</name>-&gt;<name>disable_no_store_set</name></name> || <name><name>base</name>-&gt;<name>disable_no_store_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>loginsuccess</name></name> = (<name><name>add</name>-&gt;<name>loginsuccess_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>loginsuccess</name></name> : <name><name>add</name>-&gt;<name>loginsuccess</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>loginsuccess_set</name></name> = <name><name>add</name>-&gt;<name>loginsuccess_set</name></name> || <name><name>base</name>-&gt;<name>loginsuccess_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>loginrequired</name></name> = (<name><name>add</name>-&gt;<name>loginrequired_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>loginrequired</name></name> : <name><name>add</name>-&gt;<name>loginrequired</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>loginrequired_set</name></name> = <name><name>add</name>-&gt;<name>loginrequired_set</name></name> || <name><name>base</name>-&gt;<name>loginrequired_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>logout</name></name> = (<name><name>add</name>-&gt;<name>logout_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>logout</name></name> : <name><name>add</name>-&gt;<name>logout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>logout_set</name></name> = <name><name>add</name>-&gt;<name>logout_set</name></name> || <name><name>base</name>-&gt;<name>logout_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_authn_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>newp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_provider_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name>-&gt;<name>provider_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name>-&gt;<name>provider</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>newp</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unknown Authn provider: %s"</expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>newp</name>-&gt;<name>provider</name>-&gt;<name>check_password</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"The '%s' Authn provider doesn't support "
"Form Authentication"</expr></argument>, <argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>providers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>providers</name></name> = <name>newp</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>last</name> <init>= <expr><name><name>conf</name>-&gt;<name>providers</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>last</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>last</name> = <name><name>last</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>last</name>-&gt;<name>next</name></name> = <name>newp</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>check_string</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>string</name> || !*<name>string</name> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>'&amp;'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>directive</name></name></expr></argument>,
<argument><expr>" cannot be empty, or contain '=' or '&amp;'."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_location</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>location</name></name> = <name>location</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>location_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_username</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>username</name></name> = <name>username</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>username_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_password</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>password_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_method</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>method</name></name> = <name>method</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>method_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_mimetype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>mimetype</name></name> = <name>mimetype</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>mimetype_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_body</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body</name></name> = <name>body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>body_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_form_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>size</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
|| <name>size</name> &lt; 0 || <name>size</name> &gt; <name>APR_SIZE_MAX</name></expr>)</condition><then> <block>{
<return>return <expr>"AuthCookieFormSize must be a size in bytes, or zero."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>form_size</name></name> = (<name>apr_size_t</name>)<name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>form_size_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_login_required_location</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loginrequired</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>loginrequired</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>loginrequired</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Could not parse login required expression '%s': %s"</expr></argument>,
<argument><expr><name>loginrequired</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>loginrequired_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_login_success_location</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loginsuccess</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>loginsuccess</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>loginsuccess</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Could not parse login success expression '%s': %s"</expr></argument>,
<argument><expr><name>loginsuccess</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>loginsuccess_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_logout_location</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>logout</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>logout</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Could not parse logout required expression '%s': %s"</expr></argument>,
<argument><expr><name>logout</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>logout_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_site_passphrase</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>site</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>site</name></name> = <name>site</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>site_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_authoritative</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authoritative</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authoritative_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_fake_basic_auth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fakebasicauth</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fakebasicauth_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_disable_no_store</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_form_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>disable_no_store</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>disable_no_store_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>auth_form_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthFormProvider"</expr></argument>, <argument><expr><name>add_authn_provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"specify the auth providers for a directory or location"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormUsername"</expr></argument>, <argument><expr><name>set_cookie_form_username</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The field of the login form carrying the username"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormPassword"</expr></argument>, <argument><expr><name>set_cookie_form_password</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The field of the login form carrying the password"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormLocation"</expr></argument>, <argument><expr><name>set_cookie_form_location</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The field of the login form carrying the URL to redirect on "
"successful login."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormMethod"</expr></argument>, <argument><expr><name>set_cookie_form_method</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The field of the login form carrying the original request method."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormMimetype"</expr></argument>, <argument><expr><name>set_cookie_form_mimetype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The field of the login form carrying the original request mimetype."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormBody"</expr></argument>, <argument><expr><name>set_cookie_form_body</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The field of the login form carrying the urlencoded original request "
"body."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormSize"</expr></argument>, <argument><expr><name>set_cookie_form_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Maximum size of body parsed by the form parser"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormLoginRequiredLocation"</expr></argument>, <argument><expr><name>set_login_required_location</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"If set, redirect the browser to this URL rather than "
"return 401 Not Authorized."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormLoginSuccessLocation"</expr></argument>, <argument><expr><name>set_login_success_location</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"If set, redirect the browser to this URL when a login "
"processed by the login handler is successful."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormLogoutLocation"</expr></argument>, <argument><expr><name>set_logout_location</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The URL of the logout successful page. An attempt to access an "
"URL handled by the handler " <name>FORM_LOGOUT_HANDLER</name> " will result "
"in an redirect to this page after logout."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthFormSitePassphrase"</expr></argument>, <argument><expr><name>set_site_passphrase</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"If set, use this passphrase to determine whether the user should "
"be authenticated. Bypasses the user authentication check on "
"every website hit, and is useful for high traffic sites."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthFormAuthoritative"</expr></argument>, <argument><expr><name>set_authoritative</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Set to 'Off' to allow access control to be passed along to "
"lower modules if the UserID is not known to this module"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthFormFakeBasicAuth"</expr></argument>, <argument><expr><name>set_fake_basic_auth</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Set to 'On' to pass through authentication to the rest of the "
"server as a basic authentication header."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthFormDisableNoStore"</expr></argument>, <argument><expr><name>set_disable_no_store</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Set to 'on' to stop the sending of a Cache-Control no-store header with "
"the login screen. This allows the browser to cache the credentials, but "
"at the risk of it being possible for the login form to be resubmitted "
"and revealed to the backend server through XSS. Use at own risk."</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>auth_form_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>note_cookie_auth_failure</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_form_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>location</name></name> &amp;&amp; <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hook_note_cookie_auth_failure</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_type</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>auth_type</name></expr></argument>, <argument><expr>"form"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>note_cookie_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_notes_auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pw</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>notes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authname</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>r</name> = <name><name>r</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>notes</name> = <name><name>r</name>-&gt;<name>notes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>authname</name> = <call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-user"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-pw"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>method</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-method"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mimetype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-mimetype"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>get_notes_auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pw</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>mimetype</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>m</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>m</name>-&gt;<name/></name>main</expr>)</condition> <block>{
<expr_stmt><expr><name>m</name> = <name><name>m</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>m</name>-&gt;<name>prev</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>m</name> = <name><name>m</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>authname</name> = <call><name>ap_auth_name</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>user</name> = (<name>char</name> *) <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-user"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pw</name> = (<name>char</name> *) <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-pw"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>method</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>method</name> = (<name>char</name> *) <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-method"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mimetype</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mimetype</name> = (<name>char</name> *) <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-mimetype"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>user</name> &amp;&amp; *<name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = (<name>char</name> *) *<name>user</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"from notes: user: %s, pw: %s, method: %s, mimetype: %s"</expr></argument>,
<argument><expr><name>user</name> ? *<name>user</name> : "&lt;null&gt;"</expr></argument>, <argument><expr><name>pw</name> ? *<name>pw</name> : "&lt;null&gt;"</expr></argument>,
<argument><expr><name>method</name> ? *<name>method</name> : "&lt;null&gt;"</expr></argument>, <argument><expr><name>mimetype</name> ? *<name>mimetype</name> : "&lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>set_session_auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pw</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>site</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authname</name> <init>= <expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_rec</name> *</type><name>z</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>site</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hash</name> = <call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *) <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>site</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_session_load_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_session_set_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-" <name>MOD_SESSION_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_session_set_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-" <name>MOD_SESSION_PW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_session_set_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-" <name>MOD_AUTH_FORM_HASH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_session_auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pw</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>hash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authname</name> <init>= <expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_rec</name> *</type><name>z</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_session_load_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_session_get_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-" <name>MOD_SESSION_USER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_session_get_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-" <name>MOD_SESSION_PW</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_session_get_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>authname</name></expr></argument>, <argument><expr>"-" <name>MOD_AUTH_FORM_HASH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>user</name> &amp;&amp; *<name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = (<name>char</name> *) *<name>user</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"from session: " <name>MOD_SESSION_USER</name> ": %s, " <name>MOD_SESSION_PW</name>
": %s, " <name>MOD_AUTH_FORM_HASH</name> ": %s"</expr></argument>,
<argument><expr><name>user</name> ? *<name>user</name> : "&lt;null&gt;"</expr></argument>, <argument><expr><name>pw</name> ? *<name>pw</name> : "&lt;null&gt;"</expr></argument>,
<argument><expr><name>hash</name> ? *<name>hash</name> : "&lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_form_auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mimetype</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sent_user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sent_pw</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sent_loc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sent_method</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>sent_mimetype</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> **</type><name>sent_body</name></decl></param>,
<param><decl><type><name>auth_form_config_rec</name> *</type> <name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>pairs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_notes_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>, <argument><expr><name>sent_method</name></expr></argument>, <argument><expr><name>sent_mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>sent_user</name> &amp;&amp; *<name>sent_pw</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>ap_parse_form_data</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>pairs</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>form_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>pairs</name> &amp;&amp; !<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>ap_form_pair_t</name> *</type><name>pair</name> <init>= <expr>(<name>ap_form_pair_t</name> *) <call><name>apr_array_pop</name><argument_list>(<argument><expr><name>pairs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>username</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call> &amp;&amp; <name>sent_user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sent_user</name> = <name>buffer</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>password</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call> &amp;&amp; <name>sent_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sent_pw</name> = <name>buffer</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>location</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call> &amp;&amp; <name>sent_loc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sent_loc</name> = <name>buffer</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>method</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call> &amp;&amp; <name>sent_method</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sent_method</name> = <name>buffer</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mimetype</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>)</argument_list></call> &amp;&amp; <name>sent_mimetype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = (<name>apr_size_t</name>) <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>*<name>sent_mimetype</name> = <name>buffer</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>body</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>pair</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call> &amp;&amp; <name>sent_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>sent_body</name> = <name><name>pair</name>-&gt;<name>value</name></name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if>
}</block></while>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"from form: user: %s, pw: %s, method: %s, mimetype: %s, location: %s"</expr></argument>,
<argument><expr><name>sent_user</name> ? *<name>sent_user</name> : "&lt;null&gt;"</expr></argument>, <argument><expr><name>sent_pw</name> ? *<name>sent_pw</name> : "&lt;null&gt;"</expr></argument>,
<argument><expr><name>sent_method</name> ? *<name>sent_method</name> : "&lt;null&gt;"</expr></argument>,
<argument><expr><name>sent_mimetype</name> ? *<name>sent_mimetype</name> : "&lt;null&gt;"</expr></argument>,
<argument><expr><name>sent_loc</name> ? *<name>sent_loc</name> : "&lt;null&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sent_user</name> &amp;&amp; *<name>sent_user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = (<name>char</name> *) *<name>sent_user</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>sent_user</name> || !*<name>sent_user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02982</expr></argument>)</argument_list></call>
"form parsed, but username field '%s' was missing or empty, unauthorized"</expr></argument>,
<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>sent_pw</name> || !*<name>sent_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02983</expr></argument>)</argument_list></call>
"form parsed, but password field '%s' was missing or empty, unauthorized"</expr></argument>,
<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>set_notes_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>*<name>sent_user</name></expr></argument>, <argument><expr>*<name>sent_pw</name></expr></argument>, <argument><expr><name>sent_method</name> ? *<name>sent_method</name> : <name>NULL</name></expr></argument>,
<argument><expr><name>sent_mimetype</name> ? *<name>sent_mimetype</name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_site</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>site</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_hash</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>site</name> &amp;&amp; <name>sent_user</name> &amp;&amp; <name>sent_hash</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hash</name> <init>= <expr><call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *) <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>site</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>sent_hash</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_authn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_pw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_status</name></type> <name>auth_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>current_provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_form_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>current_provider</name> = <name><name>conf</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>current_provider</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AUTHN_DEFAULT_PROVIDER</name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider</name> || !<name><name>provider</name>-&gt;<name>check_password</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01806</expr></argument>)</argument_list></call>
"no authn provider configured"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_result</name> = <name>AUTH_GENERAL_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>, <argument><expr><name>AUTHN_DEFAULT_PROVIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>provider</name> = <name><name>current_provider</name>-&gt;<name>provider</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>, <argument><expr><name><name>current_provider</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>sent_user</name> || !<name>sent_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>AUTH_USER_NOT_FOUND</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>auth_result</name> = <call><name><name>provider</name>-&gt;<name>check_password</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth_result</name> != <name>AUTH_USER_NOT_FOUND</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>providers</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>current_provider</name> = <name><name>current_provider</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>current_provider</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>auth_result</name> != <name>AUTH_GRANTED</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>return_code</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>conf</name>-&gt;<name>authoritative</name></name>) &amp;&amp; <name>auth_result</name> != <name>AUTH_DENIED</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>auth_result</name></expr>)</condition> <block>{
<case>case <expr><name>AUTH_DENIED</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01807</expr></argument>)</argument_list></call>
"user '%s': authentication failure for \"%s\": "
"password Mismatch"</expr></argument>,
<argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>return_code</name> = <name>HTTP_UNAUTHORIZED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AUTH_USER_NOT_FOUND</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01808</expr></argument>)</argument_list></call>
"user '%s' not found: %s"</expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>return_code</name> = <name>HTTP_UNAUTHORIZED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AUTH_GENERAL_ERROR</name></expr>:
</case><default>default:
<expr_stmt><expr><name>return_code</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>return_code</name> == <name>HTTP_UNAUTHORIZED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>note_cookie_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>return_code</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fake_basic_authentication</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pw</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>fakebasicauth</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>basic</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name> <init>= <expr>(<name>apr_size_t</name>) <call><name>strlen</name><argument_list>(<argument><expr><name>basic</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>base64</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_base64_encode_len</name><argument_list>(<argument><expr><name>size</name> + 1</expr></argument>)</argument_list></call> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_base64_encode</name><argument_list>(<argument><expr><name>base64</name></expr></argument>, <argument><expr><name>basic</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Basic "</expr></argument>, <argument><expr><name>base64</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_form_authn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_form_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_user</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sent_pw</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sent_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_loc</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sent_method</name> <init>= <expr>"GET"</expr></init>, *<name>sent_mimetype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>current_auth</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>HTTP_UNAUTHORIZED</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>current_auth</name> = <call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>current_auth</name> || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>current_auth</name></expr></argument>, <argument><expr>"form"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01809</expr></argument>)</argument_list></call>
"form auth cannot be used for proxy "
"requests due to XSS risk, access denied: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01810</expr></argument>)</argument_list></call>
"need AuthName: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = (<name>char</name> *) <name>current_auth</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>get_notes_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>sent_user</name></expr></argument>, <argument><expr>&amp;<name>sent_pw</name></expr></argument>, <argument><expr>&amp;<name>sent_method</name></expr></argument>, <argument><expr>&amp;<name>sent_mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sent_user</name> || !<name>sent_pw</name> || !*<name>sent_user</name> || !*<name>sent_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>get_session_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>sent_user</name></expr></argument>, <argument><expr>&amp;<name>sent_pw</name></expr></argument>, <argument><expr>&amp;<name>sent_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>res</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>res</name> &amp;&amp; <name>sent_user</name> &amp;&amp; <name>sent_hash</name> &amp;&amp; <name>sent_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>check_site</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>site</name></name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fake_basic_authentication</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>res</name> &amp;&amp; <name>sent_user</name> &amp;&amp; <name>sent_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>check_authn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fake_basic_authentication</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>HTTP_UNAUTHORIZED</name> == <name>rv</name> &amp;&amp; <name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_POST</name> &amp;&amp; <call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>sent_body</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rr</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rr</name>-&gt;<name>headers_in</name></name> = <name><name>r</name>-&gt;<name>headers_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_insert_filter</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_form_auth</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>password</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>mimetype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>body</name></name></expr></argument>,
<argument><expr>&amp;<name>sent_user</name></expr></argument>, <argument><expr>&amp;<name>sent_pw</name></expr></argument>, <argument><expr>&amp;<name>sent_loc</name></expr></argument>, <argument><expr>&amp;<name>sent_method</name></expr></argument>,
<argument><expr>&amp;<name>sent_mimetype</name></expr></argument>, <argument><expr>&amp;<name>sent_body</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sent_body</name> &amp;&amp; <name>sent_mimetype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr><name>sent_mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>kept_body</name></name> = <name>sent_body</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>kept_body</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_request_insert_filter_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sent_method</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name>sent_method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name>FORM_REDIRECT_HANDLER</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>check_authn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fake_basic_authentication</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_session_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>site</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sent_loc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>sent_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>loginsuccess</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loginsuccess</name> <init>= <expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>loginsuccess</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>loginsuccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02339</expr></argument>)</argument_list></call>
"Can't evaluate login success expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>HTTP_UNAUTHORIZED</name> == <name>rv</name> &amp;&amp; <name><name>conf</name>-&gt;<name>loginrequired</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loginrequired</name> <init>= <expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>loginrequired</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>loginrequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02340</expr></argument>)</argument_list></call>
"Can't evaluate login required expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>sent_loc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>sent_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>HTTP_MOVED_TEMPORARILY</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>HTTP_UNAUTHORIZED</name> == <name>rv</name> &amp;&amp; !<name><name>conf</name>-&gt;<name>disable_no_store</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-store"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-store"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_form_login_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_user</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sent_pw</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sent_loc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>FORM_LOGIN_HANDLER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01811</expr></argument>)</argument_list></call>
"the " <name>FORM_LOGIN_HANDLER</name> " only supports the POST method for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>auth_form_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_form_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>username</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>password</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>location</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>sent_user</name></expr></argument>, <argument><expr>&amp;<name>sent_pw</name></expr></argument>, <argument><expr>&amp;<name>sent_loc</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>check_authn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>set_session_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>site</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sent_loc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>sent_loc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>loginsuccess</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loginsuccess</name> <init>= <expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>loginsuccess</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>loginsuccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02341</expr></argument>)</argument_list></call>
"Can't evaluate login success expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>HTTP_OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>HTTP_UNAUTHORIZED</name> == <name>rv</name> &amp;&amp; <name><name>conf</name>-&gt;<name>loginrequired</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loginrequired</name> <init>= <expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>loginrequired</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>loginrequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02342</expr></argument>)</argument_list></call>
"Can't evaluate login required expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_form_logout_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_form_config_rec</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>FORM_LOGOUT_HANDLER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>auth_form_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_session_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-store"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-store"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>logout</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logout</name> <init>= <expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>logout</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>logout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_TEMPORARY_REDIRECT</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02343</expr></argument>)</argument_list></call>
"Can't evaluate logout expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>HTTP_OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_form_redirect_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_method</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sent_mimetype</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>FORM_REDIRECT_HANDLER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>get_notes_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>sent_method</name></expr></argument>, <argument><expr>&amp;<name>sent_mimetype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>kept_body</name></name> &amp;&amp; <name>sent_method</name> &amp;&amp; <name>sent_mimetype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01812</expr></argument>)</argument_list></call>
"internal redirect to method '%s' and body mimetype '%s' for the "
"uri: %s"</expr></argument>, <argument><expr><name>sent_method</name></expr></argument>, <argument><expr><name>sent_mimetype</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rr</name> = <call><name>ap_sub_req_method_uri</name><argument_list>(<argument><expr><name>sent_method</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <call><name>ap_run_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01813</expr></argument>)</argument_list></call>
"internal redirect requested but one or all of method, mimetype or "
"body are NULL: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name> || <name><name>r</name>-&gt;<name>status</name></name> == <name>OK</name> ? <name>OK</name> : <name><name>r</name>-&gt;<name>status</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_form_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>ap_session_load_fn</name> || !<name>ap_session_get_fn</name> || !<name>ap_session_set_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_session_load_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_session_load</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_session_get_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_session_get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_session_set_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_session_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_session_load_fn</name> || !<name>ap_session_get_fn</name> || !<name>ap_session_set_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02617</expr></argument>)</argument_list></call>
"You must load mod_session to enable the mod_auth_form "
"functions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>ap_request_insert_filter_fn</name> || !<name>ap_request_remove_filter_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_request_insert_filter_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_request_insert_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_request_remove_filter_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_request_remove_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_request_insert_filter_fn</name> || !<name>ap_request_remove_filter_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02618</expr></argument>)</argument_list></call>
"You must load mod_request to enable the mod_auth_form "
"functions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>authenticate_form_post_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AP_MODULE_MAGIC_AT_LEAST</name><argument_list>(<argument><expr>20080403,1</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>authenticate_form_authn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ap_hook_check_user_id</name><argument_list>(<argument><expr><name>authenticate_form_authn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>authenticate_form_login_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>authenticate_form_logout_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>authenticate_form_redirect_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_note_auth_failure</name><argument_list>(<argument><expr><name>hook_note_cookie_auth_failure</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>auth_form</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_auth_form_dir_config</name></expr>,
<expr><name>merge_auth_form_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>auth_form_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
