<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/aaa/mod_auth_digest.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_sha1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_rmm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>digest_config_struct</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>qop_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sha1_ctx_t</name></type> <name>nonce_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>nonce_lifetime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nonce_format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>check_nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>uri_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ha1</name></decl>;</decl_stmt>
}</block></struct></type> <name>digest_config_rec</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_ALGORITHM</name></cpp:macro> <cpp:value>"MD5"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFLT_NONCE_LIFE</name></cpp:macro> <cpp:value>apr_time_from_sec(300)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXTNONCE_DELTA</name></cpp:macro> <cpp:value>apr_time_from_sec(30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONCE_TIME_LEN</name></cpp:macro> <cpp:value>(((sizeof(apr_time_t)+2)/3)*4)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONCE_HASH_LEN</name></cpp:macro> <cpp:value>(2*APR_SHA1_DIGESTSIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NONCE_LEN</name></cpp:macro> <cpp:value>(int )(NONCE_TIME_LEN + NONCE_HASH_LEN)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECRET_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>hash_entry</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>hash_entry</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nonce_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ha1</name><index>[<expr>2*<name>APR_MD5_DIGESTSIZE</name>+1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>last_nonce</name><index>[<expr><name>NONCE_LEN</name>+1</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>client_entry</name>;</typedef>
<struct><specifier>static</specifier> struct <name>hash_table</name> <block>{
<decl_stmt><decl><type><name>client_entry</name> **</type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>tbl_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_created</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_removed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_renewed</name></decl>;</decl_stmt>
}</block> <decl>*<name>client_list</name></decl>;</struct>
<enum>enum <name>hdr_sts</name> <block>{ <decl><name>NO_HEADER</name></decl>, <decl><name>NOT_DIGEST</name></decl>, <decl><name>INVALID</name></decl>, <decl><name>VALID</name></decl> }</block>;</enum>
<typedef>typedef <type><struct>struct <name>digest_header_struct</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>nonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>algorithm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cnonce</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opaque</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>opaque_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>message_qop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nonce_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>raw_request_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>psd_request_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>nonce_time</name></decl>;</decl_stmt>
<enum>enum <name>hdr_sts</name> <name>auth_hdr_sts</name>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>needed_auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client_entry</name> *</type><name>client</name></decl>;</decl_stmt>
}</block></struct></type> <name>digest_header_rec</name>;</typedef>
<typedef>typedef <type><union>union <name>time_union</name> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>arr</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
}</block></union></type> <name>time_rec</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>secret</name><index>[<expr><name>SECRET_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_shm_t</name> *</type><name>client_shm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_rmm_t</name> *</type><name>client_rmm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> *</type><name>opaque_cntr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_time_t</name> *</type><name>otn_counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_global_mutex_t</name> *</type><name>client_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_global_mutex_t</name> *</type><name>opaque_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>client_mutex_type</name> <init>= <expr>"authdigest-client"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>opaque_mutex_type</name> <init>= <expr>"authdigest-opaque"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>client_shm_filename</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_SHMEM_SIZE</name></cpp:macro> <cpp:value>1000L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF_NUM_BUCKETS</name></cpp:macro> <cpp:value>15L</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_DEPTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>shmem_size</name> <init>= <expr><name>DEF_SHMEM_SIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>num_buckets</name> <init>= <expr><name>DEF_NUM_BUCKETS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>auth_digest_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_tables</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>not_used</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01756</expr></argument>)</argument_list></call>
"cleaning up shared memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>client_rmm</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_rmm_destroy</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>client_rmm</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>client_shm</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_destroy</name><argument_list>(<argument><expr><name>client_shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>client_shm</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>client_lock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_global_mutex_destroy</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>client_lock</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>opaque_lock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_global_mutex_destroy</name><argument_list>(<argument><expr><name>opaque_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>opaque_lock</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>client_list</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>initialize_secret</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01757</expr></argument>)</argument_list></call>
"generating secret for digest authentication ..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_RANDOM</name></expr></cpp:if>
<expr_stmt><expr><name>status</name> = <call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:error>#<cpp:directive>error</cpp:directive> APR random number support is missing; you probably need to install the truerand library.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01758</expr></argument>)</argument_list></call>
"error generating secret"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01759</expr></argument>)</argument_list></call> "done"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_error_and_cleanup</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>sts</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01760</expr></argument>)</argument_list></call>
"%s - all nonce-count checking, one-time nonces, and "
"MD5-sess algorithm disabled"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cleanup_tables</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>rmm_malloc</name><parameter_list>(<param><decl><type><name>apr_rmm_t</name> *</type><name>rmm</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_rmm_off_t</name></type> <name>offset</name> <init>= <expr><call><name>apr_rmm_malloc</name><argument_list>(<argument><expr><name>rmm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>offset</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_rmm_addr_get</name><argument_list>(<argument><expr><name>rmm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>rmm_free</name><parameter_list>(<param><decl><type><name>apr_rmm_t</name> *</type><name>rmm</name></decl></param>, <param><decl><type><name>void</name> *</type><name>alloc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_rmm_off_t</name></type> <name>offset</name> <init>= <expr><call><name>apr_rmm_offset_get</name><argument_list>(<argument><expr><name>rmm</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>apr_rmm_free</name><argument_list>(<argument><expr><name>rmm</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>initialize_tables</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>sts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>client_shm_filename</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"authdigest_shm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>client_shm_filename</name> = <call><name>ap_append_pid</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>client_shm_filename</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sts</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>client_shm</name></expr></argument>, <argument><expr><name>shmem_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>sts</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name>client_shm_filename</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sts</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>client_shm</name></expr></argument>, <argument><expr><name>shmem_size</name></expr></argument>,
<argument><expr><name>client_shm_filename</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>sts</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01762</expr></argument>)</argument_list></call>
"Failed to create shared memory segment on file %s"</expr></argument>,
<argument><expr><name>client_shm_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to initialize shm"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sts</name> = <call><name>apr_rmm_init</name><argument_list>(<argument><expr>&amp;<name>client_rmm</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>client_shm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>shmem_size</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to initialize rmm"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>client_list</name> = <call><name>rmm_malloc</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>client_list</name></expr></argument>)</argument_list></sizeof> +
<sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name> *</expr></argument>)</argument_list></sizeof> * <name>num_buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>client_list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to allocate shared memory"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>table</name></name> = <call>(<name>client_entry</name>**) <argument_list>(<argument><expr><name>client_list</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name>num_buckets</name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>tbl_len</name></name> = <name>num_buckets</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>num_entries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>sts</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name>client_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>client_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to create lock (client_lock)"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>opaque_cntr</name> = <call><name>rmm_malloc</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>opaque_cntr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opaque_cntr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to allocate shared memory"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>opaque_cntr</name> = 1UL</expr>;</expr_stmt>
<expr_stmt><expr><name>sts</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name>opaque_lock</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>opaque_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to create lock (opaque_lock)"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>otn_counter</name> = <call><name>rmm_malloc</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>otn_counter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>otn_counter</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to allocate shared memory"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>otn_counter</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pre_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>client_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>opaque_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>initialize_module</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then>
<return>return <expr><name>OK</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>initialize_secret</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>initialize_tables</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cleanup_tables</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_child</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>sts</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>client_shm</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>sts</name> = <call><name>apr_rmm_attach</name><argument_list>(<argument><expr>&amp;<name>client_rmm</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>client_shm</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to attach to rmm"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>sts</name> = <call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr>&amp;<name>client_lock</name></expr></argument>,
<argument><expr><call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to create lock (client_lock)"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>sts</name> = <call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr>&amp;<name>opaque_lock</name></expr></argument>,
<argument><expr><call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr><name>opaque_lock</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_error_and_cleanup</name><argument_list>(<argument><expr>"failed to create lock (opaque_lock)"</expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_digest_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>conf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dir</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = (<name>digest_config_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest_config_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>qop_list</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> = <name>DFLT_NONCE_LIFE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dir_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>algorithm</name></name> = <name>DFLT_ALGORITHM</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_realm</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>digest_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>realm</name></name> = <name>realm</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sha1_init</name><argument_list>(<argument><expr>&amp;<name><name>conf</name>-&gt;<name>nonce_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sha1_update_binary</name><argument_list>(<argument><expr>&amp;<name><name>conf</name>-&gt;<name>nonce_ctx</name></name></expr></argument>, <argument><expr><name>secret</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sha1_update_binary</name><argument_list>(<argument><expr>&amp;<name><name>conf</name>-&gt;<name>nonce_ctx</name></name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name> *) <name>realm</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINE_CMD</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_authn_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>digest_config_rec</name>*)<name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>newp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_provider_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name>-&gt;<name>provider_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name>-&gt;<name>provider</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>newp</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unknown Authn provider: %s"</expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>newp</name>-&gt;<name>provider</name>-&gt;<name>get_realm_hash</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"The '%s' Authn provider doesn't support "
"Digest Authentication"</expr></argument>, <argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>providers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>providers</name></name> = <name>newp</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>last</name> <init>= <expr><name><name>conf</name>-&gt;<name>providers</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>last</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>last</name> = <name><name>last</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>last</name>-&gt;<name>next</name></name> = <name>newp</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_qop</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>digest_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_array_clear</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call> = "none"</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>"auth-int"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"AuthDigestQop auth-int is not implemented"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>"auth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unrecognized qop: "</expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call> = <name>op</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_nonce_lifetime</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>lifetime</name></decl>;</decl_stmt>
<expr_stmt><expr><name>lifetime</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endptr</name> &lt; (<name>t</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call>) &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid time in AuthDigestNonceLifetime: "</expr></argument>,
<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>((<name>digest_config_rec</name> *) <name>config</name>)-&gt;<name>nonce_lifetime</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>lifetime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_nonce_format</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>((<name>digest_config_rec</name> *) <name>config</name>)-&gt;<name>nonce_format</name> = <name>fmt</name></expr>;</expr_stmt>
<return>return <expr>"AuthDigestNonceFormat is not implemented (yet)"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_nc_check</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr><name>flag</name></expr>)</condition><then> <block>{
<return>return <expr>"AuthDigestNcCheck: ERROR: nonce-count checking "
"is not supported on platforms without shared-memory "
"support"</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>((<name>digest_config_rec</name> *) <name>config</name>)-&gt;<name>check_nc</name> = <name>flag</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_algorithm</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>alg</name></expr></argument>, <argument><expr>"MD5-sess"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"AuthDigestAlgorithm: ERROR: algorithm `MD5-sess' "
"is not fully implemented"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>alg</name></expr></argument>, <argument><expr>"MD5"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid algorithm in AuthDigestAlgorithm: "</expr></argument>, <argument><expr><name>alg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr>((<name>digest_config_rec</name> *) <name>config</name>)-&gt;<name>algorithm</name> = <name>alg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_uri_list</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>c</name> <init>= <expr>(<name>digest_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>uri_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>uri_list</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>uri_list</name></name></expr></argument>)</argument_list></call>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>uri_list</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>uri_list</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>uri_list</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>", domain=\""</expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_shmem_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>size_str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>min</name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>size_str</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition> <expr_stmt><expr><name>endptr</name>++</expr>;</expr_stmt></while>
<if>if <condition>(<expr>*<name>endptr</name> == '\0' || *<name>endptr</name> == 'b' || *<name>endptr</name> == 'B'</expr>)</condition><then> <block>{
<empty_stmt>;</empty_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>endptr</name> == 'k' || *<name>endptr</name> == 'K'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>size</name> *= 1024</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>endptr</name> == 'm' || *<name>endptr</name> == 'M'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>size</name> *= 1048576</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid size in AuthDigestShmemSize: "</expr></argument>,
<argument><expr><name>size_str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name>min</name> = <sizeof>sizeof<argument_list>(<argument><expr>*<name>client_list</name></expr></argument>)</argument_list></sizeof> + <sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name>*</expr></argument>)</argument_list></sizeof> + <sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &lt; <name>min</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"size in AuthDigestShmemSize too small: "
"%ld &lt; %ld"</expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>shmem_size</name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_buckets</name> = (<name>size</name> - <sizeof>sizeof<argument_list>(<argument><expr>*<name>client_list</name></expr></argument>)</argument_list></sizeof>) /
(<sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name>*</expr></argument>)</argument_list></sizeof> + <name>HASH_DEPTH</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name></expr></argument>)</argument_list></sizeof>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>num_buckets</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>num_buckets</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01763</expr></argument>)</argument_list></call>
"Set shmem-size: %" <name>APR_SIZE_T_FMT</name> ", num-buckets: %ld"</expr></argument>,
<argument><expr><name>shmem_size</name></expr></argument>, <argument><expr><name>num_buckets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>digest_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthName"</expr></argument>, <argument><expr><name>set_realm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The authentication realm (e.g. \"Members Only\")"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthDigestProvider"</expr></argument>, <argument><expr><name>add_authn_provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"specify the auth providers for a directory or location"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthDigestQop"</expr></argument>, <argument><expr><name>set_qop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"A list of quality-of-protection options"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDigestNonceLifetime"</expr></argument>, <argument><expr><name>set_nonce_lifetime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Maximum lifetime of the server nonce (seconds)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDigestNonceFormat"</expr></argument>, <argument><expr><name>set_nonce_format</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The format to use when generating the server nonce"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthDigestNcCheck"</expr></argument>, <argument><expr><name>set_nc_check</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Whether or not to check the nonce-count sent by the client"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDigestAlgorithm"</expr></argument>, <argument><expr><name>set_algorithm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The algorithm used for the hash calculation"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthDigestDomain"</expr></argument>, <argument><expr><name>set_uri_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"A list of URI's which belong to the same protection space as the current URI"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDigestShmemSize"</expr></argument>, <argument><expr><name>set_shmem_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The amount of shared memory to allocate for keeping track of clients"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>client_entry</name> *</type><name>get_client</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>long</name></type> <name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client_entry</name> *</type><name>entry</name></decl>, *<decl><type ref="prev"/><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>key</name> || !<name>client_shm</name></expr>)</condition><then> <return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>bucket</name> = <name>key</name> % <name><name>client_list</name>-&gt;<name>tbl_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>entry</name> &amp;&amp; <name>key</name> != <name><name>entry</name>-&gt;<name>key</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>prev</name> = <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <name><name>entry</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>entry</name> &amp;&amp; <name>prev</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>prev</name>-&gt;<name>next</name></name> = <name><name>entry</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>next</name></name> = <name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>bucket</name></expr>]</index></name> = <name>entry</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01764</expr></argument>)</argument_list></call>
"get_client(): client %lu found"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01765</expr></argument>)</argument_list></call>
"get_client(): client %lu not found"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>entry</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type> <name>gc</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>client_entry</name> *</type><name>entry</name></decl>, *<decl><type ref="prev"/><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>num_removed</name> <init>= <expr>0</expr></init>, <name>idx</name></decl>;</decl_stmt>
<for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>client_list</name>-&gt;<name>tbl_len</name></name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>entry</name> = <name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<while>while <condition>(<expr><name><name>entry</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>prev</name> = <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <name><name>entry</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>prev</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>prev</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>entry</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>rmm_free</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>num_removed</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10007</expr></argument>)</argument_list></call>
"Failed to free auth_digest client allocation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>num_entries</name></name> -= <name>num_removed</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>num_removed</name></name> += <name>num_removed</name></expr>;</expr_stmt>
<return>return <expr><name>num_removed</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>client_entry</name> *</type><name>add_client</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>long</name></type> <name>key</name></decl></param>, <param><decl><type><name>client_entry</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client_entry</name> *</type><name>entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>key</name> || !<name>client_shm</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bucket</name> = <name>key</name> % <name><name>client_list</name>-&gt;<name>tbl_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>rmm_malloc</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>num_removed</name> <init>= <expr><call><name>gc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01766</expr></argument>)</argument_list></call>
"gc'd %ld client entries. Total new clients: "
"%ld; Total removed clients: %ld; Total renewed clients: "
"%ld"</expr></argument>, <argument><expr><name>num_removed</name></expr></argument>,
<argument><expr><name><name>client_list</name>-&gt;<name>num_created</name></name> - <name><name>client_list</name>-&gt;<name>num_renewed</name></name></expr></argument>,
<argument><expr><name><name>client_list</name>-&gt;<name>num_removed</name></name></expr></argument>, <argument><expr><name><name>client_list</name>-&gt;<name>num_renewed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>rmm_malloc</name><argument_list>(<argument><expr><name>client_rmm</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>entry</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01767</expr></argument>)</argument_list></call>
"unable to allocate new auth_digest client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>client_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>entry</name>-&gt;<name>next</name></name> = <name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>bucket</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>table</name><index>[<expr><name>bucket</name></expr>]</index></name> = <name>entry</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>num_created</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>num_entries</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>client_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01768</expr></argument>)</argument_list></call>
"allocated new client %lu"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>entry</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_digest_rec</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vk</name> <init>= <expr>0</expr></init>, <name>vv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auth_line</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>,
<argument><expr>(<name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>)
? "Proxy-Authorization"
: "Authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>auth_line</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> = <name>NO_HEADER</name></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>scheme</name></name> = <call><name>ap_getword_white</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>auth_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr>"Digest"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> = <name>NOT_DIGEST</name></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>l</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>auth_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>l</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>l</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition> <block>{
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>vk</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '=' &amp;&amp; <name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != ','
&amp;&amp; <name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0' &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name><name>key</name><index>[<expr><name>vk</name>++</expr>]</index></name> = *<name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>key</name><index>[<expr><name>vk</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>vv</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> == '='</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> == '\"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\"' &amp;&amp; <name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> == '\\' &amp;&amp; <name><name>auth_line</name><index>[<expr>1</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>vv</name>++</expr>]</index></name> = *<name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<while>while <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != ',' &amp;&amp; <name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0'
&amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name><name>value</name><index>[<expr><name>vv</name>++</expr>]</index></name> = *<name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>value</name><index>[<expr><name>vv</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != ',' &amp;&amp; <name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>auth_line</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"username"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>username</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"realm"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>realm</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"nonce"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>nonce</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"uri"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>uri</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"response"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>digest</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"algorithm"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>algorithm</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"cnonce"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>cnonce</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"opaque"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>opaque</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"qop"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>message_qop</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"nc"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>nonce_count</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></while>
<if>if <condition>(<expr>!<name><name>resp</name>-&gt;<name>username</name></name> || !<name><name>resp</name>-&gt;<name>realm</name></name> || !<name><name>resp</name>-&gt;<name>nonce</name></name> || !<name><name>resp</name>-&gt;<name>uri</name></name>
|| !<name><name>resp</name>-&gt;<name>digest</name></name>
|| (<name><name>resp</name>-&gt;<name>message_qop</name></name> &amp;&amp; (!<name><name>resp</name>-&gt;<name>cnonce</name></name> || !<name><name>resp</name>-&gt;<name>nonce_count</name></name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> = <name>INVALID</name></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>opaque</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>opaque_num</name></name> = (<name>unsigned</name> <name>long</name>) <call><name>strtol</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>opaque</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> = <name>VALID</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_hdr_and_update_nc</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>resp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest_header_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>raw_request_uri</name></name> = <name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>psd_request_uri</name></name> = &amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>needed_auth</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>method</name></name> = <name><name>r</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>auth_digest_module</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>get_digest_rec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name></name> = <call><name>get_client</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>opaque_num</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> == <name>OK</name> &amp;&amp; <name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>nonce_count</name></name>++</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_nonce_hash</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>hash</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>timestr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opaque</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>server</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>sha1</name><index>[<expr><name>APR_SHA1_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sha1_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr>&amp;<name><name>conf</name>-&gt;<name>nonce_ctx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sha1_update_binary</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name> *) <name>timestr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>opaque</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sha1_update_binary</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name> *) <name>opaque</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sha1_final</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_bin2hex</name><argument_list>(<argument><expr><name>sha1</name></expr></argument>, <argument><expr><name>APR_SHA1_DIGESTSIZE</name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>gen_nonce</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>now</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opaque</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>server</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>nonce</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NONCE_LEN</name>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_rec</name></type> <name>t</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>t</name>.<name>time</name></name> = <name>now</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>otn_counter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>t</name>.<name>time</name></name> = (*<name>otn_counter</name>)++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>t</name>.<name>time</name></name> = 42</expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>apr_base64_encode_binary</name><argument_list>(<argument><expr><name>nonce</name></expr></argument>, <argument><expr><name><name>t</name>.<name>arr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>t</name>.<name>arr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_nonce_hash</name><argument_list>(<argument><expr><name>nonce</name>+<name>NONCE_TIME_LEN</name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>nonce</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>client_entry</name> *</type><name>gen_client</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>client_entry</name></type> <name>new_entry</name> <init>= <expr><block>{ <expr>0</expr>, <expr><name>NULL</name></expr>, <expr>0</expr>, <expr>""</expr>, <expr>""</expr> }</block></expr></init>, *<name>entry</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>opaque_cntr</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>opaque_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>op</name> = (*<name>opaque_cntr</name>)++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>opaque_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>entry</name> = <call><name>add_client</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>&amp;<name>new_entry</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01769</expr></argument>)</argument_list></call>
"failed to allocate client entry - ignoring client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>entry</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_userpw_hash</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_header_rec</name> *</type><name>resp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *) <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>ha1</name></name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>,
<argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_session_HA1</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>int</name></type> <name>generate</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ha1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>opaque</name></name> &amp;&amp; <name><name>resp</name>-&gt;<name>client</name></name> &amp;&amp; <name><name>resp</name>-&gt;<name>client</name>-&gt;<name>ha1</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>ha1</name></name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<name>generate</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name></name> = <call><name>gen_client</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ha1</name> = <call><name>get_userpw_hash</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ha1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>ha1</name></name></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>ha1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>ha1</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_session</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>digest_header_rec</name> *</type><name>resp</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>ha1</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ltox</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>unsigned</name> <name>long</name></type> <name>num</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>num</name> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%lx"</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>""</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>note_digest_auth_failure</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl></param>, <param><decl><type><name>int</name></type> <name>stale</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>qop</name></decl>, *<decl><type ref="prev"/><name>opaque</name></decl>, *<decl><type ref="prev"/><name>opaque_param</name></decl>, *<decl><type ref="prev"/><name>domain</name></decl>, *<decl><type ref="prev"/><name>nonce</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>qop</name> = ", qop=\"auth\""</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>*(const <name>char</name> **)(<name><name>conf</name>-&gt;<name>qop_list</name>-&gt;<name>elts</name></name>)</expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>qop</name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>qop</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>", qop=\""</expr></argument>,
<argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\""</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>opaque</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>conf</name>-&gt;<name>check_nc</name></name> || <name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> == 0
|| !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr>"MD5-sess"</expr></argument>)</argument_list></call>)
&amp;&amp; (<name><name>resp</name>-&gt;<name>client</name></name> = <call><name>gen_client</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opaque</name> = <call><name>ltox</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>opaque</name> = ""</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>resp</name>-&gt;<name>client</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name></name> = <call><name>gen_client</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>client</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opaque</name> = <call><name>ltox</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stale</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>client_list</name>-&gt;<name>num_renewed</name></name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>opaque</name> = ""</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>opaque</name> = <name><name>resp</name>-&gt;<name>opaque</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>nonce_count</name></name> = 0</expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>opaque</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>opaque_param</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>", opaque=\""</expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>opaque_param</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>nonce</name> = <call><name>gen_nonce</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>client</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>last_nonce</name></name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>NONCE_LEN</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr>"MD5-sess"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>clear_session</name><argument_list>(<argument><expr><name>resp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> || !<name><name>conf</name>-&gt;<name>uri_list</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>domain</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>domain</name> = <name><name>conf</name>-&gt;<name>uri_list</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr>(<name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>)
? "Proxy-Authenticate" : "WWW-Authenticate"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Digest realm=\"%s\", "
"nonce=\"%s\", algorithm=%s%s%s%s%s"</expr></argument>,
<argument><expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>algorithm</name></name></expr></argument>,
<argument><expr><name>opaque_param</name> ? <name>opaque_param</name> : ""</expr></argument>,
<argument><expr><name>domain</name> ? <name>domain</name> : ""</expr></argument>,
<argument><expr><name>stale</name> ? ", stale=true" : ""</expr></argument>, <argument><expr><name>qop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hook_note_digest_auth_failure</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>mainreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>conf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>auth_type</name></expr></argument>, <argument><expr>"Digest"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><name>mainreq</name> = <name>r</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>mainreq</name>-&gt;<name/></name>main != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>mainreq</name> = <name><name>mainreq</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>mainreq</name>-&gt;<name>prev</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>mainreq</name> = <name><name>mainreq</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>resp</name> = (<name>digest_header_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>mainreq</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_digest_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>needed_auth</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>conf</name> = (<name>digest_config_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_digest_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>get_hash</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_status</name></type> <name>auth_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>current_provider</name></decl>;</decl_stmt>
<expr_stmt><expr><name>current_provider</name> = <name><name>conf</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>current_provider</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AUTHN_DEFAULT_PROVIDER</name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider</name> || !<name><name>provider</name>-&gt;<name>get_realm_hash</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01770</expr></argument>)</argument_list></call>
"No Authn provider configured"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_result</name> = <name>AUTH_GENERAL_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>, <argument><expr><name>AUTHN_DEFAULT_PROVIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>provider</name> = <name><name>current_provider</name>-&gt;<name>provider</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>, <argument><expr><name><name>current_provider</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>auth_result</name> = <call><name><name>provider</name>-&gt;<name>get_realm_hash</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>,
<argument><expr>&amp;<name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth_result</name> != <name>AUTH_USER_NOT_FOUND</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>providers</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>current_provider</name> = <name><name>current_provider</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>current_provider</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>auth_result</name> == <name>AUTH_USER_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ha1</name></name> = <name>password</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>auth_result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_nc</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>digest_header_rec</name> *</type><name>resp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>nc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>snc</name> <init>= <expr><name><name>resp</name>-&gt;<name>nonce_count</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>check_nc</name></name> &amp;&amp; !<name>client_shm</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01771</expr></argument>)</argument_list></call>
"cannot check nonce count without shared memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>check_nc</name></name> || !<name>client_shm</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call> &amp;&amp;
!<call><name>strcasecmp</name><argument_list>(<argument><expr>*(const <name>char</name> **)(<name><name>conf</name>-&gt;<name>qop_list</name>-&gt;<name>elts</name></name>)</expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>snc</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01772</expr></argument>)</argument_list></call>
"invalid nc %s received - no nonce count allowed when qop=none"</expr></argument>,
<argument><expr><name>snc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>nc</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>snc</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>endptr</name> &lt; (<name>snc</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>snc</name></expr></argument>)</argument_list></call>) &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>endptr</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01773</expr></argument>)</argument_list></call>
"invalid nc %s received - not a number"</expr></argument>, <argument><expr><name>snc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>nc</name> != <name><name>resp</name>-&gt;<name>client</name>-&gt;<name>nonce_count</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01774</expr></argument>)</argument_list></call>
"Warning, possible replay attack: nonce-count "
"check failed: %lu != %lu"</expr></argument>, <argument><expr><name>nc</name></expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>nonce_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_nonce</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>dt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_rec</name></type> <name>nonce_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name><name>hash</name><index>[<expr><name>NONCE_HASH_LEN</name>+1</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>)</argument_list></call> != <name>NONCE_LEN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01775</expr></argument>)</argument_list></call>
"invalid nonce %s received - length is not %d"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name>NONCE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tmp</name> = <name><name>resp</name>-&gt;<name>nonce</name><index>[<expr><name>NONCE_TIME_LEN</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>nonce</name><index>[<expr><name>NONCE_TIME_LEN</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_base64_decode_binary</name><argument_list>(<argument><expr><name><name>nonce_time</name>.<name>arr</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>gen_nonce_hash</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>opaque</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>nonce</name><index>[<expr><name>NONCE_TIME_LEN</name></expr>]</index></name> = <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>nonce_time</name></name> = <name><name>nonce_time</name>.<name>time</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name>+<name>NONCE_TIME_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01776</expr></argument>)</argument_list></call>
"invalid nonce %s received - hash is not %s"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dt</name> = <name><name>r</name>-&gt;<name>request_time</name></name> - <name><name>nonce_time</name>.<name>time</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> &gt; 0 &amp;&amp; <name>dt</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01777</expr></argument>)</argument_list></call>
"invalid nonce %s received - user attempted "
"time travel"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>dt</name> &gt; <name><name>conf</name>-&gt;<name>nonce_lifetime</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>,<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01778</expr></argument>)</argument_list></call>
"user %s: nonce expired (%.2f seconds old "
"- max lifetime %.2f) - sending new nonce"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr>(<name>double</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name>double</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> == 0 &amp;&amp; <name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>last_nonce</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name>NONCE_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01779</expr></argument>)</argument_list></call>
"user %s: one-time-nonce mismatch - sending "
"new nonce"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>old_digest</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_header_rec</name> *</type><name>resp</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ha1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ha2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ha2</name> = <call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *)<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>,
<argument><expr>":"</expr></argument>, <argument><expr><name>ha2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>new_digest</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ha1</name></decl>, *<decl><type ref="prev"/><name>ha2</name></decl>, *<decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>algorithm</name></name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr>"MD5-sess"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ha1</name> = <call><name>get_session_HA1</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ha1</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ha1</name> = <name><name>conf</name>-&gt;<name>ha1</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>message_qop</name></name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name></expr></argument>, <argument><expr>"auth-int"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>a2</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name>*) ""</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>a2</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>ha2</name> = <call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name> *)<name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>,
<argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>nonce_count</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>ha2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_uri_components</name><parameter_list>(<param><decl><type><name>apr_uri_t</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>src</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>scheme</name></name> &amp;&amp; <name><name>src</name>-&gt;<name>scheme</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>scheme</name></name> = <name><name>src</name>-&gt;<name>scheme</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>scheme</name></name> = (<name>char</name> *) "http"</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>hostname</name></name> &amp;&amp; <name><name>src</name>-&gt;<name>hostname</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>hostname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>dst</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>hostname</name></name> = (<name>char</name> *) <call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>port_str</name></name> &amp;&amp; <name><name>src</name>-&gt;<name>port_str</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>port</name></name> = <name><name>src</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>port</name></name> = <call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>path</name></name> &amp;&amp; <name><name>src</name>-&gt;<name>path</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>dst</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>path</name></name> = <name><name>src</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>query</name></name> &amp;&amp; <name><name>src</name>-&gt;<name>query</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>query</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>dst</name>-&gt;<name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>query</name></name> = <name><name>src</name>-&gt;<name>query</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>hostinfo</name></name> = <name><name>src</name>-&gt;<name>hostinfo</name></name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_digest_user</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>digest_config_rec</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>digest_header_rec</name> *</type><name>resp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>mainreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_status</name></type> <name>return_code</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>t</name> = <call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"Digest"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01780</expr></argument>)</argument_list></call>
"need AuthName: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mainreq</name> = <name>r</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>mainreq</name>-&gt;<name/></name>main != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>mainreq</name> = <name><name>mainreq</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>mainreq</name>-&gt;<name>prev</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>mainreq</name> = <name><name>mainreq</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>resp</name> = (<name>digest_header_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>mainreq</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_digest_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>needed_auth</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>conf</name> = (<name>digest_config_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_digest_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> != <name>VALID</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> == <name>NOT_DIGEST</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01781</expr></argument>)</argument_list></call>
"client used wrong authentication scheme `%s': %s"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>resp</name>-&gt;<name>auth_hdr_sts</name></name> == <name>INVALID</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01782</expr></argument>)</argument_list></call>
"missing user, realm, nonce, uri, digest, "
"cnonce, or nonce_count in authorization header: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = (<name>char</name> *) <name><name>resp</name>-&gt;<name>username</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = (<name>char</name> *) "Digest"</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>raw_request_uri</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>r_uri</name></decl>, <decl><type ref="prev"/><name>d_uri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>copy_uri_components</name><argument_list>(<argument><expr>&amp;<name>r_uri</name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>psd_request_uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>&amp;<name>d_uri</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01783</expr></argument>)</argument_list></call>
"invalid uri &lt;%s&gt; in Authorization header"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>d_uri</name>.<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>d_uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d_uri</name>.<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>d_uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>d_uri</name>.<name>query</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name><name>d_uri</name>.<name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r_uri</name>.<name>query</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"AuthDigestEnableQueryStringHack"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01784</expr></argument>)</argument_list></call>
"applying AuthDigestEnableQueryStringHack "
"to uri &lt;%s&gt;"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>raw_request_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d_uri</name>.<name>query</name></name> = <name><name>r_uri</name>.<name>query</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_CONNECT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>r_uri</name>.<name>hostinfo</name></name> || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r_uri</name>.<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01785</expr></argument>)</argument_list></call>
"uri mismatch - &lt;%s&gt; does not match "
"request-uri &lt;%s&gt;"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r_uri</name>.<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(
<expr>(<name><name>d_uri</name>.<name>hostname</name></name> &amp;&amp; <name><name>d_uri</name>.<name>hostname</name><index>[<expr>0</expr>]</index></name> != '\0'
&amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>d_uri</name>.<name>hostname</name></name></expr></argument>, <argument><expr><name><name>r_uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call>)
|| (<name><name>d_uri</name>.<name>port_str</name></name> &amp;&amp; <name><name>d_uri</name>.<name>port</name></name> != <name><name>r_uri</name>.<name>port</name></name>)
|| (<name><name>d_uri</name>.<name>hostname</name></name> &amp;&amp; <name><name>d_uri</name>.<name>hostname</name><index>[<expr>0</expr>]</index></name> != '\0'
&amp;&amp; !<name><name>d_uri</name>.<name>port_str</name></name> &amp;&amp; <name><name>r_uri</name>.<name>port</name></name> != <call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)
|| (<name><name>d_uri</name>.<name>path</name></name> != <name><name>r_uri</name>.<name>path</name></name>
&amp;&amp; (!<name><name>d_uri</name>.<name>path</name></name> || !<name><name>r_uri</name>.<name>path</name></name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>d_uri</name>.<name>path</name></name></expr></argument>, <argument><expr><name><name>r_uri</name>.<name>path</name></name></expr></argument>)</argument_list></call>)
&amp;&amp; !(<name><name>d_uri</name>.<name>path</name></name> &amp;&amp; !<name><name>r_uri</name>.<name>path</name></name> &amp;&amp; <name><name>resp</name>-&gt;<name>psd_request_uri</name>-&gt;<name>hostname</name></name>
&amp;&amp; <name><name>d_uri</name>.<name>path</name><index>[<expr>0</expr>]</index></name> == '*' &amp;&amp; <name><name>d_uri</name>.<name>path</name><index>[<expr>1</expr>]</index></name> == '\0'))
|| (<name><name>d_uri</name>.<name>query</name></name> != <name><name>r_uri</name>.<name>query</name></name>
&amp;&amp; (!<name><name>d_uri</name>.<name>query</name></name> || !<name><name>r_uri</name>.<name>query</name></name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><name><name>d_uri</name>.<name>query</name></name></expr></argument>, <argument><expr><name><name>r_uri</name>.<name>query</name></name></expr></argument>)</argument_list></call>))</expr>
)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01786</expr></argument>)</argument_list></call>
"uri mismatch - &lt;%s&gt; does not match "
"request-uri &lt;%s&gt;"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>raw_request_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>opaque</name></name> &amp;&amp; <name><name>resp</name>-&gt;<name>opaque_num</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01787</expr></argument>)</argument_list></call>
"received invalid opaque - got `%s'"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>realm</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02533</expr></argument>)</argument_list></call>
"realm mismatch - got `%s' but no realm specified"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>resp</name>-&gt;<name>realm</name></name> || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>realm</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01788</expr></argument>)</argument_list></call>
"realm mismatch - got `%s' but expected `%s'"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>realm</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>algorithm</name></name> != <name>NULL</name>
&amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr>"MD5"</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr>"MD5-sess"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01789</expr></argument>)</argument_list></call>
"unknown algorithm `%s' received: %s"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>return_code</name> = <call><name>get_hash</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>return_code</name> == <name>AUTH_USER_NOT_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01790</expr></argument>)</argument_list></call>
"user `%s' in realm `%s' not found: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>return_code</name> == <name>AUTH_USER_FOUND</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>return_code</name> == <name>AUTH_DENIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01791</expr></argument>)</argument_list></call>
"user `%s' in realm `%s' denied by provider: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>message_qop</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><call><name>old_digest</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>ha1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01792</expr></argument>)</argument_list></call>
"user %s: password mismatch: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>exp_digest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr>0</expr></init>, <name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>tmp</name> <init>= <expr>(const <name>char</name> **)(<name><name>conf</name>-&gt;<name>qop_list</name>-&gt;<name>elts</name></name>)</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>idx</name> = 0</expr>;</init> <condition><expr><name>idx</name> &lt; <name><name>conf</name>-&gt;<name>qop_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>idx</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr>*<name>tmp</name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>match</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr>++<name>tmp</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>match</name>
&amp;&amp; !(<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name></expr></argument>, <argument><expr>"auth"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01793</expr></argument>)</argument_list></call>
"invalid qop `%s' received: %s"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>exp_digest</name> = <call><name>new_digest</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>exp_digest</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>digest</name></name></expr></argument>, <argument><expr><name>exp_digest</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01794</expr></argument>)</argument_list></call>
"user %s: password mismatch: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>check_nc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>note_digest_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>res</name> = <call><name>check_nonce</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_auth_info</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>digest_config_rec</name> *</type><name>conf</name> <init>=
<expr>(<name>digest_config_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_digest_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>digest_header_rec</name> *</type><name>resp</name> <init>=
<expr>(<name>digest_header_rec</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_digest_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ai</name> <init>= <expr><name>NULL</name></expr></init>, *<name>nextnonce</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>resp</name> == <name>NULL</name> || !<name><name>resp</name>-&gt;<name>needed_auth</name></name> || <name>conf</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>request_time</name></name> - <name><name>resp</name>-&gt;<name>nonce_time</name></name>) &gt; (<name><name>conf</name>-&gt;<name>nonce_lifetime</name></name>-<name>NEXTNONCE_DELTA</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>nextnonce</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>", nextnonce=\""</expr></argument>,
<argument><expr><call><name>gen_nonce</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>opaque</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>nonce_count</name></name> = 0</expr>;</expr_stmt></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>nonce_lifetime</name></name> == 0 &amp;&amp; <name><name>resp</name>-&gt;<name>client</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nonce</name> <init>= <expr><call><name>gen_nonce</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>opaque</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>nextnonce</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>", nextnonce=\""</expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>client</name>-&gt;<name>last_nonce</name></name></expr></argument>, <argument><expr><name>nonce</name></expr></argument>, <argument><expr><name>NONCE_LEN</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>qop_list</name></name></expr></argument>)</argument_list></call> &amp;&amp;
!<call><name>strcasecmp</name><argument_list>(<argument><expr>*(const <name>char</name> **)(<name><name>conf</name>-&gt;<name>qop_list</name>-&gt;<name>elts</name></name>)</expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call>
&amp;&amp; <name><name>resp</name>-&gt;<name>message_qop</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ai</name> = <name>nextnonce</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>resp_dig</name></decl>, *<decl><type ref="prev"/><name>ha1</name></decl>, *<decl><type ref="prev"/><name>a2</name></decl>, *<decl><type ref="prev"/><name>ha2</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>algorithm</name></name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>algorithm</name></name></expr></argument>, <argument><expr>"MD5-sess"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ha1</name> = <call><name>get_session_HA1</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>resp</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ha1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01795</expr></argument>)</argument_list></call>
"internal error: couldn't find session "
"info for user %s"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>username</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ha1</name> = <name><name>conf</name>-&gt;<name>ha1</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>resp</name>-&gt;<name>message_qop</name></name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name></expr></argument>, <argument><expr>"auth-int"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>a2</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,<argument><expr>(const <name>unsigned</name> <name>char</name> *) ""</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>a2</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>ha2</name> = <call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>unsigned</name> <name>char</name> *)<name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resp_dig</name> = <call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ha1</name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>nonce_count</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name> ?
<name><name>resp</name>-&gt;<name>message_qop</name></name> : ""</expr></argument>,
<argument><expr>":"</expr></argument>, <argument><expr><name>ha2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ai</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"rspauth=\""</expr></argument>, <argument><expr><name>resp_dig</name></expr></argument>, <argument><expr>"\""</expr></argument>,
<argument><expr><name>nextnonce</name></expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name> ? ", cnonce=\"" : ""</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name>
? <call><name>ap_escape_quotes</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name></expr></argument>)</argument_list></call>
: ""</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>cnonce</name></name> ? "\"" : ""</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>nonce_count</name></name> ? ", nc=" : ""</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>nonce_count</name></name> ? <name><name>resp</name>-&gt;<name>nonce_count</name></name> : ""</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name> ? ", qop=" : ""</expr></argument>,
<argument><expr><name><name>resp</name>-&gt;<name>message_qop</name></name> ? <name><name>resp</name>-&gt;<name>message_qop</name></name> : ""</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>ai</name> &amp;&amp; <name><name>ai</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>(<name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>)
? "Proxy-Authentication-Info"
: "Authentication-Info"</expr></argument>,
<argument><expr><name>ai</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>cfgPost</name><index>[]</index></name><init>= <expr><block>{ <expr>"http_core.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>parsePre</name><index>[]</index></name><init>= <expr><block>{ <expr>"mod_proxy.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>pre_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>initialize_module</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cfgPost</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>initialize_child</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>parse_hdr_and_update_nc</name></expr></argument>, <argument><expr><name>parsePre</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>authenticate_digest_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>add_auth_info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_note_auth_failure</name><argument_list>(<argument><expr><name>hook_note_digest_auth_failure</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>auth_digest</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_digest_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>digest_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
