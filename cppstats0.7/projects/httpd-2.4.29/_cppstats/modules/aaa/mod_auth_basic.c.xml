<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/aaa/mod_auth_basic.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>authoritative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>fakeuser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>fakepass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>use_digest_algorithm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>int</name> <name>fake_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>int</name> <name>use_digest_algorithm_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>int</name> <name>authoritative_set</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>auth_basic_config_rec</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_auth_basic_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authoritative</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_auth_basic_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>newconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>base</name> <init>= <expr><name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>overrides</name> <init>= <expr><name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>authoritative</name></name> =
<name><name>overrides</name>-&gt;<name>authoritative_set</name></name> ? <name><name>overrides</name>-&gt;<name>authoritative</name></name> :
<name><name>base</name>-&gt;<name>authoritative</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>authoritative_set</name></name> = <name><name>overrides</name>-&gt;<name>authoritative_set</name></name>
|| <name><name>base</name>-&gt;<name>authoritative_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fakeuser</name></name> =
<name><name>overrides</name>-&gt;<name>fake_set</name></name> ? <name><name>overrides</name>-&gt;<name>fakeuser</name></name> : <name><name>base</name>-&gt;<name>fakeuser</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fakepass</name></name> =
<name><name>overrides</name>-&gt;<name>fake_set</name></name> ? <name><name>overrides</name>-&gt;<name>fakepass</name></name> : <name><name>base</name>-&gt;<name>fakepass</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>fake_set</name></name> = <name><name>overrides</name>-&gt;<name>fake_set</name></name> || <name><name>base</name>-&gt;<name>fake_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>use_digest_algorithm</name></name> =
<name><name>overrides</name>-&gt;<name>use_digest_algorithm_set</name></name> ? <name><name>overrides</name>-&gt;<name>use_digest_algorithm</name></name>
: <name><name>base</name>-&gt;<name>use_digest_algorithm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>use_digest_algorithm_set</name></name> =
<name><name>overrides</name>-&gt;<name>use_digest_algorithm_set</name></name> || <name><name>base</name>-&gt;<name>use_digest_algorithm_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newconf</name>-&gt;<name>providers</name></name> = <name><name>overrides</name>-&gt;<name>providers</name></name> ? <name><name>overrides</name>-&gt;<name>providers</name></name> : <name><name>base</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<return>return <expr><name>newconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_authn_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_basic_config_rec</name>*)<name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>newp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>newp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_provider_list</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name>-&gt;<name>provider_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newp</name>-&gt;<name>provider</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>newp</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unknown Authn provider: %s"</expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>newp</name>-&gt;<name>provider</name>-&gt;<name>check_password</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"The '%s' Authn provider doesn't support "
"Basic Authentication"</expr></argument>, <argument><expr><name><name>newp</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>providers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>providers</name></name> = <name>newp</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>last</name> <init>= <expr><name><name>conf</name>-&gt;<name>providers</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>last</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>last</name> = <name><name>last</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>last</name>-&gt;<name>next</name></name> = <name>newp</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_authoritative</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_basic_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authoritative</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authoritative_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_basic_fake</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pass</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_basic_config_rec</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fakeuser</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fakepass</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fake_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name>pass</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pass</name> = "password"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fakeuser</name></name> =
<call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Could not parse fake username expression '%s': %s"</expr></argument>, <argument><expr><name>user</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fakepass</name></name> =
<call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Could not parse fake password expression '%s': %s"</expr></argument>, <argument><expr><name>user</name></expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>fake_set</name></name> = 1</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_use_digest_algorithm</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>auth_basic_config_rec</name> *)<name>config</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>alg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>alg</name></expr></argument>, <argument><expr>"MD5"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Invalid algorithm in "
"AuthBasicUseDigestAlgorithm: "</expr></argument>, <argument><expr><name>alg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>use_digest_algorithm</name></name> = <name>alg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>use_digest_algorithm_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>auth_basic_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"AuthBasicProvider"</expr></argument>, <argument><expr><name>add_authn_provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"specify the auth providers for a directory or location"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthBasicAuthoritative"</expr></argument>, <argument><expr><name>set_authoritative</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Set to 'Off' to allow access control to be passed along to "
"lower modules if the UserID is not known to this module"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"AuthBasicFake"</expr></argument>, <argument><expr><name>add_basic_fake</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Fake basic authentication using the given expressions for "
"username and password, 'off' to disable. Password defaults "
"to 'password' if missing."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthBasicUseDigestAlgorithm"</expr></argument>, <argument><expr><name>set_use_digest_algorithm</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Set to 'MD5' to use the auth provider's authentication "
"check for digest auth, using a hash of 'user:realm:pass'"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>auth_basic_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>note_basic_auth_failure</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr>(<name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>) ? "Proxy-Authenticate"
: "WWW-Authenticate"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Basic realm=\""</expr></argument>, <argument><expr><call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hook_note_basic_auth_failure</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_type</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>auth_type</name></expr></argument>, <argument><expr>"Basic"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>note_basic_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_basic_auth</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pw</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>decoded_line</name></decl>;</decl_stmt>
<expr_stmt><expr><name>auth_line</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>(<name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>)
? "Proxy-Authorization"
: "Authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>auth_line</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>note_basic_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>auth_line</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"Basic"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01614</expr></argument>)</argument_list></call>
"client used wrong authentication scheme: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>note_basic_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>auth_line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>auth_line</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>decoded_line</name> = <call><name>ap_pbase64decode</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>auth_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>user</name> = <call><name>ap_getword_nulls</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name>**)&amp;<name>decoded_line</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pw</name> = <name>decoded_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = (<name>char</name> *) *<name>user</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_basic_user</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_basic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sent_user</name></decl>, *<decl><type ref="prev"/><name>sent_pw</name></decl>, *<decl><type ref="prev"/><name>current_auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>digest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_status</name></type> <name>auth_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>current_provider</name></decl>;</decl_stmt>
<expr_stmt><expr><name>current_auth</name> = <call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>current_auth</name> || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>current_auth</name></expr></argument>, <argument><expr>"Basic"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01615</expr></argument>)</argument_list></call>
"need AuthName: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = (<name>char</name>*)<name>current_auth</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>get_basic_auth</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>sent_user</name></expr></argument>, <argument><expr>&amp;<name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>use_digest_algorithm</name></name>
&amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>use_digest_algorithm</name></name></expr></argument>, <argument><expr>"MD5"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>realm</name> = <call><name>ap_auth_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>digest</name> = <call><name>ap_md5</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name>realm</name></expr></argument>, <argument><expr>":"</expr></argument>,
<argument><expr><name>sent_pw</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>current_provider</name> = <name><name>conf</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>current_provider</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>provider</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>AUTHN_DEFAULT_PROVIDER</name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider</name> || !<name><name>provider</name>-&gt;<name>check_password</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01616</expr></argument>)</argument_list></call>
"No Authn provider configured"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_result</name> = <name>AUTH_GENERAL_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>, <argument><expr><name>AUTHN_DEFAULT_PROVIDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>provider</name> = <name><name>current_provider</name>-&gt;<name>provider</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>, <argument><expr><name><name>current_provider</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>digest</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>password</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>provider</name>-&gt;<name>get_realm_hash</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02493</expr></argument>)</argument_list></call>
"Authn provider does not support "
"AuthBasicUseDigestAlgorithm"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_result</name> = <name>AUTH_GENERAL_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>auth_result</name> = <call><name><name>provider</name>-&gt;<name>get_realm_hash</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>,
<argument><expr>&amp;<name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth_result</name> == <name>AUTH_USER_FOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <call><name>strcmp</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call> ? <name>AUTH_DENIED</name>
: <name>AUTH_GRANTED</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>auth_result</name> = <call><name><name>provider</name>-&gt;<name>check_password</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name>sent_pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth_result</name> != <name>AUTH_USER_NOT_FOUND</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>providers</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>current_provider</name> = <name><name>current_provider</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>current_provider</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>auth_result</name> != <name>AUTH_GRANTED</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>return_code</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>conf</name>-&gt;<name>authoritative</name></name>) &amp;&amp; <name>auth_result</name> != <name>AUTH_DENIED</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>auth_result</name></expr>)</condition> <block>{
<case>case <expr><name>AUTH_DENIED</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01617</expr></argument>)</argument_list></call>
"user %s: authentication failure for \"%s\": "
"Password Mismatch"</expr></argument>,
<argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>return_code</name> = <name>HTTP_UNAUTHORIZED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AUTH_USER_NOT_FOUND</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01618</expr></argument>)</argument_list></call>
"user %s not found: %s"</expr></argument>, <argument><expr><name>sent_user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>return_code</name> = <name>HTTP_UNAUTHORIZED</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>AUTH_GENERAL_ERROR</name></expr>:
</case><default>default:
<expr_stmt><expr><name>return_code</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>return_code</name> == <name>HTTP_UNAUTHORIZED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>note_basic_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>return_code</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_basic_fake</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_line</name></decl>, *<decl><type ref="prev"/><name>user</name></decl>, *<decl><type ref="prev"/><name>pass</name></decl>, *<decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auth_basic_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>auth_basic_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>fakeuser</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>user</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>fakeuser</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02455</expr></argument>)</argument_list></call>
"AuthBasicFake: could not evaluate user expression for URI '%s': %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>user</name> || !*<name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02458</expr></argument>)</argument_list></call>
"AuthBasicFake: empty username expression for URI '%s', ignoring"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pass</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>fakepass</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02456</expr></argument>)</argument_list></call>
"AuthBasicFake: could not evaluate password expression for URI '%s': %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>pass</name> || !*<name>pass</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02459</expr></argument>)</argument_list></call>
"AuthBasicFake: empty password expression for URI '%s', ignoring"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>auth_line</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Basic "</expr></argument>,
<argument><expr><call><name>ap_pbase64encode</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>,
<argument><expr>":"</expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Authorization"</expr></argument>, <argument><expr><name>auth_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02457</expr></argument>)</argument_list></call>
"AuthBasicFake: \"Authorization: %s\""</expr></argument>,
<argument><expr><name>auth_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>authenticate_basic_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>authenticate_basic_fake</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_note_auth_failure</name><argument_list>(<argument><expr><name>hook_note_basic_auth_failure</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>auth_basic</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_auth_basic_dir_config</name></expr>,
<expr><name>merge_auth_basic_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>auth_basic_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
