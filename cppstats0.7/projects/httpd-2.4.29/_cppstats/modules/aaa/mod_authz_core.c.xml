<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/aaa/mod_authz_core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_NETINET_IN_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AUTHZ_EXTRA_CONFIGS</name></cpp:undef>
<typedef>typedef <type><struct>struct <name>provider_alias_rec</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>provider_parsed_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>sec_auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>authz_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
}</block></struct></type> <name>provider_alias_rec</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AUTHZ_LOGIC_AND</name></decl>,
<decl><name>AUTHZ_LOGIC_OR</name></decl>,
<decl><name>AUTHZ_LOGIC_OFF</name></decl>,
<decl><name>AUTHZ_LOGIC_UNSET</name></decl>
}</block></enum></type> <name>authz_logic_op</name>;</typedef>
<typedef>typedef <type>struct <name>authz_section_conf</name></type> <name>authz_section_conf</name>;</typedef>
<struct>struct <name>authz_section_conf</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>provider_parsed_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>authz_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>limited</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_logic_op</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>negate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_merged</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>authz_core_dir_conf</name></type> <name>authz_core_dir_conf</name>;</typedef>
<struct>struct <name>authz_core_dir_conf</name> <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_logic_op</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>authz_forbidden_on_fail</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNSET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>authz_core_srv_conf</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>alias_rec</name></decl>;</decl_stmt>
}</block></struct></type> <name>authz_core_srv_conf</name>;</typedef>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authz_core_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>authz_core_dir_conf</name> *</type><name>authz_core_first_dir_conf</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authz_core_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authz_forbidden_on_fail</name></name> = <name>UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>next</name></name> = <name>authz_core_first_dir_conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>authz_core_first_dir_conf</name> = <name>conf</name></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_authz_core_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>newv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>authz_core_dir_conf</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>authz_core_dir_conf</name> *)<name>newv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_UNSET</name> &amp;&amp; !<name><name>new</name>-&gt;<name>section</name></name> &amp;&amp; <name><name>base</name>-&gt;<name>section</name></name></expr> )</condition><then> <block>{
<expr_stmt><expr><name>conf</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>base</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>new</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_OFF</name> || <name><name>new</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_UNSET</name> ||
!(<name><name>base</name>-&gt;<name>section</name></name> || <name><name>new</name>-&gt;<name>section</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>conf</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>new</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>section</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>base</name>-&gt;<name>section</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>section</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>section</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>limited</name></name> =
<name><name>base</name>-&gt;<name>section</name>-&gt;<name>limited</name></name> | <name><name>new</name>-&gt;<name>section</name>-&gt;<name>limited</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>op</name></name> = <name><name>new</name>-&gt;<name>op</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>is_merged</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>first</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>section</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>base</name>-&gt;<name>section</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>first</name>-&gt;<name>next</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>section</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>new</name>-&gt;<name>section</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>section</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>section</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>base</name>-&gt;<name>section</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>section</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>section</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>new</name>-&gt;<name>section</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>conf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>section</name></name> = <name>section</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>op</name></name> = <name><name>new</name>-&gt;<name>op</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>authz_forbidden_on_fail</name></name> == <name>UNSET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authz_forbidden_on_fail</name></name> = <name><name>base</name>-&gt;<name>authz_forbidden_on_fail</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>authz_forbidden_on_fail</name></name> = <name><name>new</name>-&gt;<name>authz_forbidden_on_fail</name></name></expr>;</expr_stmt></else></if>
<return>return <expr>(<name>void</name>*)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_authz_core_svr_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>newv</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>basev</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authz_core_svr_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_srv_conf</name> *</type><name>authcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>authcfg</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>authcfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>authcfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>authz_alias_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_args</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_status</name></type> <name>ret</name> <init>= <expr><name>AUTHZ_DENIED</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>provider_name</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider_name</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>authz_core_srv_conf</name> *</type><name>authcfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_alias_rec</name> *</type><name>prvdraliasrec</name></decl>;</decl_stmt>
<expr_stmt><expr><name>authcfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authz_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>prvdraliasrec</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prvdraliasrec</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>orig_dir_config</name> <init>= <expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> =
<call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>orig_dir_config</name></expr></argument>,
<argument><expr><name><name>prvdraliasrec</name>-&gt;<name>sec_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name><name>prvdraliasrec</name>-&gt;<name>provider</name>-&gt;
<name>check_authorization</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_args</name></name></expr></argument>,
<argument><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_parsed_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name>orig_dir_config</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02305</expr></argument>)</argument_list></call>
"no alias provider found for '%s' (BUG?)"</expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>provider_name</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_alias_provider</name> <init>= <expr><block>{
<expr>&amp;<name>authz_alias_check_authorization</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authz_require_alias_section</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_authz_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>args</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>endp</name> - <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>args</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive requires additional arguments"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider_name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>provider_alias</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>provider_args</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>provider_name</name><index>[<expr>0</expr>]</index></name> || !<name><name>provider_alias</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive requires additional arguments"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>new_authz_config</name> = <call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_AUTHCFG</name> | <name>ACCESS_CONF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>,
<argument><expr><name>new_authz_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>errmsg</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>provider_alias_rec</name> *</type><name>prvdraliasrec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_core_srv_conf</name> *</type><name>authcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prvdraliasrec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>prvdraliasrec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_name</name></name> = <name>provider_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_alias</name></name> = <name>provider_alias</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_args</name></name> = <name>provider_args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>sec_auth</name></name> = <name>new_authz_config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider</name></name> =
<call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>prvdraliasrec</name>-&gt;<name>provider</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unknown Authz provider: %s"</expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>prvdraliasrec</name>-&gt;<name>provider</name>-&gt;<name>parse_require_line</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name><name>prvdraliasrec</name>-&gt;<name>provider</name>-&gt;<name>parse_require_line</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>,
<argument><expr><name>provider_args</name></expr></argument>, <argument><expr>&amp;<name><name>prvdraliasrec</name>-&gt;<name>provider_parsed_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Can't parse 'Require %s %s': %s"</expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>provider_args</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>authcfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authz_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name></expr></argument>, <argument><expr><name>provider_alias</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>prvdraliasrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>provider_alias</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_alias_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>format_authz_result</name><parameter_list>(<param><decl><type><name>authz_status</name></type> <name>result</name></decl></param>)</parameter_list> <block>{
<return>return <expr>((<name>result</name> == <name>AUTHZ_DENIED</name>)
? "denied"
: ((<name>result</name> == <name>AUTHZ_GRANTED</name>)
? "granted"
: ((<name>result</name> == <name>AUTHZ_DENIED_NO_USER</name>)
? "denied (no authenticated user yet)"
: "neutral")))</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>format_authz_command</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>authz_section_conf</name> *</type><name>section</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name><name>section</name>-&gt;<name>provider</name></name>
? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Require "</expr></argument>, <argument><expr>(<name><name>section</name>-&gt;<name>negate</name></name> ? "not " : "")</expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>is_merged</name></name> ? "AuthMerging " : "&lt;Require"</expr></argument>,
<argument><expr>((<name><name>section</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_AND</name>)
? (<name><name>section</name>-&gt;<name>negate</name></name> ? "NotAll" : "All")
: (<name><name>section</name>-&gt;<name>negate</name></name> ? "None" : "Any"))</expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>is_merged</name></name> ? "" : "&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_section_conf</name>*</type> <name>create_default_section</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>section</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_OR</name></expr>;</expr_stmt>
<return>return <expr><name>section</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_authz_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>authz_core_dir_conf</name>*)<name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>section</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>child</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>provider_name</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>, <argument><expr>"not"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>section</name>-&gt;<name>provider_name</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>negate</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>section</name>-&gt;<name>provider_args</name></name> = <name>args</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>provider</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>section</name>-&gt;<name>provider</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unknown Authz provider: %s"</expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>section</name>-&gt;<name>provider</name>-&gt;<name>check_authorization</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"The '%s' Authz provider is not supported by any "
"of the loaded authorization modules"</expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>section</name>-&gt;<name>limited</name></name> = <name><name>cmd</name>-&gt;<name>limited</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>provider</name>-&gt;<name>parse_require_line</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_NAME_NOTE</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name><name>section</name>-&gt;<name>provider</name>-&gt;<name>parse_require_line</name></name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>args</name></expr></argument>,
<argument><expr>&amp;<name><name>section</name>-&gt;<name>provider_parsed_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>section</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>section</name></name> = <call><name>create_default_section</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>negate</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>section</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_OR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"negative %s directive has no effect "
"in %s directive"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><call><name>format_authz_command</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>section</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>section</name>-&gt;<name>limited</name></name> |= <name><name>section</name>-&gt;<name>limited</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> = <name><name>conf</name>-&gt;<name>section</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>child</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>child</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>child</name>-&gt;<name>next</name></name> = <name>section</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>section</name>-&gt;<name>first</name></name> = <name>section</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_authz_section</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>mconfig</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>old_section</name> <init>= <expr><name><name>conf</name>-&gt;<name>section</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>section</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>old_limited</name> <init>= <expr><name><name>cmd</name>-&gt;<name>limited</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>args</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>endp</name> - <name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive doesn't take additional arguments"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>section</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;RequireAll"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>section</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_AND</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;RequireAny"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>section</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_OR</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;RequireNotAll"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>section</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_AND</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>negate</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>section</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_OR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>section</name>-&gt;<name>negate</name></name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>section</name></name> = <name>section</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>limited</name></name> &amp;= ~(<name>AP_METHOD_BIT</name> &lt;&lt; (<name>METHODS</name> - 1))</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_AUTHCFG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>limited</name></name> = <name>old_limited</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>section</name></name> = <name>old_section</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>first</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>child</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>old_section</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>old_section</name> = <name><name>conf</name>-&gt;<name>section</name></name> = <call><name>create_default_section</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>negate</name></name> &amp;&amp; <name><name>old_section</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_OR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s directive has "
"no effect in %s directive"</expr></argument>,
<argument><expr><call><name>format_authz_command</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>format_authz_command</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>old_section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>old_section</name>-&gt;<name>limited</name></name> |= <name><name>section</name>-&gt;<name>limited</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>section</name>-&gt;<name>negate</name></name> &amp;&amp; <name><name>section</name>-&gt;<name>op</name></name> == <name><name>old_section</name>-&gt;<name>op</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>section</name> = <name><name>section</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>child</name> = <name><name>old_section</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>child</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>child</name>-&gt;<name>next</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>child</name>-&gt;<name>next</name></name> = <name>section</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>old_section</name>-&gt;<name>first</name></name> = <name>section</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>format_authz_command</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>" directive contains no authorization directives"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authz_merge_sections</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>mconfig</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"And"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_AND</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Or"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>op</name></name> = <name>AUTHZ_LOGIC_OR</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" must be one of: "
"Off | And | Or"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authz_core_check_section</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>authz_section_conf</name> *</type><name>section</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>child</name> <init>= <expr><name><name>section</name>-&gt;<name>first</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>!<name>OK</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>first</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>authz_core_check_section</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>child</name>-&gt;<name>negate</name></name> &amp;&amp; <name><name>child</name>-&gt;<name>op</name></name> != <name><name>section</name>-&gt;<name>op</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>next</name> <init>= <expr><name><name>child</name>-&gt;<name>next</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>child</name> = <name><name>child</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prev</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>prev</name>-&gt;<name>next</name></name> = <name>child</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>section</name>-&gt;<name>first</name></name> = <name>child</name></expr>;</expr_stmt>
}</block></else></if>
<do>do <block>{
<expr_stmt><expr><name><name>child</name>-&gt;<name>negate</name></name> = !<name><name>child</name>-&gt;<name>negate</name></name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name><name>child</name>-&gt;<name>next</name></name> &amp;&amp; (<name>child</name> = <name><name>child</name>-&gt;<name>next</name></name>)</expr>)</condition>;</do>
<expr_stmt><expr><name><name>child</name>-&gt;<name>next</name></name> = <name>next</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>prev</name> = <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>child</name> = <name><name>section</name>-&gt;<name>first</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<name><name>child</name>-&gt;<name>negate</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>OK</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>ret</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name> | <name>APLOG_STARTUP</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01624</expr></argument>)</argument_list></call>
"%s directive contains only negative authorization directives"</expr></argument>,
<argument><expr><name>is_conf</name> ? "&lt;Directory&gt;, &lt;Location&gt;, or similar"
: <call><name>format_authz_command</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authz_core_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>authz_core_first_dir_conf</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authz_core_check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>authz_core_first_dir_conf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>conf</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>section</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>authz_core_check_section</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>section</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <name><name>conf</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authz_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;AuthzProviderAlias"</expr></argument>, <argument><expr><name>authz_require_alias_section</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"container for grouping an authorization provider's "
"directives under a provider alias"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"Require"</expr></argument>, <argument><expr><name>add_authz_provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"specifies authorization directives "
"which one must pass (or not) for a request to suceeed"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;RequireAll"</expr></argument>, <argument><expr><name>add_authz_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"container for grouping authorization directives "
"of which none must fail and at least one must pass "
"for a request to succeed"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;RequireAny"</expr></argument>, <argument><expr><name>add_authz_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"container for grouping authorization directives "
"of which one must pass "
"for a request to succeed"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AUTHZ_EXTRA_CONFIGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;RequireNotAll"</expr></argument>, <argument><expr><name>add_authz_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"container for grouping authorization directives "
"of which some must fail or none must pass "
"for a request to succeed"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;RequireNone"</expr></argument>, <argument><expr><name>add_authz_section</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"container for grouping authorization directives "
"of which none must pass "
"for a request to succeed"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthMerging"</expr></argument>, <argument><expr><name>authz_merge_sections</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"controls how a &lt;Directory&gt;, &lt;Location&gt;, or similar "
"directive's authorization directives are combined with "
"those of its predecessor"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"AuthzSendForbiddenOnFailure"</expr></argument>, <argument><expr><name>ap_set_flag_slot_char</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authz_core_dir_conf</name></expr></argument>, <argument><expr><name>authz_forbidden_on_fail</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Controls if an authorization failure should result in a "
"'403 FORBIDDEN' response instead of the HTTP-conforming "
"'401 UNAUTHORIZED'"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>apply_authz_sections</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>authz_section_conf</name> *</type><name>section</name></decl></param>,
<param><decl><type><name>authz_logic_op</name></type> <name>parent_op</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_status</name></type> <name>auth_result</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name><name>section</name>-&gt;<name>limited</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name><name>r</name>-&gt;<name>method_number</name></name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> =
(<name>parent_op</name> == <name>AUTHZ_LOGIC_AND</name>) ? <name>AUTHZ_GRANTED</name> : <name>AUTHZ_NEUTRAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01625</expr></argument>)</argument_list></call>
"authorization result of %s: %s "
"(directive limited to other methods)"</expr></argument>,
<argument><expr><call><name>format_authz_command</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>format_authz_result</name><argument_list>(<argument><expr><name>auth_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>auth_result</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>provider</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_NAME_NOTE</name></expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>auth_result</name> =
<call><name><name>section</name>-&gt;<name>provider</name>-&gt;<name>check_authorization</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>provider_args</name></name></expr></argument>,
<argument><expr><name><name>section</name>-&gt;<name>provider_parsed_args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>authz_section_conf</name> *</type><name>child</name> <init>= <expr><name><name>section</name>-&gt;<name>first</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>auth_result</name> = <name>AUTHZ_NEUTRAL</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>child</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>authz_status</name></type> <name>child_result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>child_result</name> = <call><name>apply_authz_sections</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name><name>section</name>-&gt;<name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>child_result</name> == <name>AUTHZ_GENERAL_ERROR</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>child_result</name> != <name>AUTHZ_NEUTRAL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>op</name></name> == <name>AUTHZ_LOGIC_AND</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>child_result</name> == <name>AUTHZ_DENIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>child_result</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>(<name>child_result</name> == <name>AUTHZ_DENIED_NO_USER</name>
&amp;&amp; <name>auth_result</name> != <name>AUTHZ_DENIED</name>)
|| (<name>auth_result</name> == <name>AUTHZ_NEUTRAL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>child_result</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>child_result</name> == <name>AUTHZ_GRANTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>child_result</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>(<name>child_result</name> == <name>AUTHZ_DENIED_NO_USER</name>
&amp;&amp; <name>auth_result</name> == <name>AUTHZ_DENIED</name>)
|| (<name>auth_result</name> == <name>AUTHZ_NEUTRAL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>child_result</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>child</name> = <name><name>child</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<if>if <condition>(<expr><name><name>section</name>-&gt;<name>negate</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>auth_result</name> == <name>AUTHZ_GRANTED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>AUTHZ_DENIED</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>auth_result</name> == <name>AUTHZ_DENIED</name> ||
<name>auth_result</name> == <name>AUTHZ_DENIED_NO_USER</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>auth_result</name> = <name>AUTHZ_NEUTRAL</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01626</expr></argument>)</argument_list></call>
"authorization result of %s: %s"</expr></argument>,
<argument><expr><call><name>format_authz_command</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>format_authz_result</name><argument_list>(<argument><expr><name>auth_result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>auth_result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authorize_user_core</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>after_authn</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authz_status</name></type> <name>auth_result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authz_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>section</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01627</expr></argument>)</argument_list></call>
"AuthType configured with no corresponding "
"authorization directives"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01628</expr></argument>)</argument_list></call>
"authorization result: granted (no directives)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>auth_result</name> = <call><name>apply_authz_sections</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>section</name></name></expr></argument>, <argument><expr><name>AUTHZ_LOGIC_AND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth_result</name> == <name>AUTHZ_GRANTED</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>auth_result</name> == <name>AUTHZ_DENIED_NO_USER</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>after_authn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01629</expr></argument>)</argument_list></call>
"authorization failure (no authenticated user): %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_note_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>auth_result</name> == <name>AUTHZ_DENIED</name> || <name>auth_result</name> == <name>AUTHZ_NEUTRAL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>after_authn</name> || <call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01630</expr></argument>)</argument_list></call>
"client denied by server configuration: %s%s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name> ? "" : "uri "</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name> ? <name><name>r</name>-&gt;<name>filename</name></name> : <name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01631</expr></argument>)</argument_list></call>
"user %s: authorization failure for \"%s\": "</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>authz_forbidden_on_fail</name></name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_note_auth_failure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>HTTP_UNAUTHORIZED</name></expr>;</return>
}</block></else></if>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authorize_userless</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>authorize_user_core</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authorize_user</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>authorize_user_core</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authz_some_auth_required</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authz_core_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>authz_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>section</name></name>
&amp;&amp; (<name><name>conf</name>-&gt;<name>section</name>-&gt;<name>limited</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name><name>r</name>-&gt;<name>method_number</name></name>))</expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>env_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>, *<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> = <name>require_line</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call>) &amp;&amp; <name><name>w</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_env_provider</name> <init>= <expr><block>{
<expr>&amp;<name>env_check_authorization</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>all_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>parsed_require_line</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>all_parse_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>require_line</name></expr></argument>, <argument><expr>"granted"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>parsed_require_line</name> = (<name>void</name> *)1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>require_line</name></expr></argument>, <argument><expr>"denied"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>"Argument for 'Require all' must be 'granted' or 'denied'"</expr>;</return>
}</block></else></if></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_all_provider</name> <init>= <expr><block>{
<expr>&amp;<name>all_check_authorization</name></expr>,
<expr>&amp;<name>all_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>method_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_int64_t</name> *</type><name>allowed</name> <init>= <expr><name>parsed_require_line</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>allowed</name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name><name>r</name>-&gt;<name>method_number</name></name>)</expr>)</condition><then>
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return></then>
<else>else
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>method_parse_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w</name></decl>, *<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name> *</type><name>allowed</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>t</name> = <name>require_line</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>w</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call>) &amp;&amp; <name><name>w</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>m</name> == <name>M_INVALID</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid Method '"</expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>allowed</name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>m</name>)</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>parsed_require_line</name> = <name>allowed</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_method_provider</name> <init>= <expr><block>{
<expr>&amp;<name>method_check_authorization</name></expr>,
<expr>&amp;<name>method_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUIRE_EXPR_NOTE</name></cpp:macro> <cpp:value>"Require_expr_info"</cpp:value></cpp:define>
<struct>struct <name>require_expr_info</name> <block>{
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>want_user</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name></type> <name>expr_lookup_fn</name><parameter_list>(<param><decl><type><name>ap_expr_lookup_parms</name> *</type><name>parms</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>parms</name>-&gt;<name>type</name></name> == <name>AP_EXPR_FUNC_VAR</name>
&amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"REMOTE_USER"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>require_expr_info</name> *</type><name>info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name>info</name></expr></argument>, <argument><expr><name>REQUIRE_EXPR_NOTE</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>ptemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>info</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>want_user</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>ap_expr_lookup_default</name><argument_list>(<argument><expr><name>parms</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>expr_parse_config</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>require_expr_info</name> *</type><name>info</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>require_line</name><index>[<expr>0</expr>]</index></name> == '"'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>require_line</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>require_line</name><index>[<expr><name>len</name>-1</expr>]</index></name> == '"'</expr>)</condition><then>
<expr_stmt><expr><name>require_line</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr><name>require_line</name> + 1</expr></argument>,
<argument><expr><name>len</name> - 2</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_userdata_setn</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>REQUIRE_EXPR_NOTE</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>expr</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>require_line</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>expr_err</name></expr></argument>,
<argument><expr><name>expr_lookup_fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"Cannot parse expression in require line: "</expr></argument>,
<argument><expr><name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>parsed_require_line</name> = <name>info</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>expr_check_authorization</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>require_expr_info</name> *</type><name>info</name> <init>= <expr><name>parsed_require_line</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>expr</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02320</expr></argument>)</argument_list></call>
"Error evaluating expression in 'Require expr': %s"</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>want_user</name></name></expr>)</condition><then>
<return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return></then>
<else>else
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return></else></if>
}</block></then> <else>else <block>{
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>authz_expr_provider</name> <init>= <expr><block>{
<expr>&amp;<name>expr_check_authorization</name></expr>,
<expr>&amp;<name>expr_parse_config</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authz_some_auth_required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>authz_core_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>authz_core_check_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_authz</name><argument_list>(<argument><expr><name>authorize_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_access_ex</name><argument_list>(<argument><expr><name>authorize_userless</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"env"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_env_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"all"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_all_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"method"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_method_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"expr"</expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authz_expr_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authz_core</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_authz_core_dir_config</name></expr>,
<expr><name>merge_authz_core_dir_config</name></expr>,
<expr><name>create_authz_core_svr_config</name></expr>,
<expr><name>merge_authz_core_svr_config</name></expr> ,
<expr><name>authz_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
