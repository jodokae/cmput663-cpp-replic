<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/proxy/mod_proxy_hcheck.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_watchdog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_slotmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_pool.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_hcheck_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCHECK_WATHCHDOG_NAME</name></cpp:macro> <cpp:value>("_proxy_hcheck_")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_THREADPOOL_SIZE</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HC_USE_THREADS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_USE_THREADS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HC_USE_THREADS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<typedef>typedef <type><name>void</name></type> <name>apr_thread_pool_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hcmethod_t</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>passes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fails</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>hurl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>hcexpr</name></decl>;</decl_stmt>
}</block></struct></type> <name>hc_template_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>pexpr</name></decl>;</decl_stmt>
}</block></struct></type> <name>hc_condition_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>ba</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>templates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>conditions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hcworkers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
}</block></struct></type> <name>sctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>w</name></decl>;</decl_stmt>
}</block></struct></type> <name>wctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>hc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
}</block></struct></type> <name>baton_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>hc_create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>ba</name></name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>templates</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hc_template_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>conditions</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>hcworkers</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_watchdog_t</name> *</type><name>watchdog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>tpsize</name> <init>= <expr><name>HC_THREADPOOL_SIZE</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_worker_hc_param</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>v</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hc_template_t</name> *</type><name>temp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>sctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>worker</name> &amp;&amp; !<name>v</name></expr>)</condition><then> <block>{
<return>return <expr>"Bad call to set_worker_hc_param()"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>temp</name> = (<name>hc_template_t</name> *)<name>v</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hctemplate"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>hc_template_t</name> *</type><name>template</name></decl>;</decl_stmt>
<expr_stmt><expr><name>template</name> = (<name>hc_template_t</name> *)<name><name>ctx</name>-&gt;<name>templates</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>ival</name> = 0</expr>;</init> <condition><expr><name>ival</name> &lt; <name><name>ctx</name>-&gt;<name>templates</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>ival</name>++</expr>, <expr><name>template</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name><name>template</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name> = <name><name>template</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>interval</name></name> = <name><name>template</name>-&gt;<name>interval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>passes</name></name> = <name><name>template</name>-&gt;<name>passes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fails</name></name> = <name><name>template</name>-&gt;<name>fails</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>, <argument><expr><name><name>template</name>-&gt;<name>hurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>, <argument><expr><name><name>template</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>method</name></name> = <name><name>template</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>interval</name></name> = <name><name>template</name>-&gt;<name>interval</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>passes</name></name> = <name><name>template</name>-&gt;<name>passes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>fails</name></name> = <name><name>template</name>-&gt;<name>fails</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>hurl</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>template</name>-&gt;<name>hurl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>temp</name>-&gt;<name>hcexpr</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>template</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Unknown ProxyHCTemplate name: %s"</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hcmethod"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_hcmethods_t</name> *</type><name>method</name> <init>= <expr><name>proxy_hcmethods</name></expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name><name>method</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr><name>method</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>method</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>method</name>-&gt;<name>implemented</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Health check method %s not (yet) implemented"</expr></argument>,
<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name> = <name><name>method</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>method</name></name> = <name><name>method</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>"Unknown method"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hcinterval"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>hci</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>hci</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>"Unparse-able hcinterval setting"</expr>;</return></then></if>
<if>if <condition>(<expr><name>hci</name> &lt; <name>AP_WD_TM_SLICE</name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Interval must be a positive value greater than %"
<name>APR_TIME_T_FMT</name> "ms"</expr></argument>, <argument><expr><call><name>apr_time_as_msec</name><argument_list>(<argument><expr><name>AP_WD_TM_SLICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>interval</name></name> = <name>hci</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>interval</name></name> = <name>hci</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hcpasses"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Passes must be a positive value"</expr>;</return></then></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>passes</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>passes</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hcfails"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Fails must be a positive value"</expr>;</return></then></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fails</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>fails</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hcuri"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Health check uri length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>hurl</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"hcexpr"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>hc_condition_t</name> *</type><name>cond</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cond</name> = (<name>hc_condition_t</name> *)<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cond</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Unknown health check condition expr: %s"</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Health check uri length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>temp</name>-&gt;<name>hcexpr</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr>"unknown Worker hcheck parameter"</expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_hc_condition</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hc_condition_t</name> *</type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>ctx</name> = (<name>sctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Missing expression name for "</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> &gt; (<name>PROXY_WORKER_MAX_SCHEME_SIZE</name> - 1)</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Expression name limited to %d characters"</expr></argument>,
<argument><expr>(<name>PROXY_WORKER_MAX_SCHEME_SIZE</name> - 1)</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>expr</name> = <call><name>ap_getword_conf2</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>expr</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Missing expression for "</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cond</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hc_condition_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cond</name>-&gt;<name>pexpr</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Could not parse expression \"%s\": %s"</expr></argument>,
<argument><expr><name>expr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cond</name>-&gt;<name>expr</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expr</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>expr</name></expr>)</condition><then> <block>{
<return>return <expr>"error: extra parameter(s)"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_hc_template</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hc_template_t</name> *</type><name>template</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>ctx</name> = (<name>sctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>name</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Missing template name for "</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>template</name> = (<name>hc_template_t</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>templates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name>-&gt;<name>method</name></name> = <name><name>template</name>-&gt;<name>passes</name></name> = <name><name>template</name>-&gt;<name>fails</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name>-&gt;<name>interval</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>HCHECK_WATHCHDOG_DEFAULT_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name>-&gt;<name>hurl</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>template</name>-&gt;<name>hcexpr</name></name> = <name>NULL</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid ProxyHCTemplate parameter. Parameter must be "
"in the form 'key=value'"</expr>;</return>
}</block></then> <else>else
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>err</name> = <call><name>set_worker_hc_param</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_array_pop</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>templates</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxyHCTemplate: "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"; "</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HC_USE_THREADS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_hc_tpsize</name> <parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>tpsize</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tpsize</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Invalid ProxyHCTPsize parameter. Parameter must be "
"&gt;= 0"</expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>create_request_rec</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>conn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>ba</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ba</name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name></name> = <name>conn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name> = <name>ba</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>server</name></name> = <name><name>conn</name>-&gt;<name>base_server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_RESPONSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>ap_auth_type</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed_methods</name></name> = <call><name>ap_make_method_list</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>trailers_in</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>25</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>trailers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>notes</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>kept_body</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>request_config</name></name> = <call><name>ap_create_request_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_output_filters</name></name> = <name><name>conn</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_input_filters</name></name> = <name><name>conn</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>input_filters</name></name> = <name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>lookup_defaults</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>sent_bodyct</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>read_length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>read_body</name></name> = <name>REQUEST_NO_BODY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>the_request</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>used_path_info</name></name> = <name>AP_REQ_DEFAULT_PATH_INFO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>useragent_addr</name></name> = <name><name>conn</name>-&gt;<name>client_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name> = <name><name>conn</name>-&gt;<name>client_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method</name></name> = <name>method</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method_number</name></name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_OPTIONS</name>
|| (<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name> &amp;&amp; <name><name>r</name>-&gt;<name>method</name><index>[<expr>0</expr>]</index></name> == 'H')</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>header_only</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>header_only</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>protocol</name></name> = "HTTP/1.0"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_num</name></name> = <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>hostname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>create_hcheck_req</name><parameter_list>(<param><decl><type><name>wctx_t</name> *</type><name>wctx</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>hc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr>)</condition> <block>{
<case>case <expr><name>OPTIONS</name></expr>:
<expr_stmt><expr><name>method</name> = "OPTIONS"</expr>;</expr_stmt>
<expr_stmt><expr><name>req</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"OPTIONS * HTTP/1.0\r\n"
"Host: %s:%d\r\n"
"\r\n"</expr></argument>,
<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>hc</name>-&gt;<name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HEAD</name></expr>:
<expr_stmt><expr><name>method</name> = "HEAD"</expr>;</expr_stmt>
</case><case>case <expr><name>GET</name></expr>:
<if>if <condition>(<expr>!<name>method</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>method</name> = "GET"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>req</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"%s %s%s%s HTTP/1.0\r\n"
"Host: %s:%d\r\n"
"\r\n"</expr></argument>,
<argument><expr><name>method</name></expr></argument>,
<argument><expr>(<name><name>wctx</name>-&gt;<name>path</name></name> ? <name><name>wctx</name>-&gt;<name>path</name></name> : "")</expr></argument>,
<argument><expr>(<name><name>wctx</name>-&gt;<name>path</name></name> &amp;&amp; *<name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name> ? "/" : "" )</expr></argument>,
<argument><expr>(*<name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name> ? <name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name> : "")</expr></argument>,
<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>hc</name>-&gt;<name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
<expr_stmt><expr><name><name>wctx</name>-&gt;<name>req</name></name> = <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wctx</name>-&gt;<name>method</name></name> = <name>method</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>hc_get_hcworker</name><parameter_list>(<param><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>hc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hc</name> = (<name>proxy_worker</name> *)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>hcworkers</name></name></expr></argument>, <argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr>sizeof <name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hc</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wctx_t</name> *</type><name>wctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>port</name> = (<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name> ? <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name>
: <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03248</expr></argument>)</argument_list></call>
"Creating hc worker %pp for %s://%s:%d"</expr></argument>,
<argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>,
<argument><expr>(<name>int</name>)<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>&amp;<name>hc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>sizeof <name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"%pp"</expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcuri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>hash</name>.<name>def</name></name> = <name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>hash</name>.<name>fnv</name></name> = <name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> = <call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_FNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IGNORE_ERRORS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_GENERIC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>method</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>wctx</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>uri</name>.<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>wctx</name>-&gt;<name>w</name></name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_hcheck_req</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>context</name></name> = <name>wctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>hcworkers</name></name></expr></argument>, <argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr>sizeof <name>worker</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>method</name></name> != <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>wctx_t</name> *</type><name>wctx</name> <init>= <expr><name><name>hc</name>-&gt;<name>context</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>port</name> = (<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name> ? <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name>
: <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03311</expr></argument>)</argument_list></call>
"Updating hc worker %pp for %s://%s:%d"</expr></argument>,
<argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>,
<argument><expr>(<name>int</name>)<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>method</name></name> = <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>create_hcheck_req</name><argument_list>(<argument><expr><name>wctx</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>hc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_determine_connection</name><parameter_list>(<param><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>apr_sockaddr_t</name> **</type><name>addr</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>addr</name> = <name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>,
<argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03249</expr></argument>)</argument_list></call>
"DNS lookup failure for: %s:%d"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name> ? <name>OK</name> : !<name>OK</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hc_init_worker</name><parameter_list>(<param><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>worker</name>-&gt;<name>cp</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03250</expr></argument>)</argument_list></call> "Cannot init worker"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> &amp;&amp; !<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> &amp;&amp;
<call><name>hc_determine_connection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr>&amp;<name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>backend_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_function</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03251</expr></argument>)</argument_list></call>
"Health check %s Status (%d) for %s."</expr></argument>,
<argument><expr><call><name>ap_proxy_show_hcmethod</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>status</name></expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_get_backend</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_function</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> **</type><name>backend</name></decl></param>,
<param><decl><type><name>proxy_worker</name> *</type><name>hc</name></decl></param>, <param><decl><type><name>sctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>backend</name>)-&gt;<name>addr</name></name> = <name><name>hc</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>backend</name>)-&gt;<name>hostname</name></name> = <name><name>hc</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr>"https"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_proxy_ssl_enable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03252</expr></argument>)</argument_list></call>
"mod_ssl not configured?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>(*<name>backend</name>)-&gt;<name>is_ssl</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><call><name>hc_determine_connection</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr>&amp;<name>(*<name>backend</name>)-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hc_check_tcp</name><parameter_list>(<param><decl><type><name>baton_t</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>baton</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>hc</name> <init>= <expr><name><name>baton</name>-&gt;<name>hc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>hc_get_backend</name><argument_list>(<argument><expr>"HCTCP"</expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>baton</name>-&gt;<name>ptemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>addr</name></name> = <name><name>hc</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr>"HCTCP"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCTCP"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_send</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>out</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>ba</name> <init>= <expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name>) ? !<name>OK</name> : <name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_read_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>ap_getline</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03254</expr></argument>)</argument_list></call>
"%.*s"</expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_date_checkmask</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"HTTP/#.####*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>keepchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proxy_status</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_status_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>major</name> = <name><name>buffer</name><index>[<expr>5</expr>]</index></name> - '0'</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>major</name> != 1) || (<name>len</name> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>-1)</expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>keepchar</name> = <name><name>buffer</name><index>[<expr>12</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr>12</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_status</name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>buffer</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>keepchar</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buffer</name><index>[<expr>12</expr>]</index></name> = <name>keepchar</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>buffer</name><index>[<expr>12</expr>]</index></name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr>13</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>proxy_status_line</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>buffer</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>proxy_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>proxy_status_line</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></else></if>
<while>while <condition>(<expr>(<name>len</name> = <call><name>ap_getline</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>"%.*s"</expr></argument>,
<argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>value</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>++<name>value</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>value</name></expr>;</expr_stmt></while>
<for>for (<init><expr><name>end</name> = &amp;<name><name>value</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>-1</expr>]</index></name></expr>;</init> <condition><expr><name>end</name> &gt; <name>value</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>end</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>--<name>end</name></expr></incr>)
<expr_stmt><expr>*<name>end</name> = '\0'</expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_read_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>HUGE_STRING_LEN</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03300</expr></argument>)</argument_list></call>
"Error reading response body"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>kept_body</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block> while <condition>(<expr>!<name>seen_eos</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name> ? <name>OK</name> : !<name>OK</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hc_check_http</name><parameter_list>(<param><decl><type><name>baton_t</name> *</type><name>baton</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>baton</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>hc</name> <init>= <expr><name><name>baton</name>-&gt;<name>hc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name><name>baton</name>-&gt;<name>worker</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name> <init>= <expr><name><name>baton</name>-&gt;<name>ptemp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>wctx_t</name> *</type><name>wctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hc_condition_t</name> *</type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>wctx</name> = (<name>wctx_t</name> *)<name><name>hc</name>-&gt;<name>context</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>wctx</name>-&gt;<name>req</name></name> || !<name><name>wctx</name>-&gt;<name>method</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>hc_get_backend</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>hc</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>backend</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_connection_create</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>r</name> = <call><name>create_request_rec</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name><name>wctx</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>hc_send</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>wctx</name>-&gt;<name>req</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>hc_read_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>saved_headers_in</name> <init>= <expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_pre_http_request</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>hc_read_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <name>saved_headers_in</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>trailers_out</name></name> = <call><name>apr_table_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name> &amp;&amp;
(<name>cond</name> = (<name>hc_condition_t</name> *)<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cond</name>-&gt;<name>pexpr</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ok</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>,
<argument><expr>"Condition %s for %s (%s): passed"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>,
<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ok</name> &lt; 0 || <name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03301</expr></argument>)</argument_list></call>
"Error on checking condition %s for %s (%s): %s"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>,
<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = !<name>OK</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>,
<argument><expr>"Condition %s for %s (%s) : failed"</expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hcexpr</name></name></expr></argument>,
<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = !<name>OK</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> &lt; 200 || <name><name>r</name>-&gt;<name>status</name></name> &gt; 399</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>,
<argument><expr>"Response status %i for %s (%s): failed"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>,
<argument><expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = !<name>OK</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><call><name>backend_cleanup</name><argument_list>(<argument><expr>"HCOH"</expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> * <name>APR_THREAD_FUNC</name></type> <name>hc_check</name><parameter_list>(<param><decl><type><name>apr_thread_t</name> *</type><name>thread</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>baton_t</name> *</type><name>baton</name> <init>= <expr>(<name>baton_t</name> *)<name>b</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>baton</name>-&gt;<name>ctx</name>-&gt;<name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name><name>baton</name>-&gt;<name>worker</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>hc</name> <init>= <expr><name><name>baton</name>-&gt;<name>hc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><name><name>baton</name>-&gt;<name>now</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03256</expr></argument>)</argument_list></call>
"%sHealth checking %s"</expr></argument>, <argument><expr>(<name>thread</name> ? "Threaded " : "")</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>hc</name>-&gt;<name>s</name>-&gt;<name>method</name></name> == <name>TCP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>hc_check_tcp</name><argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>hc_check_http</name><argument_list>(<argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03257</expr></argument>)</argument_list></call>
"Somehow tried to use unimplemented hcheck method: %d"</expr></argument>,
<argument><expr>(<name>int</name>)<name><name>hc</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>ptemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_HCFAILED</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>pcount</name></name> += 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>pcount</name></name> &gt;= <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>passes</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_HC_FAIL_FLAG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_IN_ERROR_FLAG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>pcount</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03302</expr></argument>)</argument_list></call>
"%sHealth check ENABLING %s"</expr></argument>, <argument><expr>(<name>thread</name> ? "Threaded " : "")</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fcount</name></name> += 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fcount</name></name> &gt;= <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fails</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr><name>PROXY_WORKER_HC_FAIL_FLAG</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>fcount</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03303</expr></argument>)</argument_list></call>
"%sHealth check DISABLING %s"</expr></argument>, <argument><expr>(<name>thread</name> ? "Threaded " : "")</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>updated</name></name> = <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>baton</name>-&gt;<name>ptemp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hc_watchdog_callback</name><parameter_list>(<param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>sctx_t</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_pool_t</name> *</type><name>hctp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>AP_WATCHDOG_STATE_STARTING</name></expr>:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03258</expr></argument>)</argument_list></call>
"%s watchdog started."</expr></argument>,
<argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HC_USE_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>tpsize</name> &amp;&amp; <name>hctp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_pool_create</name><argument_list>(<argument><expr>&amp;<name>hctp</name></expr></argument>, <argument><expr><name>tpsize</name></expr></argument>,
<argument><expr><name>tpsize</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03312</expr></argument>)</argument_list></call>
"apr_thread_pool_create() with %d threads failed"</expr></argument>,
<argument><expr><name>tpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hctp</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03313</expr></argument>)</argument_list></call>
"apr_thread_pool_create() with %d threads succeeded"</expr></argument>,
<argument><expr><name>tpsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03314</expr></argument>)</argument_list></call>
"Skipping apr_thread_pool_create()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hctp</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr><name>AP_WATCHDOG_STATE_RUNNING</name></expr>:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Run of %s watchdog."</expr></argument>,
<argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>balancer</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_proxy_sync_balancer</name><argument_list>(<argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>workers</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>worker</name> = *<name>workers</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>PROXY_WORKER_STOPPED</name></expr></argument>)</argument_list></call> &amp;&amp;
(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name> != <name>NONE</name>) &amp;&amp;
(<name>now</name> &gt; <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>updated</name></name> + <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>interval</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>baton_t</name> *</type><name>baton</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Checking %s worker: %s [%d] (%pp)"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>hc_init_worker</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>ptemp</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>"hc_request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>baton</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>baton_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>now</name></name> = <name>now</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>worker</name></name> = <name>worker</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>ptemp</name></name> = <name>ptemp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>baton</name>-&gt;<name>hc</name></name> = <call><name>hc_get_hcworker</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hctp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>hc_check</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HC_USE_THREADS</name></expr></cpp:if>
<else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_pool_push</name><argument_list>(<argument><expr><name>hctp</name></expr></argument>, <argument><expr><name>hc_check</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>baton</name></expr></argument>,
<argument><expr><name>APR_THREAD_TASK_PRIORITY_NORMAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<expr_stmt><expr><name>workers</name>++</expr>;</expr_stmt>
}</block></for>
}</block></for>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>AP_WATCHDOG_STATE_STOPPING</name></expr>:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03261</expr></argument>)</argument_list></call>
"stopping %s watchdog."</expr></argument>,
<argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HC_USE_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>hctp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_pool_destroy</name><argument_list>(<argument><expr><name>hctp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03315</expr></argument>)</argument_list></call>
"apr_thread_pool_destroy() failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>hctp</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>tpsize</name> = <name>HC_THREADPOOL_SIZE</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>main_s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>main_s</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_watchdog_get_instance</name></expr></argument>)</argument_list></call> *<name>hc_watchdog_get_instance</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_watchdog_register_callback</name></expr></argument>)</argument_list></call> *<name>hc_watchdog_register_callback</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>hc_watchdog_get_instance</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_watchdog_get_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hc_watchdog_register_callback</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_watchdog_register_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hc_watchdog_get_instance</name> || !<name>hc_watchdog_register_callback</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03262</expr></argument>)</argument_list></call>
"mod_watchdog is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>hc_watchdog_get_instance</name><argument_list>(<argument><expr>&amp;<name>watchdog</name></expr></argument>,
<argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03263</expr></argument>)</argument_list></call>
"Failed to create watchdog instance (%s)"</expr></argument>,
<argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name> != <name><name>ctx</name>-&gt;<name>s</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10019</expr></argument>)</argument_list></call>
"Missing unique per-server context: %s (%pp:%pp) (no hchecks)"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>hc_watchdog_register_callback</name><argument_list>(<argument><expr><name>watchdog</name></expr></argument>,
<argument><expr><name>AP_WD_TM_SLICE</name></expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>hc_watchdog_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03264</expr></argument>)</argument_list></call>
"Failed to register watchdog callback (%s)"</expr></argument>,
<argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03265</expr></argument>)</argument_list></call>
"watchdog callback registered (%s for %s)"</expr></argument>, <argument><expr><name>HCHECK_WATHCHDOG_NAME</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hc_show_exprs</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>sctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table&gt;"
"&lt;tr&gt;&lt;th colspan='2'&gt;Health check cond. expressions:&lt;/th&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Expr name&lt;/th&gt;&lt;th&gt;Expression&lt;/th&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>hdr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>hc_condition_t</name> *</type><name>cond</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>cond</name> = (<name>hc_condition_t</name> *)<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cond</name>-&gt;<name>expr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;&lt;hr/&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hc_select_exprs</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>sctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>hdr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>hdr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;option value='%s' %s &gt;%s&lt;/option&gt;\n"</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call>) ? "selected" : ""</expr></argument>,
<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_valid_expr</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>hdr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>sctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_hcheck_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>hdr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>conditions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>hdr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>hc_get_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>r</name> || !<name><name>r</name>-&gt;<name>kept_body</name></name></expr>)</condition><then>
<return>return <expr>""</expr>;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>kept_body</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = (<name>apr_size_t</name>)<name>length</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>len</name> == 0</expr>)</condition><then>
<return>return <expr>""</expr>;</return></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>kept_body</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>""</expr>;</return></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<return>return <expr>(const <name>char</name>*)<name>buf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>hc_expr_var_fn</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>var</name> <init>= <expr>(<name>char</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>var</name> &amp;&amp; *<name>var</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>r</name></name> &amp;&amp; <call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"BODY"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>hc_get_body</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>hc_expr_func_fn</name><parameter_list>(<param><decl><type><name>ap_expr_eval_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>var</name> <init>= <expr>(<name>char</name> *)<name>arg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>var</name> &amp;&amp; *<name>var</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>r</name></name> &amp;&amp; <call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"BODY"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>hc_get_body</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hc_expr_lookup</name><parameter_list>(<param><decl><type><name>ap_expr_lookup_parms</name> *</type><name>parms</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name><name>parms</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
<case>case <expr><name>AP_EXPR_FUNC_VAR</name></expr>:
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"HC_"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>parms</name>-&gt;<name>func</name></name> = <name>hc_expr_var_fn</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>parms</name>-&gt;<name>data</name></name> = <name><name>parms</name>-&gt;<name>name</name></name> + 3</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>AP_EXPR_FUNC_STRING</name></expr>:
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"HC"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>parms</name>-&gt;<name>func</name></name> = <name>hc_expr_func_fn</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>parms</name>-&gt;<name>data</name></name> = <name><name>parms</name>-&gt;<name>arg</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>command_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ProxyHCTemplate"</expr></argument>, <argument><expr><name>set_hc_template</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Health check template"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ProxyHCExpr"</expr></argument>, <argument><expr><name>set_hc_condition</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Define a health check condition ruleset expression"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HC_USE_THREADS</name></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyHCTPsize"</expr></argument>, <argument><expr><name>set_hc_tpsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set size of health check thread pool"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hc_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>aszPre</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_proxy_balancer.c"</expr>, <expr>"mod_proxy.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>aszSucc</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_watchdog.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>set_worker_hc_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>hc_show_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>hc_select_exprs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>hc_valid_expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>hc_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>hc_post_config</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_expr_lookup</name><argument_list>(<argument><expr><name>hc_expr_lookup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_hcheck</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>hc_create_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>command_table</name></expr>,
<expr><name>hc_register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
