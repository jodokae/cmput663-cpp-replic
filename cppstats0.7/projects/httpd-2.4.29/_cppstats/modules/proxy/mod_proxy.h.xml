<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/proxy/mod_proxy.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MOD_PROXY_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_PROXY_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_reslist.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_slotmem.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_NETINET_IN_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_ARPA_INET_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<enum>enum <name>enctype</name> <block>{
<decl><name>enc_path</name></decl>, <decl><name>enc_search</name></decl>, <decl><name>enc_user</name></decl>, <decl><name>enc_fpath</name></decl>, <decl><name>enc_parm</name></decl>
}</block>;</enum>
<typedef>typedef <type><enum>enum <block>{
<decl><name>NONE</name></decl>, <decl><name>TCP</name></decl>, <decl><name>OPTIONS</name></decl>, <decl><name>HEAD</name></decl>, <decl><name>GET</name></decl>, <decl><name>CPING</name></decl>, <decl><name>PROVIDER</name></decl>, <decl><name>EOT</name></decl>
}</block></enum></type> <name>hcmethod_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>hcmethod_t</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>implemented</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_hcmethods_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bit</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>flag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_wstat_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALANCER_PREFIX</name></cpp:macro> <cpp:value>"balancer://"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRLF</name></cpp:macro> <cpp:value>"\r\n"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRLF</name></cpp:macro> <cpp:value>"\015\012"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_FORWARDS</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>proxy_balancer</name></type> <name>proxy_balancer</name>;</typedef>
<typedef>typedef <type>struct <name>proxy_worker</name></type> <name>proxy_worker</name>;</typedef>
<typedef>typedef <type>struct <name>proxy_conn_pool</name></type> <name>proxy_conn_pool</name>;</typedef>
<typedef>typedef <type>struct <name>proxy_balancer_method</name></type> <name>proxy_balancer_method</name>;</typedef>
<struct>struct <name>proxy_remote</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_regex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYPASS_NOCANON</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYPASS_INTERPOLATE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYPASS_NOQUERY</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<struct>struct <name>proxy_alias</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>dirconn_entry</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>in_addr</name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>hostaddr</name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> (*<name>matcher</name>) <parameter_list>(<param><decl><type>struct <name>dirconn_entry</name> *</type> <name>This</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>
<struct>struct <name>noproxy_entry</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>addr</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>proxies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>sec_proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>aliases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>noproxies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>dirconn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>balancers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>forward</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>reverse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>domain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_balancers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bgrowth</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>via_off</name></decl>,
<decl><name>via_on</name></decl>,
<decl><name>via_block</name></decl>,
<decl><name>via_full</name></decl>
}</block> <decl><name>viaopt</name></decl>;</enum>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>recv_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>io_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxfwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>bad_error</name></decl>,
<decl><name>bad_ignore</name></decl>,
<decl><name>bad_body</name></decl>
}</block> <decl><name>badopt</name></decl>;</enum>
<enum>enum <block>{
<decl><name>status_off</name></decl>,
<decl><name>status_on</name></decl>,
<decl><name>status_full</name></decl>
}</block> <decl><name>proxy_status</name></decl>;</enum>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>source_address</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>mutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>bslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_provider_t</name> *</type><name>storage</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>req_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>viaopt_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>recv_buffer_size_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>io_buffer_size_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>maxfwd_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>timeout_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>badopt_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>proxy_status_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>source_address_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>bgrowth_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>bal_persist</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>inherit</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>inherit_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ppinherit</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ppinherit_set</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>proxy_server_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>raliases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>cookie_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>cookie_domains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>p_is_fnmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>interpolate_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>alias</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>error_override</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>preserve_host</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>preserve_host_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>error_override_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>alias_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>add_forwarded_headers</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>add_forwarded_headers_set</name>:1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>refs</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_dir_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>raliases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>cookie_paths</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>cookie_domains</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_req_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>forward</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>is_ssl</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>close</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>need_flush</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>inreslist</name>:1</expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uds_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ssl_hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmp_bb</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_conn_rec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>float</name></type> <name>cache_completion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>content_length</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_completion</name>;</typedef>
<struct>struct <name>proxy_conn_pool</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_reslist_t</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_INITIALIZED</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IGNORE_ERRORS</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_DRAIN</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_GENERIC</name></cpp:macro> <cpp:value>0x0008</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IN_SHUTDOWN</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_DISABLED</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_STOPPED</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IN_ERROR</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_HOT_STANDBY</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_FREE</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_HC_FAIL</name></cpp:macro> <cpp:value>0x0400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_INITIALIZED_FLAG</name></cpp:macro> <cpp:value>'O'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IGNORE_ERRORS_FLAG</name></cpp:macro> <cpp:value>'I'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_DRAIN_FLAG</name></cpp:macro> <cpp:value>'N'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_GENERIC_FLAG</name></cpp:macro> <cpp:value>'G'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IN_SHUTDOWN_FLAG</name></cpp:macro> <cpp:value>'U'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_DISABLED_FLAG</name></cpp:macro> <cpp:value>'D'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_STOPPED_FLAG</name></cpp:macro> <cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IN_ERROR_FLAG</name></cpp:macro> <cpp:value>'E'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_HOT_STANDBY_FLAG</name></cpp:macro> <cpp:value>'H'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_FREE_FLAG</name></cpp:macro> <cpp:value>'F'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_HC_FAIL_FLAG</name></cpp:macro> <cpp:value>'C'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_NOT_USABLE_BITMAP</name></cpp:macro> <cpp:value>( PROXY_WORKER_IN_SHUTDOWN | PROXY_WORKER_DISABLED | PROXY_WORKER_STOPPED | PROXY_WORKER_IN_ERROR | PROXY_WORKER_HC_FAIL )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS_INITIALIZED</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (f)-&gt;s-&gt;status &amp; PROXY_WORKER_INITIALIZED )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS_STANDBY</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (f)-&gt;s-&gt;status &amp; PROXY_WORKER_HOT_STANDBY )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS_USABLE</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( ( !( (f)-&gt;s-&gt;status &amp; PROXY_WORKER_NOT_USABLE_BITMAP) ) &amp;&amp; PROXY_WORKER_IS_INITIALIZED(f) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS_DRAINING</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (f)-&gt;s-&gt;status &amp; PROXY_WORKER_DRAIN )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS_GENERIC</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (f)-&gt;s-&gt;status &amp; PROXY_WORKER_GENERIC )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS_HCFAILED</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (f)-&gt;s-&gt;status &amp; PROXY_WORKER_HC_FAIL )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_IS</name><parameter_list>(<param><type><name>f</name></type></param>, <param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (f)-&gt;s-&gt;status &amp; (b) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_DEFAULT_RETRY</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_MAX_SCHEME_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_MAX_ROUTE_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_BALANCER_MAX_ROUTE_SIZE</name></cpp:macro> <cpp:value>PROXY_WORKER_MAX_ROUTE_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_MAX_NAME_SIZE</name></cpp:macro> <cpp:value>96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_BALANCER_MAX_NAME_SIZE</name></cpp:macro> <cpp:value>PROXY_WORKER_MAX_NAME_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_MAX_HOSTNAME_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_BALANCER_MAX_HOSTNAME_SIZE</name></cpp:macro> <cpp:value>PROXY_WORKER_MAX_HOSTNAME_SIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_BALANCER_MAX_STICKY_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_WORKER_RFC1035_NAME_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_MAX_PROVIDER_NAME_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_STRNCPY</name><parameter_list>(<param><type><name>dst</name></type></param>, <param><type><name>src</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_proxy_strncpy((dst), (src), (sizeof(dst)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_COPY_CONF_PARAMS</name><parameter_list>(<param><type><name>w</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { (w)-&gt;s-&gt;timeout = (c)-&gt;timeout; (w)-&gt;s-&gt;timeout_set = (c)-&gt;timeout_set; (w)-&gt;s-&gt;recv_buffer_size = (c)-&gt;recv_buffer_size; (w)-&gt;s-&gt;recv_buffer_size_set = (c)-&gt;recv_buffer_size_set; (w)-&gt;s-&gt;io_buffer_size = (c)-&gt;io_buffer_size; (w)-&gt;s-&gt;io_buffer_size_set = (c)-&gt;io_buffer_size_set; } while (0)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>def</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fnv</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_hashes</name> ;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PROXY_WORKER_MAX_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>scheme</name><index>[<expr><name>PROXY_WORKER_MAX_SCHEME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hostname</name><index>[<expr><name>PROXY_WORKER_MAX_HOSTNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>route</name><index>[<expr><name>PROXY_WORKER_MAX_ROUTE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>redirect</name><index>[<expr><name>PROXY_WORKER_MAX_ROUTE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>flusher</name><index>[<expr><name>PROXY_WORKER_MAX_SCHEME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>uds_path</name><index>[<expr><name>PROXY_WORKER_MAX_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lbset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lbstatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lbfactor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>smax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hmax</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush_wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_hashes</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>status</name></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>flush_off</name></decl>,
<decl><name>flush_on</name></decl>,
<decl><name>flush_auto</name></decl>
}</block> <decl><name>flush_packets</name></decl>;</enum>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>updated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>error_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>retry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>acquire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>ping_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>conn_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>recv_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>io_buffer_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>elected</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>transferred</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>context</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>keepalive</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>disablereuse</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>is_address_reusable</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>retry_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>timeout_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>acquire_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>ping_timeout_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>conn_timeout_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>recv_buffer_size_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>io_buffer_size_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>keepalive_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>disablereuse_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>was_malloced</name>:1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hcuri</name><index>[<expr><name>PROXY_WORKER_MAX_ROUTE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>hcexpr</name><index>[<expr><name>PROXY_WORKER_MAX_SCHEME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>passes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fails</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hcmethod_t</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>upgrade</name><index>[<expr><name>PROXY_WORKER_MAX_SCHEME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_worker_shared</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED_PROXY_WORKER_SHARED_SIZE</name></cpp:macro> <cpp:value>(APR_ALIGN_DEFAULT(sizeof(proxy_worker_shared)))</cpp:value></cpp:define>
<struct>struct <name>proxy_worker</name> <block>{
<decl_stmt><decl><type><name>proxy_hashes</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>local_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_pool</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker_shared</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>tmutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>context</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCHECK_WATHCHDOG_DEFAULT_INTERVAL</name></cpp:macro> <cpp:value>(30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HCHECK_WATHCHDOG_INTERVAL</name></cpp:macro> <cpp:value>(2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_FLUSH_WAIT</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>sticky_path</name><index>[<expr><name>PROXY_BALANCER_MAX_STICKY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sticky</name><index>[<expr><name>PROXY_BALANCER_MAX_STICKY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>lbpname</name><index>[<expr><name>PROXY_MAX_PROVIDER_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>nonce</name><index>[<expr><name>APR_UUID_FORMATTED_LENGTH</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>PROXY_BALANCER_MAX_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sname</name><index>[<expr><name>PROXY_BALANCER_MAX_NAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vpath</name><index>[<expr><name>PROXY_BALANCER_MAX_ROUTE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>vhost</name><index>[<expr><name>PROXY_BALANCER_MAX_HOSTNAME_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>wupdated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_attempts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_hashes</name></type> <name>hash</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>sticky_force</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>scolonsep</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>max_attempts_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>was_malloced</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>need_reset</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>vhosted</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>inactive</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>forcerecovery</name>:1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>sticky_separator</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_balancer_shared</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALIGNED_PROXY_BALANCER_SHARED_SIZE</name></cpp:macro> <cpp:value>(APR_ALIGN_DEFAULT(sizeof(proxy_balancer_shared)))</cpp:value></cpp:define>
<struct>struct <name>proxy_balancer</name> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>errstatuses</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>wslot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_provider_t</name> *</type><name>storage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>growth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_hashes</name></type> <name>hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>wupdated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer_method</name> *</type><name>lbmethod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>gmutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>tmutex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer_shared</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failontimeout</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>proxy_balancer_method</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<function_decl><type><name>proxy_worker</name> *</type>(*<name>finder</name>)<parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>context</name></decl>;</decl_stmt>
<function_decl><type><name>apr_status_t</name></type> (*<name>reset</name>)<parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>age</name>)<parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>updatelbstatus</name>)<parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>elected</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_THREAD_LOCK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (x) &amp;&amp; (x)-&gt;tmutex ? apr_thread_mutex_lock((x)-&gt;tmutex) : APR_SUCCESS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_THREAD_UNLOCK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (x) &amp;&amp; (x)-&gt;tmutex ? apr_thread_mutex_unlock((x)-&gt;tmutex) : APR_SUCCESS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_GLOBAL_LOCK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (x) &amp;&amp; (x)-&gt;gmutex ? apr_global_mutex_lock((x)-&gt;gmutex) : APR_SUCCESS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_GLOBAL_UNLOCK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>( (x) &amp;&amp; (x)-&gt;gmutex ? apr_global_mutex_unlock((x)-&gt;gmutex) : APR_SUCCESS)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROXY_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROXY_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DECLARE_OPTIONAL_HOOK</name></cpp:macro> <cpp:value>APR_DECLARE_EXTERNAL_HOOK</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PROXY_DECLARE_DATA</name> <name>proxy_hcmethods_t</name></type> <name><name>proxy_hcmethods</name><index>[]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>PROXY_DECLARE_DATA</name> <name>proxy_wstat_t</name></type> <name><name>proxy_wstat_tbl</name><index>[]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>hc_show_exprs</name></expr></argument>, <argument><expr>(<name>request_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>hc_select_exprs</name></expr></argument>, <argument><expr>(<name>request_rec</name> *, const <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>hc_valid_expr</name></expr></argument>, <argument><expr>(<name>request_rec</name> *, const <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>set_worker_hc_param</name></expr></argument>,
<argument><expr>(<name>apr_pool_t</name> *, <name>server_rec</name> *, <name>proxy_worker</name> *,
const <name>char</name> *, const <name>char</name> *, <name>void</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>scheme_handler</argument>, <argument>(request_rec *r,
proxy_worker *worker, proxy_server_conf *conf, char *url,
const char *proxyhost, apr_port_t proxyport)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>canon_handler</argument>, <argument>(request_rec *r,
char *url)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>create_req</argument>, <argument>(request_rec *r, request_rec *pr)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>fixups</argument>, <argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>pre_request</argument>, <argument>(proxy_worker **worker,
proxy_balancer **balancer,
request_rec *r,
proxy_server_conf *conf, char **url)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>post_request</argument>, <argument>(proxy_worker *worker,
proxy_balancer *balancer, request_rec *r,
proxy_server_conf *conf)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>request_status</argument>,
<argument>(int *status, request_rec *r)</argument>)</argument_list></macro>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_strncpy</name><argument_list>(<argument>char *dst</argument>, <argument>const char *src</argument>,
<argument>apr_size_t dlen</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_hex2c</name><argument_list>(<argument><expr>const <name>char</name> *<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_proxy_c2hex</name><argument_list>(<argument>int ch</argument>, <argument>char *x</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro><macro><name>ap_proxy_canonenc</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *x</argument>, <argument>int len</argument>, <argument>enum enctype t</argument>,
<argument>int forcedec</argument>, <argument>int proxyreq</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>char</name> **const <name>urlp</name></expr></argument>, <argument><expr><name>char</name> **<name>userp</name></expr></argument>,
<argument><expr><name>char</name> **<name>passwordp</name></expr></argument>, <argument><expr><name>char</name> **<name>hostp</name></expr></argument>, <argument><expr><name>apr_port_t</name> *<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxyerror</name><argument_list>(<argument>request_rec *r</argument>, <argument>int statuscode</argument>, <argument>const char *message</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_checkproxyblock</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>, <argument><expr><name>apr_sockaddr_t</name> *<name>uri_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_checkproxyblock2</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>hostname</name></expr></argument>, <argument><expr><name>apr_sockaddr_t</name> *<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_pre_http_request</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_connect_to_backend</name><argument_list>(<argument><expr><name>apr_socket_t</name> **</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>apr_sockaddr_t</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr><name>proxy_server_conf</name> *</expr></argument>, <argument><expr><name>request_rec</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_ssl_connection_cleanup</name><argument_list>(<argument><expr><name>proxy_conn_rec</name> *<name>conn</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_ssl_enable</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_ssl_disable</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_conn_is_https</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_ssl_val</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>char</name> *<name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_location_reverse_map</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>proxy_dir_conf</name> *<name>conf</name></expr></argument>, <argument><expr>const <name>char</name> *<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_cookie_reverse_map</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>proxy_dir_conf</name> *<name>conf</name></expr></argument>, <argument><expr>const <name>char</name> *<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(*<name>ap_proxy_header_reverse_map_fn</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>,
<param><decl><type><name>proxy_dir_conf</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROXY_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type>(<name>__stdcall</name> *<name>ap_proxy_header_reverse_map_fn</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>,
<param><decl><type><name>proxy_dir_conf</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PROXY_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<typedef>typedef <macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro> <function_decl><type><specifier>const</specifier> <name>char</name> *</type>
(<name>__stdcall</name> *<name>ap_proxy_header_reverse_map_fn</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>,
<param><decl><type><name>proxy_dir_conf</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<typedef>typedef <macro><name>__declspec</name><argument_list>(<argument>dllimport</argument>)</argument_list></macro> <function_decl><type><specifier>const</specifier> <name>char</name> *</type>
(<name>__stdcall</name> *<name>ap_proxy_header_reverse_map_fn</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type></decl></param>,
<param><decl><type><name>proxy_dir_conf</name> *</type></decl></param>, <param><decl><type><specifier>const</specifier></type> <name>char</name> *</decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_worker *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>proxy_balancer</name> *<name>balancer</name></expr></argument>,
<argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_define_worker</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_worker **worker</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>,
<argument>int do_malloc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_share_worker</name><argument_list>(<argument>proxy_worker *worker</argument>,
<argument>proxy_worker_shared *shm</argument>,
<argument>int i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_valid_balancer_name</name><argument_list>(<argument>char *name</argument>, <argument>int i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_balancer *</argument>)</argument_list></macro> <macro><name>ap_proxy_get_balancer</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>,
<argument>int careactive</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_update_balancer</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>proxy_balancer</name> *<name>balancer</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_proxy_define_balancer</name><argument_list>(<argument>apr_pool_t *p</argument>,
<argument>proxy_balancer **balancer</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>const char *url</argument>,
<argument>const char *alias</argument>,
<argument>int do_malloc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_share_balancer</name><argument_list>(<argument>proxy_balancer *balancer</argument>,
<argument>proxy_balancer_shared *shm</argument>,
<argument>int i</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_initialize_balancer</name><argument_list>(<argument><expr><name>proxy_balancer</name> *<name>balancer</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_worker_shared *</argument>)</argument_list></macro> <macro><name>ap_proxy_find_workershm</name><argument_list>(<argument>ap_slotmem_provider_t *storage</argument>,
<argument>ap_slotmem_instance_t *slot</argument>,
<argument>proxy_worker *worker</argument>,
<argument>unsigned int *index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>proxy_balancer_shared *</argument>)</argument_list></macro> <macro><name>ap_proxy_find_balancershm</name><argument_list>(<argument>ap_slotmem_provider_t *storage</argument>,
<argument>ap_slotmem_instance_t *slot</argument>,
<argument>proxy_balancer *balancer</argument>,
<argument>unsigned int *index</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_pre_request</name><argument_list>(<argument><expr><name>proxy_worker</name> **<name>worker</name></expr></argument>,
<argument><expr><name>proxy_balancer</name> **<name>balancer</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>,
<argument><expr><name>char</name> **<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_post_request</name><argument_list>(<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>,
<argument><expr><name>proxy_balancer</name> *<name>balancer</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_determine_connection</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>request_rec *r</argument>,
<argument>proxy_server_conf *conf</argument>,
<argument>proxy_worker *worker</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>apr_uri_t *uri</argument>,
<argument>char **url</argument>,
<argument>const char *proxyname</argument>,
<argument>apr_port_t proxyport</argument>,
<argument>char *server_portstr</argument>,
<argument>int server_portstr_size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ap_proxy_retry_worker</name></expr></argument>,
<argument><expr>(const <name>char</name> *<name>proxy_function</name>, <name>proxy_worker</name> *<name>worker</name>, <name>server_rec</name> *<name>s</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_conn_rec</name> **<name>conn</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_conn_rec</name> *<name>conn</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_CHECK_CONN_EMPTY</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_check_connection</name><argument_list>(<argument>const char *scheme</argument>,
<argument>proxy_conn_rec *conn</argument>,
<argument>server_rec *server</argument>,
<argument>unsigned max_blank_lines</argument>,
<argument>int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_conn_rec</name> *<name>conn</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_connect_uds</name><argument_list>(<argument><expr><name>apr_socket_t</name> *<name>sock</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>uds_path</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_connection_create</name><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_conn_rec</name> *<name>conn</name></expr></argument>,
<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_connection_reusable</name><argument_list>(<argument><expr><name>proxy_conn_rec</name> *<name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_backend_broke</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><enum>enum <block>{ <decl><name>PROXY_HASHFUNC_DEFAULT</name></decl>, <decl><name>PROXY_HASHFUNC_APR</name></decl>, <decl><name>PROXY_HASHFUNC_FNV</name></decl> }</block></enum></type> <name>proxy_hash_t</name>;</typedef>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>unsigned int</argument>)</argument_list></macro> <macro><name>ap_proxy_hashfunc</name><argument_list>(<argument>const char *str</argument>, <argument>proxy_hash_t method</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_set_wstatus</name><argument_list>(<argument>char c</argument>, <argument>int set</argument>, <argument>proxy_worker *w</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_parse_wstatus</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>proxy_worker</name> *<name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_sync_balancer</name><argument_list>(<argument><expr><name>proxy_balancer</name> *<name>b</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>,
<argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_trans_match</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument>struct <expr><name>proxy_alias</name> *<name>ent</name></expr></argument>,
<argument><expr><name>proxy_dir_conf</name> *<name>dconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_create_hdrbrgd</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>header_brigade</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>proxy_conn_rec</name> *<name>p_conn</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>,
<argument><expr><name>proxy_server_conf</name> *<name>conf</name></expr></argument>,
<argument><expr><name>apr_uri_t</name> *<name>uri</name></expr></argument>,
<argument><expr><name>char</name> *<name>url</name></expr></argument>, <argument><expr><name>char</name> *<name>server_portstr</name></expr></argument>,
<argument><expr><name>char</name> **<name>old_cl_val</name></expr></argument>,
<argument><expr><name>char</name> **<name>old_te_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_pass_brigade</name><argument_list>(<argument>apr_bucket_alloc_t *bucket_alloc</argument>,
<argument>request_rec *r</argument>, <argument>proxy_conn_rec *p_conn</argument>,
<argument>conn_rec *origin</argument>, <argument>apr_bucket_brigade *bb</argument>,
<argument>int flush</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ap_proxy_clear_connection</name></expr></argument>,
<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>apr_table_t</name> *<name>headers</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_is_socket_connected</name><argument_list>(<argument><expr><name>apr_socket_t</name> *<name>socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_LBMETHOD</name></cpp:macro> <cpp:value>"proxylbmethod"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_DYNAMIC_BALANCER_LIMIT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<function_decl><type><name>int</name></type> <name>ap_proxy_lb_workers</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_port_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr>const <name>char</name> *<name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name> <argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_proxy_show_hcmethod</name><argument_list>(<argument>hcmethod_t method</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_proxy_buckets_lifetime_transform</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>from</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proxy_transfer_between_connections</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>conn_rec *c_i</argument>,
<argument>conn_rec *c_o</argument>,
<argument>apr_bucket_brigade *bb_i</argument>,
<argument>apr_bucket_brigade *bb_o</argument>,
<argument>const char *name</argument>,
<argument>int *sent</argument>,
<argument>apr_off_t bsize</argument>,
<argument>int after</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>PROXY_DECLARE_DATA</name></type> <name>proxy_module</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
