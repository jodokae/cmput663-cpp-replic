<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/proxy/mod_proxy_fcgi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_fcgi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_fcgi_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>cond</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>subst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envname</name></decl>;</decl_stmt>
}</block></struct></type> <name>sei_entry</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>need_dirwalk</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcgi_req_config_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>BACKEND_DEFAULT_UNKNOWN</name> <init>= <expr>0</expr></init></decl>,
<decl><name>BACKEND_FPM</name></decl>,
<decl><name>BACKEND_GENERIC</name></decl>,
}</block></enum></type> <name>fcgi_backend_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCGI_MAY_BE_FPM</name><parameter_list>(<param><type><name>dconf</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(dconf &amp;&amp; ((dconf-&gt;backend_type == BACKEND_DEFAULT_UNKNOWN) || (dconf-&gt;backend_type == BACKEND_FPM)))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>fcgi_backend_t</name></type> <name>backend_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>env_fixups</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcgi_dirconf_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_fcgi_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_req_config_t</name> *</type><name>rconf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathinfo_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_cstr_casecmpn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"fcgi:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 5</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>port</name> = <name>def_port</name> = <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr>"fcgi"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01059</expr></argument>)</argument_list></call>
"error parsing URL %s: %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>port</name> != <name>def_port</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>sport</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:fcgi://"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01060</expr></argument>)</argument_list></call>
"set r-&gt;filename to %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_fcgi_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rconf</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rconf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fcgi_req_config_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_fcgi_module</name></expr></argument>, <argument><expr><name>rconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>NULL</name> != (<name>pathinfo_type</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-fcgi-pathinfo"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>pathinfo_type</name></expr></argument>, <argument><expr>"full"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rconf</name>-&gt;<name>need_dirwalk</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url_keep2f</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>pathinfo_type</name></expr></argument>, <argument><expr>"first-dot"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>split</name> <init>= <expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>split</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>slash</name> <init>= <expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>split</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>slash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url_keep2f</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>slash</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>pathinfo_type</name></expr></argument>, <argument><expr>"last-dot"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>split</name> <init>= <expr><call><name>ap_strrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>split</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>slash</name> <init>= <expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>split</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>slash</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>slash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url_keep2f</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>slash</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>pathinfo_type</name></expr></argument>, <argument><expr>"unescape"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_unescape_url_keep2f</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01061</expr></argument>)</argument_list></call>
"set r-&gt;path_info to %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_cgivars</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>fcgi_dirconf_t</name> *</type><name>dconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>sei_entry</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>regm</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>entries</name> = (<name>sei_entry</name> *) <name><name>dconf</name>-&gt;<name>env_fixups</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>dconf</name>-&gt;<name>env_fixups</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>sei_entry</name> *</type><name>entry</name> <init>= <expr>&amp;<name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>entry</name>-&gt;<name>envname</name><index>[<expr>0</expr>]</index></name> == '!'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>envname</name></name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>0 &lt; (<name>rc</name> = <call><name>ap_expr_exec_re</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>cond</name></name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><call><name>ap_expr_str_exec_re</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>subst</name></name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>&amp;<name>src</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03514</expr></argument>)</argument_list></call>
"Error evaluating expression for replacement of %s: '%s'"</expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>envname</name></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>APLOGrtrace4</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>oldval</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>envname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"fix_cgivars: override %s from '%s' to '%s'"</expr></argument>,
<argument><expr><name><name>entry</name>-&gt;<name>envname</name></name></expr></argument>, <argument><expr><name>oldval</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>envname</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"fix_cgivars: Condition returned %d"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_data</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type>struct <name>iovec</name> *</type><name>vec</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nvec</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name> <init>= <expr>0</expr></init>, <name>to_write</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>s</name> <init>= <expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nvec</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>to_write</name> += <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>offset</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>to_write</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_sendv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vec</name> + <name>offset</name></expr></argument>, <argument><expr><name>nvec</name> - <name>offset</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>written</name> += <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>written</name> &gt;= <name>to_write</name></expr>)</condition><then>
<break>break;</break></then></if>
<for>for (<init><expr><name>i</name> = <name>offset</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>nvec</name></expr>;</condition> <incr/>) <block>{
<if>if <condition>(<expr><name>n</name> &gt;= <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>offset</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> -= <name><name>vec</name><index>[<expr><name>i</name>++</expr>]</index></name>.<name>iov_len</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name> -= <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name> *) <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_base</name> + <name>n</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
}</block></for>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name> += <name>written</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = <name>written</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_data</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_socket_recv</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name> += *<name>buflen</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_data_full</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>cumulative_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><name>readlen</name> = <name>buflen</name> - <name>cumulative_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buffer</name> + <name>cumulative_len</name></expr></argument>, <argument><expr>&amp;<name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cumulative_len</name> += <name>readlen</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>cumulative_len</name> &lt; <name>buflen</name></expr>)</condition>;</do>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_begin_request</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>apr_uint16_t</name></type> <name>request_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>farray</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_begin_request_body</name></type> <name>brb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>abrb</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_BEGIN_REQUEST</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abrb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_request_body</name><argument_list>(<argument><expr>&amp;<name>brb</name></expr></argument>, <argument><expr><name>AP_FCGI_RESPONDER</name></expr></argument>,
<argument><expr><call><name>ap_proxy_connection_reusable</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call>
? <name>AP_FCGI_KEEP_CONN</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_begin_request_body_to_array</name><argument_list>(<argument><expr>&amp;<name>brb</name></expr></argument>, <argument><expr><name>abrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>abrb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>abrb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><call><name>send_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_environment</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl></param>,
<param><decl><type><name>apr_uint16_t</name></type> <name>request_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>envarr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>farray</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>required_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>next_elem</name></decl>, <decl><type ref="prev"/><name>starting_elem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_req_config_t</name> *</type><name>rconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_fcgi_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_dirconf_t</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_fcgi_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rconf</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>rconf</name>-&gt;<name>need_dirwalk</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_directory_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newfname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:balancer://"</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newfname</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name>+17</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>FCGI_MAY_BE_FPM</name><argument_list>(<argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:fcgi://"</expr></argument>, <argument><expr>13</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newfname</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name>+13</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>newfname</name> &amp;&amp; <name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>qs</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>newfname</name></expr></argument>, <argument><expr>'?'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>qs</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>qs</name>+1</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>qs</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>newfname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newfname</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>newfname</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name>newfname</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fix_cgivars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>envarr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>envarr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APLOGrtrace8</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01062</expr></argument>)</argument_list></call>
"sending env var '%s' value '%s'"</expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>next_elem</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avail_len</name> = 16 * 1024</expr>;</expr_stmt>
<while>while <condition>(<expr><name>next_elem</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>starting_elem</name> = <name>next_elem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>required_len</name> = <call><name>ap_fcgi_encoded_env_len</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr><name>avail_len</name></expr></argument>,
<argument><expr>&amp;<name>next_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>required_len</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>next_elem</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02536</expr></argument>)</argument_list></call> "couldn't encode envvar '%s' in %"
<name>APR_SIZE_T_FMT</name> " bytes"</expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>next_elem</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>avail_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>next_elem</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>body</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>required_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_fcgi_encode_env</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>required_len</name></expr></argument>,
<argument><expr>&amp;<name>starting_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>starting_elem</name> == <name>next_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_PARAMS</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr>(<name>apr_uint16_t</name>)<name>required_len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = <name>body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <name>required_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>send_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_PARAMS</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><call><name>send_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<enum>enum <block>{
<decl><name>HDR_STATE_READING_HEADERS</name></decl>,
<decl><name>HDR_STATE_GOT_CR</name></decl>,
<decl><name>HDR_STATE_GOT_CRLF</name></decl>,
<decl><name>HDR_STATE_GOT_CRLFCR</name></decl>,
<decl><name>HDR_STATE_GOT_LF</name></decl>,
<decl><name>HDR_STATE_DONE_WITH_HEADERS</name></decl>
}</block>;</enum>
<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>readbuf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>readlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>itr</name> <init>= <expr><name>readbuf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>readlen</name>--</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>itr</name> == '\r'</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>*<name>state</name></expr>)</condition> <block>{
<case>case <expr><name>HDR_STATE_GOT_CRLF</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_CRLFCR</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_CR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else <if>if <condition>(<expr>*<name>itr</name> == '\n'</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>*<name>state</name></expr>)</condition> <block>{
<case>case <expr><name>HDR_STATE_GOT_LF</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HDR_STATE_GOT_CR</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_CRLF</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HDR_STATE_GOT_CRLFCR</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_LF</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_READING_HEADERS</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr>*<name>state</name> == <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>++<name>itr</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>state</name> == <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dispatch</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>, <param><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>setaside_pool</name></decl></param>,
<param><decl><type><name>apr_uint16_t</name></type> <name>request_id</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>err</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>bad_request</name></decl></param>, <param><decl><type><name>int</name> *</type><name>has_responded</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>ib</name></decl>, *<decl><type ref="prev"/><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_end_of_headers</name> <init>= <expr>0</expr></init>, <name>done</name> <init>= <expr>0</expr></init>, <name>ignore_body</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>script_error_status</name> <init>= <expr><name>HTTP_OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>farray</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_state</name> <init>= <expr><name>HDR_STATE_READING_HEADERS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>stack_iobuf</name><index>[<expr><name>AP_IOBUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>iobuf_size</name> <init>= <expr><name>AP_IOBUFSIZE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>iobuf</name> <init>= <expr><name>stack_iobuf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>err</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>io_buffer_size_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>iobuf_size</name> = <name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>io_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>iobuf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>iobuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>pfd</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>desc</name>.<name>s</name></name> = <name><name>conn</name>-&gt;<name>sock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>p</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name> | <name>APR_POLLOUT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ib</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ob</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>! <name>done</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name>pfd</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr>*<name>err</name> = "polling"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>pfd</name>.<name>rtnevents</name></name> &amp; <name>APR_POLLOUT</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>to_send</name></decl>, <decl><type ref="prev"/><name>writebuflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>last_stdin</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>iobuf_cursor</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>ib</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr><name>iobuf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "reading input brigade"</expr>;</expr_stmt>
<expr_stmt><expr>*<name>bad_request</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>last_stdin</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>writebuflen</name> = <name>iobuf_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>ib</name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr>&amp;<name>writebuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "flattening brigade"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>to_send</name> = <name>writebuflen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iobuf_cursor</name> = <name>iobuf</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>to_send</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nvec</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>write_this_time</name></decl>;</decl_stmt>
<expr_stmt><expr><name>write_this_time</name> =
<name>to_send</name> &lt; <name>AP_FCGI_MAX_CONTENT_LEN</name> ? <name>to_send</name> : <name>AP_FCGI_MAX_CONTENT_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_STDIN</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr>(<name>apr_uint16_t</name>)<name>write_this_time</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr>++<name>nvec</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>writebuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_base</name> = <name>iobuf_cursor</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>nvec</name></expr>]</index></name>.<name>iov_len</name> = <name>write_this_time</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>nvec</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>send_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>nvec</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "sending stdin"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>to_send</name> -= <name>write_this_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>iobuf_cursor</name> += <name>write_this_time</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>last_stdin</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_STDIN</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>send_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "sending empty stdin"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>pfd</name>.<name>rtnevents</name></name> &amp; <name>APR_POLLIN</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readbuflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>clen</name></decl>, <decl><type ref="prev"/><name>rid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>version</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_data_full</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr>(<name>char</name> *) <name>farray</name></expr></argument>, <argument><expr><name>AP_FCGI_HEADER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01067</expr></argument>)</argument_list></call>
"Failed to read FastCGI header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rdata</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE8</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"FastCGI header"</expr></argument>,
<argument><expr><name>farray</name></expr></argument>, <argument><expr><name>AP_FCGI_HEADER_LEN</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_fields_from_array</name><argument_list>(<argument><expr>&amp;<name>version</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>rid</name></expr></argument>,
<argument><expr>&amp;<name>clen</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>version</name> != <name>AP_FCGI_VERSION_1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01068</expr></argument>)</argument_list></call>
"Got bogus version %d"</expr></argument>, <argument><expr>(<name>int</name>)<name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>rid</name> != <name>request_id</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01069</expr></argument>)</argument_list></call>
"Got bogus rid %d, expected %d"</expr></argument>,
<argument><expr><name>rid</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<label><name>recv_again</name>:</label>
<if>if <condition>(<expr><name>clen</name> &gt; <name>iobuf_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>readbuflen</name> = <name>iobuf_size</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>readbuflen</name> = <name>clen</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>readbuflen</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>get_data</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr>&amp;<name>readbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "reading response body"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>AP_FCGI_STDOUT</name></expr>:
<if>if <condition>(<expr><name>clen</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>iobuf</name></expr></argument>,
<argument><expr><name>readbuflen</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>seen_end_of_headers</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><call><name>handle_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>header_state</name></expr></argument>,
<argument><expr><name>iobuf</name></expr></argument>, <argument><expr><name>readbuflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>st</name> == 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>seen_end_of_headers</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_scan_script_header_err_brigade_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_b</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>has_responded</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "passing headers brigade to output filters"</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> == <name>HTTP_NOT_MODIFIED</name>
|| <name>status</name> == <name>HTTP_PRECONDITION_FAILED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ignore_body</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01070</expr></argument>)</argument_list></call>
"Error parsing script headers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>error_override</name></name>
&amp;&amp; <call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>script_error_status</name> = <name><name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>script_error_status</name> == <name>HTTP_OK</name>
&amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>ignore_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has_responded</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "passing brigade to output filters"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>setaside_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>setaside_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>script_error_status</name> == <name>HTTP_OK</name> &amp;&amp; !<name>ignore_body</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>has_responded</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "passing brigade to output filters"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>clen</name> &gt; <name>readbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clen</name> -= <name>readbuflen</name></expr>;</expr_stmt>
<goto>goto <name>recv_again</name>;</goto>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>script_error_status</name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>has_responded</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>err</name> = "passing brigade to output filters"</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>AP_FCGI_STDERR</name></expr>:
<if>if <condition>(<expr><name>clen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01071</expr></argument>)</argument_list></call>
"Got error '%.*s'"</expr></argument>, <argument><expr>(<name>int</name>)<name>readbuflen</name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>clen</name> &gt; <name>readbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clen</name> -= <name>readbuflen</name></expr>;</expr_stmt>
<goto>goto <name>recv_again</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>AP_FCGI_END_REQUEST</name></expr>:
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01072</expr></argument>)</argument_list></call>
"Got bogus record %d"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>plen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>get_data_full</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>iobuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02537</expr></argument>)</argument_list></call>
"Error occurred reading padding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>ib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>script_error_status</name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>script_error_status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>has_responded</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fcgi_do_request</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>origin</name></decl></param>,
<param><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>char</name> *</type><name>server_portstr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>request_id</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bad_request</name> <init>= <expr>0</expr></init>,
<name>has_responded</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>send_begin_request</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01073</expr></argument>)</argument_list></call>
"Failed Writing Request to %s:"</expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>temp_pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>send_environment</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01074</expr></argument>)</argument_list></call>
"Failed writing Environment to %s:"</expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>dispatch</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr>&amp;<name>bad_request</name></expr></argument>, <argument><expr>&amp;<name>has_responded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"The client aborted the connection."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01075</expr></argument>)</argument_list></call>
"Error dispatching request to %s: %s%s%s"</expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr><name>err</name> ? "(" : ""</expr></argument>,
<argument><expr><name>err</name> ? <name>err</name> : ""</expr></argument>,
<argument><expr><name>err</name> ? ")" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>has_responded</name></expr>)</condition><then> <block>{
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>bad_request</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_GATEWAY_TIME_OUT</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCGI_SCHEME</name></cpp:macro> <cpp:value>"FCGI"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_fcgi_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>,
<param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>server_portstr</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>origin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01076</expr></argument>)</argument_list></call>
"url: %s proxyname: %s proxyport: %d"</expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_cstr_casecmpn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"fcgi:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01077</expr></argument>)</argument_list></call> "declining URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01078</expr></argument>)</argument_list></call> "serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name>FCGI_SCHEME</name></expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>FCGI_SCHEME</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>is_ssl</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>uri</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_determine_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
<argument><expr><name>uri</name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse_set</name></name> &amp;&amp; !<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_proxy_check_connection</name><argument_list>(<argument><expr><name>FCGI_SCHEME</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>PROXY_CHECK_CONN_EMPTY</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr><name>FCGI_SCHEME</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01079</expr></argument>)</argument_list></call>
"failed to make connection to backend: %s"</expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>fcgi_do_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>FCGI_SCHEME</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>fcgi_create_dconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcgi_dirconf_t</name> *</type><name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> = (<name>fcgi_dirconf_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fcgi_dirconf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>backend_type</name></name> = <name>BACKEND_DEFAULT_UNKNOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>env_fixups</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sei_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>fcgi_merge_dconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcgi_dirconf_t</name> *</type><name>a</name></decl>, *<decl><type ref="prev"/><name>base</name></decl>, *<decl><type ref="prev"/><name>over</name></decl>;</decl_stmt>
<expr_stmt><expr><name>a</name> = (<name>fcgi_dirconf_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fcgi_dirconf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>base</name> = (<name>fcgi_dirconf_t</name> *)<name>basev</name></expr>;</expr_stmt>
<expr_stmt><expr><name>over</name> = (<name>fcgi_dirconf_t</name> *)<name>overridesv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>backend_type</name></name> = (<name><name>over</name>-&gt;<name>backend_type</name></name> != <name>BACKEND_DEFAULT_UNKNOWN</name>)
? <name><name>over</name>-&gt;<name>backend_type</name></name>
: <name><name>base</name>-&gt;<name>backend_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>env_fixups</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>env_fixups</name></name></expr></argument>, <argument><expr><name><name>over</name>-&gt;<name>env_fixups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_servertype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcgi_dirconf_t</name> *</type><name>dconf</name> <init>= <expr><name>in_dconf</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"GENERIC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>backend_type</name></name> = <name>BACKEND_GENERIC</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"FPM"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>backend_type</name></name> = <name>BACKEND_FPM</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"ProxyFCGIBackendType requires one of the following arguments: "
"'GENERIC', 'FPM'"</expr>;</return>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_setenv</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcgi_dirconf_t</name> *</type><name>dconf</name> <init>= <expr><name>in_dconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sei_entry</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>envvar</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>env_fixups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cond</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Could not parse expression \"%s\": %s"</expr></argument>,
<argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>envvar</name><index>[<expr>0</expr>]</index></name> == '!'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>arg3</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Third argument (\"%s\") is not "
"allowed when using ProxyFCGISetEnvIf's unset "
"mode (%s)"</expr></argument>, <argument><expr><name>arg3</name></expr></argument>, <argument><expr><name>envvar</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>envvar</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr>"ProxyFCGISetEnvIf: \"!\" is not a valid variable name"</expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>subst</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name>arg3</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>arg3</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>subst</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Could not parse expression \"%s\": %s"</expr></argument>,
<argument><expr><name>arg3</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>envname</name></name> = <name>envvar</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_fcgi_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_fcgi_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>command_table</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyFCGIBackendType"</expr></argument>, <argument><expr><name>cmd_servertype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Specify the type of FastCGI server: 'Generic', 'FPM'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"ProxyFCGISetEnvIf"</expr></argument>, <argument><expr><name>cmd_setenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"expr-condition env-name expr-value"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_fcgi</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>fcgi_create_dconf</name></expr>,
<expr><name>fcgi_merge_dconf</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>command_table</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
