<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/proxy/mod_proxy_wstunnel.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_wstunnel_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_wstunnel_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>search</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ws:"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 3</expr>;</expr_stmt>
<expr_stmt><expr><name>scheme</name> = "ws:"</expr>;</expr_stmt>
<expr_stmt><expr><name>def_port</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr>"http"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"wss:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>scheme</name> = "wss:"</expr>;</expr_stmt>
<expr_stmt><expr><name>def_port</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr>"https"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>port</name> = <name>def_port</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02439</expr></argument>)</argument_list></call> "error parsing URL %s: %s"</expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr>"//"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>,
<argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>search</name>) ? "?" : ""</expr></argument>,
<argument><expr>(<name>search</name>) ? <name>search</name> : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_wstunnel_request</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>char</name> *</type><name>server_portstr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollset_t</name> *</type><name>pollset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pollfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_pollfd_t</name> *</type><name>signalled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>pollcnt</name></decl>, <decl><type ref="prev"/><name>pi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int16_t</name></type> <name>pollevent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name> <init>= <expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>backconn</name> <init>= <expr><name><name>conn</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_cl_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_te_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>client_socket</name> <init>= <expr><call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name> <init>= <expr>0</expr></init>, <name>replied</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>upgrade_method</name> <init>= <expr>*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>upgrade</name></name> ? <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>upgrade</name></name> : "WebSocket"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>header_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>backconn</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"sending request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_create_hdrbrgd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>,
<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr>&amp;<name>old_cl_val</name></expr></argument>, <argument><expr>&amp;<name>old_te_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>upgrade_method</name></expr></argument>, <argument><expr>"NONE"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <macro><name>apr_pstrdup</name><argument_list>(<argument>p</argument>, <argument>"Upgrade: WebSocket" CRLF "Connection: Upgrade" CRLF CRLF</argument>)</argument_list></macro></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>upgrade_method</name></expr></argument>, <argument><expr>"ANY"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>upgrade</name></decl>;</decl_stmt>
<expr_stmt><expr><name>upgrade</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <macro><name>apr_pstrcat</name><argument_list>(<argument>p</argument>, <argument>"Upgrade: "</argument>, <argument>upgrade</argument>, <argument>CRLF "Connection: Upgrade" CRLF CRLF</argument>, <argument>NULL</argument>)</argument_list></macro></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>buf</name> = <macro><name>apr_pstrcat</name><argument_list>(<argument>p</argument>, <argument>"Upgrade: "</argument>, <argument>upgrade_method</argument>, <argument>CRLF "Connection: Upgrade" CRLF CRLF</argument>, <argument>NULL</argument>)</argument_list></macro></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_proxy_pass_brigade</name><argument_list>(<argument><expr><name><name>backconn</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>backconn</name></expr></argument>,
<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"setting up poll()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_pollset_create</name><argument_list>(<argument><expr>&amp;<name>pollset</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02443</expr></argument>)</argument_list></call>
"error apr_pollset_create()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
apr_socket_opt_set(sock, APR_SO_NONBLOCK, 1);
apr_socket_opt_set(sock, APR_SO_KEEPALIVE, 1);
apr_socket_opt_set(client_socket, APR_SO_NONBLOCK, 1);
apr_socket_opt_set(client_socket, APR_SO_KEEPALIVE, 1);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>pollfd</name>.<name>p</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name> | <name>APR_POLLHUP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc</name>.<name>s</name></name> = <name>sock</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>client_data</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pollset_add</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>&amp;<name>pollfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc</name>.<name>s</name></name> = <name>client_socket</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pollset_add</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>&amp;<name>pollfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter_byhandle</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr>"reqtimeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>c</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_output_filters</name></name> = <name><name>c</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>input_filters</name></name> = <name><name>c</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proto_input_filters</name></name> = <name><name>c</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_pollset_poll</name><argument_list>(<argument><expr><name>pollset</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>pollcnt</name></expr></argument>, <argument><expr>&amp;<name>signalled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02444</expr></argument>)</argument_list></call> "error apr_poll()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02445</expr></argument>)</argument_list></call>
"woke from poll(), i=%d"</expr></argument>, <argument><expr><name>pollcnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>pi</name> = 0</expr>;</init> <condition><expr><name>pi</name> &lt; <name>pollcnt</name></expr>;</condition> <incr><expr><name>pi</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_pollfd_t</name> *</type><name>cur</name> <init>= <expr>&amp;<name><name>signalled</name><index>[<expr><name>pi</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cur</name>-&gt;<name>desc</name>.<name>s</name></name> == <name>sock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pollevent</name> = <name><name>cur</name>-&gt;<name>rtnevents</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pollevent</name> &amp; (<name>APR_POLLIN</name> | <name>APR_POLLHUP</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02446</expr></argument>)</argument_list></call>
"sock was readable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> |= <call><name>ap_proxy_transfer_between_connections</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backconn</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>,
<argument><expr><name>header_brigade</name></expr></argument>,
<argument><expr><name>bb</name></expr></argument>, <argument><expr>"sock"</expr></argument>,
<argument><expr>&amp;<name>replied</name></expr></argument>,
<argument><expr><name>AP_IOBUFSIZE</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>pollevent</name> &amp; <name>APR_POLLERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02447</expr></argument>)</argument_list></call>
"error on backconn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backconn</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02605</expr></argument>)</argument_list></call>
"unknown event on backconn %d"</expr></argument>, <argument><expr><name>pollevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cur</name>-&gt;<name>desc</name>.<name>s</name></name> == <name>client_socket</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pollevent</name> = <name><name>cur</name>-&gt;<name>rtnevents</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pollevent</name> &amp; (<name>APR_POLLIN</name> | <name>APR_POLLHUP</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02448</expr></argument>)</argument_list></call>
"client was readable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> |= <call><name>ap_proxy_transfer_between_connections</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr><name>backconn</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>header_brigade</name></expr></argument>,
<argument><expr>"client"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_IOBUFSIZE</name></expr></argument>,
<argument><expr>0</expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>pollevent</name> &amp; <name>APR_POLLERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02607</expr></argument>)</argument_list></call>
"error on client conn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02606</expr></argument>)</argument_list></call>
"unknown event on client conn %d"</expr></argument>, <argument><expr><name>pollevent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02449</expr></argument>)</argument_list></call>
"unknown socket in pollset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
}</block> while <condition>(<expr>!<name>done</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"finished with poll() - cleaning up"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>replied</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_BAD_GATEWAY</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_wstunnel_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>,
<param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>server_portstr</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_ssl</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>upgrade_method</name> <init>= <expr>*<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>upgrade</name></name> ? <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>upgrade</name></name> : "WebSocket"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"wss:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>scheme</name> = "WSS"</expr>;</expr_stmt>
<expr_stmt><expr><name>is_ssl</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ws:"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>scheme</name> = "WS"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02450</expr></argument>)</argument_list></call> "declining URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>upgrade_method</name></expr></argument>, <argument><expr>"NONE"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>upgrade</name></decl>;</decl_stmt>
<expr_stmt><expr><name>upgrade</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>upgrade</name> || (<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>upgrade</name></expr></argument>, <argument><expr><name>upgrade_method</name></expr></argument>)</argument_list></call> != 0 &amp;&amp;
<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>upgrade_method</name></expr></argument>, <argument><expr>"ANY"</expr></argument>)</argument_list></call> !=0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02900</expr></argument>)</argument_list></call>
"declining URL %s (not %s, Upgrade: header is %s)"</expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>upgrade_method</name></expr></argument>, <argument><expr><name>upgrade</name> ? <name>upgrade</name> : "missing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>uri</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02451</expr></argument>)</argument_list></call> "serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>is_ssl</name></name> = <name>is_ssl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>retry</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>retry</name> &lt; 2</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>locurl</name> <init>= <expr><name>url</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_determine_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
<argument><expr><name>uri</name></expr></argument>, <argument><expr>&amp;<name>locurl</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02452</expr></argument>)</argument_list></call>
"failed to make connection to backend: %s"</expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>backend</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_connection_create</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>proxy_wstunnel_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>locurl</name></expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></while>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_http_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_wstunnel_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_wstunnel_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_wstunnel</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>ap_proxy_http_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
