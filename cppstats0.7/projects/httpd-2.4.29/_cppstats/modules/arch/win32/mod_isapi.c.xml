<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/arch/win32/mod_isapi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_rwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_isapi.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISAPI_RETRY</name></cpp:macro> <cpp:value>apr_time_from_sec(30)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>isapi_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISAPI_UNDEF</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>isapi_dir_conf</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>read_ahead_buflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_unsupported</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_to_errlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_to_query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fake_async</name></decl>;</decl_stmt>
}</block></struct></type> <name>isapi_dir_conf</name>;</typedef>
<typedef>typedef <type>struct <name>isapi_loaded</name></type> <name>isapi_loaded</name>;</typedef>
<function_decl><type><name>apr_status_t</name></type> <name>isapi_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fpath</name></decl></param>, <param><decl><type><name>isapi_loaded</name>**</type> <name>isa</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_isapi_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>dir</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>read_ahead_buflen</name></name> = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>log_unsupported</name></name> = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_errlog</name></name> = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_query</name></name> = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>fake_async</name></name> = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
<return>return <expr><name>dir</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_isapi_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base_</name></decl></param>, <param><decl><type><name>void</name> *</type><name>add_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>isapi_dir_conf</name> *) <name>base_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>isapi_dir_conf</name> *) <name>add_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>dir</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>read_ahead_buflen</name></name> = (<name><name>add</name>-&gt;<name>read_ahead_buflen</name></name> == <name>ISAPI_UNDEF</name>)
? <name><name>base</name>-&gt;<name>read_ahead_buflen</name></name>
: <name><name>add</name>-&gt;<name>read_ahead_buflen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>log_unsupported</name></name> = (<name><name>add</name>-&gt;<name>log_unsupported</name></name> == <name>ISAPI_UNDEF</name>)
? <name><name>base</name>-&gt;<name>log_unsupported</name></name>
: <name><name>add</name>-&gt;<name>log_unsupported</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_errlog</name></name> = (<name><name>add</name>-&gt;<name>log_to_errlog</name></name> == <name>ISAPI_UNDEF</name>)
? <name><name>base</name>-&gt;<name>log_to_errlog</name></name>
: <name><name>add</name>-&gt;<name>log_to_errlog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_query</name></name> = (<name><name>add</name>-&gt;<name>log_to_query</name></name> == <name>ISAPI_UNDEF</name>)
? <name><name>base</name>-&gt;<name>log_to_query</name></name>
: <name><name>add</name>-&gt;<name>log_to_query</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dir</name>-&gt;<name>fake_async</name></name> = (<name><name>add</name>-&gt;<name>fake_async</name></name> == <name>ISAPI_UNDEF</name>)
? <name><name>base</name>-&gt;<name>fake_async</name></name>
: <name><name>add</name>-&gt;<name>fake_async</name></name></expr>;</expr_stmt>
<return>return <expr><name>dir</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>isapi_cmd_cachefile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fspec</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fspec</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fspec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02103</expr></argument>)</argument_list></call>
"invalid module path, skipping %s"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr><name>fspec</name></expr></argument>, <argument><expr><name>APR_FINFO_TYPE</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02104</expr></argument>)</argument_list></call>
"unable to stat, skipping %s"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>tmp</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02105</expr></argument>)</argument_list></call>
"not a regular file, skipping %s"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>isapi_lookup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fspec</name></expr></argument>, <argument><expr>&amp;<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02106</expr></argument>)</argument_list></call>
"unable to cache, skipping %s"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>isapi_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ISAPIReadAheadBuffer"</expr></argument>, <argument><expr><name>ap_set_int_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>read_ahead_buflen</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Maximum client request body to initially pass to the"
" ISAPI handler (default: 49152)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPILogNotSupported"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>log_unsupported</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Log requests not supported by the ISAPI server"
" on or off (default: off)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPIAppendLogToErrors"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>log_to_errlog</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Send all Append Log requests to the error log"
" on or off (default: off)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPIAppendLogToQuery"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>log_to_query</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Append Log requests are concatinated to the query args"
" on or off (default: on)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPIFakeAsync"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>fake_async</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Fake Asynchronous support for isapi callbacks"
" on or off [Experimental] (default: off)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"ISAPICacheFile"</expr></argument>, <argument><expr><name>isapi_cmd_cachefile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"Cache the specified ISAPI extension in-process"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<struct><specifier>static</specifier> struct <name>isapi_global_conf</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name></decl>;</decl_stmt>
}</block> <decl><name>loaded</name></decl>;</struct>
<struct>struct <name>isapi_loaded</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_rwlock_t</name> *</type><name>in_progress</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>last_load_rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_load_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dso_handle_t</name> *</type><name>handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HSE_VERSION_INFO</name> *</type><name>isapi_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>report_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_GETEXTENSIONVERSION</name></type> <name>GetExtensionVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_HTTPEXTENSIONPROC</name></type> <name>HttpExtensionProc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_TERMINATEEXTENSION</name></type> <name>TerminateExtension</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>isapi_unload</name><parameter_list>(<param><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl></param>, <param><decl><type><name>int</name></type> <name>force</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>isa</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>isa</name>-&gt;<name>TerminateExtension</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>force</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call>(*<name><name>isa</name>-&gt;<name>TerminateExtension</name></name>)<argument_list>(<argument><expr><name>HSE_TERM_MUST_UNLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call>(*<name><name>isa</name>-&gt;<name>TerminateExtension</name></name>)<argument_list>(<argument><expr><name>HSE_TERM_ADVISORY_UNLOAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_isapi</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>isa_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>isapi_loaded</name>*</type> <name>isa</name> <init>= <expr>(<name>isapi_loaded</name>*) <name>isa_</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>isapi_unload</name><argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>isapi_load</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>isapi_version</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HSE_VERSION_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>report_version</name></name> = 0x500</expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>timeout</name></name> = 300 * 1000000</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dso_load</name><argument_list>(<argument><expr>&amp;<name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02107</expr></argument>)</argument_list></call>
"failed to load %s"</expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name><name>isa</name>-&gt;<name>GetExtensionVersion</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>"GetExtensionVersion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02108</expr></argument>)</argument_list></call>
"missing GetExtensionVersion() in %s"</expr></argument>,
<argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name><name>isa</name>-&gt;<name>HttpExtensionProc</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>"HttpExtensionProc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02109</expr></argument>)</argument_list></call>
"missing HttpExtensionProc() in %s"</expr></argument>,
<argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name><name>isa</name>-&gt;<name>TerminateExtension</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>,
<argument><expr>"TerminateExtension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call>(<name><name>isa</name>-&gt;<name>GetExtensionVersion</name></name>)<argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>isapi_version</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02110</expr></argument>)</argument_list></call>
"failed call to GetExtensionVersion() in %s"</expr></argument>,
<argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>isa</name></expr></argument>, <argument><expr><name>cleanup_isapi</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>isapi_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fpath</name></decl></param>, <param><decl><type><name>isapi_loaded</name>**</type> <name>isa</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>isa</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>hash</name></name></expr></argument>, <argument><expr><name>fpath</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>isa</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_thread_rwlock_t</name> *</type><name>gainlock</name> <init>= <expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>gainlock</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_thread_rwlock_rdlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_rwlock_unlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name> + <name>ISAPI_RETRY</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>check_time</name> <init>= <expr><name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_thread_rwlock_wrlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>check_time</name> == <name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>isapi_load</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>*<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name> = <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_thread_rwlock_unlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>key</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>isa</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_loaded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>filename</name></name> = <name>key</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_rwlock_create</name><argument_list>(<argument><expr>&amp;<name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></argument>, <argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_rwlock_wrlock</name><argument_list>(<argument><expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>hash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>*<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>isapi_load</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>*<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name> = <name>rv</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_thread_rwlock_t</name> *</type><name>unlock</name> <init>= <expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_rwlock_unlock</name><argument_list>(<argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>r</name> &amp;&amp; (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_thread_rwlock_create</name><argument_list>(<argument><expr>&amp;<name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></argument>, <argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</return>
}</block></function>
<struct>struct <name>isapi_cid</name> <block>{
<decl_stmt><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isapi_dir_conf</name></type> <name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>headers_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>response_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PFN_HSE_IO_COMPLETION</name></type> <name>completion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>completion_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>completed</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnGetServerVariable</name><parameter_list>(<param><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>variable_name</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_ptr</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf_data</name> <init>= <expr>(<name>char</name>*)<name>buf_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>variable_name</name></expr></argument>, <argument><expr>"ALL_HTTP"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>len</name> = 0</expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"HTTP_"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> + 3</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>len</name> + 1</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"HTTP_"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = ':'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = '\r'</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = '\n'</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr>*(<name>buf_data</name>++) = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>variable_name</name></expr></argument>, <argument><expr>"ALL_RAW"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>len</name> = 0</expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>len</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> + 4</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>len</name> + 1</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = ':'</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = ' '</expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = '\r'</expr>;</expr_stmt>
<expr_stmt><expr>*(<name>buf_data</name>++) = '\n'</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*(<name>buf_data</name>++) = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>variable_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>len</name> + 1</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnReadClient</name><parameter_list>(<param><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_data</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &lt; *<name>buf_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_size</name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>read</name> &lt; *<name>buf_size</name> &amp;&amp;
((<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>buf_data</name> + <name>read</name></expr></argument>,
<argument><expr>*<name>buf_size</name> - <name>read</name></expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition> <block>{
<expr_stmt><expr><name>read</name> += <name>res</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>buf_size</name> = <name>read</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_READ_FAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>res</name> &gt;= 0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_ssize_t</name></type> <name>send_response_header</name><parameter_list>(<param><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stat</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>head</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>statlen</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>headlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>head_present</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>termarg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>termch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>ate</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>head</name> || <name>headlen</name> == 0 || !*<name>head</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>head</name> = <name>stat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>headlen</name> = <name>statlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>statlen</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>head_present</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>stat</name> || <name>statlen</name> == 0 || !*<name>stat</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>head</name> &amp;&amp; <name>headlen</name> &amp;&amp; *<name>head</name> &amp;&amp; ((<name>stat</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>'\r'</expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call>)
|| (<name>stat</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>'\n'</expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call>)
|| (<name>stat</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call>)
|| (<name>stat</name> = <name>head</name> + <name>headlen</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>statlen</name> = <name>stat</name> - <name>head</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>':'</expr></argument>, <argument><expr><name>statlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>stat</name> = "Status: 200 OK"</expr>;</expr_stmt>
<expr_stmt><expr><name>statlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>flip</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>head</name> = <name>stat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <name>flip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>headlen</name> -= <name>statlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ate</name> += <name>statlen</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>head</name> == '\r' &amp;&amp; <name>headlen</name></expr>)</condition><then>
<expr_stmt><expr>++<name>head</name></expr>, <expr>--<name>headlen</name></expr>, <expr>++<name>ate</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>head</name> == '\n' &amp;&amp; <name>headlen</name></expr>)</condition><then>
<expr_stmt><expr>++<name>head</name></expr>, <expr>--<name>headlen</name></expr>, <expr>++<name>ate</name></expr>;</expr_stmt></then></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>stat</name> &amp;&amp; (<name>statlen</name> &gt; 0) &amp;&amp; *<name>stat</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newstat</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>stat</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stattok</name> <init>= <expr><name>stat</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toklen</name> <init>= <expr><name>statlen</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>toklen</name> &amp;&amp; *<name>stattok</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>stattok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>stattok</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>toklen</name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>toklen</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>stattok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>stattok</name></expr>;</expr_stmt>
<expr_stmt><expr>--<name>toklen</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>toklen</name> &amp;&amp; <call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>stattok</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>statlen</name> = <name>toklen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <name>stattok</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>newstat</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>statlen</name> + 9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>newstat</name></expr></argument>, <argument><expr>"Status: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>newstat</name> + 8</expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>statlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <name>newstat</name></expr>;</expr_stmt>
<expr_stmt><expr><name>statlen</name> += 8</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>head</name> || <name>headlen</name> == 0 || !*<name>head</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>head</name> = "\r\n"</expr>;</expr_stmt>
<expr_stmt><expr><name>headlen</name> = 2</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>head</name><index>[<expr><name>headlen</name> - 1</expr>]</index></name> &amp;&amp; <name><name>head</name><index>[<expr><name>headlen</name></expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>head</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>old_status</name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <call><name>ap_scan_script_header_err_strs_ex</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr>&amp;<name>termch</name></expr></argument>, <argument><expr>&amp;<name>termarg</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>res</name> = <call><name>ap_scan_script_header_err_strs_ex</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr>&amp;<name>termch</name></expr></argument>, <argument><expr>&amp;<name>termarg</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name>
&amp;&amp; <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>old_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>old_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02111</expr></argument>)</argument_list></call>
"Could not determine HTTP response code; using %d"</expr></argument>,
<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> == <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>head_present</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>headers_set</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>termch</name></expr>)</condition><then>
<return>return<expr>(<name>ate</name> + <name>headlen</name>)</expr>;</return></then></if>
<if>if <condition>(<expr><name>termch</name> &amp;&amp; (<name>termarg</name> == (<name>stat</name> ? 1 : 0))
&amp;&amp; <name>head_present</name> &amp;&amp; <name>head</name> + <name>headlen</name> &gt; <name>termch</name></expr>)</condition><then> <block>{
<return>return <expr><name>ate</name> + <name>termch</name> - <name>head</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>ate</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnWriteClient</name><parameter_list>(<param><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_ptr</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>size_arg</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>buf_size</name> <init>= <expr>*<name>size_arg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf_data</name> <init>= <expr>(<name>char</name>*)<name>buf_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>headers_set</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf_data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>buf_data</name> += <name>ate</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_size</name> -= <name>ate</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>buf_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02984</expr></argument>)</argument_list></call>
"WriteClient ap_pass_brigade failed: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>flags</name> &amp; <name>HSE_IO_ASYNC</name>) &amp;&amp; <name><name>cid</name>-&gt;<name>completion</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
<argument><expr>*<name>size_arg</name></expr></argument>, <argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
<argument><expr>*<name>size_arg</name></expr></argument>, <argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnServerSupportFunction</name><parameter_list>(<param><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name></type> <name>HSE_code</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>buf_ptr</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>,
<param><decl><type><name>apr_uint32_t</name> *</type><name>data_type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf_data</name> <init>= <expr>(<name>char</name>*)<name>buf_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>subreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>HSE_code</name></expr>)</condition> <block>{
<case>case <expr><name>HSE_REQ_SEND_URL_REDIRECT_RESP</name></expr>:
<expr_stmt><expr><call><name>apr_table_set</name> <argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name>HTTP_MOVED_TEMPORARILY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>headers_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>HSE_REQ_SEND_URL</name></expr>:
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>argsbuffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt>;</empty_stmt></while>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method_number</name></name> = <name>M_GET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf_data</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>char</name>*)<name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_internal_redirect</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>HSE_REQ_SEND_RESPONSE_HEADER</name></expr>: <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>statlen</name> <init>= <expr>0</expr></init>, <name>headlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>buf_data</name></expr>)</condition><then>
<expr_stmt><expr><name>statlen</name> = <call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>data_type</name></expr>)</condition><then>
<expr_stmt><expr><name>headlen</name> = <call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name>*) <name>data_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>,
<argument><expr>(<name>char</name>*) <name>data_type</name></expr></argument>,
<argument><expr><name>statlen</name></expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<name>apr_size_t</name>)<name>ate</name> &lt; <name>headlen</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(<name>char</name>*) <name>data_type</name> + <name>ate</name></expr></argument>,
<argument><expr><name>headlen</name> - <name>ate</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03177</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_SEND_RESPONSE_HEADER "
"ap_pass_brigade failed: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
}</block></then></if></else></if>
<return>return <expr>1</expr>;</return>
}</block>
</case><case>case <expr><name>HSE_REQ_DONE_WITH_SESSION</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02671</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_DONE_WITH_SESSION is not supported: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_MAP_URL_TO_PATH</name></expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>file</name> <init>= <expr>(<name>char</name> *)<name>buf_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>subreq</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>subreq</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>subreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = (<name>apr_uint32_t</name>)<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>)
&amp;&amp; (!<name><name>subreq</name>-&gt;<name>path_info</name></name>)
&amp;&amp; (<name><name>file</name><index>[<expr><name>len</name> - 1</expr>]</index></name> != '/')</expr>)</condition><then>
<expr_stmt><expr><name>file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>subreq</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>subreq</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>subreq</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>subreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>buf_size</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call> - <name>buf_data</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block>
</case><case>case <expr><name>HSE_REQ_GET_SSPI_INFO</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02672</expr></argument>)</argument_list></call>
"ServerSupportFunction HSE_REQ_GET_SSPI_INFO "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_APPEND_LOG_PARAMETER</name></expr>:
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"isapi-parameter"</expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_query</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_errlog</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02985</expr></argument>)</argument_list></call>
"%s: %s"</expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>HSE_REQ_IO_COMPLETION</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>completion</name></name> = (<name>PFN_HSE_IO_COMPLETION</name>) <name>buf_data</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name> = (<name>void</name> *) <name>data_type</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02673</expr></argument>)</argument_list></call>
"ServerSupportFunction HSE_REQ_IO_COMPLETION "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_TRANSMIT_FILE</name></expr>: <block>{
<decl_stmt><decl><type><name>HSE_TF_INFO</name> *</type><name>tf</name> <init>= <expr>(<name>HSE_TF_INFO</name>*)<name>buf_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>sent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>fsize</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name> &amp;&amp; (<name><name>tf</name>-&gt;<name>dwFlags</name></name> &amp; <name>HSE_IO_ASYNC</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02674</expr></argument>)</argument_list></call>
"ServerSupportFunction HSE_REQ_TRANSMIT_FILE "
"as HSE_IO_ASYNC is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name><name>tf</name>-&gt;<name>hFile</name></name></expr></argument>,
<argument><expr><name>APR_READ</name> | <name>APR_XTHREAD</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>tf</name>-&gt;<name>BytesToWrite</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fsize</name> = <name><name>tf</name>-&gt;<name>BytesToWrite</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>fi</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fsize</name> = <name><name>fi</name>.<name>size</name></name> - <name><name>tf</name>-&gt;<name>Offset</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>tf</name>-&gt;<name>dwFlags</name></name> &amp; <name>HSE_IO_SEND_HEADERS</name>) &amp;&amp; <name><name>tf</name>-&gt;<name>pszStatusCode</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>pszStatusCode</name></name></expr></argument>,
<argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tf</name>-&gt;<name>pszStatusCode</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>tf</name>-&gt;<name>HeadLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>headers_set</name></name> &amp;&amp; <name><name>tf</name>-&gt;<name>pHead</name></name> &amp;&amp; <name><name>tf</name>-&gt;<name>HeadLength</name></name>
&amp;&amp; *(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>HeadLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>tf</name>-&gt;<name>pHead</name></name> &amp;&amp; (<name>apr_size_t</name>)<name>ate</name> &lt; <name><name>tf</name>-&gt;<name>HeadLength</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name> + <name>ate</name></expr></argument>,
<argument><expr><name><name>tf</name>-&gt;<name>HeadLength</name></name> - <name>ate</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sent</name> = <name><name>tf</name>-&gt;<name>HeadLength</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>sent</name> += (<name>apr_uint32_t</name>)<name>fsize</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>Offset</name></name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>tf</name>-&gt;<name>pTail</name></name> &amp;&amp; <name><name>tf</name>-&gt;<name>TailLength</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sent</name> += <name><name>tf</name>-&gt;<name>TailLength</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pTail</name></name></expr></argument>,
<argument><expr><name><name>tf</name>-&gt;<name>TailLength</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03178</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_TRANSMIT_FILE "
"ap_pass_brigade failed: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>tf</name>-&gt;<name>dwFlags</name></name> &amp; <name>HSE_IO_ASYNC</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>tf</name>-&gt;<name>pfnHseIO</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>tf</name>-&gt;<name>pfnHseIO</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>pContext</name></name></expr></argument>,
<argument><expr><name>ERROR_SUCCESS</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name><name>tf</name>-&gt;<name>pfnHseIO</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>pContext</name></name></expr></argument>,
<argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completion</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
<argument><expr><name>sent</name></expr></argument>, <argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
<argument><expr><name>sent</name></expr></argument>, <argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if></else></if>
}</block></then></if>
<return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
}</block>
</case><case>case <expr><name>HSE_REQ_REFRESH_ISAPI_ACL</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02675</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_REFRESH_ISAPI_ACL "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_IS_KEEP_CONN</name></expr>:
<expr_stmt><expr>*((<name>int</name> *)<name>buf_data</name>) = (<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> == <name>AP_CONN_KEEPALIVE</name>)</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>HSE_REQ_ASYNC_READ_CLIENT</name></expr>: <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02986</expr></argument>)</argument_list></call>
"asynchronous I/O not supported: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &lt; *<name>buf_size</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf_size</name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>read</name> &lt; *<name>buf_size</name> &amp;&amp;
((<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>buf_data</name> + <name>read</name></expr></argument>,
<argument><expr>*<name>buf_size</name> - <name>read</name></expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition> <block>{
<expr_stmt><expr><name>read</name> += <name>res</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>(*<name>data_type</name> &amp; <name>HSE_IO_ASYNC</name>) &amp;&amp; <name><name>cid</name>-&gt;<name>completion</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>res</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
<argument><expr><name>read</name></expr></argument>, <argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
<argument><expr><name>read</name></expr></argument>, <argument><expr><name>ERROR_READ_FAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr>(<name>res</name> &gt;= 0)</expr>;</return>
}</block>
</case><case>case <expr><name>HSE_REQ_GET_IMPERSONATION_TOKEN</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02676</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_GET_IMPERSONATION_TOKEN "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_MAP_URL_TO_PATH_EX</name></expr>: <block>{
<decl_stmt><decl><type><name>HSE_URL_MAPEX_INFO</name> *</type><name>info</name> <init>= <expr>(<name>HSE_URL_MAPEX_INFO</name>*)<name>data_type</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>test_uri</name> <init>= <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>buf_data</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>subreq</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name>test_uri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>cchMatchingURL</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>test_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>, <argument><expr><name><name>subreq</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> - <name><name>info</name>-&gt;<name>lpszPath</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>subreq</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name> + <name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr></argument>,
<argument><expr><name><name>subreq</name>-&gt;<name>path_info</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof> - <name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>cchMatchingURL</name></name> -= <call><name>strlen</name><argument_list>(<argument><expr><name><name>subreq</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>
&amp;&amp; <name><name>info</name>-&gt;<name>cchMatchingPath</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr>;</expr_stmt>
<expr_stmt><expr>++<name><name>info</name>-&gt;<name>cchMatchingURL</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>
&amp;&amp; <name><name>info</name>-&gt;<name>cchMatchingPath</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>info</name>-&gt;<name>lpszPath</name><index>[<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>lpszPath</name><index>[<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name> &amp;&amp; <name><name>info</name>-&gt;<name>cchMatchingURL</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>info</name>-&gt;<name>lpszPath</name><index>[<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>--<name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr>;</expr_stmt>
<expr_stmt><expr>--<name><name>info</name>-&gt;<name>cchMatchingURL</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<for>for (<init><expr><name>test_uri</name> = <name><name>info</name>-&gt;<name>lpszPath</name></name></expr>;</init> <condition><expr>*<name>test_uri</name></expr>;</condition> <incr><expr>++<name>test_uri</name></expr></incr>)
<if>if <condition>(<expr>*<name>test_uri</name> == '/'</expr>)</condition><then>
<expr_stmt><expr>*<name>test_uri</name> = '\\'</expr>;</expr_stmt></then></if></for>
<expr_stmt><expr><name><name>info</name>-&gt;<name>dwFlags</name></name> = (<name><name>subreq</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UREAD</name> ? 0x001 : 0)
| (<name><name>subreq</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UWRITE</name> ? 0x002 : 0)
| (<name><name>subreq</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UEXECUTE</name> ? 0x204 : 0)</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block>
</case><case>case <expr><name>HSE_REQ_ABORTIVE_CLOSE</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02677</expr></argument>)</argument_list></call>
"ServerSupportFunction HSE_REQ_ABORTIVE_CLOSE"
" is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_GET_CERT_INFO_EX</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02678</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_GET_CERT_INFO_EX "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_SEND_RESPONSE_HEADER_EX</name></expr>: <block>{
<decl_stmt><decl><type><name>HSE_SEND_HEADER_EX_INFO</name> *</type><name>shi</name> <init>= <expr>(<name>HSE_SEND_HEADER_EX_INFO</name>*)<name>buf_data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name> <init>= <expr><call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name><name>shi</name>-&gt;<name>pszStatus</name></name></expr></argument>,
<argument><expr><name><name>shi</name>-&gt;<name>pszHeader</name></name></expr></argument>,
<argument><expr><name><name>shi</name>-&gt;<name>cchStatus</name></name></expr></argument>,
<argument><expr><name><name>shi</name>-&gt;<name>cchHeader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<name>apr_size_t</name>)<name>ate</name> &lt; <name><name>shi</name>-&gt;<name>cchHeader</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name><name>shi</name>-&gt;<name>pszHeader</name></name> + <name>ate</name></expr></argument>,
<argument><expr><name><name>shi</name>-&gt;<name>cchHeader</name></name> - <name>ate</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03179</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_SEND_RESPONSE_HEADER_EX "
"ap_pass_brigade failed: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
}</block></then></if></else></if>
<return>return <expr>1</expr>;</return>
}</block>
</case><case>case <expr><name>HSE_REQ_CLOSE_CONNECTION</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02679</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_CLOSE_CONNECTION "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><case>case <expr><name>HSE_REQ_IS_CONNECTED</name></expr>:
<expr_stmt><expr>*((<name>int</name> *)<name>buf_data</name>) = (<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> == 0)</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>HSE_REQ_EXTENSION_TRIGGER</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02680</expr></argument>)</argument_list></call>
"ServerSupportFunction "
"HSE_REQ_EXTENSION_TRIGGER "
"is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</case><default>default:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02681</expr></argument>)</argument_list></call>
"ServerSupportFunction (%d) not supported: "
"%s"</expr></argument>, <argument><expr><name>HSE_code</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>isapi_handler</name> <parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>read</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"isapi-isa"</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"isapi-handler"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>isapi_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <name><name>r</name>-&gt;<name>subprocess_env</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<call><name>ap_allow_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> &amp; <name>OPT_EXECCGI</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>used_path_info</name></name> == <name>AP_REQ_REJECT_PATH_INFO</name>) &amp;&amp;
<name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>isapi_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>&amp;<name>isa</name></expr></argument>)</argument_list></call>
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"UNMAPPED_REMOTE_USER"</expr></argument>, <argument><expr>"REMOTE_USER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"HTTPS"</expr></argument>)</argument_list></call>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_PORT_SECURE"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_PORT_SECURE"</expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"URL"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cid</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_cid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name> = (<name><name>dconf</name>-&gt;<name>read_ahead_buflen</name></name> == <name>ISAPI_UNDEF</name>)
? 49152 : <name><name>dconf</name>-&gt;<name>read_ahead_buflen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name> = (<name><name>dconf</name>-&gt;<name>log_unsupported</name></name> == <name>ISAPI_UNDEF</name>)
? 0 : <name><name>dconf</name>-&gt;<name>log_unsupported</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_errlog</name></name> = (<name><name>dconf</name>-&gt;<name>log_to_errlog</name></name> == <name>ISAPI_UNDEF</name>)
? 0 : <name><name>dconf</name>-&gt;<name>log_to_errlog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_query</name></name> = (<name><name>dconf</name>-&gt;<name>log_to_query</name></name> == <name>ISAPI_UNDEF</name>)
? 1 : <name><name>dconf</name>-&gt;<name>log_to_query</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name> = (<name><name>dconf</name>-&gt;<name>fake_async</name></name> == <name>ISAPI_UNDEF</name>)
? 0 : <name><name>dconf</name>-&gt;<name>fake_async</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXTENSION_CONTROL_BLOCK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>ConnID</name></name> = <name>cid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>isa</name></name> = <name>isa</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>EXTENSION_CONTROL_BLOCK</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwVersion</name></name> = <name><name>isa</name>-&gt;<name>report_version</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszLogData</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszMethod</name></name> = (<name>char</name>*) <name><name>r</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszQueryString</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"QUERY_STRING"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszPathInfo</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszPathTranslated</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_TRANSLATED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszContentType</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"CONTENT_TYPE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>GetServerVariable</name></name> = <name>regfnGetServerVariable</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>WriteClient</name></name> = <name>regfnWriteClient</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>ReadClient</name></name> = <name>regfnReadClient</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>ServerSupportFunction</name></name> = <name>regfnServerSupportFunction</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>ap_setup_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REQUEST_CHUNKED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> &gt; (<name>apr_uint32_t</name>)<name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = 0xffffffff</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>read</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>read</name> &lt; <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> &amp;&amp;
((<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*)<name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name></name> + <name>read</name></expr></argument>,
<argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> - <name>read</name></expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition> <block>{
<expr_stmt><expr><name>read</name> += <name>res</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>res</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = <name>read</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name>read</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name><index>[<expr><name>read</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>,
<argument><expr><name>APR_THREAD_MUTEX_UNNESTED</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completed</name></name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>completed</name></name> || (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02112</expr></argument>)</argument_list></call>
"Failed to create completion mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call>(*<name><name>isa</name>-&gt;<name>HttpExtensionProc</name></name>)<argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszLogData</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02113</expr></argument>)</argument_list></call>
"%s: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszLogData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<switch>switch<condition>(<expr><name>rv</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
</case><case>case <expr><name>HSE_STATUS_SUCCESS</name></expr>:
</case><case>case <expr><name>HSE_STATUS_SUCCESS_AND_KEEP_CONN</name></expr>:
<break>break;</break>
</case><case>case <expr><name>HSE_STATUS_PENDING</name></expr>:
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completed</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>)<call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02114</expr></argument>)</argument_list></call>
"asynch I/O result HSE_STATUS_PENDING "
"from HttpExtensionProc() is not supported: %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>HSE_STATUS_ERROR</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02115</expr></argument>)</argument_list></call>
"HSE_STATUS_ERROR result from "
"HttpExtensionProc(): %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02116</expr></argument>)</argument_list></call>
"unrecognized result code %d "
"from HttpExtensionProc(): %s "</expr></argument>,
<argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name><name>cid</name>-&gt;<name>headers_set</name></name> || <name><name>cid</name>-&gt;<name>response_sent</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02117</expr></argument>)</argument_list></call>
"ap_pass_brigade failed to "
"complete the response: %s "</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_SERVER_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isapi_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>loaded</name>.<name>pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02118</expr></argument>)</argument_list></call>
"could not create the isapi cache pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>loaded</name>.<name>hash</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>loaded</name>.<name>hash</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02119</expr></argument>)</argument_list></call>
"Failed to create module cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>loaded</name>.<name>lock</name></name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>,
<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02682</expr></argument>)</argument_list></call>
"Failed to create module cache lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>isapi_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>cont</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>isapi_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>isapi_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>isapi</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_isapi_dir_config</name></expr>,
<expr><name>merge_isapi_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>isapi_cmds</name></expr>,
<expr><name>isapi_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
