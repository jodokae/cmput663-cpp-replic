<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/arch/netware/mod_nw_ssl.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WS_SSL</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ADDRESS</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEY</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unilib.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SO_TLS_UNCLEAN_SHUTDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SO_TLS_UNCLEAN_SHUTDOWN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>ssl_var_lookup</name></expr></argument>,
<argument><expr>(<name>apr_pool_t</name> *, <name>server_rec</name> *,
<name>conn_rec</name> *, <name>request_rec</name> *,
<name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ssl_is_https</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ssl_proxy_enable</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ssl_engine_disable</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strEQ</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcmp(s1,s2) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strNE</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcmp(s1,s2) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strEQn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncmp(s1,s2,n) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strNEn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncmp(s1,s2,n) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcEQ</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcasecmp(s1,s2) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcNE</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strcasecmp(s1,s2) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcEQn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncasecmp(s1,s2,n) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strcNEn</name><parameter_list>(<param><type><name>s1</name></type></param>,<param><type><name>s2</name></type></param>,<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncasecmp(s1,s2,n) != 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strIsEmpty</name><parameter_list>(<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(s == NULL || s[0] == NUL)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>nwssl_module</name></decl>;</decl_stmt>
<typedef>typedef <type>struct <name>NWSSLSrvConfigRec</name></type> <name>NWSSLSrvConfigRec</name>;</typedef>
<typedef>typedef <type>struct <name>seclisten_rec</name></type> <name>seclisten_rec</name>;</typedef>
<typedef>typedef <type>struct <name>seclistenup_rec</name></type> <name>seclistenup_rec</name>;</typedef>
<typedef>typedef <type>struct <name>secsocket_data</name></type> <name>secsocket_data</name>;</typedef>
<struct>struct <name>seclisten_rec</name> <block>{
<decl_stmt><decl><type><name>seclisten_rec</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sockaddr_in</name></type> <name>local_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>MAX_KEY</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mutual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>seclistenup_rec</name> <block>{
<decl_stmt><decl><type><name>seclistenup_rec</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><name>MAX_KEY</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>NWSSLSrvConfigRec</name> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>sltable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>slutable</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pPool</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>secsocket_data</name> <block>{
<decl_stmt><decl><type><name>apr_socket_t</name>*</type> <name>csd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_secure</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>certlist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unicode_t</name>**</type> <name>certarray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>numcerts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>seclisten_rec</name>*</type> <name>ap_seclisteners</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>seclistenup_rec</name>*</type> <name>ap_seclistenersup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_listen_rec</name> *</type><name>nw_old_listeners</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_nwssl_cfg</name><parameter_list>(<param><type><name>srv</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(NWSSLSrvConfigRec *) ap_get_module_config(srv-&gt;module_config, &amp;nwssl_module)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>build_cert_list</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>rootcerts</name> <init>= <expr>(<name>char</name> **)<name><name>certlist</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>numcerts</name> = <name><name>certlist</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>certarray</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unicode_t</name>*</expr></argument>)</argument_list></sizeof>*<name>numcerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>numcerts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>unicode_t</name> *</type><name>unistr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unistr</name> = (<name>unicode_t</name>*)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>rootcerts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>*4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>loc2uni</name> <argument_list>(<argument><expr><name>UNI_LOCAL_DEFAULT</name></expr></argument>, <argument><expr><name>unistr</name></expr></argument>, <argument><expr><name><name>rootcerts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>certarray</name><index>[<expr><name>i</name></expr>]</index></name> = <name>unistr</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>parse_addr</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w</name></decl></param>, <param><decl><type><name>unsigned</name> <name>short</name> *</type><name>ports</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>hostent</name> *</type><name>hep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>my_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ports</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ports</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>p</name> + 1</expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<expr_stmt><expr>*<name>ports</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>p</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = ':'</expr>;</expr_stmt></then></if>
<return>return <expr><call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>my_addr</name> = <call><name>apr_inet_addr</name><argument_list>(<argument><expr>(<name>char</name> *)<name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>my_addr</name> != <name>INADDR_NONE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = ':'</expr>;</expr_stmt></then></if>
<return>return <expr><name>my_addr</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>hep</name> = <call><name>gethostbyname</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(!<name>hep</name>) || (<name><name>hep</name>-&gt;<name>h_addrtype</name></name> != <name>AF_INET</name> || !<name><name>hep</name>-&gt;<name>h_addr_list</name><index>[<expr>0</expr>]</index></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot resolve host name %s --- exiting!\n"</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>hep</name>-&gt;<name>h_addr_list</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Host %s has multiple addresses ---\n"</expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"you must choose one explicitly for use as\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"a secure port. Exiting!!!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = ':'</expr>;</expr_stmt></then></if>
<return>return <expr>((struct <name>in_addr</name> *) (<name><name>hep</name>-&gt;<name>h_addr</name></name>))-&gt;<name>s_addr</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_secure_listener</name><parameter_list>(<param><decl><type><name>seclisten_rec</name> *</type><name>lr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>seclisten_rec</name> *</type><name>sl</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sl</name> = <name>ap_seclisteners</name></expr>;</init> <condition><expr><name>sl</name></expr>;</condition> <incr><expr><name>sl</name> = <name><name>sl</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>memcmp</name><argument_list>(<argument><expr>&amp;<name><name>sl</name>-&gt;<name>local_addr</name></name></expr></argument>, <argument><expr>&amp;<name><name>lr</name>-&gt;<name>local_addr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sl</name>-&gt;<name>local_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sl</name>-&gt;<name>used</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name><name>sl</name>-&gt;<name>fd</name></name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_port_key</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>seclistenup_rec</name> *</type><name>sl</name></decl>;</decl_stmt>
<for>for (<init><expr><name>sl</name> = <name>ap_seclistenersup</name></expr>;</init> <condition><expr><name>sl</name></expr>;</condition> <incr><expr><name>sl</name> = <name><name>sl</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>(<name><name>sl</name>-&gt;<name>port</name></name> == <name>(<name><name>c</name>-&gt;<name>local_addr</name></name>)-&gt;<name>port</name></name>) &amp;&amp;
((<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sl</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr>"0.0.0.0"</expr></argument>)</argument_list></call> == 0) ||
(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sl</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>local_ip</name></name></expr></argument>)</argument_list></call> == 0))</expr>)</condition><then> <block>{
<return>return <expr><name><name>sl</name>-&gt;<name>key</name></name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>make_secure_socket</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> struct <name>sockaddr_in</name> *</type><name>server</name></decl></param>,
<param><decl><type><name>char</name>*</type> <name>key</name></decl></param>, <param><decl><type><name>int</name></type> <name>mutual</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>sconf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>addr</name><index>[<expr><name>MAX_ADDRESS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sslserveropts</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>optParam</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WSAPROTOCOL_INFO</name></type> <name>SecureProtoInfo</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>server</name>-&gt;<name>sin_addr</name>.<name>s_addr</name></name> != <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"address %s port %d"</expr></argument>,
<argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>server</name>-&gt;<name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>server</name>-&gt;<name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"port %d"</expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>server</name>-&gt;<name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>SecureProtoInfo</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WSAPROTOCOL_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SecureProtoInfo</name>.<name>iAddressFamily</name></name> = <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SecureProtoInfo</name>.<name>iSocketType</name></name> = <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SecureProtoInfo</name>.<name>iProtocol</name></name> = <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>SecureProtoInfo</name>.<name>iSecurityScheme</name></name> = <name>SECURITY_PROTOCOL_SSL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>WSASocket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>,
<argument><expr>(<name>LPWSAPROTOCOL_INFO</name>)&amp;<name>SecureProtoInfo</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>INVALID_SOCKET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sconf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02120</expr></argument>)</argument_list></call>
"make_secure_socket: failed to get a socket for %s"</expr></argument>,
<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>mutual</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>optParam</name> = <name>SO_SSL_ENABLE</name> | <name>SO_SSL_SERVER</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SO_SSL_SET_FLAGS</name></expr></argument>, <argument><expr>(<name>char</name> *)&amp;<name>optParam</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optParam</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sconf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02121</expr></argument>)</argument_list></call>
"make_secure_socket: for %s, WSAIoctl: "
"(SO_SSL_SET_FLAGS)"</expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>opts</name>.<name>cert</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>certlen</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>sidtimeout</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>sidentries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>opts</name>.<name>siddir</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SO_SSL_SET_SERVER</name></expr></argument>, <argument><expr>(<name>char</name> *)&amp;<name>opts</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>opts</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sconf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02122</expr></argument>)</argument_list></call>
"make_secure_socket: for %s, WSAIoctl: "
"(SO_SSL_SET_SERVER)"</expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mutual</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>optParam</name> = 0x07</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SO_SSL_SET_FLAGS</name></expr></argument>, <argument><expr>(<name>char</name>*)&amp;<name>optParam</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optParam</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>sconf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02123</expr></argument>)</argument_list></call>
"make_secure_socket: for %s, WSAIoctl: "
"(SO_SSL_SET_FLAGS)"</expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>optParam</name> = <name>SO_TLS_UNCLEAN_SHUTDOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>SO_SSL_SET_FLAGS</name></expr></argument>, <argument><expr>(<name>char</name> *)&amp;<name>optParam</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>optParam</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_secure_socket</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_socket_t</name> *</type><name>csd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>tlsclientopts</name></type> <name>sWS2Opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>nwtlsopts</name></type> <name>sNWTLSOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sslserveropts</name></type> <name>opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulFlags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unicode_t</name></type> <name><name>keyFileName</name><index>[<expr>60</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name>sock</name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name>sWS2Opts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>tlsclientopts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name>sNWTLSOpts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>nwtlsopts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ulFlags</name> = (<name>numcerts</name> ? <name>SO_TLS_ENABLE</name> : <name>SO_TLS_ENABLE</name> | <name>SO_TLS_BLIND_ACCEPT</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>rcode</name> = <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SO_TLS_SET_FLAGS</name></expr></argument>, <argument><expr>&amp;<name>ulFlags</name></expr></argument>, <argument><expr>sizeof(<name>unsigned</name> <name>long</name>)</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>SOCKET_ERROR</name> == <name>rcode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02124</expr></argument>)</argument_list></call>
"Error: %d with WSAIoctl(flag SO_TLS_ENABLE)"</expr></argument>,
<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rcode</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ulFlags</name> = <name>SO_TLS_UNCLEAN_SHUTDOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SO_TLS_SET_FLAGS</name></expr></argument>, <argument><expr>&amp;<name>ulFlags</name></expr></argument>, <argument><expr>sizeof(<name>unsigned</name> <name>long</name>)</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr>&amp;<name>sWS2Opts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sWS2Opts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr>&amp;<name>sNWTLSOpts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sNWTLSOpts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>options</name></name> = &amp;<name>sNWTLSOpts</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>numcerts</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>walletProvider</name></name> = <name>WAL_PROV_DER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>TrustedRootList</name></name> = <name>certarray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>numElementsInTRList</name></name> = <name>numcerts</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>unicpy</name><argument_list>(<argument><expr><name>keyFileName</name></expr></argument>, <argument><expr>L"SSL CertificateIP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>wallet</name></name> = <name>keyFileName</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>walletlen</name></name> = <call><name>unilen</name><argument_list>(<argument><expr><name>keyFileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>walletProvider</name></name> = <name>WAL_PROV_KMO</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rcode</name> = <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SO_TLS_SET_CLIENT</name></expr></argument>, <argument><expr>&amp;<name>sWS2Opts</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>tlsclientopts</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>SOCKET_ERROR</name> == <name>rcode</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02125</expr></argument>)</argument_list></call>
"Error: %d with WSAIoctl(SO_TLS_SET_CLIENT)"</expr></argument>,
<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rcode</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>SSLize_Socket</name><parameter_list>(<param><decl><type><name>SOCKET</name></type> <name>socketHnd</name></decl></param>, <param><decl><type><name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>tlsserveropts</name></type> <name>sWS2Opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>nwtlsopts</name></type> <name>sNWTLSOpts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unicode_t</name></type> <name><name>SASKey</name><index>[<expr>512</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ulFlag</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name>sWS2Opts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>tlsserveropts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>(<name>char</name> *)&amp;<name>sNWTLSOpts</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>nwtlsopts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ulFlag</name> = <name>SO_TLS_ENABLE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rcode</name> = <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>socketHnd</name></expr></argument>, <argument><expr><name>SO_TLS_SET_FLAGS</name></expr></argument>, <argument><expr>&amp;<name>ulFlag</name></expr></argument>,
<argument><expr>sizeof(<name>unsigned</name> <name>long</name>)</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rcode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02126</expr></argument>)</argument_list></call>
"Error: %d with WSAIoctl(SO_TLS_SET_FLAGS, SO_TLS_ENABLE)"</expr></argument>,
<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ERR</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>ulFlag</name> = <name>SO_TLS_SERVER</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rcode</name> = <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>socketHnd</name></expr></argument>, <argument><expr><name>SO_TLS_SET_FLAGS</name></expr></argument>, <argument><expr>&amp;<name>ulFlag</name></expr></argument>,
<argument><expr>sizeof(<name>unsigned</name> <name>long</name>)</expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rcode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02127</expr></argument>)</argument_list></call>
"Error: %d with WSAIoctl(SO_TLS_SET_FLAGS, SO_TLS_SERVER)"</expr></argument>,
<argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ERR</name>;</goto>
}</block></then></if>
<expr_stmt><expr><call><name>loc2uni</name><argument_list>(<argument><expr><name>UNI_LOCAL_DEFAULT</name></expr></argument>, <argument><expr><name>SASKey</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>wallet</name></name> = <name>SASKey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>walletlen</name></name> = <call><name>unilen</name><argument_list>(<argument><expr><name>SASKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>sidtimeout</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>sidentries</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>siddir</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sWS2Opts</name>.<name>options</name></name> = &amp;<name>sNWTLSOpts</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>walletProvider</name></name> = <name>WAL_PROV_KMO</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>keysList</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>numElementsInKeyList</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>reservedforfutureuse</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>reservedforfutureCRL</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>reservedforfutureCRLLen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>reserved1</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>reserved2</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sNWTLSOpts</name>.<name>reserved3</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rcode</name> = <call><name>WSAIoctl</name><argument_list>(<argument><expr><name>socketHnd</name></expr></argument>,
<argument><expr><name>SO_TLS_SET_SERVER</name></expr></argument>,
<argument><expr>&amp;<name>sWS2Opts</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>tlsserveropts</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>SOCKET_ERROR</name> == <name>rcode</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02128</expr></argument>)</argument_list></call>
"Error: %d with WSAIoctl(SO_TLS_SET_SERVER)"</expr></argument>, <argument><expr><call><name>WSAGetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>ERR</name>;</goto>
}</block></then></if>
<label><name>ERR</name>:</label>
<return>return <expr><name>rcode</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_secure_listener</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ips</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>mutual</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name>*</type> <name>sc</name> <init>= <expr><call><name>get_nwssl_cfg</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ports</name></decl>, *<decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seclisten_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name> **</type><name>walk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found_listener</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>ports</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>ips</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ports</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ports</name> == <name>ips</name></expr>)</condition><then>
<return>return <expr>"Missing IP address"</expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>ports</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr>"Address must end in :&lt;port-number&gt;"</expr>;</return></then></if></else></if>
<expr_stmt><expr>*(<name>ports</name>++) = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ports</name> = (<name>char</name>*)<name>ips</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>new</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seclisten_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>local_addr</name>.<name>sin_family</name></name> = <name>AF_INET</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ports</name> == <name>ips</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>local_addr</name>.<name>sin_addr</name>.<name>s_addr</name></name> = <call><name>htonl</name><argument_list>(<argument><expr><name>INADDR_ANY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"0.0.0.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>local_addr</name>.<name>sin_addr</name>.<name>s_addr</name></name> = <call><name>parse_addr</name><argument_list>(<argument><expr><name>ips</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>port</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>ports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>port</name></expr>)</condition><then>
<return>return <expr>"Port must be numeric"</expr>;</return></then></if>
<for>for (<init><expr><name>walk</name> = &amp;<name>nw_old_listeners</name></expr>;</init> <condition><expr>*<name>walk</name></expr>;</condition><incr/>) <block>{
<expr_stmt><expr><name>sa</name> = <name>(*<name>walk</name>)-&gt;<name>bind_addr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sa</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>oldport</name></decl>;</decl_stmt>
<expr_stmt><expr><name>oldport</name> = <name><name>sa</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>port</name> == <name>oldport</name> &amp;&amp;
((!<name>addr</name> &amp;&amp; !<name><name>sa</name>-&gt;<name>hostname</name></name>) ||
((<name>addr</name> &amp;&amp; <name><name>sa</name>-&gt;<name>hostname</name></name>) &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sa</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = *<name>walk</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>walk</name> = <name><name>new</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>ap_listeners</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_listeners</name> = <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found_listener</name> = 1</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>walk</name> = &amp;<name>(*<name>walk</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>sltable</name></name></expr></argument>, <argument><expr><name>ports</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>found_listener</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>local_addr</name>.<name>sin_port</name></name> = <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fd</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>used</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>ap_seclisteners</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>mutual</name></name> = (<name>mutual</name>) ? 1 : 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>addr</name></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_seclisteners</name> = <name>new</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_secure_upgradeable_listener</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ips</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name>*</type> <name>sc</name> <init>= <expr><call><name>get_nwssl_cfg</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ports</name></decl>, *<decl><type ref="prev"/><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seclistenup_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<expr_stmt><expr><name>ports</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>ips</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ports</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ports</name> == <name>ips</name></expr>)</condition><then>
<return>return <expr>"Missing IP address"</expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>ports</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr>"Address must end in :&lt;port-number&gt;"</expr>;</return></then></if></else></if>
<expr_stmt><expr>*(<name>ports</name>++) = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ports</name> = (<name>char</name>*)<name>ips</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>ports</name> == <name>ips</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>addr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"0.0.0.0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>addr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ips</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>port</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>ports</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>port</name></expr>)</condition><then>
<return>return <expr>"Port must be numeric"</expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>slutable</name></name></expr></argument>, <argument><expr><name>ports</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seclistenup_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>ap_seclistenersup</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>addr</name></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_seclistenersup</name> = <name>new</name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>nwssl_socket_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name>*</type> <name>slr</name> <init>= <expr>(<name>ap_listen_rec</name>*)<name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name>*</type> <name>lr</name></decl>;</decl_stmt>
<for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name>lr</name> == <name>slr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_listeners</name> = <name><name>slr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>lr</name>-&gt;<name>next</name></name> == <name>slr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lr</name>-&gt;<name>next</name></name> = <name><name>slr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_trusted_certs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>ptr</name> <init>= <expr>(<name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>certlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>ptr</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nwssl_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>seclisten_rec</name>*</type> <name>ap_old_seclisteners</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name> **</type><name>walk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seclisten_rec</name> **</type><name>secwalk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nw_old_listeners</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_old_seclisteners</name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>secwalk</name> = &amp;<name>ap_seclisteners</name></expr>;</init> <condition><expr>*<name>secwalk</name></expr>;</condition><incr/>) <block>{
<expr_stmt><expr><name>found</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>walk</name> = &amp;<name>ap_listeners</name></expr>;</init> <condition><expr>*<name>walk</name></expr>;</condition><incr/>) <block>{
<expr_stmt><expr><name>sa</name> = <name>(*<name>walk</name>)-&gt;<name>bind_addr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sa</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seclisten_rec</name> *</type><name>secnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>oldport</name></decl>;</decl_stmt>
<expr_stmt><expr><name>oldport</name> = <name><name>sa</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>(*<name>secwalk</name>)-&gt;<name>port</name></name> == <name>oldport</name> &amp;&amp;
((!<name>(*<name>secwalk</name>)-&gt;<name>addr</name></name> &amp;&amp; !<name><name>sa</name>-&gt;<name>hostname</name></name>) ||
((<name>(*<name>secwalk</name>)-&gt;<name>addr</name></name> &amp;&amp; <name><name>sa</name>-&gt;<name>hostname</name></name>) &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sa</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>(*<name>secwalk</name>)-&gt;<name>addr</name></name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = *<name>walk</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>walk</name> = <name><name>new</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>next</name></name> = <name>nw_old_listeners</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nw_old_listeners</name> = <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name>secnew</name> = *<name>secwalk</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>secwalk</name> = <name><name>secnew</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>secnew</name>-&gt;<name>next</name></name> = <name>ap_old_seclisteners</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_old_seclisteners</name> = <name>secnew</name></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>walk</name> = &amp;<name>(*<name>walk</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>found</name> &amp;&amp; &amp;<name>(*<name>secwalk</name>)-&gt;<name>next</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>secwalk</name> = &amp;<name>(*<name>secwalk</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>ap_seclisteners</name> = <name>ap_old_seclisteners</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_seclistenersup</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>certlist</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_listen_pre_config</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nwssl_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>csd</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"nwconv-ssl"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>convert_secure_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>(<name>apr_socket_t</name>*)<name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>secsocket_data</name> *</type><name>csd_data</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>secsocket_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>csd_data</name>-&gt;<name>csd</name></name> = (<name>apr_socket_t</name>*)<name>csd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>csd_data</name>-&gt;<name>is_secure</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>nwssl_module</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>csd_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nwssl_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>seclisten_rec</name>*</type> <name>sl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name>*</type> <name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name>*</type> <name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seclistenup_rec</name> *</type><name>slu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>walk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>seclisten_rec</name> *</type><name>secwalk</name></decl>, *<decl><type ref="prev"/><name>lastsecwalk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
<for>for (<init><expr><name>walk</name> = <name>nw_old_listeners</name></expr>;</init> <condition><expr><name>walk</name></expr>;</condition> <incr><expr><name>walk</name> = <name><name>walk</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sa</name> = <name><name>walk</name>-&gt;<name>bind_addr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sa</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>oldport</name></decl>;</decl_stmt>
<expr_stmt><expr><name>oldport</name> = <name><name>sa</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>secwalk</name> = <name>ap_seclisteners</name></expr>, <expr><name>lastsecwalk</name> = <name>ap_seclisteners</name></expr>;</init> <condition><expr><name>secwalk</name></expr>;</condition> <incr><expr><name>secwalk</name> = <name><name>lastsecwalk</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name> <init>= <expr><name><name>secwalk</name>-&gt;<name>port</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name> <init>= <expr><name><name>secwalk</name>-&gt;<name>addr</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>port</name> == <name>oldport</name> &amp;&amp;
((!<name>addr</name> &amp;&amp; !<name><name>sa</name>-&gt;<name>hostname</name></name>) ||
((<name>addr</name> &amp;&amp; <name><name>sa</name>-&gt;<name>hostname</name></name>) &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sa</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>secwalk</name> == <name>ap_seclisteners</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_seclisteners</name> = <name><name>secwalk</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>lastsecwalk</name>-&gt;<name>next</name></name> = <name><name>secwalk</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>walk</name>-&gt;<name>sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>walk</name>-&gt;<name>active</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>lastsecwalk</name> = <name>secwalk</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></then></if>
}</block></for>
<for>for (<init><expr><name>sl</name> = <name>ap_seclisteners</name></expr>;</init> <condition><expr><name>sl</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>sl</name> = <name><name>sl</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>((<name><name>sl</name>-&gt;<name>fd</name></name> = <call><name>find_secure_listener</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call>) &gt;= 0) &amp;&amp; (<name><name>sl</name>-&gt;<name>used</name></name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>sl</name>-&gt;<name>fd</name></name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name><name>sl</name>-&gt;<name>fd</name></name> = <call><name>make_secure_socket</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>sl</name>-&gt;<name>local_addr</name></name></expr></argument>, <argument><expr><name><name>sl</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>sl</name>-&gt;<name>mutual</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>sl</name>-&gt;<name>fd</name></name> &gt;= 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_os_sock_info_t</name></type> <name>sock_info</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sock_info</name>.<name>os_sock</name></name> = &amp;(<name><name>sl</name>-&gt;<name>fd</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_info</name>.<name>local</name></name> = (struct <name>sockaddr</name>*)&amp;(<name><name>sl</name>-&gt;<name>local_addr</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_info</name>.<name>remote</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_info</name>.<name>family</name></name> = <name>APR_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sock_info</name>.<name>type</name></name> = <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_sock_make</name><argument_list>(<argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr>&amp;<name>sock_info</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lr</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_listen_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>lr</name>-&gt;<name>sd</name></name> = <name>sd</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name><name>lr</name>-&gt;<name>bind_addr</name></name></expr></argument>, <argument><expr><name><name>sl</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name><name>sl</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02129</expr></argument>)</argument_list></call>
"alloc_listener: failed to set up sockaddr for %s:%d"</expr></argument>, <argument><expr><name><name>sl</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>sl</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>lr</name>-&gt;<name>next</name></name> = <name>ap_listeners</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_listeners</name> = <name>lr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>nwssl_socket_cleanup</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></else></if>
}</block></for>
<for>for (<init><expr><name>slu</name> = <name>ap_seclistenersup</name></expr>;</init> <condition><expr><name>slu</name></expr>;</condition> <incr><expr><name>slu</name> = <name><name>slu</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>found</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>slu</name>-&gt;<name>port</name></name> == <name><name>lr</name>-&gt;<name>bind_addr</name>-&gt;<name>port</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02130</expr></argument>)</argument_list></call>
"No Listen directive found for upgradeable listener %s:%d"</expr></argument>, <argument><expr><name><name>slu</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>slu</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>build_cert_list</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>nwssl_config_server_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>new</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NWSSLSrvConfigRec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>sltable</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>slutable</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>nwssl_config_server_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>base</name> <init>= <expr>(<name>NWSSLSrvConfigRec</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>add</name> <init>= <expr>(<name>NWSSLSrvConfigRec</name> *)<name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>merged</name> <init>= <expr>(<name>NWSSLSrvConfigRec</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NWSSLSrvConfigRec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>merged</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_ipports</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>rec</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr>(<name>conn_rec</name>*)<name>rec</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name> &amp;&amp;
((<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"0.0.0.0"</expr></argument>)</argument_list></call> == 0) || (<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>local_ip</name></name></expr></argument>)</argument_list></call> == 0))</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isSecureConnEx</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_table_t</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>port</name><index>[<expr>8</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>itoa</name><argument_list>(<argument><expr><name>(<name><name>c</name>-&gt;<name>local_addr</name></name>)-&gt;<name>port</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_table_do</name><argument_list>(<argument><expr><name>compare_ipports</name></expr></argument>, <argument><expr>(<name>void</name>*)<name>c</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isSecureConn</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>get_nwssl_cfg</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>isSecureConnEx</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>sltable</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isSecureConnUpgradeable</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>get_nwssl_cfg</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>isSecureConnEx</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>slutable</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isSecure</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>isSecureConn</name> <argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isSecureUpgradeable</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>isSecureConnUpgradeable</name> <argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isSecureUpgraded</name> <parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>secsocket_data</name> *</type><name>csd_data</name> <init>= <expr>(<name>secsocket_data</name>*)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>nwssl_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>csd_data</name>-&gt;<name>is_secure</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>nwssl_hook_Fixup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>isSecure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>isSecureUpgraded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTPS"</expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>nwssl_hook_http_scheme</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>isSecure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>isSecureUpgraded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>"https"</expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_port_t</name></type> <name>nwssl_hook_default_port</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>isSecure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>DEFAULT_HTTPS_PORT</name></expr>;</return></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ssl_proxy_enable</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"nwconv-ssl"</expr></argument>, <argument><expr>"Y"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ssl_engine_disable</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_is_https</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>secsocket_data</name> *</type><name>csd_data</name> <init>= <expr>(<name>secsocket_data</name>*)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>nwssl_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>isSecureConn</name> <argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> || (<name>csd_data</name> &amp;&amp; <name><name>csd_data</name>-&gt;<name>is_secure</name></name>)</expr>;</return>
}</block></function>
<function><type><name>char</name> *</type><name>ssl_var_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>var</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>get_nwssl_cfg</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>resdup</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>tm</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resdup</name> = <name>TRUE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>r</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><name>c</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>p</name> = <name><name>c</name>-&gt;<name>pool</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>p</name> = <name><name>mc</name>-&gt;<name>pPool</name></name></expr>;</expr_stmt></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>r</name> != <name>NULL</name></expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>var</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'H'</expr>:
</case><case>case <expr>'h'</expr>:
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_USER_AGENT"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"User-Agent"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_REFERER"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_COOKIE"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_FORWARDED"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Forwarded"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_HOST"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Host"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_PROXY_CONNECTION"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Proxy-Connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP_ACCEPT"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Accept"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTPS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>isSecure</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> || <call><name>isSecureUpgraded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = "on"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>result</name> = "off"</expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 5 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"HTTP:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>var</name>+5</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr>'R'</expr>:
</case><case>case <expr>'r'</expr>:
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_METHOD"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>method</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_SCHEME"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_URI"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REQUEST_FILENAME"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_ADDR"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_HOST"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>ap_get_useragent_host</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REMOTE_NAME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_IDENT"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>ap_get_remote_logname</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"REMOTE_USER"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr>'S'</expr>:
</case><case>case <expr>'s'</expr>:
<if>if <condition>(<expr><call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SSL"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>)</condition><then> <break>break;</break></then></if>
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_ADMIN"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_admin</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_NAME"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>ap_get_server_name_for_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_PORT"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_PROTOCOL"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>protocol</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SCRIPT_FILENAME"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</case><default>default:
<if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>path_info</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"QUERY_STRING"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"IS_SUBREQ"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = (<name><name>r</name>-&gt;<name/></name>main != <name>NULL</name> ? "true" : "false")</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"DOCUMENT_ROOT"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>ap_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"AUTH_TYPE"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>ap_auth_type</name></name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"THE_REQUEST"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name><name>r</name>-&gt;<name>the_request</name></name></expr>;</expr_stmt></then></if></else></if></else></if></else></if></else></if></else></if>
<break>break;</break>
</default>}</block></switch>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name> &amp;&amp; <name>c</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 4 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SSL_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 12 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SSL_VERSION_"</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <name>NULL</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"SERVER_SOFTWARE"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"API_VERSION"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>MODULE_MAGIC_NUMBER_MAJOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_YEAR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%02d%02d"</expr></argument>,
<argument><expr>(<name><name>tm</name>.<name>tm_year</name></name> / 100) + 19</expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_year</name></name> % 100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MKTIMESTR</name><parameter_list>(<param><type><name>format</name></type></param>, <param><type><name>tmfield</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_time_exp_lt(&amp;tm, apr_time_now()); result = apr_psprintf(p, format, tm.tmfield); resdup = FALSE;</cpp:value></cpp:define>
<else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_MON"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_mon+1</argument>)</argument_list></macro>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_DAY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_mday</argument>)</argument_list></macro>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_HOUR"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_hour</argument>)</argument_list></macro>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_MIN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_min</argument>)</argument_list></macro>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_SEC"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>MKTIMESTR</name><argument_list>(<argument>"%02d"</argument>, <argument>tm_sec</argument>)</argument_list></macro>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME_WDAY"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>MKTIMESTR</name><argument_list>(<argument>"%d"</argument>, <argument>tm_wday</argument>)</argument_list></macro>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcEQ</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"TIME"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>tm</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"%02d%02d%02d%02d%02d%02d%02d"</expr></argument>, <argument><expr>(<name><name>tm</name>.<name>tm_year</name></name> / 100) + 19</expr></argument>,
<argument><expr>(<name><name>tm</name>.<name>tm_year</name></name> % 100)</expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_mon</name></name>+1</expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tm</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>resdup</name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then>
<else>else <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call> &gt; 4 &amp;&amp; <call><name>strcEQn</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"ENV:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>getenv</name><argument_list>(<argument><expr><name>var</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name> &amp;&amp; <name>resdup</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>result</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>result</name> = ""</expr>;</expr_stmt></then></if>
<return>return <expr>(<name>char</name> *)<name>result</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWITCH_STATUS_LINE</name></cpp:macro> <cpp:value>"HTTP/1.1 101 Switching Protocols"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPGRADE_HEADER</name></cpp:macro> <cpp:value>"Upgrade: TLS/1.0, HTTP/1.1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONNECTION_HEADER</name></cpp:macro> <cpp:value>"Connection: Upgrade"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_Upgrade</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>
<block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>upgrade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>upgradebb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>csd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>secsocket_data</name> *</type><name>csd_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>upgrade</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>upgrade</name> == <name>NULL</name>
|| <call><name>strcmp</name><argument_list>(<argument><expr><call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>upgrade</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"TLS/1.0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Upgrade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>csd_data</name> = (<name>secsocket_data</name>*)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>nwssl_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>csd</name> = <name><name>csd_data</name>-&gt;<name>csd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>upgradebb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>ap_fputs</name><argument_list>(<argument>f-&gt;next</argument>, <argument>upgradebb</argument>, <argument>SWITCH_STATUS_LINE CRLF
UPGRADE_HEADER CRLF CONNECTION_HEADER CRLF CRLF</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>upgradebb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>upgradebb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02132</expr></argument>)</argument_list></call>
"could not send interim 101 Upgrade response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>key</name> = <call><name>get_port_key</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>csd</name> &amp;&amp; <name>key</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sockdes</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name>sockdes</name></expr></argument>, <argument><expr><name>csd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>SSLize_Socket</name><argument_list>(<argument><expr><name>sockdes</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ret</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>csd_data</name>-&gt;<name>is_secure</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02133</expr></argument>)</argument_list></call>
"Upgradeable socket handle not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02134</expr></argument>)</argument_list></call>
"Awaiting re-negotiation handshake"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_hook_Insert_Filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NWSSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>get_nwssl_cfg</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>isSecureUpgradeable</name> <argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"UPGRADE_FILTER"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>nwssl_module_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"SecureListen"</expr></argument>, <argument><expr><name>set_secure_listener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"specify an address and/or port with a key pair name.\n"
"Optional third parameter of MUTUAL configures the port for mutual authentication."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"NWSSLUpgradeable"</expr></argument>, <argument><expr><name>set_secure_upgradeable_listener</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"specify an address and/or port with a key pair name, that can be upgraded to an SSL connection.\n"
"The address and/or port must have already be defined using a Listen directive."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"NWSSLTrustedCerts"</expr></argument>, <argument><expr><name>set_trusted_certs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Adds trusted certificates that are used to create secure connections to proxied servers"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_output_filter</name> <argument_list>(<argument><expr>"UPGRADE_FILTER"</expr></argument>, <argument><expr><name>ssl_io_filter_Upgrade</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name> + 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>nwssl_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>nwssl_pre_connection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>nwssl_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>nwssl_hook_Fixup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_http_scheme</name><argument_list>(<argument><expr><name>nwssl_hook_http_scheme</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_default_port</name><argument_list>(<argument><expr><name>nwssl_hook_default_port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>ssl_hook_Insert_Filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_proxy_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_engine_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>nwssl</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>nwssl_config_server_create</name></expr>,
<expr><name>nwssl_config_server_merge</name></expr>,
<expr><name>nwssl_module_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
