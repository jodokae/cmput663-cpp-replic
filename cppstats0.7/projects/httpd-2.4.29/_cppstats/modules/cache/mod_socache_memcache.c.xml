<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/cache/mod_socache_memcache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu_version.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_MAJOR_VERSION</name> &gt; 1 || (<name>APU_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APU_MINOR_VERSION</name> &gt; 2)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_APU_MEMCACHE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_APU_MEMCACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_socache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_memcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_KEY_LEN</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MC_DEFAULT_SERVER_PORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_DEFAULT_SERVER_PORT</name></cpp:macro> <cpp:value>11211</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MC_DEFAULT_SERVER_MIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_DEFAULT_SERVER_MIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MC_DEFAULT_SERVER_SMAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_DEFAULT_SERVER_SMAX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MC_DEFAULT_SERVER_TTL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_DEFAULT_SERVER_TTL</name></cpp:macro> <cpp:value>apr_time_from_sec(15)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>socache_memcache_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>ttl</name></decl>;</decl_stmt>
}</block></struct></type> <name>socache_mc_svr_cfg</name>;</typedef>
<struct>struct <name>ap_socache_instance_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>servers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_memcache_t</name> *</type><name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>taglen</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>socache_mc_create</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> **</type><name>context</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>context</name> = <name>ctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>arg</name> || !*<name>arg</name></expr>)</condition><then> <block>{
<return>return <expr>"List of server names required to create memcache socache."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>servers</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_mc_init</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl></param>,
<param><decl><type><specifier>const</specifier> struct <name>ap_socache_hints</name> *</type><name>hints</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_limit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>nservers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cache_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>split</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socache_mc_svr_cfg</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>socache_memcache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_HARD_LIMIT_THREADS</name></expr></argument>, <argument><expr>&amp;<name>thread_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cache_config</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>split</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>cache_config</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>split</name></expr>)</condition> <block>{
<expr_stmt><expr><name>nservers</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>split</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr>","</expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nservers</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>mc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00785</expr></argument>)</argument_list></call>
"Failed to create Memcache Object of '%d' size."</expr></argument>,
<argument><expr><name>nservers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cache_config</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>servers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>split</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>cache_config</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>split</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_memcache_server_t</name> *</type><name>st</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>host_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scope_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_parse_addr_port</name><argument_list>(<argument><expr>&amp;<name>host_str</name></expr></argument>, <argument><expr>&amp;<name>scope_id</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr><name>split</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00786</expr></argument>)</argument_list></call>
"Failed to Parse memcache Server: '%s'"</expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>host_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00787</expr></argument>)</argument_list></call>
"Failed to Parse Server, "
"no hostname specified: '%s'"</expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>port</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <name>MC_DEFAULT_SERVER_PORT</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_server_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>host_str</name></expr></argument>, <argument><expr><name>port</name></expr></argument>,
<argument><expr><name>MC_DEFAULT_SERVER_MIN</name></expr></argument>,
<argument><expr><name>MC_DEFAULT_SERVER_SMAX</name></expr></argument>,
<argument><expr><name>thread_limit</name></expr></argument>,
<argument><expr><name><name>sconf</name>-&gt;<name>ttl</name></name></expr></argument>,
<argument><expr>&amp;<name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00788</expr></argument>)</argument_list></call>
"Failed to Create memcache Server: %s:%d"</expr></argument>,
<argument><expr><name>host_str</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_add_server</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>mc</name></name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00789</expr></argument>)</argument_list></call>
"Failed to Add memcache Server: %s:%d"</expr></argument>,
<argument><expr><name>host_str</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>split</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,<argument><expr>","</expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>tag</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>namespace</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>taglen</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tag</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>taglen</name></name> &lt;= 16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_mc_destroy</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>context</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>socache_mc_id2key</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>keylen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>idlen</name> * 2 + <name><name>ctx</name>-&gt;<name>taglen</name></name> &gt;= <name>keylen</name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<expr_stmt><expr><name>cp</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tag</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>taglen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_bin2hex</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_mc_store</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>ucaData</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>nData</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MC_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>socache_mc_id2key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>expiry</name> -= <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name>expiry</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_set</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>mc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>ucaData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name>expiry</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00790</expr></argument>)</argument_list></call>
"scache_mc: error setting key '%s' "
"with %d bytes of data"</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_mc_retrieve</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>destlen</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>data_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MC_KEY_LEN</name></expr>]</index></name></decl>, *<decl><type ref="prev"/><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>socache_mc_id2key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_getp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>mc</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>data_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> != <name>APR_NOTFOUND</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00791</expr></argument>)</argument_list></call>
"scache_mc: 'retrieve' FAIL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>data_len</name> &gt; *<name>destlen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00792</expr></argument>)</argument_list></call>
"scache_mc: 'retrieve' OVERFLOW"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOMEM</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>destlen</name> = <name>data_len</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_mc_remove</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MC_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>socache_mc_id2key</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_delete</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>mc</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00793</expr></argument>)</argument_list></call>
"scache_mc: error deleting key '%s' "</expr></argument>,
<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_mc_status</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_memcache_t</name> *</type><name>rc</name> <init>= <expr><name><name>ctx</name>-&gt;<name>mc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>rc</name>-&gt;<name>ntotal</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_memcache_server_t</name> *</type><name>ms</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_memcache_stats_t</name> *</type><name>stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>br</name> <init>= <expr>(!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>) ? "&lt;br /&gt;" : "")</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ms</name> = <name><name>rc</name>-&gt;<name>live_servers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Memcached server: %s:%d [%s]%s\n"</expr></argument>, <argument><expr><name><name>ms</name>-&gt;<name>host</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>ms</name>-&gt;<name>port</name></name></expr></argument>,
<argument><expr>(<name><name>ms</name>-&gt;<name>status</name></name> == <name>APR_MC_SERVER_LIVE</name>) ? "Up" : "Down"</expr></argument>,
<argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_memcache_stats</name><argument_list>(<argument><expr><name>ms</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;Version:&lt;/b&gt; &lt;i&gt;%s&lt;/i&gt; [%u bits], PID: &lt;i&gt;%u&lt;/i&gt;, Uptime: &lt;i&gt;%u hrs&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>version</name></name></expr></argument> , <argument><expr><name><name>stats</name>-&gt;<name>pointer_size</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>pid</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>uptime</name></name>/3600</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;Clients::&lt;/b&gt; Structures: &lt;i&gt;%u&lt;/i&gt;, Total: &lt;i&gt;%u&lt;/i&gt;, Current: &lt;i&gt;%u&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>connection_structures</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>total_connections</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>curr_connections</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;Storage::&lt;/b&gt; Total Items: &lt;i&gt;%u&lt;/i&gt;, Current Items: &lt;i&gt;%u&lt;/i&gt;, Bytes: &lt;i&gt;%" <name>APR_UINT64_T_FMT</name> "&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>total_items</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>curr_items</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;CPU::&lt;/b&gt; System: &lt;i&gt;%u&lt;/i&gt;, User: &lt;i&gt;%u&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr>(<name>unsigned</name>)<name><name>stats</name>-&gt;<name>rusage_system</name></name></expr></argument>, <argument><expr>(<name>unsigned</name>)<name><name>stats</name>-&gt;<name>rusage_user</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;Cache::&lt;/b&gt; Gets: &lt;i&gt;%u&lt;/i&gt;, Sets: &lt;i&gt;%u&lt;/i&gt;, Hits: &lt;i&gt;%u&lt;/i&gt;, Misses: &lt;i&gt;%u&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>cmd_get</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>cmd_set</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>get_hits</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>get_misses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;Net::&lt;/b&gt; Input bytes: &lt;i&gt;%" <name>APR_UINT64_T_FMT</name> "&lt;/i&gt;, Output bytes: &lt;i&gt;%" <name>APR_UINT64_T_FMT</name> "&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>bytes_read</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>bytes_written</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;b&gt;Misc::&lt;/b&gt; Evictions: &lt;i&gt;%" <name>APR_UINT64_T_FMT</name> "&lt;/i&gt;, MaxMem: &lt;i&gt;%u&lt;/i&gt;, Threads: &lt;i&gt;%u&lt;/i&gt; &lt;br /&gt;\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>evictions</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>limit_maxbytes</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr&gt;&lt;br /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Version: %s [%u bits], PID: %u, Uptime: %u hrs %s\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>version</name></name></expr></argument> , <argument><expr><name><name>stats</name>-&gt;<name>pointer_size</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>pid</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>uptime</name></name>/3600</expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Clients:: Structures: %d, Total: %d, Current: %u %s\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>connection_structures</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>total_connections</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>curr_connections</name></name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Storage:: Total Items: %u, Current Items: %u, Bytes: %" <name>APR_UINT64_T_FMT</name> " %s\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>total_items</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>curr_items</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CPU:: System: %u, User: %u %s\n"</expr></argument>,
<argument><expr>(<name>unsigned</name>)<name><name>stats</name>-&gt;<name>rusage_system</name></name></expr></argument>, <argument><expr>(<name>unsigned</name>)<name><name>stats</name>-&gt;<name>rusage_user</name></name></expr></argument> , <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Cache:: Gets: %u, Sets: %u, Hits: %u, Misses: %u %s\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>cmd_get</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>cmd_set</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>get_hits</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>get_misses</name></name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Net:: Input bytes: %" <name>APR_UINT64_T_FMT</name> ", Output bytes: %" <name>APR_UINT64_T_FMT</name> " %s\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>bytes_read</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>bytes_written</name></name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"Misc:: Evictions: %" <name>APR_UINT64_T_FMT</name> ", MaxMem: %u, Threads: %u %s\n"</expr></argument>,
<argument><expr><name><name>stats</name>-&gt;<name>evictions</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>limit_maxbytes</name></name></expr></argument>, <argument><expr><name><name>stats</name>-&gt;<name>threads</name></name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_mc_iterate</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>instance</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
<param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_socache_provider_t</name></type> <name>socache_mc</name> <init>= <expr><block>{
<expr>"memcache"</expr>,
<expr>0</expr>,
<expr><name>socache_mc_create</name></expr>,
<expr><name>socache_mc_init</name></expr>,
<expr><name>socache_mc_destroy</name></expr>,
<expr><name>socache_mc_store</name></expr>,
<expr><name>socache_mc_retrieve</name></expr>,
<expr><name>socache_mc_remove</name></expr>,
<expr><name>socache_mc_status</name></expr>,
<expr><name>socache_mc_iterate</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>socache_mc_svr_cfg</name> *</type><name>sconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>socache_mc_svr_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sconf</name>-&gt;<name>ttl</name></name> = <name>MC_DEFAULT_SERVER_TTL</name></expr>;</expr_stmt>
<return>return <expr><name>sconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>socache_mc_set_ttl</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>ttl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>socache_mc_svr_cfg</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>socache_memcache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>ttl</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" has wrong format"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>ttl</name> &lt; <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>) || (<name>ttl</name> &gt; <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>3600</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" can only be 0 or up to one hour."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sconf</name>-&gt;<name>ttl</name></name> = <name>ttl</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_APU_MEMCACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"memcache"</expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>socache_mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>socache_memcache_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MemcacheConnTTL"</expr></argument>, <argument><expr><name>socache_mc_set_ttl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"TTL used for the connection with the memcache server(s)"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>socache_memcache</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_server_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>socache_memcache_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
