<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/cache/mod_cache_disk.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cache_disk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>cache_disk_module</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>remove_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cache_info</name> *</type><name>i</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_body</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recall_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recall_body</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_array</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_array_header_t</name>*</type> <name>arr</name></decl></param>,
<param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>header_file</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>disk_cache_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>hashfile</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name> = <call><name>ap_cache_generate_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dirlevels</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>dirlength</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name>CACHE_VDIR_SUFFIX</name> "/"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name></expr></argument>, <argument><expr><name>CACHE_HEADER_SUFFIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name></expr></argument>,
<argument><expr><name>CACHE_HEADER_SUFFIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>data_file</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>disk_cache_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>hashfile</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name> = <call><name>ap_cache_generate_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>dirlevels</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>dirlength</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>prefix</name></name></expr></argument>, <argument><expr><name>CACHE_VDIR_SUFFIX</name> "/"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name></expr></argument>, <argument><expr><name>CACHE_DATA_SUFFIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name></expr></argument>,
<argument><expr><name>CACHE_DATA_SUFFIX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>mkdir_structure</name><parameter_list>(<param><decl><type><name>disk_cache_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = (<name>char</name>*)<name>file</name> + <name><name>conf</name>-&gt;<name>cache_root_len</name></name> + 1</expr>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>p</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dir_make</name><argument_list>(<argument><expr><name>file</name></expr></argument>,
<argument><expr><name>APR_UREAD</name>|<name>APR_UWRITE</name>|<name>APR_UEXECUTE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p</name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>safe_file_rename</name><parameter_list>(<param><decl><type><name>disk_cache_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dest</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2 &amp;&amp; <name>rv</name> != <name>APR_SUCCESS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>mkdir_structure</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>file_cache_el_final</name><parameter_list>(<param><decl><type><name>disk_cache_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>disk_cache_file_t</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>file</name>-&gt;<name>tempfd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>safe_file_rename</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00699</expr></argument>)</argument_list></call>
"rename tempfile to file failed:"
" %s -&gt; %s"</expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>file</name>-&gt;<name>tempfd</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>file_cache_temp_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_file_t</name> *</type><name>file</name> <init>= <expr>(<name>disk_cache_file_t</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>file</name>-&gt;<name>tempfd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>tempfile</name></name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>tempfd</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>file</name>-&gt;<name>tempfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>file_cache_create</name><parameter_list>(<param><decl><type><name>disk_cache_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>disk_cache_file_t</name> *</type><name>file</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>file</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>tempfile</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root</name></name></expr></argument>, <argument><expr><name>AP_TEMPFILE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>file_cache_temp_cleanup</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>file_cache_recall_mydata</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl></param>, <param><decl><type><name>cache_info</name> *</type><name>info</name></decl></param>,
<param><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>urlbuff</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_info_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>disk_info</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>info</name>-&gt;<name>status</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>date</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>expire</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>expire</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>request_time</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>response_time</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>response_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>control</name></name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>disk_info</name>.<name>control</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>urlbuff</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>name_len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>name_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>urlbuff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>urlbuff</name><index>[<expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>name_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>urlbuff</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>regen_key</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>varray</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>oldkey</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>iovec</name> *</type><name>iov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nvec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>elts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nvec</name> = (<name><name>varray</name>-&gt;<name>nelts</name></name> * 2) + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>iov</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>iovec</name></expr></argument>)</argument_list></sizeof> * <name>nvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>char</name> **) <name><name>varray</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=0</expr>, <expr><name>k</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>varray</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>header</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>header</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>header</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name>header</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name>oldkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>oldkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcatv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>array_alphasort</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fn1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fn2</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr>*(<name>char</name>**)<name>fn1</name></expr></argument>, <argument><expr>*(<name>char</name>**)<name>fn2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tokens_to_array</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<while>while <condition>(<expr>(<name>token</name> = <call><name>ap_get_list_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name>token</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>arr</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>arr</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>array_alphasort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>create_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_object_t</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>cache_root</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_PARTIAL_CONTENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00700</expr></argument>)</argument_list></call>
"URL %s partial content response not cached"</expr></argument>,
<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; <name><name>dconf</name>-&gt;<name>maxfs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00701</expr></argument>)</argument_list></call>
"URL %s failed the size check "
"(%" <name>APR_OFF_T_FMT</name> " &gt; %" <name>APR_OFF_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>maxfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt;= 0 &amp;&amp; <name>len</name> &lt; <name><name>dconf</name>-&gt;<name>minfs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00702</expr></argument>)</argument_list></call>
"URL %s failed the size check "
"(%" <name>APR_OFF_T_FMT</name> " &lt; %" <name>APR_OFF_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>minfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>obj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>-&gt;<name>vobj</name></name> = <name>dobj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dobj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>-&gt;<name>key</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>name</name></name> = <name><name>obj</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>prefix</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>root</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>root_len</name></name> = <name><name>conf</name>-&gt;<name>cache_root_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"mod_cache (create_entity)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_cache_create</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>hdrs</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_cache_create</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>vary</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_cache_create</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name> = <call><name>data_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> = <call><name>header_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name> = <call><name>header_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name> = <name><name>r</name>-&gt;<name>header_only</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>open_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>error_logged</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_SENDFILE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>coreconf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_object_t</name> *</type><name>obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_info</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>cache_root</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>error_logged</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>error_logged</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00703</expr></argument>)</argument_list></call>
"Cannot cache files to disk without a CacheRoot specified."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>obj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dobj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = &amp;(<name><name>obj</name>-&gt;<name>info</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>prefix</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>root</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>cache_root_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>root_len</name></name> = <name><name>conf</name>-&gt;<name>cache_root_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name> = <call><name>header_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> = <name>APR_READ</name>|<name>APR_BINARY</name>|<name>APR_BUFFERED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_read_full</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>format</name> == <name>VARY_FORMAT_VERSION</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>varray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expire</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>expire</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_read_full</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>, <argument><expr>&amp;<name>expire</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>varray</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>read_array</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>varray</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00704</expr></argument>)</argument_list></call>
"Cannot parse vary header file: %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nkey</name> = <call><name>regen_key</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>varray</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>prefix</name></name> = <name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> = <call><name>header_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> = <name>APR_READ</name>|<name>APR_BINARY</name>|<name>APR_BUFFERED</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>format</name> != <name>DISK_FORMAT_VERSION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00705</expr></argument>)</argument_list></call>
"File '%s' has a version mismatch. File had version: %d."</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name> = <name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>fd</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> = <name><name>dobj</name>-&gt;<name>vary</name>.<name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nkey</name> = <name>key</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name><name>obj</name>-&gt;<name>key</name></name> = <name>nkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>key</name></name> = <name>nkey</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>name</name></name> = <name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"mod_cache (open_entity)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_cache_create</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>hdrs</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_cache_create</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>vary</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>file_cache_create</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name> = <call><name>data_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>file_cache_recall_mydata</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00706</expr></argument>)</argument_list></call>
"Cannot read header file %s"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name> &amp;&amp; !<name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00707</expr></argument>)</argument_list></call>
"HEAD request cached, non-HEAD requested, ignoring: %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>has_body</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> = <name>APR_READ</name> | <name>APR_BINARY</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_SENDFILE_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>flags</name> |= <call><name>AP_SENDFILE_ENABLED</name><argument_list>(<argument><expr><name><name>coreconf</name>-&gt;<name>enable_sendfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>dobj</name>-&gt;<name>data</name>.<name>fd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00708</expr></argument>)</argument_list></call>
"Cannot open data file %s"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name> | <name>APR_FINFO_IDENT</name></expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>file_size</name></name> = <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>inode</name></name> == <name><name>finfo</name>.<name>inode</name></name> &amp;&amp;
<name><name>dobj</name>-&gt;<name>disk_info</name>.<name>device</name></name> == <name><name>finfo</name>.<name>device</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00709</expr></argument>)</argument_list></call>
"Recalled cached URL info header %s"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>-&gt;<name>vobj</name></name> = <name>dobj</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>obj</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>obj</name>-&gt;<name>vobj</name></name> = <name>dobj</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00710</expr></argument>)</argument_list></call>
"Cached URL info header '%s' didn't match body, ignoring this entry"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>close_disk_cache_fd</name><parameter_list>(<param><decl><type><name>disk_cache_file_t</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>file</name>-&gt;<name>fd</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>fd</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>file</name>-&gt;<name>tempfd</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>file</name>-&gt;<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>file</name>-&gt;<name>tempfd</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>close_disk_cache_fd</name><argument_list>(<argument><expr>&amp;(<name><name>dobj</name>-&gt;<name>hdrs</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_disk_cache_fd</name><argument_list>(<argument><expr>&amp;(<name><name>dobj</name>-&gt;<name>vary</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close_disk_cache_fd</name><argument_list>(<argument><expr>&amp;(<name><name>dobj</name>-&gt;<name>data</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_url</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dobj</name> = (<name>disk_cache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>dobj</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00711</expr></argument>)</argument_list></call>
"Deleting %s from cache."</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rc</name> != <name>APR_SUCCESS</name>) &amp;&amp; !<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00712</expr></argument>)</argument_list></call>
"Failed to delete headers file %s from cache."</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00713</expr></argument>)</argument_list></call>
"Deleting %s from cache."</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rc</name> != <name>APR_SUCCESS</name>) &amp;&amp; !<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00714</expr></argument>)</argument_list></call>
"Failed to delete data file %s from cache."</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>root</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str_to_copy</name></decl>;</decl_stmt>
<expr_stmt><expr><name>str_to_copy</name> = <name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> ? <name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> : <name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>str_to_copy</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>dir</name></decl>, *<decl><type ref="prev"/><name>slash</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dir</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>slash</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>slash</name> = '\0'</expr>;</expr_stmt>
<for>for (<init><expr><name>q</name> = <name>dir</name> + <name><name>dobj</name>-&gt;<name>root_len</name></name></expr>;</init> <condition><expr>*<name>q</name></expr> ;</condition> <incr/>) <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00715</expr></argument>)</argument_list></call>
"Deleting directory %s from cache"</expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dir_remove</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>slash</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>slash</name> = '\0'</expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_array</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_array_header_t</name>*</type> <name>arr</name></decl></param>,
<param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>w</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_gets</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - 1</expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00716</expr></argument>)</argument_list></call>
"Premature end of vary array."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> &gt; 0 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> &gt; 1 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> == <name>CR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>w</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_array</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl></param>, <param><decl><type><name>apr_array_header_t</name>*</type> <name>arr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>iov</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>elts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>char</name> **) <name><name>arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = <name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_writev_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>(const struct <name>iovec</name> *) &amp;<name>iov</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = <name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<return>return <expr><call><name>apr_file_writev_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>(const struct <name>iovec</name> *) &amp;<name>iov</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_table</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>handle</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>table</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>w</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_gets</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - 1</expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00717</expr></argument>)</argument_list></call>
"Premature end of cache headers."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> &gt; 0 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> &gt; 1 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> == <name>CR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>w</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<if>if <condition>(<expr>!(<name>l</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>maybeASCII</name> <init>= <expr>0</expr></init>, <name>maybeEBCDIC</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>cp</name></decl>, <decl><type ref="prev"/><name>native</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>inbytes_left</name></decl>, <decl><type ref="prev"/><name>outbytes_left</name></decl>;</decl_stmt>
<for>for (<init><expr><name>cp</name> = <name>w</name></expr>;</init> <condition><expr>*<name>cp</name> != '\0'</expr>;</condition> <incr><expr>++<name>cp</name></expr></incr>) <block>{
<expr_stmt><expr><name>native</name> = <call><name>apr_xlate_conv_byte</name><argument_list>(<argument><expr><name>ap_hdrs_from_ascii</name></expr></argument>, <argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_isprint</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>apr_isprint</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>maybeEBCDIC</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<call><name>apr_isprint</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>apr_isprint</name><argument_list>(<argument><expr><name>native</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>++<name>maybeASCII</name></expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name>maybeASCII</name> &gt; <name>maybeEBCDIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00718</expr></argument>)</argument_list></call>
"CGI Interface Error: Script headers apparently ASCII: (CGI = %s)"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inbytes_left</name> = <name>outbytes_left</name> = <name>cp</name> - <name>w</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name>ap_hdrs_from_ascii</name></expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name>inbytes_left</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>&amp;<name>outbytes_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!(<name>l</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>l</name>++ = '\0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>l</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>l</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recall_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00719</expr></argument>)</argument_list></call>
"recalling headers; but no header fd for %s"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>h</name>-&gt;<name>req_hdrs</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>read_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02987</expr></argument>)</argument_list></call>
"Error reading response headers from %s for %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>read_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>req_hdrs</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02988</expr></argument>)</argument_list></call>
"Error reading request headers from %s for %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00720</expr></argument>)</argument_list></call>
"Recalled headers for URL %s"</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recall_body</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name>*) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>data</name>.<name>fd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>fd</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>file_size</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_table</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>table</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>iov</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elts</name> = (<name>apr_table_entry_t</name> *) <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>-&gt;<name>elts</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>-&gt;<name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = ": "</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr>": "</expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>2</expr>]</index></name>.<name>iov_base</name> = <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>2</expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>3</expr>]</index></name>.<name>iov_base</name> = <name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>3</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_writev_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>(const struct <name>iovec</name> *) &amp;<name>iov</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = <name>CRLF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_writev_full</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>(const struct <name>iovec</name> *) &amp;<name>iov</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cache_info</name> *</type><name>info</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name>*) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>headers_out</name></name> = <call><name>ap_cache_cacheable_headers_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>headers_in</name></name> = <call><name>ap_cache_cacheable_headers_in</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>write_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>amt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name>*) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_info_t</name></type> <name>disk_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>iov</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>disk_info</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>headers_out</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmp</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>varray</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>format</name> <init>= <expr><name>VARY_FORMAT_VERSION</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>prefix</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> = <name><name>dobj</name>-&gt;<name>prefix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>prefix</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>mkdir_structure</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_mktemp</name><argument_list>(<argument><expr>&amp;<name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfile</name></name></expr></argument>,
<argument><expr><name>APR_CREATE</name> | <name>APR_WRITE</name> | <name>APR_BINARY</name> | <name>APR_EXCL</name></expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00721</expr></argument>)</argument_list></call>
"could not create vary file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>amt</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><name>amt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00722</expr></argument>)</argument_list></call>
"could not write to vary file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>amt</name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>,
<argument><expr>&amp;<name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr></argument>, <argument><expr><name>amt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00723</expr></argument>)</argument_list></call>
"could not write to vary file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>varray</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>tokens_to_array</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>varray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>store_array</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name>varray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00724</expr></argument>)</argument_list></call>
"could not close vary file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>vary</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>tmp</name> = <call><name>regen_key</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>varray</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>prefix</name></name> = <name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hashfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name> = <call><name>data_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>file</name></name> = <call><name>header_file</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>dobj</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_mktemp</name><argument_list>(<argument><expr>&amp;<name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfile</name></name></expr></argument>,
<argument><expr><name>APR_CREATE</name> | <name>APR_WRITE</name> | <name>APR_BINARY</name> |
<name>APR_BUFFERED</name> | <name>APR_EXCL</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00725</expr></argument>)</argument_list></call>
"could not create header file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>disk_info</name>.<name>format</name></name> = <name>DISK_FORMAT_VERSION</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>date</name></name> = <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>date</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>expire</name></name> = <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>entity_version</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>entity_version</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>request_time</name></name> = <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>response_time</name></name> = <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>response_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>status</name></name> = <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>inode</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>inode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>device</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>device</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>has_body</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>has_body</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>header_only</name></name> = <name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>disk_info</name>.<name>name_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>disk_info</name>.<name>control</name></name></expr></argument>, <argument><expr>&amp;<name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name>*)&amp;<name>disk_info</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_info_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = (<name>void</name>*)<name><name>dobj</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>iov</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <name><name>disk_info</name>.<name>name_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_writev_full</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>, <argument><expr>(const struct <name>iovec</name> *) &amp;<name>iov</name></expr></argument>,
<argument><expr>2</expr></argument>, <argument><expr>&amp;<name>amt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00726</expr></argument>)</argument_list></call>
"could not write info to header file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>headers_out</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>store_table</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00727</expr></argument>)</argument_list></call>
"could not write out-headers to header file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>headers_in</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>store_table</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00728</expr></argument>)</argument_list></call>
"could not write in-headers to header file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00729</expr></argument>)</argument_list></call>
"could not close header file %s"</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>hdrs</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_body</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>offset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>offset</name></name> = <name><name>dconf</name>-&gt;<name>readsize</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>timeout</name></name> &amp;&amp; <name><name>dconf</name>-&gt;<name>readtime</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call> + <name><name>dconf</name>-&gt;<name>readtime</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>offset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>offset</name></name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name></decl>, <decl><type ref="prev"/><name>written</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>done</name></name> || !<name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>done</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00730</expr></argument>)</argument_list></call>
"Error when reading bucket for URL %s"</expr></argument>,
<argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>length</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>data</name>.<name>tempfd</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_mktemp</name><argument_list>(<argument><expr>&amp;<name><name>dobj</name>-&gt;<name>data</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>tempfile</name></name></expr></argument>,
<argument><expr><name>APR_CREATE</name> | <name>APR_WRITE</name> | <name>APR_BINARY</name> | <name>APR_BUFFERED</name>
| <name>APR_EXCL</name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>file_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_IDENT</name></expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>device</name></name> = <name><name>finfo</name>.<name>device</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>inode</name></name> = <name><name>finfo</name>.<name>inode</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>disk_info</name>.<name>has_body</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>tempfd</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00731</expr></argument>)</argument_list></call> "Error when writing cache file for URL %s"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>file_size</name></name> += <name>written</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>file_size</name></name> &gt; <name><name>dconf</name>-&gt;<name>maxfs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00732</expr></argument>)</argument_list></call> "URL %s failed the size check "
"(%" <name>APR_OFF_T_FMT</name> "&gt;%" <name>APR_OFF_T_FMT</name> ")"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>file_size</name></name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>maxfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>offset</name></name> -= <name>length</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>offset</name></name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>dconf</name>-&gt;<name>readtime</name></name> &amp;&amp; <call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name><name>dobj</name>-&gt;<name>timeout</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dobj</name>-&gt;<name>timeout</name></name> = 0</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>seen_eos</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cl_header</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>data</name>.<name>tempfd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>tempfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> || <name><name>r</name>-&gt;<name>no_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00733</expr></argument>)</argument_list></call> "Discarding body for URL %s "
"because connection has been aborted."</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>file_size</name></name> &lt; <name><name>dconf</name>-&gt;<name>minfs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00734</expr></argument>)</argument_list></call> "URL %s failed the size check "
"(%" <name>APR_OFF_T_FMT</name> "&lt;%" <name>APR_OFF_T_FMT</name> ")"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>file_size</name></name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>minfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>cl_header</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>cl</name> <init>= <expr><call><name>apr_atoi64</name><argument_list>(<argument><expr><name>cl_header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>errno</name> == 0) &amp;&amp; (<name><name>dobj</name>-&gt;<name>file_size</name></name> != <name>cl</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00735</expr></argument>)</argument_list></call> "URL %s didn't receive complete response, not caching"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>commit_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_object_t</name> *</type><name>dobj</name> <init>= <expr>(<name>disk_cache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>write_headers</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>file_cache_el_final</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>hdrs</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>file_cache_el_final</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>vary</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>dobj</name>-&gt;<name>disk_info</name>.<name>header_only</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>file_cache_el_final</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name><name>dobj</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>file</name></name></expr></argument>, <argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>remove_url</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00736</expr></argument>)</argument_list></call>
"commit_entity: URL '%s' not cached due to earlier disk error."</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00737</expr></argument>)</argument_list></call>
"commit_entity: Headers and body for URL %s cached."</expr></argument>,
<argument><expr><name><name>dobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>dobj</name>-&gt;<name>data</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>invalidate_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>recall_headers</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>invalidated</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>commit_entity</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxfs</name></name> = <name>DEFAULT_MAX_FILE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>minfs</name></name> = <name>DEFAULT_MIN_FILE_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>readsize</name></name> = <name>DEFAULT_READSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>readtime</name></name> = <name>DEFAULT_READTIME</name></expr>;</expr_stmt>
<return>return <expr><name>dconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>maxfs</name></name> = (<name><name>add</name>-&gt;<name>maxfs_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>maxfs</name></name> : <name><name>add</name>-&gt;<name>maxfs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>maxfs_set</name></name> = <name><name>add</name>-&gt;<name>maxfs_set</name></name> || <name><name>base</name>-&gt;<name>maxfs_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>minfs</name></name> = (<name><name>add</name>-&gt;<name>minfs_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>minfs</name></name> : <name><name>add</name>-&gt;<name>minfs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>minfs_set</name></name> = <name><name>add</name>-&gt;<name>minfs_set</name></name> || <name><name>base</name>-&gt;<name>minfs_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>readsize</name></name> = (<name><name>add</name>-&gt;<name>readsize_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>readsize</name></name> : <name><name>add</name>-&gt;<name>readsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>readsize_set</name></name> = <name><name>add</name>-&gt;<name>readsize_set</name></name> || <name><name>base</name>-&gt;<name>readsize_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>readtime</name></name> = (<name><name>add</name>-&gt;<name>readtime_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>readtime</name></name> : <name><name>add</name>-&gt;<name>readtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>readtime_set</name></name> = <name><name>add</name>-&gt;<name>readtime_set</name></name> || <name><name>base</name>-&gt;<name>readtime_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>disk_cache_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dirlevels</name></name> = <name>DEFAULT_DIRLEVELS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dirlength</name></name> = <name>DEFAULT_DIRLENGTH</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cache_root</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cache_root_len</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_root</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cache_root</name></name> = <name>arg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>cache_root_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_dirlevels</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> &lt; 1</expr>)</condition><then>
<return>return <expr>"CacheDirLevels value must be an integer greater than 0"</expr>;</return></then></if>
<if>if <condition>(<expr><name>val</name> * <name><name>conf</name>-&gt;<name>dirlength</name></name> &gt; <name>CACHEFILE_LEN</name></expr>)</condition><then>
<return>return <expr>"CacheDirLevels*CacheDirLength value must not be higher than 20"</expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dirlevels</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_dirlength</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_disk_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> &lt; 1</expr>)</condition><then>
<return>return <expr>"CacheDirLength value must be an integer greater than 0"</expr>;</return></then></if>
<if>if <condition>(<expr><name>val</name> * <name><name>conf</name>-&gt;<name>dirlevels</name></name> &gt; <name>CACHEFILE_LEN</name></expr>)</condition><then>
<return>return <expr>"CacheDirLevels*CacheDirLength value must not be higher than 20"</expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dirlength</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_minfs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *)<name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>dconf</name>-&gt;<name>minfs</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> ||
<name><name>dconf</name>-&gt;<name>minfs</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"CacheMinFileSize argument must be a non-negative integer representing the min size of a file to cache in bytes."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>minfs_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_maxfs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *)<name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>dconf</name>-&gt;<name>maxfs</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> ||
<name><name>dconf</name>-&gt;<name>maxfs</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"CacheMaxFileSize argument must be a non-negative integer representing the max size of a file to cache in bytes."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxfs_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_readsize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *)<name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>dconf</name>-&gt;<name>readsize</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> ||
<name><name>dconf</name>-&gt;<name>readsize</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"CacheReadSize argument must be a non-negative integer representing the max amount of data to cache in go."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>readsize_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>
*</type><name>set_cache_readtime</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>disk_cache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>disk_cache_dir_conf</name> *)<name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>milliseconds</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>milliseconds</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> ||
<name>milliseconds</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"CacheReadTime argument must be a non-negative integer representing the max amount of time taken to cache in go."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>readtime</name></name> = <call><name>apr_time_from_msec</name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>readtime_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>disk_cache_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheRoot"</expr></argument>, <argument><expr><name>set_cache_root</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The directory to store cache files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheDirLevels"</expr></argument>, <argument><expr><name>set_cache_dirlevels</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The number of levels of subdirectories in the cache"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheDirLength"</expr></argument>, <argument><expr><name>set_cache_dirlength</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The number of characters in subdirectory names"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheMinFileSize"</expr></argument>, <argument><expr><name>set_cache_minfs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The minimum file size to cache a document"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheMaxFileSize"</expr></argument>, <argument><expr><name>set_cache_maxfs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The maximum file size to cache a document"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheReadSize"</expr></argument>, <argument><expr><name>set_cache_readsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The maximum quantity of data to attempt to read and cache in one go"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheReadTime"</expr></argument>, <argument><expr><name>set_cache_readtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The maximum time taken to attempt to read and cache in go"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cache_provider</name></type> <name>cache_disk_provider</name> <init>= <expr><block>{
<expr>&amp;<name>remove_entity</name></expr>,
<expr>&amp;<name>store_headers</name></expr>,
<expr>&amp;<name>store_body</name></expr>,
<expr>&amp;<name>recall_headers</name></expr>,
<expr>&amp;<name>recall_body</name></expr>,
<expr>&amp;<name>create_entity</name></expr>,
<expr>&amp;<name>open_entity</name></expr>,
<expr>&amp;<name>remove_url</name></expr>,
<expr>&amp;<name>commit_entity</name></expr>,
<expr>&amp;<name>invalidate_entity</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>disk_cache_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>CACHE_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"disk"</expr></argument>, <argument><expr>"0"</expr></argument>,
<argument><expr>&amp;<name>cache_disk_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>cache_disk</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_dir_config</name></expr>,
<expr><name>merge_dir_config</name></expr>,
<expr><name>create_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>disk_cache_cmds</name></expr>,
<expr><name>disk_cache_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
