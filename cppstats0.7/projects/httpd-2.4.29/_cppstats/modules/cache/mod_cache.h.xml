<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/cache/mod_cache.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MOD_CACHE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_CACHE_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_common.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CACHE_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CACHE_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type>struct <name>cache_info</name></type> <name>cache_info</name>;</typedef>
<struct>struct <name>cache_info</name> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expire</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>response_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_control_t</name></type> <name>control</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>cache_object</name></type> <name>cache_object_t</name>;</typedef>
<struct>struct <name>cache_object</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_object_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_info</name></type> <name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>vobj</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>cache_handle</name></type> <name>cache_handle_t</name>;</typedef>
<struct>struct <name>cache_handle</name> <block>{
<decl_stmt><decl><type><name>cache_object_t</name> *</type><name>cache_obj</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>req_hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>resp_hdrs</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"cache"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>int</name></type> (*<name>remove_entity</name>) <parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>store_headers</name>)<parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cache_info</name> *</type><name>i</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>store_body</name>)<parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>recall_headers</name>) <parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>recall_body</name>) <parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>create_entity</name>) <parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>urlkey</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>open_entity</name>) <parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>urlkey</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>remove_url</name>) <parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>commit_entity</name>)<parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> (*<name>invalidate_entity</name>)<parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>cache_provider</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AP_CACHE_HIT</name></decl>,
<decl><name>AP_CACHE_REVALIDATE</name></decl>,
<decl><name>AP_CACHE_MISS</name></decl>,
<decl><name>AP_CACHE_INVALIDATE</name></decl>
}</block></enum></type> <name>ap_cache_status_e</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CACHE_HIT_ENV</name></cpp:macro> <cpp:value>"cache-hit"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CACHE_REVALIDATE_ENV</name></cpp:macro> <cpp:value>"cache-revalidate"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CACHE_MISS_ENV</name></cpp:macro> <cpp:value>"cache-miss"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CACHE_INVALIDATE_ENV</name></cpp:macro> <cpp:value>"cache-invalidate"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CACHE_STATUS_ENV</name></cpp:macro> <cpp:value>"cache-status"</cpp:value></cpp:define>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>apr_time_t</argument>)</argument_list></macro> <macro><name>ap_cache_current_age</name><argument_list>(<argument>cache_info *info</argument>, <argument>const apr_time_t age_value</argument>,
<argument>apr_time_t now</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>apr_time_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_cache_hex2usec</name><argument_list>(<argument><expr>const <name>char</name> *<name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_cache_usec2hex</name><argument_list>(<argument>apr_time_t j</argument>, <argument>char *y</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_cache_generate_name</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int dirlevels</argument>,
<argument>int dirlength</argument>,
<argument>const char *name</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_cache_tokstr</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>list</name></expr></argument>, <argument><expr>const <name>char</name> **<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>apr_table_t *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_cache_cacheable_headers</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr><name>apr_table_t</name> *<name>t</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>apr_table_t *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_cache_cacheable_headers_in</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>CACHE_DECLARE</name><argument_list>(<argument>apr_table_t *</argument>)</argument_list></macro><expr_stmt><expr><call><name>ap_cache_cacheable_headers_out</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><name>int</name></type> <name>ap_cache_control</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cache_control_t</name> *</type><name>cc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cc_header</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pragma_header</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>cache</argument>, <argument>CACHE</argument>, <argument>int</argument>, <argument>cache_status</argument>, <argument>(cache_handle_t *h,
request_rec *r, apr_table_t *headers, ap_cache_status_e status,
const char *reason)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>,
<argument><expr><name>ap_cache_generate_key</name></expr></argument>,
<argument><expr>(<name>request_rec</name> *<name>r</name>, <name>apr_pool_t</name>*<name>p</name>, const <name>char</name> **<name>key</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
