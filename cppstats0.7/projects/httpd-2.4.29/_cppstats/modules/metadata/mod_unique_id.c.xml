<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/metadata/mod_unique_id.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROOT_SIZE</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>stamp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>root</name><index>[<expr><name>ROOT_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>thread_index</name></decl>;</decl_stmt>
}</block></struct></type> <name>unique_id_rec</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>unique_id_rec</name></type> <name>cur_unique_id</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE_ID_REC_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>short</name></type> <name><name>unique_id_rec_offset</name><index>[<expr><name>UNIQUE_ID_REC_MAX</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name><name>unique_id_rec_size</name><index>[<expr><name>UNIQUE_ID_REC_MAX</name></expr>]</index></name></decl>,
<decl><type ref="prev"/><name>unique_id_rec_total_size</name></decl>,
<decl><type ref="prev"/><name>unique_id_rec_size_uu</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unique_id_global_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>main_server</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>unique_id_rec_offset</name><index>[<expr>0</expr>]</index></name> = <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>unique_id_rec</name></expr></argument>, <argument><expr><name>stamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_size</name><index>[<expr>0</expr>]</index></name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_unique_id</name>.<name>stamp</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_offset</name><index>[<expr>1</expr>]</index></name> = <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>unique_id_rec</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_size</name><index>[<expr>1</expr>]</index></name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_unique_id</name>.<name>root</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_offset</name><index>[<expr>2</expr>]</index></name> = <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>unique_id_rec</name></expr></argument>, <argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_size</name><index>[<expr>2</expr>]</index></name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_unique_id</name>.<name>counter</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_offset</name><index>[<expr>3</expr>]</index></name> = <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>unique_id_rec</name></expr></argument>, <argument><expr><name>thread_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>unique_id_rec_size</name><index>[<expr>3</expr>]</index></name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_unique_id</name>.<name>thread_index</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>unique_id_rec_total_size</name> = <name><name>unique_id_rec_size</name><index>[<expr>0</expr>]</index></name> + <name><name>unique_id_rec_size</name><index>[<expr>1</expr>]</index></name> +
<name><name>unique_id_rec_size</name><index>[<expr>2</expr>]</index></name> + <name><name>unique_id_rec_size</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>unique_id_rec_size_uu</name> = (<name>unique_id_rec_total_size</name>*8+5)/6</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>unique_id_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_random_insecure_bytes</name><argument_list>(<argument><expr>&amp;<name><name>cur_unique_id</name>.<name>root</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_unique_id</name>.<name>root</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_random_insecure_bytes</name><argument_list>(<argument><expr>&amp;<name><name>cur_unique_id</name>.<name>counter</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cur_unique_id</name>.<name>counter</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>uuencoder</name><index>[<expr>64</expr>]</index></name> <init>= <expr><block>{
<expr>'A'</expr>, <expr>'B'</expr>, <expr>'C'</expr>, <expr>'D'</expr>, <expr>'E'</expr>, <expr>'F'</expr>, <expr>'G'</expr>, <expr>'H'</expr>, <expr>'I'</expr>, <expr>'J'</expr>, <expr>'K'</expr>, <expr>'L'</expr>, <expr>'M'</expr>,
<expr>'N'</expr>, <expr>'O'</expr>, <expr>'P'</expr>, <expr>'Q'</expr>, <expr>'R'</expr>, <expr>'S'</expr>, <expr>'T'</expr>, <expr>'U'</expr>, <expr>'V'</expr>, <expr>'W'</expr>, <expr>'X'</expr>, <expr>'Y'</expr>, <expr>'Z'</expr>,
<expr>'a'</expr>, <expr>'b'</expr>, <expr>'c'</expr>, <expr>'d'</expr>, <expr>'e'</expr>, <expr>'f'</expr>, <expr>'g'</expr>, <expr>'h'</expr>, <expr>'i'</expr>, <expr>'j'</expr>, <expr>'k'</expr>, <expr>'l'</expr>, <expr>'m'</expr>,
<expr>'n'</expr>, <expr>'o'</expr>, <expr>'p'</expr>, <expr>'q'</expr>, <expr>'r'</expr>, <expr>'s'</expr>, <expr>'t'</expr>, <expr>'u'</expr>, <expr>'v'</expr>, <expr>'w'</expr>, <expr>'x'</expr>, <expr>'y'</expr>, <expr>'z'</expr>,
<expr>'0'</expr>, <expr>'1'</expr>, <expr>'2'</expr>, <expr>'3'</expr>, <expr>'4'</expr>, <expr>'5'</expr>, <expr>'6'</expr>, <expr>'7'</expr>, <expr>'8'</expr>, <expr>'9'</expr>, <expr>'@'</expr>, <expr>'-'</expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>gen_unique_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unique_id_rec</name></type> <name>new_unique_id</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type><name>unique_id_rec</name></type> <name>foo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>pad</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>paddedbuf</name></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>x</name></decl>,*<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>counter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>new_unique_id</name>.<name>root</name></name></expr></argument>, <argument><expr>&amp;<name><name>cur_unique_id</name>.<name>root</name></name></expr></argument>, <argument><expr><name>ROOT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_unique_id</name>.<name>counter</name></name> = <name><name>cur_unique_id</name>.<name>counter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_unique_id</name>.<name>stamp</name></name> = <call><name>htonl</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_unique_id</name>.<name>thread_index</name></name> = <call><name>htonl</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>int</name>)<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>x</name> = (<name>unsigned</name> <name>char</name> *) &amp;<name>paddedbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>UNIQUE_ID_REC_MAX</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>y</name> = ((<name>unsigned</name> <name>char</name> *) &amp;<name>new_unique_id</name>) + <name><name>unique_id_rec_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>unique_id_rec_size</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name>++</expr>, <expr><name>k</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> = <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
}</block></for>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name>++</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name>++</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>str</name> = (<name>char</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>unique_id_rec_size_uu</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>k</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>unique_id_rec_total_size</name></expr>;</condition> <incr><expr><name>i</name> += 3</expr></incr>) <block>{
<expr_stmt><expr><name>y</name> = <name>x</name> + <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name>++</expr>]</index></name> = <name><name>uuencoder</name><index>[<expr><name><name>y</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name>++</expr>]</index></name> = <name><name>uuencoder</name><index>[<expr>((<name><name>y</name><index>[<expr>0</expr>]</index></name> &amp; 0x03) &lt;&lt; 4) | ((<name><name>y</name><index>[<expr>1</expr>]</index></name> &amp; 0xf0) &gt;&gt; 4)</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>k</name> == <name>unique_id_rec_size_uu</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name>++</expr>]</index></name> = <name><name>uuencoder</name><index>[<expr>((<name><name>y</name><index>[<expr>1</expr>]</index></name> &amp; 0x0f) &lt;&lt; 2) | ((<name><name>y</name><index>[<expr>2</expr>]</index></name> &amp; 0xc0) &gt;&gt; 6)</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>k</name> == <name>unique_id_rec_size_uu</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name>++</expr>]</index></name> = <name><name>uuencoder</name><index>[<expr><name><name>y</name><index>[<expr>2</expr>]</index></name> &amp; 0x3f</expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>str</name><index>[<expr><name>k</name>++</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>counter</name> = <call><name>ntohs</name><argument_list>(<argument><expr><name><name>new_unique_id</name>.<name>counter</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur_unique_id</name>.<name>counter</name></name> = <call><name>htons</name><argument_list>(<argument><expr><name>counter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>str</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_log_id</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>id</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>id</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"UNIQUE_ID"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>id</name></expr>)</condition><then>
<expr_stmt><expr>*<name>id</name> = <call><name>gen_unique_id</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>set_unique_id</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>id</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"REDIRECT_UNIQUE_ID"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>id</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>id</name> = <name><name>r</name>-&gt;<name>log_id</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>id</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>id</name> = <call><name>gen_unique_id</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"UNIQUE_ID"</expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>unique_id_global_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>unique_id_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>set_unique_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_generate_log_id</name><argument_list>(<argument><expr><name>generate_log_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>unique_id</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
