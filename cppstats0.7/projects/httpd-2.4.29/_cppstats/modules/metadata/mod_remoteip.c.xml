<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/metadata/mod_remoteip.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mmn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>remoteip_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_ipsubnet_t</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>internal</name></decl>;</decl_stmt>
}</block></struct></type> <name>remoteip_proxymatch_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxies_header_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>proxymatch_ip</name></decl>;</decl_stmt>
}</block></struct></type> <name>remoteip_config_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>useragent_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>useragent_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_ips</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxied_remote</name></decl>;</decl_stmt>
}</block></struct></type> <name>remoteip_req_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_remoteip_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>config</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>config</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_remoteip_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>globalv</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>serverv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>global</name> <init>= <expr>(<name>remoteip_config_t</name> *) <name>globalv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>server</name> <init>= <expr>(<name>remoteip_config_t</name> *) <name>serverv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>config</name></decl>;</decl_stmt>
<expr_stmt><expr><name>config</name> = (<name>remoteip_config_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name>-&gt;<name>header_name</name></name> = <name><name>server</name>-&gt;<name>header_name</name></name>
? <name><name>server</name>-&gt;<name>header_name</name></name>
: <name><name>global</name>-&gt;<name>header_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name>-&gt;<name>proxies_header_name</name></name> = <name><name>server</name>-&gt;<name>proxies_header_name</name></name>
? <name><name>server</name>-&gt;<name>proxies_header_name</name></name>
: <name><name>global</name>-&gt;<name>proxies_header_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>config</name>-&gt;<name>proxymatch_ip</name></name> = <name><name>server</name>-&gt;<name>proxymatch_ip</name></name>
? <name><name>server</name>-&gt;<name>proxymatch_ip</name></name>
: <name><name>global</name>-&gt;<name>proxymatch_ip</name></name></expr>;</expr_stmt>
<return>return <expr><name>config</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>header_name_set</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>config</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>remoteip_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>config</name>-&gt;<name>header_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>proxies_header_name_set</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>config</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>remoteip_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>config</name>-&gt;<name>proxies_header_name</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>looks_like_ip</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ipstr</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>ipstr</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(*<name>ipstr</name> == '.') || <call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>ipstr</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>ipstr</name>++</expr>;</expr_stmt></while>
<return>return <expr>(*<name>ipstr</name> == '\0')</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>proxies_set</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>config</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>remoteip_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>remoteip_proxymatch_t</name> *</type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ip</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>s</name>++ = '\0'</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>config</name>-&gt;<name>proxymatch_ip</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>config</name>-&gt;<name>proxymatch_ip</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>match</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>match</name> = (<name>remoteip_proxymatch_t</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>config</name>-&gt;<name>proxymatch_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>internal</name></name> = <name><name>cmd</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>looks_like_ip</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_ipsubnet_create</name><argument_list>(<argument><expr>&amp;<name><name>match</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>temp_sa</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"RemoteIP: Error parsing IP "</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
<argument><expr>" the subnet /"</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>" is invalid for "</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>temp_sa</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>APR_IPV4_ADDR_OK</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name>ip</name></expr></argument>, <argument><expr><name>temp_sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_ipsubnet_create</name><argument_list>(<argument><expr>&amp;<name><name>match</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>temp_sa</name> = <name><name>temp_sa</name>-&gt;<name>next</name></name>)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>match</name> = (<name>remoteip_proxymatch_t</name> *)
<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>config</name>-&gt;<name>proxymatch_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>match</name>-&gt;<name>internal</name></name> = <name><name>cmd</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"RemoteIP: Error parsing IP %s (%pm error) for %s"</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>proxylist_read</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>lbuf</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>cfp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>filename</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>cfp</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s: Could not open file %s: %pm"</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>!(<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>lbuf</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>cfp</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><name>args</name> = <name>lbuf</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*(<name>arg</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call>) != '\0'</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>arg</name> == '#'</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>errmsg</name> = <call><name>proxies_set</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s at line %d of %s"</expr></argument>,
<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name><name>cfp</name>-&gt;<name>line_number</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></then></if>
}</block></while>
}</block></while>
<expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>cfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>remoteip_modify_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>remoteip_config_t</name> *</type><name>config</name> <init>= <expr>(<name>remoteip_config_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>remoteip_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>remoteip_req_t</name> *</type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>temp_sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>remote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>proxy_ips</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>parse_remote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>eos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>addrbyte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>internal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>config</name>-&gt;<name>header_name</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>proxymatch_ip</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>internal</name> = (<name>void</name> *) 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>remote</name> = (<name>char</name> *) <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>header_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>remote</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>remote</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_sa</name> = <name><name>r</name>-&gt;<name>useragent_addr</name></name> ? <name><name>r</name>-&gt;<name>useragent_addr</name></name> : <name><name>c</name>-&gt;<name>client_addr</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>remote</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>proxymatch_ip</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>remoteip_proxymatch_t</name> *</type><name>match</name></decl>;</decl_stmt>
<expr_stmt><expr><name>match</name> = (<name>remoteip_proxymatch_t</name> *)<name><name>config</name>-&gt;<name>proxymatch_ip</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>config</name>-&gt;<name>proxymatch_ip</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>apr_ipsubnet_test</name><argument_list>(<argument><expr><name><name>match</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ip</name></expr></argument>, <argument><expr><name>temp_sa</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>internal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>internal</name> = <name><name>match</name><index>[<expr><name>i</name></expr>]</index></name>.<name>internal</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>i</name> &amp;&amp; <name>i</name> &gt;= <name><name>config</name>-&gt;<name>proxymatch_ip</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>parse_remote</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>remote</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>parse_remote</name> = <name>remote</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remote</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*(<name>parse_remote</name>++) = '\0'</expr>;</expr_stmt>
}</block></else></if>
<while>while <condition>(<expr>*<name>parse_remote</name> == ' '</expr>)</condition> <block>{
<expr_stmt><expr>++<name>parse_remote</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>eos</name> = <name>parse_remote</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>parse_remote</name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>eos</name> &gt;= <name>parse_remote</name> &amp;&amp; *<name>eos</name> == ' '</expr>)</condition> <block>{
<expr_stmt><expr>*(<name>eos</name>--) = '\0'</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>eos</name> &lt; <name>parse_remote</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>remote</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>remote</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call>) = ','</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>remote</name> = <name>parse_remote</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>temp_sa</name></expr></argument>, <argument><expr><name>parse_remote</name></expr></argument>,
<argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name><name>temp_sa</name>-&gt;<name>port</name></name></expr></argument>,
<argument><expr><name>APR_IPV4_ADDR_OK</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01568</expr></argument>)</argument_list></call>
"RemoteIP: Header %s value of %s cannot be parsed "
"as a client IP"</expr></argument>,
<argument><expr><name><name>config</name>-&gt;<name>header_name</name></name></expr></argument>, <argument><expr><name>parse_remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>remote</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>remote</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call>) = ','</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>remote</name> = <name>parse_remote</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>addrbyte</name> = (<name>unsigned</name> <name>char</name> *) &amp;<name><name>temp_sa</name>-&gt;<name>sa</name>.<name>sin</name>.<name>sin_addr</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>internal</name>
&amp;&amp; ((<name><name>temp_sa</name>-&gt;<name>family</name></name> == <name>APR_INET</name>
&amp;&amp; (<name><name>addrbyte</name><index>[<expr>0</expr>]</index></name> == 10
|| <name><name>addrbyte</name><index>[<expr>0</expr>]</index></name> == 127
|| (<name><name>addrbyte</name><index>[<expr>0</expr>]</index></name> == 169 &amp;&amp; <name><name>addrbyte</name><index>[<expr>1</expr>]</index></name> == 254)
|| (<name><name>addrbyte</name><index>[<expr>0</expr>]</index></name> == 172 &amp;&amp; (<name><name>addrbyte</name><index>[<expr>1</expr>]</index></name> &amp; 0xf0) == 16)
|| (<name><name>addrbyte</name><index>[<expr>0</expr>]</index></name> == 192 &amp;&amp; <name><name>addrbyte</name><index>[<expr>1</expr>]</index></name> == 168)))
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
|| (<name><name>temp_sa</name>-&gt;<name>family</name></name> == <name>APR_INET6</name>
&amp;&amp; ((<name><name>temp_sa</name>-&gt;<name>sa</name>.<name>sin6</name>.<name>sin6_addr</name>.<name>s6_addr</name><index>[<expr>0</expr>]</index></name> &amp; 0xe0) != 0x20))
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01569</expr></argument>)</argument_list></call>
"RemoteIP: Header %s value of %s appears to be "
"a private IP or nonsensical. Ignored"</expr></argument>,
<argument><expr><name><name>config</name>-&gt;<name>header_name</name></name></expr></argument>, <argument><expr><name>parse_remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>remote</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>remote</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>remote</name></expr></argument>)</argument_list></call>) = ','</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>remote</name> = <name>parse_remote</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>req</name> = (<name>remoteip_req_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>remoteip_req_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>-&gt;<name>useragent_ip</name></name> = <name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>internal</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>proxy_ips</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proxy_ips</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>proxy_ips</name></expr></argument>, <argument><expr>", "</expr></argument>,
<argument><expr><name><name>req</name>-&gt;<name>useragent_ip</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>proxy_ips</name> = <name><name>req</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>req</name>-&gt;<name>useragent_addr</name></name> = <name>temp_sa</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name><name>req</name>-&gt;<name>useragent_ip</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>useragent_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>req</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>req</name>-&gt;<name>proxied_remote</name></name> = <name>remote</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>-&gt;<name>proxy_ips</name></name> = <name>proxy_ips</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>req</name>-&gt;<name>proxied_remote</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>header_name</name></name></expr></argument>,
<argument><expr><name><name>req</name>-&gt;<name>proxied_remote</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>header_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>req</name>-&gt;<name>proxy_ips</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"remoteip-proxy-ip-list"</expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>proxy_ips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>proxies_header_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>proxies_header_name</name></name></expr></argument>,
<argument><expr><name><name>req</name>-&gt;<name>proxy_ips</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>useragent_addr</name></name> = <name><name>req</name>-&gt;<name>useragent_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>useragent_ip</name></name> = <name><name>req</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><name><name>req</name>-&gt;<name>proxy_ips</name></name>
? "Using %s as client's IP by proxies %s"
: "Using %s as client's IP by internal proxies%s"</expr></argument>,
<argument><expr><name><name>req</name>-&gt;<name>useragent_ip</name></name></expr></argument>,
<argument><expr>(<name><name>req</name>-&gt;<name>proxy_ips</name></name> ? <name><name>req</name>-&gt;<name>proxy_ips</name></name> : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>remoteip_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"RemoteIPHeader"</expr></argument>, <argument><expr><name>header_name_set</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specifies a request header to trust as the client IP, "
"e.g. X-Forwarded-For"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"RemoteIPProxiesHeader"</expr></argument>, <argument><expr><name>proxies_header_name_set</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specifies a request header to record proxy IP's, "
"e.g. X-Forwarded-By; if not given then do not record"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoteIPTrustedProxy"</expr></argument>, <argument><expr><name>proxies_set</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specifies one or more proxies which are trusted "
"to present IP headers"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"RemoteIPInternalProxy"</expr></argument>, <argument><expr><name>proxies_set</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specifies one or more internal (transparent) proxies "
"which are trusted to present IP headers"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"RemoteIPTrustedProxyList"</expr></argument>, <argument><expr><name>proxylist_read</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>RSRC_CONF</name> | <name>EXEC_ON_READ</name></expr></argument>,
<argument><expr>"The filename to read the list of trusted proxies, "
"see the RemoteIPTrustedProxy directive"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"RemoteIPInternalProxyList"</expr></argument>, <argument><expr><name>proxylist_read</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>,
<argument><expr><name>RSRC_CONF</name> | <name>EXEC_ON_READ</name></expr></argument>,
<argument><expr>"The filename to read the list of internal proxies, "
"see the RemoteIPInternalProxy directive"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>remoteip_modify_request</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>remoteip</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_remoteip_server_config</name></expr>,
<expr><name>merge_remoteip_server_config</name></expr>,
<expr><name>remoteip_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
