<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/filters/mod_proxy_html.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GO_FASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSEB</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (verbose) x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VERBOSEB</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (verbose) {x}</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/HTMLparser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_xml2enc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_rxplus_t</name> *</type><name>old_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_regex_t</name> *</type><name>seek_meta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_strmatch_pattern</name>*</type> <name>seek_content</name></decl>;</decl_stmt>
<expr_stmt><expr>static <call><call><name>apr_status_t</name> <argument_list>(<argument><expr>*<name>xml2enc_charset</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name>*</expr></argument>, <argument><expr><name>xmlCharEncoding</name>*</expr></argument>, <argument><expr>const <name>char</name>**</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <macro><name>apr_status_t</name> <argument_list>(<argument>*xml2enc_filter</argument>)</argument_list></macro>(<name>request_rec</name>*, const <name>char</name>*, <name>unsigned</name> <name>int</name>) = <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_html_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_HTML</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_EVENTS</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_CDATA</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_REGEX</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_ATSTART</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_ATEND</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LAST</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_NOTLAST</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_INTERPOLATE_TO</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_INTERPOLATE_FROM</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>tattr</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>end</name></decl>;</decl_stmt>
}</block></struct></type> <name>meta</name>;</typedef>
<typedef>typedef <type><struct>struct <name>urlmap</name> <block>{
<decl_stmt><decl><type>struct <name>urlmap</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>regflags</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name></decl>;</decl_stmt>
}</block> <decl><name>from</name></decl>;</union>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>cond</name></decl>;</decl_stmt>
}</block></struct></type> <name>urlmap</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>urlmap</name> *</type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>doctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>etag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bufsz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>links</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>charset_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>extfix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>metafix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>strip_comments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
}</block></struct></type> <name>proxy_html_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>htmlParserCtxtPtr</name></type> <name>parser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>avail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>map</name></decl>;</decl_stmt>
}</block></struct></type> <name>saxctxt</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM_LC</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM_MSSLASH</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM_RESET</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>htmlSAXHandler</name></type> <name>sax</name></decl>;</decl_stmt>
<typedef>typedef <type><enum>enum <block>{ <decl><name>ATTR_IGNORE</name></decl>, <decl><name>ATTR_URI</name></decl>, <decl><name>ATTR_EVENT</name></decl> }</block></enum></type> <name>rewrite_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>fpi_html</name> <init>=
<expr>"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"&gt;\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>fpi_html_legacy</name> <init>=
<expr>"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>fpi_xhtml</name> <init>=
<expr>"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>fpi_xhtml_legacy</name> <init>=
<expr>"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>html_etag</name> <init>= <expr>"&gt;"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>xhtml_etag</name> <init>= <expr>" /&gt;"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name>DEFAULT_DOCTYPE</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ETAG</name></cpp:macro> <cpp:value>html_etag</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>normalise</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>NORM_LC</name></expr>)</condition><then>
<for>for (<init><expr><name>p</name> = <name>str</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
<if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = <call><name>tolower</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></for></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>NORM_MSSLASH</name></expr>)</condition><then>
<for>for (<init><expr><name>p</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>p</name>+1</expr></argument>, <argument><expr>'\\'</expr></argument>)</argument_list></call></expr></incr>)
<expr_stmt><expr>*<name>p</name> = '/'</expr>;</expr_stmt></for></then></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>consume_buffer</name><parameter_list>(<param><type><name>ctx</name></type></param>,<param><type><name>inbuf</name></type></param>,<param><type><name>bytes</name></type></param>,<param><type><name>flag</name></type></param>)</parameter_list></cpp:macro> <cpp:value>htmlParseChunk(ctx-&gt;parser, inbuf, bytes, flag)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_fwrite</name><parameter_list>(<param><type><name>ctx</name></type></param>,<param><type><name>inbuf</name></type></param>,<param><type><name>bytes</name></type></param>,<param><type><name>flush</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_fwrite(ctx-&gt;f-&gt;next, ctx-&gt;bb, inbuf, bytes);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLUSH</name></cpp:macro> <cpp:value>AP_fwrite(ctx, (chars+begin), (i-begin), 0); begin = i+1</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pcharacters</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>xmlChar</name> *</type><name>uchars</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>chars</name> <init>= <expr>(const <name>char</name>*) <name>uchars</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>ctx</name> <init>= <expr>(<name>saxctxt</name>*) <name>ctxt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>begin</name></decl>;</decl_stmt>
<for>for (<init><expr><name>begin</name>=<name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>length</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<switch>switch <condition>(<expr><name><name>chars</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'&amp;'</expr> :
<expr_stmt><expr><name>FLUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"&amp;amp;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'&lt;'</expr> :
<expr_stmt><expr><name>FLUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"&amp;lt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'&gt;'</expr> :
<expr_stmt><expr><name>FLUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"&amp;gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'"'</expr> :
<expr_stmt><expr><name>FLUSH</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"&amp;quot;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default :
<break>break;</break>
</default>}</block></switch>
}</block></for>
<expr_stmt><expr><name>FLUSH</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>preserve</name><parameter_list>(<param><decl><type><name>saxctxt</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newbuf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &lt;= (<name><name>ctx</name>-&gt;<name>avail</name></name> - <name><name>ctx</name>-&gt;<name>offset</name></name>)</expr>)</condition><then>
<return>return;</return></then>
<else>else <while>while <condition>(<expr><name>len</name> &gt; (<name><name>ctx</name>-&gt;<name>avail</name></name> - <name><name>ctx</name>-&gt;<name>offset</name></name>)</expr>)</condition>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>avail</name></name> += <name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>bufsz</name></name></expr>;</expr_stmt></while></else></if>
<expr_stmt><expr><name>newbuf</name> = <call><name>realloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>avail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>newbuf</name> != <name><name>ctx</name>-&gt;<name>buf</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>,
<argument><expr>(<call><call><name>int</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></call>)<name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>newbuf</name></expr></argument>,
<argument><expr>(<call><call><name>int</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></call>)<name>free</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buf</name></name> = <name>newbuf</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pappend</name><parameter_list>(<param><decl><type><name>saxctxt</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name><name>ctx</name>-&gt;<name>offset</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>offset</name></name> += <name>len</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_content</name><parameter_list>(<param><decl><type><name>saxctxt</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>urlmap</name> *</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_from</name></decl>, <decl><type ref="prev"/><name>s_to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>pmatch</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>offs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>themap</name> <init>= <expr><name><name>ctx</name>-&gt;<name>map</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GO_FASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name> <init>= <expr><call><name>APLOGrtrace1</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>m</name> = <name>themap</name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> = <name><name>m</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_CDATA</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_REGEX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>nmatch</name> = 10</expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>match</name> = <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_from</name> = <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subs</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>,
<argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_to</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> += <name>match</name></expr>;</expr_stmt>
<macro><name>VERBOSEB</name><argument_list>(
<argument>const char *f = apr_pstrndup(ctx-&gt;f-&gt;r-&gt;pool,
ctx-&gt;buf + offs, s_from);
ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, ctx-&gt;f-&gt;r,
"C/RX: match at %s, substituting %s", f, subs);</argument>
)</argument_list></macro>
<if>if <condition>(<expr><name>s_to</name> &gt; <name>s_from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s_to</name> - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name> + <name>offs</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>offs</name> += <name>s_to</name></expr>;</expr_stmt>
}</block></while>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s_from</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_to</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>found</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>found</name></expr>;</condition>
<incr><expr><name>found</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><name>match</name> = <name>found</name> - <name><name>ctx</name>-&gt;<name>buf</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_ATSTART</name>) &amp;&amp; (<name>match</name> != 0)</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_ATEND</name>) &amp;&amp; (<name>match</name> &lt; (<name>len</name> - <name>s_from</name>))</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>VERBOSE</name><argument_list>(<argument><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"C: matched %s, substituting %s"</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_to</name> &gt; <name>s_from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s_to</name> - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>AP_fwrite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pcdata</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>xmlChar</name> *</type><name>uchars</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>chars</name> <init>= <expr>(const <name>char</name>*) <name>uchars</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>ctx</name> <init>= <expr>(<name>saxctxt</name>*) <name>ctxt</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>extfix</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>AP_fwrite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pcomment</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>xmlChar</name> *</type><name>uchars</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>chars</name> <init>= <expr>(const <name>char</name>*) <name>uchars</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>ctx</name> <init>= <expr>(<name>saxctxt</name>*) <name>ctxt</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>strip_comments</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>extfix</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"&lt;!--"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>"--&gt;"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"&lt;!--"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_fwrite</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>chars</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>chars</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"--&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pendElement</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>xmlChar</name> *</type><name>uname</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>ctx</name> <init>= <expr>(<name>saxctxt</name>*) <name>ctxt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr>(const <name>char</name>*) <name>uname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>htmlElemDesc</name>*</type> <name>desc</name> <init>= <expr><call><name>htmlTagLookup</name><argument_list>(<argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_html</name>) || (<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_xhtml</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>desc</name> || <name><name>desc</name>-&gt;<name>depr</name></name></expr>)</condition><then>
<return>return;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_html</name>)
|| (<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_xhtml</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>desc</name></expr>)</condition><then>
<return>return;</return></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>offset</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dump_content</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>desc</name> || !<name><name>desc</name>-&gt;<name>empty</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_fprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>"&lt;/%s&gt;"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>pstartElement</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctxt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>xmlChar</name> *</type><name>uname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>xmlChar</name>**</type> <name>uattrs</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>required_attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offs</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>subs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>rewrite_t</name></type> <name>is_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>s_to</name></decl>, <decl><type ref="prev"/><name>s_from</name></decl>, <decl><type ref="prev"/><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>ctx</name> <init>= <expr>(<name>saxctxt</name>*) <name>ctxt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>nmatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>pmatch</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GO_FASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name> <init>= <expr><call><name>APLOGrtrace1</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>linkattrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr>(const <name>char</name>*) <name>uname</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>attrs</name> <init>= <expr>(const <name>char</name>**) <name>uattrs</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>htmlElemDesc</name>*</type> <name>desc</name> <init>= <expr><call><name>htmlTagLookup</name><argument_list>(<argument><expr><name>uname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>themap</name> <init>= <expr><name><name>ctx</name>-&gt;<name>map</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name>**</type> <name>descp</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>enforce</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_html</name>) || (<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_xhtml</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>enforce</name> = 2</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>desc</name> || <name><name>desc</name>-&gt;<name>depr</name></name></expr>)</condition><then>
<return>return;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_html</name>)
|| (<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name> == <name>fpi_xhtml</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>enforce</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>desc</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr>!<name>desc</name> &amp;&amp; <name>enforce</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01416</expr></argument>)</argument_list></call>
"Bogus HTML element %s dropped"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name>desc</name> &amp;&amp; <name><name>desc</name>-&gt;<name>depr</name></name> &amp;&amp; (<name>enforce</name> == 2)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01417</expr></argument>)</argument_list></call>
"Deprecated HTML element %s dropped"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_STACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>descp</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>descp</name> = <name>desc</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_fputc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>required_attrs</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>enforce</name> &gt; 0) &amp;&amp; (<name>desc</name> != <name>NULL</name>) &amp;&amp; (<name><name>desc</name>-&gt;<name>attrs_req</name></name> != <name>NULL</name>)</expr>)</condition><then>
<for>for (<init><expr><name>a</name> = <name><name>desc</name>-&gt;<name>attrs_req</name></name></expr>;</init> <condition><expr>*<name>a</name></expr>;</condition> <incr><expr><name>a</name>++</expr></incr>)
<expr_stmt><expr>++<name>required_attrs</name></expr>;</expr_stmt></for></then></if>
<if>if <condition>(<expr><name>attrs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>linkattrs</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>a</name> = <name>attrs</name></expr>;</init> <condition><expr>*<name>a</name></expr>;</condition> <incr><expr><name>a</name> += 2</expr></incr>) <block>{
<if>if <condition>(<expr><name>desc</name> &amp;&amp; <name>enforce</name> &gt; 0</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><call><name>htmlAttrAllowed</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr>(<name>xmlChar</name>*)*<name>a</name></expr></argument>, <argument><expr>2-<name>enforce</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>HTML_INVALID</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01418</expr></argument>)</argument_list></call>
"Bogus HTML attribute %s of %s dropped"</expr></argument>,
<argument><expr>*<name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr><name>HTML_DEPRECATED</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01419</expr></argument>)</argument_list></call>
"Deprecated HTML attribute %s of %s dropped"</expr></argument>,
<argument><expr>*<name>a</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr><name>HTML_REQUIRED</name></expr>:
<expr_stmt><expr><name>required_attrs</name>--</expr>;</expr_stmt>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>pappend</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_uri</name> = <name>ATTR_IGNORE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>linkattrs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>tattr</name> *</type><name>attrs</name> <init>= <expr>(<name>tattr</name>*) <name><name>linkattrs</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>linkattrs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>*<name>a</name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>is_uri</name> = <name>ATTR_URI</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>(<name>is_uri</name> == <name>ATTR_IGNORE</name>) &amp;&amp; <name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>extfix</name></name>
&amp;&amp; (<name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>events</name></name> != <name>NULL</name>)</expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>events</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>tattr</name> *</type><name>attrs</name> <init>= <expr>(<name>tattr</name>*) <name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>events</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>*<name>a</name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>is_uri</name> = <name>ATTR_EVENT</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<switch>switch <condition>(<expr><name>is_uri</name></expr>)</condition> <block>{
<case>case <expr><name>ATTR_URI</name></expr>:
<expr_stmt><expr><name>num_match</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>m</name> = <name>themap</name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> = <name><name>m</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_HTML</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_REGEX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>nmatch</name> = 10</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>,
<argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>num_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> = <name>match</name> = <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_from</name> = <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subs</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>VERBOSE</name><argument_list>(<argument>{
const char *f;
f = apr_pstrndup(ctx-&gt;f-&gt;r-&gt;pool,
ctx-&gt;buf + offs, s_from);
ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0,
ctx-&gt;f-&gt;r,
"H/RX: match at %s, substituting %s",
f, subs);
}</argument>)</argument_list></macro>
<expr_stmt><expr><name>s_to</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_to</name> &gt; <name>s_from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s_to</name> - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name> + <name>offs</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s_from</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>, <argument><expr><name>s_from</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>num_match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_to</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VERBOSE</name><argument_list>(<argument><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"H: matched %s, substituting %s"</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_to</name> &gt; <name>s_from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s_to</name> - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>s_to</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>(<name>num_match</name> &gt; 0) &amp;&amp; !(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_NOTLAST</name>)</expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<break>break;</break>
</case><case>case <expr><name>ATTR_EVENT</name></expr>:
<for>for (<init><expr><name>m</name> = <name>themap</name></expr>;</init> <condition><expr><name>m</name></expr>;</condition> <incr><expr><name>m</name> = <name><name>m</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>num_match</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_EVENTS</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_REGEX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>nmatch</name> = 10</expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>r</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>,
<argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>match</name> = <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_from</name> = <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>subs</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>,
<argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>VERBOSE</name><argument_list>(<argument>{
const char *f;
f = apr_pstrndup(ctx-&gt;f-&gt;r-&gt;pool,
ctx-&gt;buf + offs, s_from);
ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0,
ctx-&gt;f-&gt;r,
"E/RX: match at %s, substituting %s",
f, subs);
}</argument>)</argument_list></macro>
<expr_stmt><expr><name>s_to</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>subs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offs</name> += <name>match</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_to</name> &gt; <name>s_from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s_to</name> - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name> + <name>offs</name></expr></argument>, <argument><expr><name>subs</name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>offs</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>offs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>offs</name> += <name>s_to</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>num_match</name></expr>;</expr_stmt>
}</block></while>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>found</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_ATSTART</name>) &amp;&amp; (<name>found</name> != <name><name>ctx</name>-&gt;<name>buf</name></name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<while>while <condition>(<expr><name>found</name></expr>)</condition> <block>{
<expr_stmt><expr><name>s_from</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s_to</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> = <name>found</name> - <name><name>ctx</name>-&gt;<name>buf</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>s_from</name> &lt; <call><name>strlen</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call>)
&amp;&amp; (<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_ATEND</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_from</name></expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>found</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>VERBOSE</name><argument_list>(<argument><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr>"E: matched %s, substituting %s"</expr></argument>,
<argument><expr><name><name>m</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s_to</name> &gt; <name>s_from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>preserve</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s_to</name> - <name>s_from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>to</name></name></expr></argument>, <argument><expr><name>s_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_to</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name>+<name>match</name>+<name>s_from</name></expr></argument>,
<argument><expr><name>len</name> + 1 - <name>s_from</name> - <name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>++<name>num_match</name></expr>;</expr_stmt>
}</block></while>
}</block></else></if>
<if>if <condition>(<expr><name>num_match</name> &amp;&amp; (<name><name>m</name>-&gt;<name>flags</name></name> &amp; <name>M_LAST</name>)</expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<break>break;</break>
</case><case>case <expr><name>ATTR_IGNORE</name></expr>:
<break>break;</break>
</case>}</block></switch>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>a</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_fputstrs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>flags</name></name> != 0</expr>)</condition><then>
<expr_stmt><expr><call><name>normalise</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>flags</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_fputstrs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"=\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>pcharacters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>(const <name>xmlChar</name>*)<name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fputc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>'"'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>desc</name> &amp;&amp; <name><name>desc</name>-&gt;<name>empty</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>etag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_fputc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>(<name>enforce</name> &gt; 0) &amp;&amp; (<name>required_attrs</name> &gt; 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01420</expr></argument>)</argument_list></call>
"HTML element %s is missing %d required attributes"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name>required_attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>meta</name> *</type><name>metafix</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>meta</name> *</type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>offs</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>content</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>pmatch</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>delim</name></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name>seek_meta</name></expr></argument>, <argument><expr><name>buf</name>+<name>offs</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>header</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>content</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>buf</name>+<name>offs</name>+<name><name>pmatch</name><index>[<expr>1</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>apr_isalpha</name><argument_list>(<argument><expr>*++<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt>;</empty_stmt></while>
<for>for (<init><expr><name>q</name> = <name>p</name></expr>;</init> <condition><expr><call><name>apr_isalnum</name><argument_list>(<argument><expr>*<name>q</name></expr></argument>)</argument_list></call> || (*<name>q</name> == '-')</expr>;</condition> <incr><expr>++<name>q</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name>header</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name>-<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr>"Content-"</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <call><name>apr_strmatch</name><argument_list>(<argument><expr><name>seek_content</name></expr></argument>, <argument><expr><name>buf</name>+<name>offs</name>+<name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> != <name>NULL</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>p</name></expr>)</condition> <block>{
<expr_stmt><expr><name>p</name> += 7</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>p</name></expr>;</expr_stmt></while>
<if>if <condition>(<expr>*<name>p</name> != '='</expr>)</condition><then>
<break>break;</break></then></if>
<while>while <condition>(<expr>*<name>p</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*++<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt>;</empty_stmt></while>
<if>if <condition>(<expr>(*<name>p</name> == '\'') || (*<name>p</name> == '"')</expr>)</condition><then> <block>{
<expr_stmt><expr><name>delim</name> = *<name>p</name>++</expr>;</expr_stmt>
<for>for (<init><expr><name>q</name> = <name>p</name></expr>;</init> <condition><expr>*<name>q</name> &amp;&amp; *<name>q</name> != <name>delim</name></expr>;</condition> <incr><expr>++<name>q</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<if>if <condition>(<expr>*<name>q</name> != <name>delim</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>q</name> = <name>p</name></expr>;</init> <condition><expr>*<name>q</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>q</name></expr></argument>)</argument_list></call> &amp;&amp; (*<name>q</name> != '&gt;')</expr>;</condition> <incr><expr>++<name>q</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
}</block></else></if>
<expr_stmt><expr><name>content</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name>-<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></while>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>start</name></name> = <name>offs</name>+<name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>end</name></name> = <name>offs</name>+<name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>header</name> &amp;&amp; <name>content</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GO_FASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Adding header [%s: %s] from HTML META"</expr></argument>,
<argument><expr><name>header</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>offs</name> += <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>interpolate_vars</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>delim</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>before</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>after</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>replacement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>var</name></decl>;</decl_stmt>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>start</name> = <name>str</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr>"${"</expr></argument>)</argument_list></call></expr>, <expr><name>start</name> == <name>NULL</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>end</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>start</name>+2</expr></argument>, <argument><expr>'}'</expr></argument>)</argument_list></call></expr>, <expr><name>end</name> == <name>NULL</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>delim</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr>'|'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>before</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>start</name>-<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>after</name> = <name>end</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>delim</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>var</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>start</name>+2</expr></argument>, <argument><expr><name>delim</name>-<name>start</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>var</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>start</name>+2</expr></argument>, <argument><expr><name>end</name>-<name>start</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>replacement</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>replacement</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>delim</name></expr>)</condition><then>
<expr_stmt><expr><name>replacement</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>delim</name>+1</expr></argument>, <argument><expr><name>end</name>-<name>delim</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>replacement</name> = ""</expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name>str</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>before</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>, <argument><expr><name>after</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Interpolating %s =&gt; %s"</expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>str</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fixup_rules</name><parameter_list>(<param><decl><type><name>saxctxt</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>urlmap</name> *</type><name>newp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name><name>ctx</name>-&gt;<name>cfg</name>-&gt;<name>map</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>cond</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>cond</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01421</expr></argument>)</argument_list></call>
"Error evaluating expr: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ok</name> == 0</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>newp</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>urlmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>newp</name>-&gt;<name>flags</name></name> &amp; <name>M_INTERPOLATE_FROM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newp</name>-&gt;<name>from</name>.<name>c</name></name> = <call><name>interpolate_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>newp</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>newp</name>-&gt;<name>from</name>.<name>c</name></name> || !*<name><name>newp</name>-&gt;<name>from</name>.<name>c</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><name><name>newp</name>-&gt;<name>flags</name></name> &amp; <name>M_REGEX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newp</name>-&gt;<name>from</name>.<name>r</name></name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>newp</name>-&gt;<name>from</name>.<name>c</name></name></expr></argument>,
<argument><expr><name><name>newp</name>-&gt;<name>regflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>newp</name>-&gt;<name>flags</name></name> &amp; <name>M_INTERPOLATE_TO</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newp</name>-&gt;<name>to</name></name> = <call><name>interpolate_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>newp</name>-&gt;<name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>prev</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>prev</name>-&gt;<name>next</name></name> = <name>newp</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>map</name></name> = <name>newp</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>prev</name> = <name>newp</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>prev</name></expr>)</condition><then>
<expr_stmt><expr><name><name>prev</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>saxctxt</name> *</type><name>check_filter_init</name> <parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>fctx</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>ctx</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>force</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_html_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>force</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"PROXY_HTML_FORCE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>force</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errmsg</name> = "Non-proxy request; not inserting proxy-html filter"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errmsg</name> = "No content-type; bailing out of proxy-html filter"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr>"text/html"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call> &amp;&amp;
<call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr></argument>,
<argument><expr>"application/xhtml+xml"</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errmsg</name> = "Non-HTML content; not inserting proxy-html filter"</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>links</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errmsg</name> = "No links configured: nothing for proxy-html filter to do"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>GO_FASTER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fctx</name> = <name><name>f</name>-&gt;<name>ctx</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>saxctxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name>-&gt;<name>f</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name>-&gt;<name>cfg</name></name> = <name>cfg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>interp</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>fixup_rules</name><argument_list>(<argument><expr><name>fctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>fctx</name>-&gt;<name>map</name></name> = <name><name>cfg</name>-&gt;<name>map</name></name></expr>;</expr_stmt></else></if>
}</block></then></if>
<return>return <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>proxy_html_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>meta</name> *</type><name>m</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlCharEncoding</name></type> <name>enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>USE_OLD_LIBXML2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>xmlopts</name> <init>= <expr><name>XML_PARSE_RECOVER</name> | <name>XML_PARSE_NONET</name> |
<name>XML_PARSE_NOBLANKS</name> | <name>XML_PARSE_NOERROR</name> | <name>XML_PARSE_NOWARNING</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>saxctxt</name> *</type><name>ctxt</name> <init>= <expr><call><name>check_filter_init</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ctxt</name></expr>)</condition><then>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctxt</name>-&gt;<name>parser</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>consume_buffer</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctxt</name>-&gt;<name>bb</name></name></expr></argument>,
<argument><expr><call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>ctxt</name>-&gt;<name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>ctxt</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctxt</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctxt</name>-&gt;<name>parser</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>ctxt</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctxt</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctxt</name>-&gt;<name>parser</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cenc</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>xml2enc_charset</name> ||
(<call><name>xml2enc_charset</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>&amp;<name>enc</name></expr></argument>, <argument><expr>&amp;<name>cenc</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>xml2enc_charset</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01422</expr></argument>)</argument_list></call>
"No i18n support found. Install mod_xml2enc if required"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>enc</name> = <name>XML_CHAR_ENCODING_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>"text/html;charset=utf-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>ctxt</name>-&gt;<name>cfg</name>-&gt;<name>charset_out</name></name> &amp;&amp; <name>xml2enc_filter</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name><name>ctxt</name>-&gt;<name>cfg</name>-&gt;<name>charset_out</name></name> != '*'</expr>)</condition><then>
<expr_stmt><expr><name>cenc</name> = <name><name>ctxt</name>-&gt;<name>cfg</name>-&gt;<name>charset_out</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>xml2enc_filter</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>cenc</name></expr></argument>, <argument><expr><name>ENCIO_OUTPUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"text/html;charset="</expr></argument>,
<argument><expr><name>cenc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>"text/html;charset=utf-8"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></else></if>
<expr_stmt><expr><call><name>ap_fputs</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctxt</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name><name>ctxt</name>-&gt;<name>cfg</name>-&gt;<name>doctype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctxt</name>-&gt;<name>parser</name></name> = <call><name>htmlCreatePushParserCtxt</name><argument_list>(<argument><expr>&amp;<name>sax</name></expr></argument>, <argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>,
<argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += 4</expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> -= 4</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctxt</name>-&gt;<name>parser</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctxt</name>-&gt;<name>parser</name></name></expr></argument>,
<argument><expr>(<call><call><name>int</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name>*</expr></argument>)</argument_list></call>)<name>htmlFreeParserCtxt</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>USE_OLD_LIBXML2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>xmlopts</name> = <call><name>xmlCtxtUseOptions</name><argument_list>(<argument><expr><name><name>ctxt</name>-&gt;<name>parser</name></name></expr></argument>, <argument><expr><name>xmlopts</name></expr></argument>)</argument_list></call></expr>, <expr><name>xmlopts</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01423</expr></argument>)</argument_list></call>
"Unsupported parser opts %x"</expr></argument>, <argument><expr><name>xmlopts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>ctxt</name>-&gt;<name>cfg</name>-&gt;<name>metafix</name></name></expr>)</condition><then>
<expr_stmt><expr><name>m</name> = <call><name>metafix</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>m</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>consume_buffer</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>m</name>-&gt;<name>start</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>consume_buffer</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>buf</name>+<name><name>m</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr><name>bytes</name>-<name><name>m</name>-&gt;<name>end</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>consume_buffer</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>consume_buffer</name><argument_list>(<argument><expr><name>ctxt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01424</expr></argument>)</argument_list></call>
"Error in bucket read"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>proxy_html_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>doctype</name></name> = <name>DEFAULT_DOCTYPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>etag</name></name> = <name>DEFAULT_ETAG</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>bufsz</name></name> = 8192</expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>proxy_html_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>BASE</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>base</name> <init>= <expr>(<name>proxy_html_conf</name> *) <name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>add</name> <init>= <expr>(<name>proxy_html_conf</name> *) <name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>links</name></name> = (<name><name>add</name>-&gt;<name>links</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>links</name></name> : <name><name>add</name>-&gt;<name>links</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>events</name></name> = (<name><name>add</name>-&gt;<name>events</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>events</name></name> : <name><name>add</name>-&gt;<name>events</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>charset_out</name></name> = (<name><name>add</name>-&gt;<name>charset_out</name></name> == <name>NULL</name>)
? <name><name>base</name>-&gt;<name>charset_out</name></name> : <name><name>add</name>-&gt;<name>charset_out</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>map</name></name> &amp;&amp; <name><name>base</name>-&gt;<name>map</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>urlmap</name> *</type><name>a</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>map</name></name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>a</name> = <name><name>base</name>-&gt;<name>map</name></name></expr>;</init> <condition><expr><name>a</name></expr>;</condition> <incr><expr><name>a</name> = <name><name>a</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>urlmap</name> *</type><name>save</name> <init>= <expr><name><name>conf</name>-&gt;<name>map</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>map</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>urlmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>map</name>-&gt;<name>next</name></name> = <name>save</name></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>a</name> = <name><name>add</name>-&gt;<name>map</name></name></expr>;</init> <condition><expr><name>a</name></expr>;</condition> <incr><expr><name>a</name> = <name><name>a</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>urlmap</name> *</type><name>save</name> <init>= <expr><name><name>conf</name>-&gt;<name>map</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>map</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>urlmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>map</name>-&gt;<name>next</name></name> = <name>save</name></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else
<expr_stmt><expr><name><name>conf</name>-&gt;<name>map</name></name> = <name><name>add</name>-&gt;<name>map</name></name> ? <name><name>add</name>-&gt;<name>map</name></name> : <name><name>base</name>-&gt;<name>map</name></name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>doctype</name></name> = (<name><name>add</name>-&gt;<name>doctype</name></name> == <name>DEFAULT_DOCTYPE</name>)
? <name><name>base</name>-&gt;<name>doctype</name></name> : <name><name>add</name>-&gt;<name>doctype</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag</name></name> = (<name><name>add</name>-&gt;<name>etag</name></name> == <name>DEFAULT_ETAG</name>) ? <name><name>base</name>-&gt;<name>etag</name></name> : <name><name>add</name>-&gt;<name>etag</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>bufsz</name></name> = <name><name>add</name>-&gt;<name>bufsz</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>flags</name></name> &amp; <name>NORM_RESET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>flags</name></name> = <name><name>add</name>-&gt;<name>flags</name></name> ^ <name>NORM_RESET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>metafix</name></name> = <name><name>add</name>-&gt;<name>metafix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>extfix</name></name> = <name><name>add</name>-&gt;<name>extfix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>interp</name></name> = <name><name>add</name>-&gt;<name>interp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>strip_comments</name></name> = <name><name>add</name>-&gt;<name>strip_comments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>enabled</name></name> = <name><name>add</name>-&gt;<name>enabled</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>flags</name></name> = <name><name>base</name>-&gt;<name>flags</name></name> | <name><name>add</name>-&gt;<name>flags</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>metafix</name></name> = <name><name>base</name>-&gt;<name>metafix</name></name> | <name><name>add</name>-&gt;<name>metafix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>extfix</name></name> = <name><name>base</name>-&gt;<name>extfix</name></name> | <name><name>add</name>-&gt;<name>extfix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>interp</name></name> = <name><name>base</name>-&gt;<name>interp</name></name> | <name><name>add</name>-&gt;<name>interp</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>strip_comments</name></name> = <name><name>base</name>-&gt;<name>strip_comments</name></name> | <name><name>add</name>-&gt;<name>strip_comments</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>enabled</name></name> = <name><name>add</name>-&gt;<name>enabled</name></name> | <name><name>base</name>-&gt;<name>enabled</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REGFLAG</name><parameter_list>(<param><type><name>n</name></type></param>,<param><type><name>s</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((s&amp;&amp;(ap_strchr_c((s),(c))!=NULL)) ? (n) : 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XREGFLAG</name><parameter_list>(<param><type><name>n</name></type></param>,<param><type><name>s</name></type></param>,<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((!s||(ap_strchr_c((s),(c))==NULL)) ? (n) : 0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>comp_urlmap</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>urlmap</name> *</type><name>newmap</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>flags</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cond</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>flags</name></name>
= <call><name>XREGFLAG</name><argument_list>(<argument><expr><name>M_HTML</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'h'</expr></argument>)</argument_list></call>
| <call><name>XREGFLAG</name><argument_list>(<argument><expr><name>M_EVENTS</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'e'</expr></argument>)</argument_list></call>
| <call><name>XREGFLAG</name><argument_list>(<argument><expr><name>M_CDATA</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'c'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_ATSTART</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'^'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_ATEND</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'$'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_REGEX</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'R'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_LAST</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'L'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_NOTLAST</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'l'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_INTERPOLATE_TO</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'V'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>M_INTERPOLATE_FROM</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'v'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>newmap</name>-&gt;<name>flags</name></name> &amp; <name>M_INTERPOLATE_FROM</name>) || !(<name><name>newmap</name>-&gt;<name>flags</name></name> &amp; <name>M_REGEX</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>from</name>.<name>c</name></name> = <name>from</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>to</name></name> = <name>to</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>regflags</name></name>
= <call><name>REGFLAG</name><argument_list>(<argument><expr><name>AP_REG_EXTENDED</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'x'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>AP_REG_ICASE</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'i'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>AP_REG_NOSUB</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'n'</expr></argument>)</argument_list></call>
| <call><name>REGFLAG</name><argument_list>(<argument><expr><name>AP_REG_NEWLINE</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>,<argument><expr>'s'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>from</name>.<name>r</name></name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name><name>newmap</name>-&gt;<name>regflags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>to</name></name> = <name>to</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>cond</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>newcond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_rxplus_exec</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>old_expr</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr>&amp;<name>newcond</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>cond</name><index>[<expr>0</expr>]</index></name> == '!') &amp;&amp; !<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>cond</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newcond</name>+1</expr></argument>, <argument><expr><name>newcond</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>newcond</name></expr></argument>)</argument_list></call>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newcond</name><index>[<expr>0</expr>]</index></name> = '!'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>cond</name> = <name>newcond</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>cond</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>cond</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_urlmap</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name> <init>= <expr>(<name>proxy_html_conf</name> *)<name>CFG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>urlmap</name> *</type><name>newmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>usage</name> <init>=
<expr>"Usage: ProxyHTMLURLMap from-pattern to-pattern [flags] [cond]"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>to</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cond</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>from</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>, <expr>!<name>from</name></expr>)</condition><then>
<return>return <expr><name>usage</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>to</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>, <expr>!<name>to</name></expr>)</condition><then>
<return>return <expr><name>usage</name></expr>;</return></then></if>
<expr_stmt><expr><name>flags</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flags</name> &amp;&amp; *<name>flags</name></expr>)</condition><then>
<expr_stmt><expr><name>cond</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>cond</name> &amp;&amp; !*<name>cond</name></expr>)</condition><then>
<expr_stmt><expr><name>cond</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>newmap</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>urlmap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newmap</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>map</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>map</name> = <name><name>cfg</name>-&gt;<name>map</name></name></expr>;</init> <condition><expr><name><name>map</name>-&gt;<name>next</name></name></expr>;</condition> <incr><expr><name>map</name> = <name><name>map</name>-&gt;<name>next</name></name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>map</name>-&gt;<name>next</name></name> = <name>newmap</name></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>map</name></name> = <name>newmap</name></expr>;</expr_stmt></else></if>
<return>return <expr><call><name>comp_urlmap</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>newmap</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_doctype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name> <init>= <expr>(<name>proxy_html_conf</name> *)<name>CFG</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"xhtml"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag</name></name> = <name>xhtml_etag</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr>"legacy"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>doctype</name></name> = <name>fpi_xhtml_legacy</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>doctype</name></name> = <name>fpi_xhtml</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"html"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag</name></name> = <name>html_etag</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr>"legacy"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>doctype</name></name> = <name>fpi_html_legacy</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>doctype</name></name> = <name>fpi_html</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>doctype</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> &amp;&amp; ((<name><name>l</name><index>[<expr>0</expr>]</index></name> == 'x') || (<name><name>l</name><index>[<expr>0</expr>]</index></name> == 'X'))</expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag</name></name> = <name>xhtml_etag</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>etag</name></name> = <name>html_etag</name></expr>;</expr_stmt></else></if>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_flags</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>arg</name> &amp;&amp; *<name>arg</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"lowercase"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>flags</name></name> |= <name>NORM_LC</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"dospath"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>flags</name></name> |= <name>NORM_MSSLASH</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"reset"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>flags</name></name> |= <name>NORM_RESET</name></expr>;</expr_stmt></then></if></else></if></else></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_events</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>tattr</name> *</type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>events</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>events</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>attr</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>events</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name>-&gt;<name>val</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_links</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>elt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>att</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tattr</name> *</type><name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>links</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>links</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>attrs</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>attrs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>attrs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tattr</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>links</name></name></expr></argument>, <argument><expr><name>elt</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>attr</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>attr</name>-&gt;<name>val</name></name> = <name>att</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>proxy_html_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"ProxyHTMLEvents"</expr></argument>, <argument><expr><name>set_events</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Strings to be treated as scripting events"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"ProxyHTMLLinks"</expr></argument>, <argument><expr><name>set_links</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Declare HTML Attributes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ProxyHTMLURLMap"</expr></argument>, <argument><expr><name>set_urlmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Map URL From To"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"ProxyHTMLDoctype"</expr></argument>, <argument><expr><name>set_doctype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"(HTML|XHTML) [Legacy]"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"ProxyHTMLFixups"</expr></argument>, <argument><expr><name>set_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Options are lowercase, dospath"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyHTMLMeta"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>metafix</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Fix META http-equiv elements"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyHTMLInterp"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Support interpolation and conditions in URLMaps"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyHTMLExtended"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>extfix</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Map URLs in Javascript and CSS"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyHTMLStripComments"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>strip_comments</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Strip out comments"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyHTMLBufSize"</expr></argument>, <argument><expr><name>ap_set_int_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Buffer size"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyHTMLCharsetOut"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>charset_out</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Usage: ProxyHTMLCharsetOut charset"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyHTMLEnable"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_html_conf</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Enable proxy-html and xml2enc filters"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mod_proxy_html</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p1</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p2</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>seek_meta</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;meta[^&gt;]*(http-equiv)[^&gt;]*&gt;"</expr></argument>,
<argument><expr><name>AP_REG_EXTENDED</name>|<name>AP_REG_ICASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seek_content</name> = <call><name>apr_strmatch_precompile</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"content"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>sax</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>htmlSAXHandler</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sax</name>.<name>startElement</name></name> = <name>pstartElement</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sax</name>.<name>endElement</name></name> = <name>pendElement</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sax</name>.<name>characters</name></name> = <name>pcharacters</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sax</name>.<name>comment</name></name> = <name>pcomment</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sax</name>.<name>cdataBlock</name></name> = <name>pcdata</name></expr>;</expr_stmt>
<expr_stmt><expr><name>xml2enc_charset</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>xml2enc_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>xml2enc_filter</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>xml2enc_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>xml2enc_charset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01425</expr></argument>)</argument_list></call>
"I18n support in mod_proxy_html requires mod_xml2enc. "
"Without it, non-ASCII characters in proxied pages are "
"likely to display incorrectly."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>old_expr</name> = <call><name>ap_rxplus_compile</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr>"s/^(!)?(\\w+)((=)(.+))?$/reqenv('$2')$1$4'$5'/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>proxy_html_insert</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_html_conf</name> *</type><name>cfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_html_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>enabled</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>xml2enc_filter</name></expr>)</condition><then>
<expr_stmt><expr><call><name>xml2enc_filter</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ENCIO_INPUT_CHECKS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"proxy-html"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>proxy_html_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>aszSucc</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_filter.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter_protocol</name><argument_list>(<argument><expr>"proxy-html"</expr></argument>, <argument><expr><name>proxy_html_filter</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>,
<argument><expr><name>AP_FILTER_PROTO_CHANGE</name>|<name>AP_FILTER_PROTO_CHANGE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>mod_proxy_html</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>proxy_html_insert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_html</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>proxy_html_config</name></expr>,
<expr><name>proxy_html_merge</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>proxy_html_cmds</name></expr>,
<expr><name>proxy_html_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
