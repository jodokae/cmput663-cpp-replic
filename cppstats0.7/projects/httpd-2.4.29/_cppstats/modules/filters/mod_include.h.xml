<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/filters/mod_include.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_MOD_INCLUDE_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MOD_INCLUDE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_VALUE_DECODED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_VALUE_RAW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_EXPAND_LEAVE_NAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_EXPAND_DROP_NAME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_CREATE_ERROR_BUCKET</name><parameter_list>(<param><type><name>ctx</name></type></param>, <param><type><name>f</name></type></param>, <param><type><name>bb</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_BRIGADE_INSERT_TAIL((bb), apr_bucket_pool_create(apr_pstrdup((ctx)-&gt;pool, (ctx)-&gt;error_str), strlen((ctx)-&gt;error_str), (ctx)-&gt;pool, (f)-&gt;c-&gt;bucket_alloc))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_PRINTING</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_COND_TRUE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_SIZE_IN_BYTES</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_NO_EXEC</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_SIZE_ABBREV</name></cpp:macro> <cpp:value>(~(SSI_FLAG_SIZE_IN_BYTES))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_CLEAR_PRINT_COND</name></cpp:macro> <cpp:value>(~((SSI_FLAG_PRINTING) | (SSI_FLAG_COND_TRUE)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_CLEAR_PRINTING</name></cpp:macro> <cpp:value>(~(SSI_FLAG_PRINTING))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>dpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>if_nesting_level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush_now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>argc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>time_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ssi_internal_ctx</name> *</type><name>intern</name></decl>;</decl_stmt>
}</block></struct></type> <name>include_ctx_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (<name>include_handler_fn_t</name>)<parameter_list>(<param><decl><type><name>include_ctx_t</name> *</type></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_ssi_get_tag_and_value</name></expr></argument>,
<argument><expr>(<name>include_ctx_t</name> *<name>ctx</name>, <name>char</name> **<name>tag</name>, <name>char</name> **<name>tag_val</name>,
<name>int</name> <name>dodecode</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>char</name>*</expr></argument>, <argument><expr><name>ap_ssi_parse_string</name></expr></argument>,
<argument><expr>(<name>include_ctx_t</name> *<name>ctx</name>, const <name>char</name> *<name>in</name>, <name>char</name> *<name>out</name>,
<name>apr_size_t</name> <name>length</name>, <name>int</name> <name>leave_name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_register_include_handler</name></expr></argument>,
<argument><expr>(<name>char</name> *<name>tag</name>, <name>include_handler_fn_t</name> *<name>func</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
