<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="modules/filters/regexp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_LIMITS_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsed.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regexp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sed.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((unsigned char)*sp++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEEKC</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>((unsigned char)*sp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNGETC</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(--sp)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDCOMPILE_ERROR</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>{ regerrno = c; goto out; }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ecmp</name><parameter_list>(<param><type><name>s1</name></type></param>, <param><type><name>s2</name></type></param>, <param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(strncmp(s1, s2, n) == 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>uletter</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(isalpha(c) || c == '_')</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bittab</name><index>[]</index></name> <init>= <expr><block>{ <expr>1</expr>, <expr>2</expr>, <expr>4</expr>, <expr>8</expr>, <expr>16</expr>, <expr>32</expr>, <expr>64</expr>, <expr>128</expr> }</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>regerr</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>comperr</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>getrnge</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type><name>vars</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>_advance</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sed_step</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>p1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>p2</name></decl></param>, <param><decl><type><name>int</name></type> <name>circf</name></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type><name>vars</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>void</name></type> <name>comperr</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>char</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>command_errf</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name><name>commands</name>-&gt;<name>linebuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>regerr</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>int</name></type> <name>err</name></decl></param>)</parameter_list> <block>{
<switch>switch<condition>(<expr><name>err</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<break>break;</break>
</case><case>case <expr>11</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"Range endpoint too large: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>16</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"Bad number: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>25</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"``\\digit'' out of range: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>36</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"Illegal or missing delimiter: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>41</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"No remembered search string: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>42</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"\\( \\) imbalance: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>43</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"Too many \\(: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>44</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"More than 2 numbers given in \\{ \\}: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>45</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"} expected after \\: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>46</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"First number exceeds second in \\{ \\}: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>49</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"[ ] imbalance: %s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>50</expr>:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>SEDERR_TMMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>comperr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr>"Unknown regexp error code %s\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr>(0)</expr>;</return>
}</block></function>
<function><type><name>char</name> *</type><name>sed_compile</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_comp_args</name> *</type><name>compargs</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>ep</name></decl></param>, <param><decl><type><name>char</name> *</type><name>endbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>seof</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eof</name> <init>= <expr><name>seof</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lastep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cclcnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>bracket</name><index>[<expr><name>NBRA</name></expr>]</index></name></decl>, *<decl><type ref="prev"/><name>bracketp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>closed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>neg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>cflg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>iflag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>sp</name> <init>= <expr><name><name>commands</name>-&gt;<name>cp</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>regerrno</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>lastep</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call>) == <name>eof</name> || <name>c</name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>c</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>UNGETC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name>sp</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>bracketp</name> = <name>bracket</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>compargs</name>-&gt;<name>circf</name></name> = <name>closed</name> = <name><name>compargs</name>-&gt;<name>nbra</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '^'</expr>)</condition><then>
<expr_stmt><expr><name><name>compargs</name>-&gt;<name>circf</name></name>++</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>UNGETC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr><name>ep</name> &gt;= <name>endbuf</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> != '*' &amp;&amp; ((<name>c</name> != '\\') || (<call><name>PEEKC</name><argument_list>()</argument_list></call> != '{'))</expr>)</condition><then>
<expr_stmt><expr><name>lastep</name> = <name>ep</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>c</name> == <name>eof</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ep</name>++ = <name>CCEOF</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bracketp</name> != <name>bracket</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>42</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name>sp</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
}</block></then></if>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
<case>case <expr>'.'</expr>:
<expr_stmt><expr>*<name>ep</name>++ = <name>CDOT</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'\n'</expr>:
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>36</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>commands</name>-&gt;<name>cp</name></name> = <name>sp</name></expr>;</expr_stmt>
<goto>goto <name>out</name>;</goto>
</case><case>case <expr>'*'</expr>:
<if>if <condition>(<expr><name>lastep</name> == 0 || *<name>lastep</name> == <name>CBRA</name> || *<name>lastep</name> == <name>CKET</name></expr>)</condition><then>
<goto>goto <name>defchar</name>;</goto></then></if>
<expr_stmt><expr>*<name>lastep</name> |= <name>STAR</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'$'</expr>:
<if>if <condition>(<expr><call><name>PEEKC</name><argument_list>()</argument_list></call> != <name>eof</name> &amp;&amp; <call><name>PEEKC</name><argument_list>()</argument_list></call> != '\n'</expr>)</condition><then>
<goto>goto <name>defchar</name>;</goto></then></if>
<expr_stmt><expr>*<name>ep</name>++ = <name>CDOL</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'['</expr>:
<if>if <condition>(<expr>&amp;<name><name>ep</name><index>[<expr>17</expr>]</index></name> &gt;= <name>endbuf</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>ep</name>++ = <name>CCL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lc</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
<expr_stmt><expr><name>neg</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call>) == '^'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>neg</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>iflag</name> = 1</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>c</name> &amp;= 0377</expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '\0' || <name>c</name> == '\n'</expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>49</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>c</name> &amp; 0200) &amp;&amp; <name>iflag</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>iflag</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>&amp;<name><name>ep</name><index>[<expr>32</expr>]</index></name> &gt;= <name>endbuf</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ep</name><index>[<expr>-1</expr>]</index></name> = <name>CXCL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 16</expr>;</init> <condition><expr><name>i</name> &lt; 32</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
}</block></then></if>
<if>if <condition>(<expr><name>c</name> == '-' &amp;&amp; <name>lc</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call>) == ']'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PLACE</name><argument_list>(<argument><expr>'-'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>(<name>c</name> &amp; 0200) &amp;&amp; <name>iflag</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>iflag</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>&amp;<name><name>ep</name><index>[<expr>32</expr>]</index></name> &gt;= <name>endbuf</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>ep</name><index>[<expr>-1</expr>]</index></name> = <name>CXCL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 16</expr>;</init> <condition><expr><name>i</name> &lt; 32</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>ep</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt></for>
}</block></then></if>
<while>while <condition>(<expr><name>lc</name> &lt; <name>c</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>PLACE</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lc</name>++</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>lc</name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PLACE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>(<name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call>) != ']'</expr>)</condition>;</do>
<if>if <condition>(<expr><name>iflag</name></expr>)</condition><then>
<expr_stmt><expr><name>iflag</name> = 16</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>iflag</name> = 32</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>neg</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>iflag</name> == 32</expr>)</condition><then> <block>{
<for>for (<init><expr><name>cclcnt</name> = 0</expr>;</init> <condition><expr><name>cclcnt</name> &lt; <name>iflag</name></expr>;</condition>
<incr><expr><name>cclcnt</name>++</expr></incr>)
<expr_stmt><expr><name><name>ep</name><index>[<expr><name>cclcnt</name></expr>]</index></name> ^= 0377</expr>;</expr_stmt></for>
<expr_stmt><expr><name><name>ep</name><index>[<expr>0</expr>]</index></name> &amp;= 0376</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ep</name><index>[<expr>-1</expr>]</index></name> = <name>NCCL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ep</name><index>[<expr>0</expr>]</index></name> |= 01</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>ep</name> += <name>iflag</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'\\'</expr>:
<switch>switch <condition>(<expr><name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
<case>case <expr>'('</expr>:
<if>if <condition>(<expr><name><name>compargs</name>-&gt;<name>nbra</name></name> &gt;= <name>NBRA</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>43</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>bracketp</name>++ = <name><name>compargs</name>-&gt;<name>nbra</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ep</name>++ = <name>CBRA</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ep</name>++ = <name><name>compargs</name>-&gt;<name>nbra</name></name>++</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>')'</expr>:
<if>if <condition>(<expr><name>bracketp</name> &lt;= <name>bracket</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>42</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>ep</name>++ = <name>CKET</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ep</name>++ = *--<name>bracketp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>closed</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr>'{'</expr>:
<if>if <condition>(<expr><name>lastep</name> == (<name>char</name> *) 0</expr>)</condition><then>
<goto>goto <name>defchar</name>;</goto></then></if>
<expr_stmt><expr>*<name>lastep</name> |= <name>RNGE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cflg</name> = 0</expr>;</expr_stmt>
<label><name>nlim</name>:</label>
<expr_stmt><expr><name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr>'0' &lt;= <name>c</name> &amp;&amp; <name>c</name> &lt;= '9'</expr>)</condition><then>
<expr_stmt><expr><name>i</name> = 10 * <name>i</name> + <name>c</name> - '0'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block> while <condition>(<expr>((<name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call>) != '\\') &amp;&amp; (<name>c</name> != ',')</expr>)</condition>;</do>
<if>if <condition>(<expr><name>i</name> &gt;= 255</expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>ep</name>++ = <name>i</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == ','</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>cflg</name>++</expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>44</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>c</name> = <call><name>GETC</name><argument_list>()</argument_list></call>) == '\\'</expr>)</condition><then>
<expr_stmt><expr>*<name>ep</name>++ = (<name>char</name>) 255</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>UNGETC</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>nlim</name>;</goto>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>GETC</name><argument_list>()</argument_list></call> != '}'</expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>45</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>cflg</name></expr>)</condition><then>
<expr_stmt><expr>*<name>ep</name>++ = <name>i</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>(<name><name>ep</name><index>[<expr>-1</expr>]</index></name> &amp; 0377) &lt; (<name><name>ep</name><index>[<expr>-2</expr>]</index></name> &amp; 0377)</expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>46</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<continue>continue;</continue>
</case><case>case <expr>'\n'</expr>:
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>36</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name>c</name> = '\n'</expr>;</expr_stmt>
<goto>goto <name>defchar</name>;</goto>
</case><default>default:
<if>if <condition>(<expr><name>c</name> &gt;= '1' &amp;&amp; <name>c</name> &lt;= '9'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>c</name> -= '1') &gt;= <name>closed</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SEDCOMPILE_ERROR</name><argument_list>(<argument><expr>25</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr>*<name>ep</name>++ = <name>CBACK</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ep</name>++ = <name>c</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
</default>}</block></switch>
<label><name>defchar</name>:</label>
</case><default>default:
<expr_stmt><expr><name>lastep</name> = <name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ep</name>++ = <name>CCHR</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ep</name>++ = <name>c</name></expr>;</expr_stmt>
</default>}</block></switch>
}</block></while>
<label><name>out</name>:</label>
<if>if <condition>(<expr><name>regerrno</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>regerr</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><name>regerrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>char</name>*) <name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>ep</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>sed_step</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>p1</name></decl></param>, <param><decl><type><name>char</name> *</type><name>p2</name></decl></param>, <param><decl><type><name>int</name></type> <name>circf</name></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type><name>vars</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>circf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>vars</name>-&gt;<name>loc1</name></name> = <name>p1</name></expr>;</expr_stmt>
<return>return <expr>(<call><name>_advance</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>p2</name> == <name>CCHR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = <name><name>p2</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
<do>do <block>{
<if>if <condition>(<expr>*<name>p1</name> != <name>c</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<if>if <condition>(<expr><call><name>_advance</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>vars</name>-&gt;<name>loc1</name></name> = <name>p1</name></expr>;</expr_stmt>
<return>return <expr>(1)</expr>;</return>
}</block></then></if>
}</block> while <condition>(<expr>*<name>p1</name>++</expr>)</condition>;</do>
<return>return <expr>(0)</expr>;</return>
}</block></then></if>
<do>do <block>{
<if>if <condition>(<expr><call><name>_advance</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>vars</name>-&gt;<name>loc1</name></name> = <name>p1</name></expr>;</expr_stmt>
<return>return <expr>(1)</expr>;</return>
}</block></then></if>
}</block> while <condition>(<expr>*<name>p1</name>++</expr>)</condition>;</do>
<return>return <expr>(0)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>_advance</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>lp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>ep</name></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type><name>vars</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>curlp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>bbeg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>neg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>epint</name></decl>;</decl_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>neg</name> = 0</expr>;</expr_stmt>
<switch>switch <condition>(<expr>*<name>ep</name>++</expr>)</condition> <block>{
<case>case <expr><name>CCHR</name></expr>:
<if>if <condition>(<expr>*<name>ep</name>++ == *<name>lp</name>++</expr>)</condition><then>
<continue>continue;</continue></then></if>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>CDOT</name></expr>:
<if>if <condition>(<expr>*<name>lp</name>++</expr>)</condition><then>
<continue>continue;</continue></then></if>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>CDOL</name></expr>:
<if>if <condition>(<expr>*<name>lp</name> == 0</expr>)</condition><then>
<continue>continue;</continue></then></if>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>CCEOF</name></expr>:
<expr_stmt><expr><name><name>vars</name>-&gt;<name>loc2</name></name> = <name>lp</name></expr>;</expr_stmt>
<return>return <expr>(1)</expr>;</return>
</case><case>case <expr><name>CXCL</name></expr>:
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)*<name>lp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ep</name> += 32</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>NCCL</name></expr>:
<expr_stmt><expr><name>neg</name> = 1</expr>;</expr_stmt>
</case><case>case <expr><name>CCL</name></expr>:
<expr_stmt><expr><name>c</name> = *<name>lp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>((<name>c</name> &amp; 0200) == 0 &amp;&amp; <call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>) ^ <name>neg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ep</name> += 16</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>CBRA</name></expr>:
<expr_stmt><expr><name>epint</name> = (<name>int</name>) *<name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vars</name>-&gt;<name>braslist</name><index>[<expr><name>epint</name></expr>]</index></name> = <name>lp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr><name>CKET</name></expr>:
<expr_stmt><expr><name>epint</name> = (<name>int</name>) *<name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vars</name>-&gt;<name>braelist</name><index>[<expr><name>epint</name></expr>]</index></name> = <name>lp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr><name>CCHR</name> | <name>RNGE</name></expr>:
<expr_stmt><expr><name>c</name> = *<name>ep</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>getrnge</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>low</name></name>--</expr>)</condition>
<if>if <condition>(<expr>*<name>lp</name>++ != <name>c</name></expr>)</condition><then>
<return>return <expr>(0)</expr>;</return></then></if></while>
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name>--</expr>)</condition>
<if>if <condition>(<expr>*<name>lp</name>++ != <name>c</name></expr>)</condition><then>
<break>break;</break></then></if></while>
<if>if <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>lp</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ep</name> += 2</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>CDOT</name> | <name>RNGE</name></expr>:
<expr_stmt><expr><call><name>getrnge</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>low</name></name>--</expr>)</condition>
<if>if <condition>(<expr>*<name>lp</name>++ == '\0'</expr>)</condition><then>
<return>return <expr>(0)</expr>;</return></then></if></while>
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name>--</expr>)</condition>
<if>if <condition>(<expr>*<name>lp</name>++ == '\0'</expr>)</condition><then>
<break>break;</break></then></if></while>
<if>if <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>lp</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ep</name> += 2</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>CXCL</name> | <name>RNGE</name></expr>:
<expr_stmt><expr><call><name>getrnge</name><argument_list>(<argument><expr><name>ep</name> + 32</expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>low</name></name>--</expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)*<name>lp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>(0)</expr>;</return></then></if>
}</block></while>
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name>--</expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)*<name>lp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then></if>
}</block></while>
<if>if <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>lp</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ep</name> += 34</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>NCCL</name> | <name>RNGE</name></expr>:
<expr_stmt><expr><name>neg</name> = 1</expr>;</expr_stmt>
</case><case>case <expr><name>CCL</name> | <name>RNGE</name></expr>:
<expr_stmt><expr><call><name>getrnge</name><argument_list>(<argument><expr><name>ep</name> + 16</expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>low</name></name>--</expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> = *<name>lp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>((<name>c</name> &amp; 0200) || !<call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>) ^ <name>neg</name></expr>)</condition><then>
<return>return <expr>(0)</expr>;</return></then></if>
}</block></while>
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name>--</expr>)</condition> <block>{
<expr_stmt><expr><name>c</name> = *<name>lp</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>((<name>c</name> &amp; 0200) || !<call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>) ^ <name>neg</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></while>
<if>if <condition>(<expr><name><name>vars</name>-&gt;<name>size</name></name> &lt; 0</expr>)</condition><then>
<expr_stmt><expr><name>lp</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>ep</name> += 18</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>CBACK</name></expr>:
<expr_stmt><expr><name>epint</name> = (<name>int</name>) *<name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bbeg</name> = <name><name>vars</name>-&gt;<name>braslist</name><index>[<expr><name>epint</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> = <name><name>vars</name>-&gt;<name>braelist</name><index>[<expr><name>epint</name></expr>]</index></name> - <name>bbeg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ecmp</name><argument_list>(<argument><expr><name>bbeg</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lp</name> += <name>ct</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>CBACK</name> | <name>STAR</name></expr>:
<expr_stmt><expr><name>epint</name> = (<name>int</name>) *<name>ep</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bbeg</name> = <name><name>vars</name>-&gt;<name>braslist</name><index>[<expr><name>epint</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ct</name> = <name><name>vars</name>-&gt;<name>braelist</name><index>[<expr><name>epint</name></expr>]</index></name> - <name>bbeg</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ep</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>ecmp</name><argument_list>(<argument><expr><name>bbeg</name></expr></argument>, <argument><expr><name>lp</name></expr></argument>, <argument><expr><name>ct</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>lp</name> += <name>ct</name></expr>;</expr_stmt></while>
<while>while <condition>(<expr><name>lp</name> &gt;= <name>curlp</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>_advance</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>(1)</expr>;</return></then></if>
<expr_stmt><expr><name>lp</name> -= <name>ct</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr>(0)</expr>;</return>
</case><case>case <expr><name>CDOT</name> | <name>STAR</name></expr>:
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>lp</name>++</expr>)</condition><empty_stmt>;</empty_stmt></while>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>CCHR</name> | <name>STAR</name></expr>:
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>lp</name>++ == *<name>ep</name></expr>)</condition><empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><name>ep</name>++</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>CXCL</name> | <name>STAR</name></expr>:
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>c</name> = (<name>unsigned</name> <name>char</name>)*<name>lp</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<expr_stmt><expr><name>ep</name> += 32</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
</case><case>case <expr><name>NCCL</name> | <name>STAR</name></expr>:
<expr_stmt><expr><name>neg</name> = 1</expr>;</expr_stmt>
</case><case>case <expr><name>CCL</name> | <name>STAR</name></expr>:
<expr_stmt><expr><name>curlp</name> = <name>lp</name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>c</name> = *<name>lp</name>++</expr>;</expr_stmt>
}</block> while <condition>(<expr>((<name>c</name> &amp; 0200) == 0 &amp;&amp; <call><name>ISTHERE</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>) ^ <name>neg</name></expr>)</condition>;</do>
<expr_stmt><expr><name>ep</name> += 16</expr>;</expr_stmt>
<goto>goto <name>star</name>;</goto>
<label><name>star</name>:</label>
<do>do <block>{
<if>if <condition>(<expr>--<name>lp</name> == <name><name>vars</name>-&gt;<name>locs</name></name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><call><name>_advance</name><argument_list>(<argument><expr><name>lp</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>(1)</expr>;</return></then></if>
}</block> while <condition>(<expr><name>lp</name> &gt; <name>curlp</name></expr>)</condition>;</do>
<return>return <expr>(0)</expr>;</return>
</case>}</block></switch>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>getrnge</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>step_vars_storage</name> *</type><name>vars</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>vars</name>-&gt;<name>low</name></name> = *<name>str</name>++ &amp; 0377</expr>;</expr_stmt>
<expr_stmt><expr><name><name>vars</name>-&gt;<name>size</name></name> = ((*<name>str</name> &amp; 0377) == 255)? 20000: (*<name>str</name> &amp;0377) - <name><name>vars</name>-&gt;<name>low</name></name></expr>;</expr_stmt>
}</block></function>
</unit>
