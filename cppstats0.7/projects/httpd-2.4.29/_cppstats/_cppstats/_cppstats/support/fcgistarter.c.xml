<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/support/fcgistarter.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_pools.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_network_io.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_proc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_portable.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>usage_message</name> <init>=
<expr>"usage: fcgistarter -c &lt;command&gt; -p &lt;port&gt; [-i &lt;interface&gt; -N &lt;num&gt;]\n"
"\n"
"If an interface is not specified, any available will be used.\n"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>usage_message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>exit_error</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>func</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"%s: %s\n"</expr></argument>,
<argument><expr><name>func</name></expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>infd</name></decl>, *<decl><type ref="prev"/><name>skwrapper</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>skaddr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>gopt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>skt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_proc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_to_start</name> <init>= <expr>1</expr></init>, <name>port</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>interface</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_app_initialize</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>gopt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
}</block></then></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>opt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>gopt</name></expr></argument>, <argument><expr>"c:p:i:N:"</expr></argument>, <argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{
<case>case <expr>'c'</expr>:
<expr_stmt><expr><name>command</name> = <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name>port</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>port</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<expr_stmt><expr><name>interface</name> = <name>arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'N'</expr>:
<expr_stmt><expr><name>num_to_start</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>! <name>num_to_start</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><default>default:
<break>break;</break>
</default>}</block></switch>
}</block></else></if></else></if>
}</block></for>
<if>if <condition>(<expr>! <name>command</name> || ! <name>port</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>skaddr</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_sockaddr_info_get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>skt</name></expr></argument>, <argument><expr><name><name>skaddr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>APR_PROTO_TCP</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_socket_create"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>skt</name></expr></argument>, <argument><expr><name>APR_SO_REUSEADDR</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_socket_opt_set(APR_SO_REUSEADDR)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr><name>skt</name></expr></argument>, <argument><expr><name>skaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_socket_bind"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_listen</name><argument_list>(<argument><expr><name>skt</name></expr></argument>, <argument><expr>1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_socket_listen"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_detach</name><argument_list>(<argument><expr><name>APR_PROC_DETACH_DAEMONIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_proc_detach"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> "Please implement me."</cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr>--<name>num_to_start</name> &gt;= 0</expr>)</condition> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_fork</name><argument_list>(<argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_INCHILD</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_os_file_t</name></type> <name>oft</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_sock_t</name></type> <name>oskt</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>infd</name></expr></argument>, <argument><expr>&amp;<name>oft</name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name>oskt</name></expr></argument>, <argument><expr><name>skt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>skwrapper</name></expr></argument>, <argument><expr>&amp;<name>oskt</name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_dup2</name><argument_list>(<argument><expr><name>infd</name></expr></argument>, <argument><expr><name>skwrapper</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>execl</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_INPARENT</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>num_to_start</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>skt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>exit_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr>"apr_proc_fork"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
