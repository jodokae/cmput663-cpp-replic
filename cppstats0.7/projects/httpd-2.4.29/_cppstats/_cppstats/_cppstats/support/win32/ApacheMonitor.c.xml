<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/support/win32/ApacheMonitor.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_WIN32_WINNT</name></cpp:macro> <cpp:value>0x0500</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>STRICT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRICT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OEMRESOURCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OEMRESOURCE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> &amp;&amp; <name>_MSC_VER</name> &gt;= 1400</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_DEPRECATE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windowsx.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;commctrl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;objbase.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;shlobj.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;WtsApi32.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tchar.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ApacheMonitor.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AM_STRINGIFY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AM_STRINGIFY</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>AM_STRINGIFY_HELPER(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AM_STRINGIFY_HELPER</name><parameter_list>(<param><type><name>n</name></type></param>)</parameter_list></cpp:macro> <cpp:value>#n</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_VERSION_WINNT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OS_VERSION_WIN2K</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_APACHE_SERVICES</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_APACHE_COMPUTERS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_TRAYMESSAGE</name></cpp:macro> <cpp:value>(WM_APP+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_UPDATEMESSAGE</name></cpp:macro> <cpp:value>(WM_USER+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_MANAGEMESSAGE</name></cpp:macro> <cpp:value>(WM_USER+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_TIMER_REFRESH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WM_TIMER_RESCAN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVICE_APACHE_RESTART</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XBITMAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YBITMAP</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LOADSTRING</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REFRESH_TIME</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESCAN_TIME</name></cpp:macro> <cpp:value>20000</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>_st_APACHE_SERVICE</name> <block>{
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>szServiceName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>szDisplayName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>szDescription</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>szImagePath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>szComputerName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPid</name></decl>;</decl_stmt>
}</block></struct></type> <name>ST_APACHE_SERVICE</name>;</typedef>
<typedef>typedef <type><struct>struct <name>_st_MONITORED_COMPUTERS</name> <block>{
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>szComputerName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hRegistry</name></decl>;</decl_stmt>
}</block></struct></type> <name>ST_MONITORED_COMP</name>;</typedef>
<decl_stmt><decl><type><name>HINSTANCE</name></type> <name>g_hInstance</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> *</type><name>g_szTitle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name> *</type><name>g_szWindowClass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HICON</name></type> <name>g_icoStop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HICON</name></type> <name>g_icoRun</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>UINT</name></type> <name>g_bUiTaskbarCreated</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>g_dwOSVersion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>g_bDlgServiceOn</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>g_bConsoleRun</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_APACHE_SERVICE</name></type> <name><name>g_stServices</name><index>[<expr><name>MAX_APACHE_SERVICES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ST_MONITORED_COMP</name></type> <name><name>g_stComputers</name><index>[<expr><name>MAX_APACHE_COMPUTERS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>g_hBmpStart</name></decl>, <decl><type ref="prev"/><name>g_hBmpStop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HBITMAP</name></type> <name>g_hBmpPicture</name></decl>, <decl><type ref="prev"/><name>g_hBmpOld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>g_bRescanServices</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>g_hwndServiceDlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>g_hwndMain</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>g_hwndStdoutList</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>g_hwndConnectDlg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>g_hCursorHourglass</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HCURSOR</name></type> <name>g_hCursorArrow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LANGID</name></type> <name>g_LangID</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>g_stcSection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPTSTR</name></type> <name>g_szLocalHost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name> *</type><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_LAST</name> - <name>IDS_MSG_FIRST</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>am_ClearServicesSt</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>MAX_APACHE_SERVICES</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDisplayName</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDisplayName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDescription</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szImagePath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szImagePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_stServices</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ST_APACHE_SERVICE</name></expr></argument>)</argument_list></sizeof> * <name>MAX_APACHE_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>am_ClearComputersSt</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>MAX_APACHE_COMPUTERS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>hRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_stComputers</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ST_MONITORED_COMP</name></expr></argument>)</argument_list></sizeof> * <name>MAX_APACHE_COMPUTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>BOOL</name></type> <name>am_IsComputerConnected</name><parameter_list>(<param><decl><type><name>LPTSTR</name></type> <name>szComputerName</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>, <argument><expr><name>szComputerName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>am_DisconnectComputer</name><parameter_list>(<param><decl><type><name>LPTSTR</name></type> <name>szComputerName</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>j</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>, <argument><expr><name>szComputerName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>hRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = <name>i</name></expr>;</init> <condition><expr><name>j</name> &lt; <name>MAX_APACHE_COMPUTERS</name> - 1</expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr><name>j</name></expr>]</index></name>.<name>szComputerName</name>= <name><name>g_stComputers</name><index>[<expr><name>j</name>+1</expr>]</index></name>.<name>szComputerName</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr><name>j</name></expr>]</index></name>.<name>hRegistry</name> = <name><name>g_stComputers</name><index>[<expr><name>j</name>+1</expr>]</index></name>.<name>hRegistry</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr><name>j</name></expr>]</index></name>.<name>szComputerName</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr><name>j</name></expr>]</index></name>.<name>hRegistry</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>ErrorMessage</name><parameter_list>(<param><decl><type><name>LPCTSTR</name></type> <name>szError</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>bFatal</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LPVOID</name></type> <name>lpMsgBuf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>szError</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>szError</name></expr></argument>, <argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_ERROR</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>MB_OK</name> | (<name>bFatal</name> ? <name>MB_ICONERROR</name> : <name>MB_ICONEXCLAMATION</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>FormatMessage</name><argument_list>(<argument><expr><name>FORMAT_MESSAGE_ALLOCATE_BUFFER</name> |
<name>FORMAT_MESSAGE_FROM_SYSTEM</name> |
<name>FORMAT_MESSAGE_IGNORE_INSERTS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>g_LangID</name></expr></argument>,
<argument><expr>(<name>LPTSTR</name>) &amp;<name>lpMsgBuf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>MessageBox</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>LPCTSTR</name>)<name>lpMsgBuf</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_ERROR</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>MB_OK</name> | (<name>bFatal</name> ? <name>MB_ICONERROR</name> : <name>MB_ICONEXCLAMATION</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LocalFree</name><argument_list>(<argument><expr><name>lpMsgBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>bFatal</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>am_RespawnAsUserAdmin</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwnd</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>op</name></decl></param>, <param><decl><type><name>LPCTSTR</name></type> <name>szService</name></decl></param>,
<param><decl><type><name>LPCTSTR</name></type> <name>szComputerName</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>args</name><index>[<expr><name>MAX_PATH</name> + <name>MAX_COMPUTERNAME_LENGTH</name> + 12</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>g_dwOSVersion</name> &lt; <name>OS_VERSION_WIN2K</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVFAILED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call><name>_T</name><argument_list>(<argument><expr>"%d \"%s\" \"%s\""</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>szService</name></expr></argument>,
<argument><expr><name>szComputerName</name> ? <name>szComputerName</name> : <call><name>_T</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ShellExecute</name><argument_list>(<argument><expr><name>hwnd</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"runas"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>__targv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SW_NORMAL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVFAILED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>am_ConnectComputer</name><parameter_list>(<param><decl><type><name>LPTSTR</name></type> <name>szComputerName</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKeyRemote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szTmp</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>, <argument><expr><name>szComputerName</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>i</name> &gt; <name>MAX_APACHE_COMPUTERS</name> - 1</expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>RegConnectRegistry</name><argument_list>(<argument><expr><name>szComputerName</name></expr></argument>, <argument><expr><name>HKEY_LOCAL_MACHINE</name></expr></argument>, <argument><expr>&amp;<name>hKeyRemote</name></expr></argument>)</argument_list></call>
!= <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szTmp</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_ECONNECT</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr><name>i</name></expr>]</index></name>.<name>hRegistry</name> = <name>hKeyRemote</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><name>LPTSTR</name></type> <name>GetStringRes</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>TCHAR</name></type> <name><name>buffer</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>LoadString</name><argument_list>(<argument><expr><call><name>GetModuleHandle</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>buffer</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>GetSystemOSVersion</name><parameter_list>(<param><decl><type><name>LPDWORD</name></type> <name>dwVersion</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>OSVERSIONINFO</name></type> <name>osvi</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>osvi</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>osvi</name>.<name>dwOSVersionInfoSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>OSVERSIONINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>GetVersionEx</name><argument_list>(<argument><expr>&amp;<name>osvi</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>osvi</name>.<name>dwPlatformId</name></name></expr>)</condition> <block>{
<case>case <expr><name>VER_PLATFORM_WIN32_NT</name></expr>:
<if>if <condition>(<expr><name><name>osvi</name>.<name>dwMajorVersion</name></name> &gt;= 5</expr>)</condition><then>
<expr_stmt><expr>*<name>dwVersion</name> = <name>OS_VERSION_WIN2K</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr>*<name>dwVersion</name> = <name>OS_VERSION_WINNT</name></expr>;</expr_stmt></else></if>
<break>break;</break>
</case><case>case <expr><name>VER_PLATFORM_WIN32_WINDOWS</name></expr>:
</case><case>case <expr><name>VER_PLATFORM_WIN32s</name></expr>:
</case><default>default:
<expr_stmt><expr>*<name>dwVersion</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>VOID</name></type> <name>ShowNotifyIcon</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hWnd</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwMessage</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>NOTIFYICONDATA</name></type> <name>nid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init>, <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>nid</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nid</name>.<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>NOTIFYICONDATA</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nid</name>.<name>hWnd</name></name> = <name>hWnd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nid</name>.<name>uID</name></name> = 0xFF</expr>;</expr_stmt>
<expr_stmt><expr><name><name>nid</name>.<name>uFlags</name></name> = <name>NIF_ICON</name> | <name>NIF_MESSAGE</name> | <name>NIF_TIP</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>nid</name>.<name>uCallbackMessage</name></name> = <name>WM_TRAYMESSAGE</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>dwPid</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>n</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>dwMessage</name> != <name>NIM_DELETE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>nid</name>.<name>hIcon</name></name> = <name>g_icoRun</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>nid</name>.<name>hIcon</name></name> = <name>g_icoStop</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>nid</name>.<name>hIcon</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>n</name> == <name>i</name> &amp;&amp; <name>n</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name><name>nid</name>.<name>szTip</name></name></expr></argument>, <argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_RUNNINGALL</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>n</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name><name>nid</name>.<name>szTip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>nid</name>.<name>szTip</name></name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_RUNNING</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name><name>nid</name>.<name>szTip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>nid</name>.<name>szTip</name></name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_RUNNINGNONE</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name><name>nid</name>.<name>szTip</name></name></expr></argument>, <argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_NOSERVICES</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><call><name>Shell_NotifyIcon</name><argument_list>(<argument><expr><name>dwMessage</name></expr></argument>, <argument><expr>&amp;<name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>appendMenuItem</name><parameter_list>(<param><decl><type><name>HMENU</name></type> <name>hMenu</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>uMenuId</name></decl></param>, <param><decl><type><name>LPTSTR</name></type> <name>szName</name></decl></param>,
<param><decl><type><name>BOOL</name></type> <name>fDefault</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>fEnabled</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MENUITEMINFO</name></type> <name>mii</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>mii</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MENUITEMINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>MENUITEMINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>fMask</name></name> = <name>MIIM_ID</name> | <name>MIIM_TYPE</name> | <name>MIIM_STATE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>_tcslen</name><argument_list>(<argument><expr><name>szName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mii</name>.<name>fType</name></name> = <name>MFT_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>wID</name></name> = <name>uMenuId</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fDefault</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mii</name>.<name>fState</name></name> = <name>MFS_DEFAULT</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>fEnabled</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mii</name>.<name>fState</name></name> |= <name>MFS_DISABLED</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>mii</name>.<name>dwTypeData</name></name> = <name>szName</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>mii</name>.<name>fType</name></name> = <name>MFT_SEPARATOR</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>uMenuId</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>appendServiceMenu</name><parameter_list>(<param><decl><type><name>HMENU</name></type> <name>hMenu</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>uMenuId</name></decl></param>,
<param><decl><type><name>LPTSTR</name></type> <name>szServiceName</name></decl></param>, <param><decl><type><name>BOOL</name></type> <name>fRunning</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>MENUITEMINFO</name></type> <name>mii</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HMENU</name></type> <name>smh</name></decl>;</decl_stmt>
<expr_stmt><expr><name>smh</name> = <call><name>CreatePopupMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>smh</name></expr></argument>, <argument><expr><name>IDM_SM_START</name> + <name>uMenuId</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SSTART</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>!<name>fRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>smh</name></expr></argument>, <argument><expr><name>IDM_SM_STOP</name> + <name>uMenuId</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SSTOP</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>fRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>smh</name></expr></argument>, <argument><expr><name>IDM_SM_RESTART</name> + <name>uMenuId</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRESTART</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>fRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>mii</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MENUITEMINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>MENUITEMINFO</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>fMask</name></name> = <name>MIIM_ID</name> | <name>MIIM_TYPE</name> | <name>MIIM_STATE</name> | <name>MIIM_SUBMENU</name>
| <name>MIIM_CHECKMARKS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>fType</name></name> = <name>MFT_STRING</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>wID</name></name> = <name>uMenuId</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>hbmpChecked</name></name> = <name>g_hBmpStart</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>hbmpUnchecked</name></name> = <name>g_hBmpStop</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>dwTypeData</name></name> = <name>szServiceName</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>hSubMenu</name></name> = <name>smh</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mii</name>.<name>fState</name></name> = <name>fRunning</name> ? <name>MFS_CHECKED</name> : <name>MFS_UNCHECKED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InsertMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDM_SM_SERVICE</name> + <name>uMenuId</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>&amp;<name>mii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>ShowTryPopupMenu</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hWnd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HMENU</name></type> <name>hMenu</name> <init>= <expr><call><name>CreatePopupMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hMenu</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDM_RESTORE</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_MNUSHOW</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDC_SMANAGER</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_MNUSERVICES</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>appendMenuItem</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>IDM_EXIT</name></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_MNUEXIT</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TrackPopupMenu</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>TPM_LEFTALIGN</name>|<name>TPM_RIGHTBUTTON</name></expr></argument>,
<argument><expr><name><name>pt</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>pt</name>.<name>y</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyMenu</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>ShowTryServicesMenu</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hWnd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HMENU</name></type> <name>hMenu</name> <init>= <expr><call><name>CreatePopupMenu</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>POINT</name></type> <name>pt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hMenu</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>appendServiceMenu</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDisplayName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>dwPid</name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetForegroundWindow</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>GetCursorPos</name><argument_list>(<argument><expr>&amp;<name>pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>TrackPopupMenu</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>, <argument><expr><name>TPM_LEFTALIGN</name>|<name>TPM_RIGHTBUTTON</name></expr></argument>,
<argument><expr><name><name>pt</name>.<name>x</name></name></expr></argument>, <argument><expr><name><name>pt</name>.<name>y</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyMenu</name><argument_list>(<argument><expr><name>hMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><name>BOOL</name></type> <name>CenterWindow</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hwndChild</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>RECT</name></type> <name>rChild</name></decl>, <decl><type ref="prev"/><name>rWorkArea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wChild</name></decl>, <decl><type ref="prev"/><name>hChild</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xNew</name></decl>, <decl><type ref="prev"/><name>yNew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>bResult</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>GetWindowRect</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>, <argument><expr>&amp;<name>rChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wChild</name> = <name><name>rChild</name>.<name>right</name></name> - <name><name>rChild</name>.<name>left</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>hChild</name> = <name><name>rChild</name>.<name>bottom</name></name> - <name><name>rChild</name>.<name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bResult</name> = <call><name>SystemParametersInfo</name><argument_list>(<argument><expr><name>SPI_GETWORKAREA</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RECT</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr>&amp;<name>rWorkArea</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>bResult</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>rWorkArea</name>.<name>left</name></name> = <name><name>rWorkArea</name>.<name>top</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>rWorkArea</name>.<name>right</name></name> = <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rWorkArea</name>.<name>bottom</name></name> = <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>xNew</name> = (<name><name>rWorkArea</name>.<name>right</name></name> - <name>wChild</name>) / 2</expr>;</expr_stmt>
<expr_stmt><expr><name>yNew</name> = (<name><name>rWorkArea</name>.<name>bottom</name></name> - <name>hChild</name>) / 2</expr>;</expr_stmt>
<return>return <expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hwndChild</name></expr></argument>, <argument><expr><name>HWND_TOP</name></expr></argument>, <argument><expr><name>xNew</name></expr></argument>, <argument><expr><name>yNew</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SWP_NOSIZE</name> | <name>SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addListBoxItem</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hDlg</name></decl></param>, <param><decl><type><name>LPTSTR</name></type> <name>lpStr</name></decl></param>, <param><decl><type><name>HBITMAP</name></type> <name>hBmp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LRESULT</name></type> <name>nItem</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nItem</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>LB_ADDSTRING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPARAM</name>)<name>lpStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>LB_SETITEMDATA</name></expr></argument>, <argument><expr><name>nItem</name></expr></argument>, <argument><expr>(<name>LPARAM</name>)<name>hBmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addListBoxString</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hListBox</name></decl></param>, <param><decl><type><name>LPTSTR</name></type> <name>lpStr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nItems</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>g_bDlgServiceOn</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr>++<name>nItems</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nItems</name> &gt; <name>MAX_LOADSTRING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_RESETCONTENT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nItems</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ListBox_SetCurSel</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>,
<argument><expr><call><name>ListBox_AddString</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>lpStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>BOOL</name></type> <name>ApacheManageService</name><parameter_list>(<param><decl><type><name>LPCTSTR</name></type> <name>szServiceName</name></decl></param>, <param><decl><type><name>LPCTSTR</name></type> <name>szImagePath</name></decl></param>,
<param><decl><type><name>LPTSTR</name></type> <name>szComputerName</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>dwCommand</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szMsg</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>retValue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS</name></type> <name>schSStatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ticks</name></decl>;</decl_stmt>
<expr_stmt><expr><name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>szComputerName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SC_MANAGER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>schSCManager</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVFAILED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>szServiceName</name></expr></argument>,
<argument><expr><name>SERVICE_QUERY_STATUS</name> | <name>SERVICE_START</name> |
<name>SERVICE_STOP</name> | <name>SERVICE_USER_DEFINED_CONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>schService</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>szImagePath</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>am_RespawnAsUserAdmin</name><argument_list>(<argument><expr><name>g_hwndMain</name></expr></argument>, <argument><expr><name>dwCommand</name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>, <argument><expr><name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVFAILED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>retValue</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_bConsoleRun</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>g_hCursorHourglass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>dwCommand</name></expr>)</condition> <block>{
<case>case <expr><name>SERVICE_CONTROL_STOP</name></expr>:
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szMsg</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVSTOP</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addListBoxString</name><argument_list>(<argument><expr><name>g_hwndStdoutList</name></expr></argument>, <argument><expr><name>szMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ControlService</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr><name>SERVICE_CONTROL_STOP</name></expr></argument>,
<argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>schSStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_STOP_PENDING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if>
}</block></while>
}</block></then></if>
<if>if <condition>(<expr><call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>schSStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_STOPPED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retValue</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szMsg</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVSTOPPED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addListBoxString</name><argument_list>(<argument><expr><name>g_hwndStdoutList</name></expr></argument>, <argument><expr><name>szMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>SERVICE_CONTROL_CONTINUE</name></expr>:
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szMsg</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVSTART</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addListBoxString</name><argument_list>(<argument><expr><name>g_hwndStdoutList</name></expr></argument>, <argument><expr><name>szMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>StartService</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>schSStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_START_PENDING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if>
}</block></while>
}</block></then></if>
<if>if <condition>(<expr><call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>schSStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_RUNNING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retValue</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szMsg</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVSTARTED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addListBoxString</name><argument_list>(<argument><expr><name>g_hwndStdoutList</name></expr></argument>, <argument><expr><name>szMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>SERVICE_APACHE_RESTART</name></expr>:
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szMsg</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVRESTART</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addListBoxString</name><argument_list>(<argument><expr><name>g_hwndStdoutList</name></expr></argument>, <argument><expr><name>szMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ControlService</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr><name>SERVICE_APACHE_RESTART</name></expr></argument>,
<argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ticks</name> = 60</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>schSStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_START_PENDING</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_bConsoleRun</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>g_hCursorArrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!--<name>ticks</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
}</block></then></if>
<if>if <condition>(<expr><name><name>schSStatus</name>.<name>dwCurrentState</name></name> == <name>SERVICE_RUNNING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retValue</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_sntprintf</name><argument_list>(<argument><expr><name>szMsg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szMsg</name></expr></argument>)</argument_list></sizeof> / <sizeof>sizeof<argument_list>(<argument><expr><name>TCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVRESTARTED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>szServiceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>addListBoxString</name><argument_list>(<argument><expr><name>g_hwndStdoutList</name></expr></argument>, <argument><expr><name>szMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>retValue</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRVFAILED</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>g_bConsoleRun</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>g_hCursorArrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retValue</name></expr>;</return>
}</block></else></if>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>IsServiceRunning</name><parameter_list>(<param><decl><type><name>LPCTSTR</name></type> <name>szServiceName</name></decl></param>, <param><decl><type><name>LPCTSTR</name></type> <name>szComputerName</name></decl></param>,
<param><decl><type><name>LPDWORD</name></type> <name>lpdwPid</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schService</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SC_HANDLE</name></type> <name>schSCManager</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SERVICE_STATUS</name></type> <name>schSStatus</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dwPid</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>schSCManager</name> = <call><name>OpenSCManager</name><argument_list>(<argument><expr><name>szComputerName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>SC_MANAGER_CONNECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>schSCManager</name></expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>schService</name> = <call><name>OpenService</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>, <argument><expr><name>szServiceName</name></expr></argument>,
<argument><expr><name>SERVICE_QUERY_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>schService</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>QueryServiceStatus</name><argument_list>(<argument><expr><name>schService</name></expr></argument>, <argument><expr>&amp;<name>schSStatus</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dwPid</name> = <name><name>schSStatus</name>.<name>dwCurrentState</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>lpdwPid</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>lpdwPid</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>dwPid</name> == <name>SERVICE_RUNNING</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>g_bRescanServices</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>CloseServiceHandle</name><argument_list>(<argument><expr><name>schSCManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>FindRunningServices</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwPid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>rv</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>IsServiceRunning</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>, <argument><expr>&amp;<name>dwPid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dwPid</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>dwPid</name> != <name>dwPid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>dwPid</name> = <name>dwPid</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><name>BOOL</name></type> <name>GetApacheServicesStatus</name><parameter_list>()</parameter_list> <block>{
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szKey</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>achKey</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szImagePath</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szBuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szTmp</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hKey</name></decl>, <decl><type ref="prev"/><name>hSubKey</name></decl>, <decl><type ref="prev"/><name>hKeyRemote</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>retCode</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>, <decl><type ref="prev"/><name>dwKeyType</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwBufLen</name> <init>= <expr><name>MAX_PATH</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>stPos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>computers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>g_bRescanServices</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>am_ClearServicesSt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>g_stComputers</name><index>[<expr><name>computers</name></expr>]</index></name>.<name>szComputerName</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>hKeyRemote</name> = <name><name>g_stComputers</name><index>[<expr><name>computers</name></expr>]</index></name>.<name>hRegistry</name></expr>;</expr_stmt>
<expr_stmt><expr><name>retCode</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hKeyRemote</name></expr></argument>,
<argument><expr><call><name>_T</name><argument_list>(<argument><expr>"System\\CurrentControlSet\\Services\\"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr>&amp;<name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retCode</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>retCode</name> = <name>ERROR_SUCCESS</name></expr>;</init> <condition><expr><name>retCode</name> == <name>ERROR_SUCCESS</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>retCode</name> = <call><name>RegEnumKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>achKey</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retCode</name> == <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>szKey</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"System\\CurrentControlSet\\Services\\"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcscat</name><argument_list>(<argument><expr><name>szKey</name></expr></argument>, <argument><expr><name>achKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name>hKeyRemote</name></expr></argument>, <argument><expr><name>szKey</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>KEY_QUERY_VALUE</name></expr></argument>, <argument><expr>&amp;<name>hSubKey</name></expr></argument>)</argument_list></call> == <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dwBufLen</name> = <name>MAX_PATH</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hSubKey</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"ImagePath"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>dwKeyType</name></expr></argument>, <argument><expr>(<name>LPBYTE</name>)<name>szImagePath</name></expr></argument>, <argument><expr>&amp;<name>dwBufLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>ERROR_SUCCESS</name>
&amp;&amp; (<name>dwKeyType</name> == <name>REG_SZ</name>
|| <name>dwKeyType</name> == <name>REG_EXPAND_SZ</name>)
&amp;&amp; <name>dwBufLen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><name>szImagePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CharLower</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>((<call><name>_tcsstr</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"\\apache"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>NULL</name>)
|| (<call><name>_tcsstr</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"\\httpd"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>NULL</name>))
&amp;&amp; <call><name>_tcsstr</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>".exe"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
&amp;&amp; (<call><name>_tcsstr</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"--ntservice"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>NULL</name>
|| <call><name>_tcsstr</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"-k "</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>NULL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>g_stServices</name><index>[<expr><name>stPos</name></expr>]</index></name>.<name>szServiceName</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>achKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stServices</name><index>[<expr><name>stPos</name></expr>]</index></name>.<name>szImagePath</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szImagePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stServices</name><index>[<expr><name>stPos</name></expr>]</index></name>.<name>szComputerName</name> =
<call><name>_tcsdup</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>computers</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dwBufLen</name> = <name>MAX_PATH</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hSubKey</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"Description"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>dwKeyType</name></expr></argument>, <argument><expr>(<name>LPBYTE</name>)<name>szBuf</name></expr></argument>, <argument><expr>&amp;<name>dwBufLen</name></expr></argument>)</argument_list></call>
== <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>g_stServices</name><index>[<expr><name>stPos</name></expr>]</index></name>.<name>szDescription</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>dwBufLen</name> = <name>MAX_PATH</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name>hSubKey</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"DisplayName"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>dwKeyType</name></expr></argument>, <argument><expr>(<name>LPBYTE</name>)<name>szBuf</name></expr></argument>, <argument><expr>&amp;<name>dwBufLen</name></expr></argument>)</argument_list></call>
== <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>g_stComputers</name><index>[<expr><name>computers</name></expr>]</index></name>
.<name>szComputerName</name></expr></argument>, <argument><expr><name>g_szLocalHost</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name><name>g_stComputers</name><index>[<expr><name>computers</name></expr>]</index></name>
.<name>szComputerName</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcscat</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"@"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcscat</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name>szBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name>szBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>g_stServices</name><index>[<expr><name>stPos</name></expr>]</index></name>.<name>szDisplayName</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>stPos</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stPos</name> &gt;= <name>MAX_APACHE_SERVICES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>retCode</name> = !<name>ERROR_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hSubKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr>++<name>computers</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>FindRunningServices</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>
<function><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>ConnectDlgProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hDlg</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>message</name></decl></param>,
<param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szCmp</name><index>[<expr><name>MAX_COMPUTERNAME_LENGTH</name>+4</expr>]</index></name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>message</name></expr>)</condition> <block>{
<case>case <expr><name>WM_INITDIALOG</name></expr>:
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndConnectDlg</name> = <name>hDlg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CenterWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_COMPUTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_COMMAND</name></expr>:
<switch>switch <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>IDOK</name></expr>:
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"\\\\"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_COMPUTER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>WM_GETTEXT</name></expr></argument>,
<argument><expr>(<name>WPARAM</name>) <name>MAX_COMPUTERNAME_LENGTH</name></expr></argument>,
<argument><expr>(<name>LPARAM</name>) <name>szCmp</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcsupr</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>_tcslen</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></call> &lt; 3</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>am_ConnectComputer</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>g_hwndMain</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>WM_TIMER_RESCAN</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case><case>case <expr><name>IDCANCEL</name></expr>:
<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_LBROWSE</name></expr>: <block>{
<decl_stmt><decl><type><name>BROWSEINFO</name></type> <name>bi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ITEMIDLIST</name> *</type><name>il</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPMALLOC</name></type> <name>pMalloc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>bi</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BROWSEINFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SHGetSpecialFolderLocation</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>CSIDL_NETWORK</name></expr></argument>, <argument><expr>&amp;<name>il</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>lpszTitle</name></name> = <call><name>_T</name><argument_list>(<argument><expr>"ApacheMonitor :\nSelect Network Computer!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>pszDisplayName</name></name> = <name>szCmp</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>hwndOwner</name></name> = <name>hDlg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>ulFlags</name></name> = <name>BIF_BROWSEFORCOMPUTER</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>lpfn</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>lParam</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>iImage</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>bi</name>.<name>pidlRoot</name></name> = <name>il</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SHBrowseForFolder</name><argument_list>(<argument><expr>&amp;<name>bi</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_COMPUTER</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>WM_SETTEXT</name></expr></argument>,
<argument><expr>(<name>WPARAM</name>) <name>NULL</name></expr></argument>, <argument><expr>(<name>LPARAM</name>) <name>szCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>SHGetMalloc</name><argument_list>(<argument><expr>&amp;<name>pMalloc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>pMalloc</name>-&gt;<name>lpVtbl</name>-&gt;<name>Free</name></name><argument_list>(<argument><expr><name>pMalloc</name></expr></argument>, <argument><expr><name>il</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>pMalloc</name>-&gt;<name>lpVtbl</name>-&gt;<name>Release</name></name><argument_list>(<argument><expr><name>pMalloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>WM_QUIT</name></expr>:
</case><case>case <expr><name>WM_CLOSE</name></expr>:
<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><default>default:
<return>return <expr><name>FALSE</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>ServiceDlgProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hDlg</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>message</name></decl></param>,
<param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szBuf</name><index>[<expr><name>MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>hListBox</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HWND</name></type> <name>hStatusBar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TEXTMETRIC</name></type> <name>tm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HDC</name></type> <name>hdcMem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>RECT</name></type> <name>rcBitmap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LRESULT</name></type> <name>nItem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPMEASUREITEMSTRUCT</name></type> <name>lpmis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPDRAWITEMSTRUCT</name></type> <name>lpdis</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>szBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>message</name></expr>)</condition> <block>{
<case>case <expr><name>WM_INITDIALOG</name></expr>:
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>SW_HIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndServiceDlg</name> = <name>hDlg</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>g_szTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SDISCONN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SSTART</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SSTOP</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SRESTART</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SMANAGER</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_SERVICES</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SCONNECT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_CONNECT</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowText</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDCANCEL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_OK</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndStdoutList</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_STDOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hStatusBar</name> = <call><name>CreateStatusWindow</name><argument_list>(<argument><expr>0x0800
| <name>WS_CHILD</name> | <name>WS_VISIBLE</name></expr></argument>,
<argument><expr><call><name>_T</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_STATBAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetApacheServicesStatus</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>addListBoxItem</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDisplayName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>dwPid</name> == 0 ? <name>g_hBmpStop</name>
: <name>g_hBmpStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>CenterWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShowWindow</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>SW_SHOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_SETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
<break>break;</break>
</case><case>case <expr><name>WM_MANAGEMESSAGE</name></expr>:
<expr_stmt><expr><call><name>ApacheManageService</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>szServiceName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>szImagePath</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>szComputerName</name></expr></argument>,
<argument><expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
<break>break;</break>
</case><case>case <expr><name>WM_UPDATEMESSAGE</name></expr>:
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_RESETCONTENT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hStatusBar</name></expr></argument>, <argument><expr><name>SB_SETTEXT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPARAM</name>)<call><name>_T</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SDISCONN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>addListBoxItem</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szDisplayName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><name>i</name></expr>]</index></name>.<name>dwPid</name> == 0 ? <name>g_hBmpStop</name> : <name>g_hBmpStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_SETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SWP_NOSIZE</name> | <name>SWP_NOMOVE</name> | <name>SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>HWND_NOTOPMOST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SWP_NOSIZE</name> | <name>SWP_NOMOVE</name> | <name>SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
<break>break;</break>
</case><case>case <expr><name>WM_MEASUREITEM</name></expr>:
<expr_stmt><expr><name>lpmis</name> = (<name>LPMEASUREITEMSTRUCT</name>) <name>lParam</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>lpmis</name>-&gt;<name>itemHeight</name></name> = <name>YBITMAP</name></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_SETCURSOR</name></expr>:
<if>if <condition>(<expr><name>g_bConsoleRun</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>g_hCursorHourglass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SetCursor</name><argument_list>(<argument><expr><name>g_hCursorArrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_DRAWITEM</name></expr>:
<expr_stmt><expr><name>lpdis</name> = (<name>LPDRAWITEMSTRUCT</name>) <name>lParam</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lpdis</name>-&gt;<name>itemID</name></name> == -1</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>lpdis</name>-&gt;<name>itemAction</name></name></expr>)</condition> <block>{
<case>case <expr><name>ODA_FOCUS</name></expr>:
</case><case>case <expr><name>ODA_SELECT</name></expr>:
</case><case>case <expr><name>ODA_DRAWENTIRE</name></expr>:
<expr_stmt><expr><name>g_hBmpPicture</name> = (<name>HBITMAP</name>)<call><name>SendMessage</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hwndItem</name></name></expr></argument>,
<argument><expr><name>LB_GETITEMDATA</name></expr></argument>,
<argument><expr><name><name>lpdis</name>-&gt;<name>itemID</name></name></expr></argument>, <argument><expr>(<name>LPARAM</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdcMem</name> = <call><name>CreateCompatibleDC</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hBmpOld</name> = <call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name>g_hBmpPicture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BitBlt</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>left</name></name></expr></argument>, <argument><expr><name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>top</name></name></expr></argument>,
<argument><expr><name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>right</name></name> - <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>left</name></name></expr></argument>,
<argument><expr><name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>bottom</name></name> - <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>top</name></name></expr></argument>,
<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SRCCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hwndItem</name></name></expr></argument>, <argument><expr><name>LB_GETTEXT</name></expr></argument>,
<argument><expr><name><name>lpdis</name>-&gt;<name>itemID</name></name></expr></argument>, <argument><expr>(<name>LPARAM</name>) <name>szBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetTextMetrics</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr>&amp;<name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>y</name> = (<name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>bottom</name></name> + <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>top</name></name> - <name><name>tm</name>.<name>tmHeight</name></name>) / 2</expr>;</expr_stmt>
<expr_stmt><expr><call><name>SelectObject</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>, <argument><expr><name>g_hBmpOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteDC</name><argument_list>(<argument><expr><name>hdcMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcBitmap</name>.<name>left</name></name> = <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>left</name></name> + <name>XBITMAP</name> + 2</expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcBitmap</name>.<name>top</name></name> = <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>top</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcBitmap</name>.<name>right</name></name> = <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>right</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rcBitmap</name>.<name>bottom</name></name> = <name><name>lpdis</name>-&gt;<name>rcItem</name>.<name>top</name></name> + <name>YBITMAP</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>lpdis</name>-&gt;<name>itemState</name></name> &amp; <name>ODS_SELECTED</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>g_hBmpPicture</name> == <name>g_hBmpStop</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_SetStyle</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BS_DEFPUSHBUTTON</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>g_hBmpPicture</name> == <name>g_hBmpStart</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_SetStyle</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BS_DEFPUSHBUTTON</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name><name>lpdis</name>-&gt;<name>itemID</name></name></expr>]</index></name>.<name>szComputerName</name></expr></argument>,
<argument><expr><name>g_szLocalHost</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SDISCONN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SDISCONN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>g_stServices</name><index>[<expr><name><name>lpdis</name>-&gt;<name>itemID</name></name></expr>]</index></name>.<name>szDescription</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hStatusBar</name></expr></argument>, <argument><expr><name>SB_SETTEXT</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>(<name>LPARAM</name>)<name><name>g_stServices</name><index>[<expr><name><name>lpdis</name>-&gt;<name>itemID</name></name></expr>]</index></name>.<name>szDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hStatusBar</name></expr></argument>, <argument><expr><name>SB_SETTEXT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPARAM</name>)<call><name>_T</name><argument_list>(<argument><expr>""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>lpdis</name>-&gt;<name>itemState</name></name> &amp; <name>ODS_FOCUS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetTextColor</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_HIGHLIGHTTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBkColor</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_HIGHLIGHT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr>&amp;<name>rcBitmap</name></expr></argument>, <argument><expr><call>(<name>HBRUSH</name>)<argument_list>(<argument><expr><name>COLOR_HIGHLIGHT</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SetTextColor</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_INACTIVECAPTIONTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBkColor</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_INACTIVECAPTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr>&amp;<name>rcBitmap</name></expr></argument>, <argument><expr><call>(<name>HBRUSH</name>)<argument_list>(<argument><expr><name>COLOR_INACTIVECAPTION</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SetTextColor</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_MENUTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetBkColor</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><call><name>GetSysColor</name><argument_list>(<argument><expr><name>COLOR_WINDOW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>FillRect</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr>&amp;<name>rcBitmap</name></expr></argument>, <argument><expr><call>(<name>HBRUSH</name>)<argument_list>(<argument><expr><name>COLOR_WINDOW</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>TextOut</name><argument_list>(<argument><expr><name><name>lpdis</name>-&gt;<name>hDC</name></name></expr></argument>, <argument><expr><name>XBITMAP</name> + 6</expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>szBuf</name></expr></argument>, <argument><expr>(<name>int</name>)<call><name>_tcslen</name><argument_list>(<argument><expr><name>szBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>WM_COMMAND</name></expr>:
<switch>switch <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>IDL_SERVICES</name></expr>:
<switch>switch <condition>(<expr><call><name>HIWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>LBN_DBLCLK</name></expr>:
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nItem</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nItem</name> != <name>LB_ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>g_hBmpPicture</name> = (<name>HBITMAP</name>)<call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>,
<argument><expr><name>LB_GETITEMDATA</name></expr></argument>,
<argument><expr><name>nItem</name></expr></argument>, <argument><expr>(<name>LPARAM</name>) 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_hBmpPicture</name> == <name>g_hBmpStop</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>WM_MANAGEMESSAGE</name></expr></argument>, <argument><expr><name>nItem</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>WM_MANAGEMESSAGE</name></expr></argument>, <argument><expr><name>nItem</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>IDCANCEL</name></expr>:
<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_SSTART</name></expr>:
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nItem</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nItem</name> != <name>LB_ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>WM_MANAGEMESSAGE</name></expr></argument>, <argument><expr><name>nItem</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_SSTOP</name></expr>:
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nItem</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nItem</name> != <name>LB_ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>WM_MANAGEMESSAGE</name></expr></argument>, <argument><expr><name>nItem</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SSTOP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_SRESTART</name></expr>:
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nItem</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nItem</name> != <name>LB_ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>WM_MANAGEMESSAGE</name></expr></argument>, <argument><expr><name>nItem</name></expr></argument>,
<argument><expr><name>SERVICE_APACHE_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Button_Enable</name><argument_list>(<argument><expr><call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDC_SRESTART</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_SMANAGER</name></expr>:
<if>if <condition>(<expr><name>g_dwOSVersion</name> &gt;= <name>OS_VERSION_WIN2K</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ShellExecute</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"open"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"services.msc"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"/s"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SW_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>WinExec</name><argument_list>(<argument><expr>"Control.exe SrvMgr.cpl Services"</expr></argument>, <argument><expr><name>SW_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_SCONNECT</name></expr>:
<expr_stmt><expr><call><name>DialogBox</name><argument_list>(<argument><expr><name>g_hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_DLGCONNECT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hDlg</name></expr></argument>, <argument><expr>(<name>DLGPROC</name>)<name>ConnectDlgProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDC_SDISCONN</name></expr>:
<expr_stmt><expr><name>hListBox</name> = <call><name>GetDlgItem</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>IDL_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nItem</name> = <call><name>SendMessage</name><argument_list>(<argument><expr><name>hListBox</name></expr></argument>, <argument><expr><name>LB_GETCURSEL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nItem</name> != <name>LB_ERR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>am_DisconnectComputer</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><name>nItem</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SendMessage</name><argument_list>(<argument><expr><name>g_hwndMain</name></expr></argument>, <argument><expr><name>WM_TIMER</name></expr></argument>, <argument><expr><name>WM_TIMER_RESCAN</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>TRUE</name></expr>;</return>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>WM_SIZE</name></expr>:
<switch>switch <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>SIZE_MINIMIZED</name></expr>:
<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
<break>break;</break>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>WM_QUIT</name></expr>:
</case><case>case <expr><name>WM_CLOSE</name></expr>:
<expr_stmt><expr><call><name>EndDialog</name><argument_list>(<argument><expr><name>hDlg</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><default>default:
<return>return <expr><name>FALSE</name></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>LRESULT</name> <name>CALLBACK</name></type> <name>WndProc</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>hWnd</name></decl></param>, <param><decl><type><name>UINT</name></type> <name>message</name></decl></param>,
<param><decl><type><name>WPARAM</name></type> <name>wParam</name></decl></param>, <param><decl><type><name>LPARAM</name></type> <name>lParam</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>message</name> == <name>g_bUiTaskbarCreated</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>message</name></expr>)</condition> <block>{
<case>case <expr><name>WM_CREATE</name></expr>:
<expr_stmt><expr><call><name>GetApacheServicesStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_ADD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>WM_TIMER_REFRESH</name></expr></argument>, <argument><expr><name>REFRESH_TIME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetTimer</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>WM_TIMER_RESCAN</name></expr></argument>, <argument><expr><name>RESCAN_TIME</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>WM_TIMER</name></expr>:
<switch>switch <condition>(<expr><name>wParam</name></expr>)</condition> <block>{
<case>case <expr><name>WM_TIMER_RESCAN</name></expr>: <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nPrev</name> <init>= <expr>0</expr></init>, <name>nNew</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr>&amp;<name>g_stcSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>FindRunningServices</name><argument_list>()</argument_list></call> || <name>g_bRescanServices</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_hwndServiceDlg</name></expr>)</condition><then>
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>, <argument><expr><name>WM_UPDATEMESSAGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>nPrev</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition>
<expr_stmt><expr>++<name>nPrev</name></expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>GetApacheServicesStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>g_stServices</name><index>[<expr><name>nNew</name></expr>]</index></name>.<name>szServiceName</name> != <name>NULL</name></expr>)</condition>
<expr_stmt><expr>++<name>nNew</name></expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>nPrev</name> != <name>nNew</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_hwndServiceDlg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>, <argument><expr><name>WM_UPDATEMESSAGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr>&amp;<name>g_stcSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><case>case <expr><name>WM_TIMER_REFRESH</name></expr>: <block>{
<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr>&amp;<name>g_stcSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_bRescanServices</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>GetApacheServicesStatus</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_hwndServiceDlg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>, <argument><expr><name>WM_UPDATEMESSAGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>FindRunningServices</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_MODIFY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_hwndServiceDlg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>PostMessage</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>, <argument><expr><name>WM_UPDATEMESSAGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr>&amp;<name>g_stcSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>WM_QUIT</name></expr>:
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>WM_TRAYMESSAGE</name></expr>:
<switch>switch <condition>(<expr><name>lParam</name></expr>)</condition> <block>{
<case>case <expr><name>WM_LBUTTONDBLCLK</name></expr>:
<if>if <condition>(<expr>!<name>g_bDlgServiceOn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>g_bDlgServiceOn</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DialogBox</name><argument_list>(<argument><expr><name>g_hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_DLGSERVICES</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hWnd</name></expr></argument>, <argument><expr>(<name>DLGPROC</name>)<name>ServiceDlgProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_bDlgServiceOn</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndServiceDlg</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>, <argument><expr><name>HWND_TOPMOST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SWP_NOSIZE</name> | <name>SWP_NOMOVE</name> | <name>SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetWindowPos</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>, <argument><expr><name>HWND_NOTOPMOST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>SWP_NOSIZE</name> | <name>SWP_NOMOVE</name> | <name>SWP_SHOWWINDOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>WM_LBUTTONUP</name></expr>:
<expr_stmt><expr><call><name>ShowTryServicesMenu</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>WM_RBUTTONUP</name></expr>:
<expr_stmt><expr><call><name>ShowTryPopupMenu</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<break>break;</break>
</case><case>case <expr><name>WM_COMMAND</name></expr>:
<if>if <condition>(<expr>(<call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> &amp; <name>IDM_SM_START</name>) == <name>IDM_SM_START</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ApacheManageService</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_START</name></expr>]</index></name>.<name>szServiceName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_START</name></expr>]</index></name>.<name>szImagePath</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_START</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_CONTINUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> &amp; <name>IDM_SM_STOP</name>) == <name>IDM_SM_STOP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ApacheManageService</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_STOP</name></expr>]</index></name>.<name>szServiceName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_STOP</name></expr>]</index></name>.<name>szImagePath</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_STOP</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>,
<argument><expr><name>SERVICE_CONTROL_STOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call> &amp; <name>IDM_SM_RESTART</name>) == <name>IDM_SM_RESTART</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ApacheManageService</name><argument_list>(<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_RESTART</name></expr>]</index></name>.<name>szServiceName</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_RESTART</name></expr>]</index></name>.<name>szImagePath</name></expr></argument>,
<argument><expr><name><name>g_stServices</name><index>[<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call>
- <name>IDM_SM_RESTART</name></expr>]</index></name>.<name>szComputerName</name></expr></argument>,
<argument><expr><name>SERVICE_APACHE_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></then></if></else></if></else></if>
<switch>switch <condition>(<expr><call><name>LOWORD</name><argument_list>(<argument><expr><name>wParam</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>IDM_RESTORE</name></expr>:
<if>if <condition>(<expr>!<name>g_bDlgServiceOn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>g_bDlgServiceOn</name> = <name>TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DialogBox</name><argument_list>(<argument><expr><name>g_hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDD_DLGSERVICES</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>hWnd</name></expr></argument>, <argument><expr>(<name>DLGPROC</name>)<name>ServiceDlgProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_bDlgServiceOn</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndServiceDlg</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>IsWindow</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetFocus</name><argument_list>(<argument><expr><name>g_hwndServiceDlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<break>break;</break>
</case><case>case <expr><name>IDC_SMANAGER</name></expr>:
<if>if <condition>(<expr><name>g_dwOSVersion</name> &gt;= <name>OS_VERSION_WIN2K</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ShellExecute</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"open"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"services.msc"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"/s"</expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SW_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>WinExec</name><argument_list>(<argument><expr>"Control.exe SrvMgr.cpl Services"</expr></argument>, <argument><expr><name>SW_NORMAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>TRUE</name></expr>;</return>
</case><case>case <expr><name>IDM_EXIT</name></expr>:
<expr_stmt><expr><call><name>ShowNotifyIcon</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>NIM_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostQuitMessage</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
</case>}</block></switch>
</case><default>default:
<return>return <expr><call><name>DefWindowProc</name><argument_list>(<argument><expr><name>hWnd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>wParam</name></expr></argument>, <argument><expr><name>lParam</name></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>KillAWindow</name><parameter_list>(<param><decl><type><name>HWND</name></type> <name>appwindow</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>appproc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>procid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>postres</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetWindowThreadProcessId</name><argument_list>(<argument><expr><name>appwindow</name></expr></argument>, <argument><expr>&amp;<name>procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr>)</condition><then>
<return>return<expr>(2)</expr>;</return></then></if>
<expr_stmt><expr><name>appproc</name> = <call><name>OpenProcess</name><argument_list>(<argument><expr><name>SYNCHRONIZE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>procid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>postres</name> = <call><name>PostMessage</name><argument_list>(<argument><expr><name>appwindow</name></expr></argument>, <argument><expr><name>WM_COMMAND</name></expr></argument>, <argument><expr><name>IDM_EXIT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>appproc</name> &amp;&amp; <name>postres</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>appproc</name></expr></argument>, <argument><expr>10 * 1000</expr></argument>)</argument_list></call>
== <name>WAIT_OBJECT_0</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>appproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(0)</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>appproc</name></expr>)</condition><then>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>appproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>appproc</name> = <call><name>OpenProcess</name><argument_list>(<argument><expr><name>PROCESS_TERMINATE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>procid</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>TerminateProcess</name><argument_list>(<argument><expr><name>appproc</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>appproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(0)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>appproc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(2)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>KillAllMonitors</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>appwindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exitcode</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>PWTS_PROCESS_INFO</name></type> <name>tsProcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tsProcCount</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>thisProcId</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>appwindow</name> = <call><name>FindWindow</name><argument_list>(<argument><expr><name>g_szWindowClass</name></expr></argument>, <argument><expr><name>g_szTitle</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>exitcode</name> = <call><name>KillAWindow</name><argument_list>(<argument><expr><name>appwindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>g_dwOSVersion</name> &lt; <name>OS_VERSION_WIN2K</name></expr>)</condition><then>
<return>return <expr><name>exitcode</name></expr>;</return></then></if>
<expr_stmt><expr><name>thisProcId</name> = <call><name>GetCurrentProcessId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>WTSEnumerateProcesses</name><argument_list>(<argument><expr><name>WTS_CURRENT_SERVER_HANDLE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr>&amp;<name>tsProcs</name></expr></argument>, <argument><expr>&amp;<name>tsProcCount</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>exitcode</name></expr>;</return></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>tsProcCount</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>tsProcs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pProcessName</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr><call><name>AM_STRINGIFY</name><argument_list>(<argument><expr><name>BIN_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0
&amp;&amp; <name><name>tsProcs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ProcessId</name> != <name>thisProcId</name></expr>)</condition><then>
<expr_stmt><expr><call><name>WTSTerminateProcess</name><argument_list>(<argument><expr><name>WTS_CURRENT_SERVER_HANDLE</name></expr></argument>,
<argument><expr><name><name>tsProcs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>ProcessId</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></for>
<expr_stmt><expr><call><name>WTSFreeMemory</name><argument_list>(<argument><expr><name>tsProcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>exitcode</name></expr>;</return>
}</block></function>
<function><type><name>HWND</name></type> <name>CreateMainWindow</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>HWND</name></type> <name>hWnd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>WNDCLASSEX</name></type> <name>wcex</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>WNDCLASSEX</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>style</name></name> = <name>CS_HREDRAW</name> | <name>CS_VREDRAW</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>lpfnWndProc</name></name> = (<name>WNDPROC</name>)<name>WndProc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>cbClsExtra</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>cbWndExtra</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>hInstance</name></name> = <name>hInstance</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>hIcon</name></name> = (<name>HICON</name>)<call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_APSRVMON</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr>32</expr></argument>, <argument><expr>32</expr></argument>, <argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>hCursor</name></name> = <name>g_hCursorArrow</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>hbrBackground</name></name> = <call>(<name>HBRUSH</name>)<argument_list>(<argument><expr><name>COLOR_WINDOW</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>lpszMenuName</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>lpszClassName</name></name> = <name>g_szWindowClass</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>wcex</name>.<name>hIconSm</name></name> = (<name>HICON</name>)<call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_APSRVMON</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RegisterClassEx</name><argument_list>(<argument><expr>&amp;<name>wcex</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hWnd</name> = <call><name>CreateWindow</name><argument_list>(<argument><expr><name>g_szWindowClass</name></expr></argument>, <argument><expr><name>g_szTitle</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>hWnd</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>int</name> <name>__cdecl</name></type> <name>_setargv</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name> <name>WINAPI</name></type> <name>WinMain</name><parameter_list>(<param><decl><type><name>HINSTANCE</name></type> <name>hInstance</name></decl></param>, <param><decl><type><name>HINSTANCE</name></type> <name>hPrevInstance</name></decl></param>,
<param><decl><type><name>LPSTR</name></type> <name>lpCmdLine</name></decl></param>, <param><decl><type><name>int</name></type> <name>nCmdShow</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szTmp</name><index>[<expr><name>MAX_LOADSTRING</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TCHAR</name></type> <name><name>szCmp</name><index>[<expr><name>MAX_COMPUTERNAME_LENGTH</name>+4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MSG</name></type> <name>msg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HWND</name></type> <name>appwindow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwControl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>d</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>GetSystemOSVersion</name><argument_list>(<argument><expr>&amp;<name>g_dwOSVersion</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>g_LangID</name> = <call><name>GetUserDefaultLangID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>g_LangID</name> &amp; 0xFF) != <name>LANG_ENGLISH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>g_LangID</name> = <call><name>MAKELANGID</name><argument_list>(<argument><expr><name>LANG_NEUTRAL</name></expr></argument>, <argument><expr><name>SUBLANG_NEUTRAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = <name>IDS_MSG_FIRST</name></expr>;</init> <condition><expr><name>i</name> &lt;= <name>IDS_MSG_LAST</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>LoadString</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name>MAX_LOADSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_lpMsg</name><index>[<expr><name>i</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>LoadString</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>IDS_APMONITORTITLE</name></expr></argument>, <argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name>MAX_LOADSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>d</name> = <name>MAX_COMPUTERNAME_LENGTH</name>+1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcscpy</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"\\\\"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>GetComputerName</name><argument_list>(<argument><expr><name>szCmp</name> + 2</expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_tcsupr</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_szLocalHost</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_stComputers</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ST_MONITORED_COMP</name></expr></argument>)</argument_list></sizeof> * <name>MAX_APACHE_COMPUTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr>0</expr>]</index></name>.<name>szComputerName</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>g_stComputers</name><index>[<expr>0</expr>]</index></name>.<name>hRegistry</name> = <name>HKEY_LOCAL_MACHINE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_szTitle</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LoadString</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><name>IDS_APMONITORCLASS</name></expr></argument>, <argument><expr><name>szTmp</name></expr></argument>, <argument><expr><name>MAX_LOADSTRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_szWindowClass</name> = <call><name>_tcsdup</name><argument_list>(<argument><expr><name>szTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>appwindow</name> = <call><name>FindWindow</name><argument_list>(<argument><expr><name>g_szWindowClass</name></expr></argument>, <argument><expr><name>g_szTitle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>UNICODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>__wargv</name> = <call><name>CommandLineToArgvW</name><argument_list>(<argument><expr><call><name>GetCommandLineW</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>&amp;<name>__argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> &amp;&amp; <name>_MSC_VER</name> &lt; 1800</expr></cpp:if>
<expr_stmt><expr><call><name>_setargv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>__argc</name> == 2) &amp;&amp; (<call><name>_tcscmp</name><argument_list>(<argument><expr><name><name>__targv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><call><name>_T</name><argument_list>(<argument><expr>"--kill"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<return>return <expr><call><name>KillAllMonitors</name><argument_list>()</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<name>__argc</name> == 4) &amp;&amp; (<name>g_dwOSVersion</name> &gt;= <name>OS_VERSION_WIN2K</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>dwControl</name> = <call><name>_ttoi</name><argument_list>(<argument><expr><name><name>__targv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>dwControl</name> != <name>SERVICE_CONTROL_CONTINUE</name>) &amp;&amp;
(<name>dwControl</name> != <name>SERVICE_APACHE_RESTART</name>) &amp;&amp;
(<name>dwControl</name> != <name>SERVICE_CONTROL_STOP</name>)</expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>appwindow</name>) != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>KillAWindow</name><argument_list>(<argument><expr><name>appwindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>__argc</name> != 1</expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>appwindow</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ErrorMessage</name><argument_list>(<argument><expr><name><name>g_lpMsg</name><index>[<expr><name>IDS_MSG_APPRUNNING</name> - <name>IDS_MSG_FIRST</name></expr>]</index></name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></then></if></else></if></else></if></else></if>
<expr_stmt><expr><name>g_icoStop</name> = <call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_ICOSTOP</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_icoRun</name> = <call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDI_ICORUN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_ICON</name></expr></argument>, <argument><expr>16</expr></argument>, <argument><expr>16</expr></argument>, <argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hCursorHourglass</name> = <call><name>LoadImage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>OCR_WAIT</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_CURSOR</name></expr></argument>, <argument><expr><name>LR_DEFAULTSIZE</name></expr></argument>,
<argument><expr><name>LR_DEFAULTSIZE</name></expr></argument>, <argument><expr><name>LR_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hCursorArrow</name> = <call><name>LoadImage</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>OCR_NORMAL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_CURSOR</name></expr></argument>, <argument><expr><name>LR_DEFAULTSIZE</name></expr></argument>,
<argument><expr><name>LR_DEFAULTSIZE</name></expr></argument>, <argument><expr><name>LR_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hBmpStart</name> = <call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDB_BMPRUN</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_BITMAP</name></expr></argument>, <argument><expr><name>XBITMAP</name></expr></argument>, <argument><expr><name>YBITMAP</name></expr></argument>,
<argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hBmpStop</name> = <call><name>LoadImage</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>, <argument><expr><call><name>MAKEINTRESOURCE</name><argument_list>(<argument><expr><name>IDB_BMPSTOP</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>IMAGE_BITMAP</name></expr></argument>, <argument><expr><name>XBITMAP</name></expr></argument>, <argument><expr><name>YBITMAP</name></expr></argument>,
<argument><expr><name>LR_DEFAULTCOLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g_stServices</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ST_APACHE_SERVICE</name></expr></argument>)</argument_list></sizeof> * <name>MAX_APACHE_SERVICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CoInitialize</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitCommonControls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hInstance</name> = <name>hInstance</name></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndMain</name> = <call><name>CreateMainWindow</name><argument_list>(<argument><expr><name>hInstance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_bUiTaskbarCreated</name> = <call><name>RegisterWindowMessage</name><argument_list>(<argument><expr><call><name>_T</name><argument_list>(<argument><expr>"TaskbarCreated"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr>&amp;<name>g_stcSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g_hwndServiceDlg</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g_hwndMain</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>__argc</name> == 4) &amp;&amp; (<name>g_dwOSVersion</name> &gt;= <name>OS_VERSION_WIN2K</name>)</expr>)</condition><then>
<expr_stmt><expr><call><name>ApacheManageService</name><argument_list>(<argument><expr><name><name>__targv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>__targv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr><name>dwControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr><call><name>GetMessage</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == <name>TRUE</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>TranslateMessage</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DispatchMessage</name><argument_list>(<argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>am_ClearServicesSt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>am_ClearComputersSt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr>&amp;<name>g_stcSection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>g_icoStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyIcon</name><argument_list>(<argument><expr><name>g_icoRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyCursor</name><argument_list>(<argument><expr><name>g_hCursorHourglass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DestroyCursor</name><argument_list>(<argument><expr><name>g_hCursorArrow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>g_hBmpStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DeleteObject</name><argument_list>(<argument><expr><name>g_hBmpStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CoUninitialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
