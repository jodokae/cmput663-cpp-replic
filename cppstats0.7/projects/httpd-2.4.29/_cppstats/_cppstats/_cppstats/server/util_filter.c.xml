<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/server/util_filter.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_POOL</name></cpp:macro> <cpp:value>apr_hook_global_pool</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INSERT_BEFORE</name><parameter_list>(<param><type><name>f</name></type></param>, <param><type><name>before_this</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((before_this) == NULL || (before_this)-&gt;frec-&gt;ftype &gt; (f)-&gt;frec-&gt;ftype || (before_this)-&gt;r != (f)-&gt;r)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>filter_trie_node</name></type> <name>filter_trie_node</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_trie_node</name> *</type><name>child</name></decl>;</decl_stmt>
}</block></struct></type> <name>filter_trie_child_ptr</name>;</typedef>
<struct>struct <name>filter_trie_node</name> <block>{
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>frec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_trie_child_ptr</name> *</type><name>children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nchildren</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRIE_INITIAL_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>trie_node_link</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>filter_trie_node</name> *</type><name>parent</name></decl></param>,
<param><decl><type><name>filter_trie_node</name> *</type><name>child</name></decl></param>, <param><decl><type><name>int</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>parent</name>-&gt;<name>nchildren</name></name> == <name><name>parent</name>-&gt;<name>size</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>filter_trie_child_ptr</name> *</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>size</name></name> *= 2</expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = (<name>filter_trie_child_ptr</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>size</name></name> *
<sizeof>sizeof<argument_list>(<argument><expr><name>filter_trie_child_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>children</name></name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>nchildren</name></name> *
<sizeof>sizeof<argument_list>(<argument><expr><name>filter_trie_child_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>children</name></name> = <name>new</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>parent</name>-&gt;<name>nchildren</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>c</name> == <name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>c</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &lt; <name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>c</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if></else></if>
}</block></for>
<for>for (<init><expr><name>j</name> = <name><name>parent</name>-&gt;<name>nchildren</name></name></expr>;</init> <condition><expr><name>j</name> &gt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>--</expr></incr>) <block>{
<expr_stmt><expr><name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>j</name></expr>]</index></name>.<name>c</name> = <name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>j</name> - 1</expr>]</index></name>.<name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>j</name></expr>]</index></name>.<name>child</name> = <name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>j</name> - 1</expr>]</index></name>.<name>child</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>c</name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>child</name> = <name>child</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent</name>-&gt;<name>nchildren</name></name>++</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>filter_trie_node</name> *</type><name>trie_node_alloc</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>filter_trie_node</name> *</type><name>parent</name></decl></param>, <param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>filter_trie_node</name> *</type><name>new_node</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>parent</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>parent</name>-&gt;<name>nchildren</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>c</name> == <name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>c</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>child</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &lt; <name><name>parent</name>-&gt;<name>children</name><index>[<expr><name>i</name></expr>]</index></name>.<name>c</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if></else></if>
}</block></for>
<expr_stmt><expr><name>new_node</name> =
(<name>filter_trie_node</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_trie_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>trie_node_link</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><name>new_node</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_node</name> = (<name>filter_trie_node</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_trie_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new_node</name>-&gt;<name>frec</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name>-&gt;<name>nchildren</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name>-&gt;<name>size</name></name> = <name>TRIE_INITIAL_SIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_node</name>-&gt;<name>children</name></name> = (<name>filter_trie_child_ptr</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>new_node</name>-&gt;<name>size</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>filter_trie_child_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new_node</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>filter_trie_node</name> *</type><name>registered_output_filters</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>filter_trie_node</name> *</type><name>registered_input_filters</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>filter_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>registered_output_filters</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>registered_input_filters</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>get_filter_handle</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>filter_trie_node</name> *</type><name>filter_set</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>filter_set</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>filter_trie_node</name> *</type><name>node</name></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> = <name>filter_set</name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = <name>name</name></expr>;</init> <condition><expr>*<name>n</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name><name>node</name>-&gt;<name>nchildren</name></name> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>end</name> &gt;= <name>start</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>middle</name> <init>= <expr>(<name>end</name> + <name>start</name>) / 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>node</name>-&gt;<name>children</name><index>[<expr><name>middle</name></expr>]</index></name>.<name>c</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>n</name> == <name>ch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>node</name> = <name><name>node</name>-&gt;<name>children</name><index>[<expr><name>middle</name></expr>]</index></name>.<name>child</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>*<name>n</name> &lt; <name>ch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> = <name>middle</name> - 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>start</name> = <name>middle</name> + 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<if>if <condition>(<expr><name>end</name> &lt; <name>start</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>node</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>node</name> &amp;&amp; <name><name>node</name>-&gt;<name>frec</name></name></expr>)</condition><then> <block>{
<return>return <expr><name><name>node</name>-&gt;<name>frec</name></name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro><macro><name>ap_get_output_filter_handle</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>get_filter_handle</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>registered_output_filters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro><macro><name>ap_get_input_filter_handle</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>get_filter_handle</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>registered_input_filters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>register_filter</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>ap_filter_func</name></type> <name>filter_func</name></decl></param>,
<param><decl><type><name>ap_init_filter_func</name></type> <name>filter_init</name></decl></param>,
<param><decl><type><name>ap_filter_type</name></type> <name>ftype</name></decl></param>,
<param><decl><type><name>filter_trie_node</name> **</type><name>reg_filter_set</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>frec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>normalized_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>filter_trie_node</name> *</type><name>node</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!*<name>reg_filter_set</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>reg_filter_set</name> = <call><name>trie_node_alloc</name><argument_list>(<argument><expr><name>FILTER_POOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>normalized_name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>FILTER_POOL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>normalized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> = *<name>reg_filter_set</name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = <name>normalized_name</name></expr>;</init> <condition><expr>*<name>n</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>filter_trie_node</name> *</type><name>child</name> <init>= <expr><call><name>trie_node_alloc</name><argument_list>(<argument><expr><name>FILTER_POOL</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr>*<name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_isalpha</name><argument_list>(<argument><expr>*<name>n</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>trie_node_link</name><argument_list>(<argument><expr><name>FILTER_POOL</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><call><name>apr_toupper</name><argument_list>(<argument><expr>*<name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>node</name> = <name>child</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>node</name>-&gt;<name>frec</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>frec</name> = <name><name>node</name>-&gt;<name>frec</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>frec</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>FILTER_POOL</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>frec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>node</name>-&gt;<name>frec</name></name> = <name>frec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>name</name></name> = <name>normalized_name</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>filter_func</name></name> = <name>filter_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>filter_init_func</name></name> = <name>filter_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>ftype</name></name> = <name>ftype</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>FILTER_POOL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>filter_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>frec</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <macro><name>ap_register_input_filter</name><argument_list>(<argument>const char *name</argument>,
<argument>ap_in_filter_func filter_func</argument>,
<argument>ap_init_filter_func filter_init</argument>,
<argument>ap_filter_type ftype</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_filter_func</name></type> <name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name>.<name>in_func</name></name> = <name>filter_func</name></expr>;</expr_stmt>
<return>return <expr><call><name>register_filter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>filter_init</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>,
<argument><expr>&amp;<name>registered_input_filters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <macro><name>ap_register_output_filter</name><argument_list>(<argument>const char *name</argument>,
<argument>ap_out_filter_func filter_func</argument>,
<argument>ap_init_filter_func filter_init</argument>,
<argument>ap_filter_type ftype</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_register_output_filter_protocol</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>filter_func</name></expr></argument>,
<argument><expr><name>filter_init</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <macro><name>ap_register_output_filter_protocol</name><argument_list>(
<argument>const char *name</argument>,
<argument>ap_out_filter_func filter_func</argument>,
<argument>ap_init_filter_func filter_init</argument>,
<argument>ap_filter_type ftype</argument>,
<argument>unsigned int proto_flags</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_filter_rec_t</name>*</type> <name>ret</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_func</name></type> <name>f</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name>.<name>out_func</name></name> = <name>filter_func</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>register_filter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>filter_init</name></expr></argument>, <argument><expr><name>ftype</name></expr></argument>,
<argument><expr>&amp;<name>registered_output_filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>proto_flags</name></name> = <name>proto_flags</name></expr> ;</expr_stmt>
<return>return <expr><name>ret</name></expr> ;</return>
}</block>
<function><type><specifier>static</specifier> <name>ap_filter_t</name> *</type><name>add_any_filter_handle</name><parameter_list>(<param><decl><type><name>ap_filter_rec_t</name> *</type><name>frec</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>r_filters</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>p_filters</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>c_filters</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_CONNECTION</name> &amp;&amp; <name>r</name> ? <name><name>r</name>-&gt;<name>pool</name></name> : <name><name>c</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> **</type><name>outf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_PROTOCOL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>outf</name> = <name>r_filters</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00080</expr></argument>)</argument_list></call>
"a content filter was added without a request: %s"</expr></argument>, <argument><expr><name><name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_CONNECTION</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>outf</name> = <name>p_filters</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00081</expr></argument>)</argument_list></call>
"a protocol filter was added without a request: %s"</expr></argument>, <argument><expr><name><name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>outf</name> = <name>c_filters</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>frec</name></name> = <name>frec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>r</name></name> = <name><name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_CONNECTION</name> ? <name>r</name> : <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>INSERT_BEFORE</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>*<name>outf</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>next</name></name> = *<name>outf</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>outf</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>r_filters</name> != *<name>c_filters</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>first</name> = *<name>r_filters</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>first</name> &amp;&amp; (<name><name>first</name>-&gt;<name>next</name></name> != (*<name>outf</name>))</expr>)</condition> <block>{
<expr_stmt><expr><name>first</name> = <name><name>first</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>first</name> &amp;&amp; <name>first</name> != (*<name>outf</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>first</name>-&gt;<name>next</name></name> = <name>f</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>outf</name> = <name>f</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>fscan</name> <init>= <expr>*<name>outf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>INSERT_BEFORE</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>fscan</name>-&gt;<name>next</name></name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr><name>fscan</name> = <name><name>fscan</name>-&gt;<name>next</name></name></expr>;</expr_stmt></while>
<expr_stmt><expr><name><name>f</name>-&gt;<name>next</name></name> = <name><name>fscan</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fscan</name>-&gt;<name>next</name></name> = <name>f</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_CONNECTION</name> &amp;&amp; (*<name>r_filters</name> == *<name>c_filters</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>r_filters</name> = *<name>p_filters</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>f</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>ap_filter_t</name> *</type><name>add_any_filter</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>filter_trie_node</name> *</type><name>reg_filter_set</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>r_filters</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>p_filters</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>c_filters</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>reg_filter_set</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>filter_trie_node</name> *</type><name>node</name></decl>;</decl_stmt>
<expr_stmt><expr><name>node</name> = <name>reg_filter_set</name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = <name>name</name></expr>;</init> <condition><expr>*<name>n</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>end</name> = <name><name>node</name>-&gt;<name>nchildren</name></name> - 1</expr>;</expr_stmt>
<while>while <condition>(<expr><name>end</name> &gt;= <name>start</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>middle</name> <init>= <expr>(<name>end</name> + <name>start</name>) / 2</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>node</name>-&gt;<name>children</name><index>[<expr><name>middle</name></expr>]</index></name>.<name>c</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>n</name> == <name>ch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>node</name> = <name><name>node</name>-&gt;<name>children</name><index>[<expr><name>middle</name></expr>]</index></name>.<name>child</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr>*<name>n</name> &lt; <name>ch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>end</name> = <name>middle</name> - 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>start</name> = <name>middle</name> + 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<if>if <condition>(<expr><name>end</name> &lt; <name>start</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>node</name> = <name>NULL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>node</name> &amp;&amp; <name><name>node</name>-&gt;<name>frec</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>add_any_filter_handle</name><argument_list>(<argument><expr><name><name>node</name>-&gt;<name>frec</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r_filters</name></expr></argument>,
<argument><expr><name>p_filters</name></expr></argument>, <argument><expr><name>c_filters</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name> ? <name><name>r</name>-&gt;<name>connection</name></name> : <name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00082</expr></argument>)</argument_list></call>
"an unknown filter was not added: %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <macro><name>ap_add_input_filter</name><argument_list>(<argument>const char *name</argument>, <argument>void *ctx</argument>,
<argument>request_rec *r</argument>, <argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>add_any_filter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>registered_input_filters</name></expr></argument>,
<argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>input_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>proto_input_filters</name></name> : <name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <macro><name>ap_add_input_filter_handle</name><argument_list>(<argument>ap_filter_rec_t *f</argument>,
<argument>void *ctx</argument>,
<argument>request_rec *r</argument>,
<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>add_any_filter_handle</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>input_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>proto_input_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <macro><name>ap_add_output_filter</name><argument_list>(<argument>const char *name</argument>, <argument>void *ctx</argument>,
<argument>request_rec *r</argument>, <argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>add_any_filter</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>registered_output_filters</name></expr></argument>,
<argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>output_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>proto_output_filters</name></name> : <name>NULL</name></expr></argument>, <argument><expr>&amp;<name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <macro><name>ap_add_output_filter_handle</name><argument_list>(<argument>ap_filter_rec_t *f</argument>,
<argument>void *ctx</argument>,
<argument>request_rec *r</argument>,
<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>add_any_filter_handle</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>output_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name>r</name> ? &amp;<name><name>r</name>-&gt;<name>proto_output_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_any_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>ap_filter_t</name> **</type><name>r_filt</name></decl></param>, <param><decl><type><name>ap_filter_t</name> **</type><name>p_filt</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> **</type><name>c_filt</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> **</type><name>curr</name> <init>= <expr><name>r_filt</name> ? <name>r_filt</name> : <name>c_filt</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>fscan</name> <init>= <expr>*<name>curr</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>p_filt</name> &amp;&amp; *<name>p_filt</name> == <name>f</name></expr>)</condition><then>
<expr_stmt><expr>*<name>p_filt</name> = <name>(*<name>p_filt</name>)-&gt;<name>next</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>*<name>curr</name> == <name>f</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>curr</name> = <name>(*<name>curr</name>)-&gt;<name>next</name></name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<while>while <condition>(<expr><name><name>fscan</name>-&gt;<name>next</name></name> != <name>f</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!(<name>fscan</name> = <name><name>fscan</name>-&gt;<name>next</name></name>)</expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name><name>fscan</name>-&gt;<name>next</name></name> = <name><name>f</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_remove_input_filter</name><argument_list>(<argument>ap_filter_t *f</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>remove_any_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name> ? &amp;<name><name>f</name>-&gt;<name>r</name>-&gt;<name>input_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name></name> ? &amp;<name><name>f</name>-&gt;<name>r</name>-&gt;<name>proto_input_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name><name>f</name>-&gt;<name>c</name>-&gt;<name>input_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_remove_output_filter</name><argument_list>(<argument>ap_filter_t *f</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>remove_any_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name> ? &amp;<name><name>f</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name></name> ? &amp;<name><name>f</name>-&gt;<name>r</name>-&gt;<name>proto_output_filters</name></name> : <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name><name>f</name>-&gt;<name>c</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_remove_input_filter_byhandle</name><argument_list>(<argument>ap_filter_t *next</argument>,
<argument>const char *handle</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>handle</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>filter</name> = <call><name>ap_get_input_filter_handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>filter</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>frec</name></name> == <name>filter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <name>next</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_remove_output_filter_byhandle</name><argument_list>(<argument>ap_filter_t *next</argument>,
<argument>const char *handle</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>handle</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>filter</name> = <call><name>ap_get_output_filter_handle</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>filter</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>frec</name></name> == <name>filter</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <name>next</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_get_brigade</name><argument_list>(<argument>ap_filter_t *next</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>ap_input_mode_t mode</argument>,
<argument>apr_read_type_e block</argument>,
<argument>apr_off_t readbytes</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
<return>return <expr><call><name><name>next</name>-&gt;<name>frec</name>-&gt;<name>filter_func</name>.<name>in_func</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>,
<argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>AP_NOBODY_READ</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_pass_brigade</name><argument_list>(<argument>ap_filter_t *next</argument>,
<argument>apr_bucket_brigade *bb</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>) &amp;&amp; <call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>next</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>next</name>-&gt;<name>r</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>r</name>-&gt;<name>prev</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>prev</name> <init>= <expr><name><name>next</name>-&gt;<name>r</name>-&gt;<name>prev</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>prev</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>prev</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>prev</name> = <name><name>prev</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
}</block></then></if>
<return>return <expr><call><name><name>next</name>-&gt;<name>frec</name>-&gt;<name>filter_func</name>.<name>out_func</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>AP_NOBODY_WROTE</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_pass_brigade_fchk</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>const char *fmt</argument>,
<argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> != <name>AP_FILTER_ERROR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>fmt</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00083</expr></argument>)</argument_list></call>
"ap_pass_brigade returned %d"</expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_pvsprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03158</expr></argument>)</argument_list></call>
"%s"</expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_save_brigade</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade **saveto</argument>,
<argument>apr_bucket_brigade **b</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>srv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!(*<name>saveto</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>saveto</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>srv</name> = <name>rv</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr>*<name>saveto</name></expr></argument>, <argument><expr>*<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>srv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_filter_flush</name><argument_list>(<argument>apr_bucket_brigade *bb</argument>,
<argument>void *ctx</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fflush</name><argument_list>(<argument>ap_filter_t *f</argument>, <argument>apr_bucket_brigade *bb</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fputstrs</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade *bb</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_vputstrs</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>ap_filter_flush</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fprintf</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>const char *fmt</argument>,
<argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_vprintf</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>ap_filter_flush</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_filter_protocol</name><argument_list>(<argument>ap_filter_t *f</argument>, <argument>unsigned int flags</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>proto_flags</name></name> = <name>flags</name></expr> ;</expr_stmt>
}</block>
</unit>
