<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/server/util_md5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_md5_binary</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const unsigned char *buf</argument>, <argument>int length</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>my_md5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>hash</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>result</name><index>[<expr>2 * <name>APR_MD5_DIGESTSIZE</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>my_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_md5_set_xlate</name><argument_list>(<argument><expr>&amp;<name>my_md5</name></expr></argument>, <argument><expr><name>ap_hdrs_to_ascii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>my_md5</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>)<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr>&amp;<name>my_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_bin2hex</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name>*2</expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_md5</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const unsigned char *string</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_md5_binary</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr>(<name>int</name>) <call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name> *)<name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>basis_64</name><index>[]</index></name> <init>=
<expr>"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</expr></init></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_md5contextTo64</name><argument_list>(<argument>apr_pool_t *a</argument>, <argument>apr_md5_ctx_t *context</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr>18</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>encodedDigest</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><name>encodedDigest</name> = (<name>char</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>25 * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5_final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>digest</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></sizeof> - 1</expr>]</index></name> = <name><name>digest</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></sizeof> - 2</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <name>encodedDigest</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>digest</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name> += 3</expr></incr>) <block>{
<expr_stmt><expr>*<name>p</name>++ = <name><name>basis_64</name><index>[<expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &gt;&gt; 2</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>basis_64</name><index>[<expr>((<name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> &amp; 0x3) &lt;&lt; 4) | (<call>(<name>int</name>) <argument_list>(<argument><expr><name><name>digest</name><index>[<expr><name>i</name> + 1</expr>]</index></name> &amp; 0xF0</expr></argument>)</argument_list></call> &gt;&gt; 4)</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>basis_64</name><index>[<expr>((<name><name>digest</name><index>[<expr><name>i</name> + 1</expr>]</index></name> &amp; 0xF) &lt;&lt; 2) | (<call>(<name>int</name>) <argument_list>(<argument><expr><name><name>digest</name><index>[<expr><name>i</name> + 2</expr>]</index></name> &amp; 0xC0</expr></argument>)</argument_list></call> &gt;&gt; 6)</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>++ = <name><name>basis_64</name><index>[<expr><name><name>digest</name><index>[<expr><name>i</name> + 2</expr>]</index></name> &amp; 0x3F</expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>p</name>-- = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>-- = '='</expr>;</expr_stmt>
<expr_stmt><expr>*<name>p</name>-- = '='</expr>;</expr_stmt>
<return>return <expr><name>encodedDigest</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_md5digest</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>apr_file_t *infile</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_md5_ctx_t</name></type> <name>context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name> <init>= <expr>0L</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_md5_init</name><argument_list>(<argument><expr>&amp;<name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_md5_update</name><argument_list>(<argument><expr>&amp;<name>context</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nbytes</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_md5contextTo64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>context</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
</unit>
