<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/server/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu_version.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_mpm_settings</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>mpm_query_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>retval</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server MPM: %s\n"</expr></argument>, <argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retval</name> = <call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_THREADED</name></expr></argument>, <argument><expr>&amp;<name>mpm_query_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" threaded: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mpm_query_info</name> == <name>AP_MPMQ_DYNAMIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"yes (variable thread count)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mpm_query_info</name> == <name>AP_MPMQ_STATIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"yes (fixed thread count)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"no\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><name>retval</name> = <call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_FORKED</name></expr></argument>, <argument><expr>&amp;<name>mpm_query_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" forked: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mpm_query_info</name> == <name>AP_MPMQ_DYNAMIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"yes (variable process count)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mpm_query_info</name> == <name>AP_MPMQ_STATIC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"yes (fixed process count)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"no\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>show_compile_settings</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server version: %s\n"</expr></argument>, <argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server built: %s\n"</expr></argument>, <argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server's Module Magic Number: %u:%u\n"</expr></argument>,
<argument><expr><name>MODULE_MAGIC_NUMBER_MAJOR</name></expr></argument>, <argument><expr><name>MODULE_MAGIC_NUMBER_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &gt;= 2</expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server loaded: APR %s\n"</expr></argument>, <argument><expr><call><name>apr_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Compiled using: APR %s\n"</expr></argument>, <argument><expr><name>APR_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server loaded: APR %s, APR-UTIL %s\n"</expr></argument>,
<argument><expr><call><name>apr_version_string</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>apu_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Compiled using: APR %s, APR-UTIL %s\n"</expr></argument>,
<argument><expr><name>APR_VERSION_STRING</name></expr></argument>, <argument><expr><name>APU_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Architecture: %ld-bit\n"</expr></argument>, <argument><expr>8 * (<name>long</name>)<sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>show_mpm_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server compiled with....\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_SECURITY_HOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D BIG_SECURITY_HOLE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SECURITY_HOLE_PASS_AUTHORIZATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D SECURITY_HOLE_PASS_AUTHORIZATION\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D OS=\"" <name>OS</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SHMGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D HAVE_SHMGET\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILE_BASED_SHM</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_FILE_BASED_SHM\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_HAS_SENDFILE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_HAS_MMAP\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_WRITEV</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D NO_WRITEV\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NO_LINGCLOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D NO_LINGCLOSE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_HAVE_IPV6 (IPv4-mapped addresses "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_ENABLE_V4_MAPPED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"enabled)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"disabled)\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_FLOCK_SERIALIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_USE_FLOCK_SERIALIZE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_SYSVSEM_SERIALIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_USE_SYSVSEM_SERIALIZE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_POSIXSEM_SERIALIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_USE_POSIXSEM_SERIALIZE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_FCNTL_SERIALIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_USE_FCNTL_SERIALIZE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_PROC_PTHREAD_SERIALIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_USE_PROC_PTHREAD_SERIALIZE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_PTHREAD_SERIALIZE</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_USE_PTHREAD_SERIALIZE\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_PROCESS_LOCK_IS_GLOBAL</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_PROCESS_LOCK_IS_GLOBAL\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SINGLE_LISTEN_UNSERIALIZED_ACCEPT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_OTHER_CHILD</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_HAS_OTHER_CHILD\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_HAVE_RELIABLE_PIPED_LOGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D AP_HAVE_RELIABLE_PIPED_LOGS\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUFFERED_LOGS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D BUFFERED_LOGS\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PIPE_BUF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D PIPE_BUF=%ld\n"</expr></argument>,<argument><expr>(<name>long</name>)<name>PIPE_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D DYNAMIC_MODULE_LIMIT=%ld\n"</expr></argument>,<argument><expr>(<name>long</name>)<name>DYNAMIC_MODULE_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D APR_CHARSET_EBCDIC\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEED_HASHBANG_EMUL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D NEED_HASHBANG_EMUL\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HTTPD_ROOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D HTTPD_ROOT=\"" <name>HTTPD_ROOT</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SUEXEC_BIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D SUEXEC_BIN=\"" <name>SUEXEC_BIN</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_PIDLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D DEFAULT_PIDLOG=\"" <name>DEFAULT_PIDLOG</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_SCOREBOARD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D DEFAULT_SCOREBOARD=\"" <name>DEFAULT_SCOREBOARD</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_ERRORLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D DEFAULT_ERRORLOG=\"" <name>DEFAULT_ERRORLOG</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_TYPES_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D AP_TYPES_CONFIG_FILE=\"" <name>AP_TYPES_CONFIG_FILE</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SERVER_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>" -D SERVER_CONFIG_FILE=\"" <name>SERVER_CONFIG_FILE</name> "\"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TASK_SWITCH_SLEEP</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>destroy_and_exit_process</name><parameter_list>(<param><decl><type><name>process_rec</name> *</type><name>process</name></decl></param>,
<param><decl><type><name>int</name></type> <name>process_exit_value</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>TASK_SWITCH_SLEEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_main_state</name> = <name>AP_SQ_MS_EXITING</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>process_exit_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>abort_on_oom</name><parameter_list>(<param><decl><type><name>int</name></type> <name>retcode</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_abort_on_oom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>retcode</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>process_rec</name> *</type><name>init_process</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> * *</type><name>argv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>process_rec</name> *</type><name>process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>cntx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>failed</name> <init>= <expr>"apr_app_initialize()"</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>stat</name> = <call><name>apr_app_initialize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>failed</name> = "apr_pool_create()"</expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>cntx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>stat</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>ctimebuff</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>ctimebuff</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"[%s] [crit] (%d) %s: %s failed "
"to initial context, exiting\n"</expr></argument>,
<argument><expr><name>ctimebuff</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr>(*<name>argv</name>)<index>[<expr>0</expr>]</index></expr></argument>, <argument><expr><name>failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_abort_set</name><argument_list>(<argument><expr><name>abort_on_oom</name></expr></argument>, <argument><expr><name>cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>, <argument><expr>"process"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_open_stderr_log</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>process</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>cntx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>process_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>process</name>-&gt;<name>pool</name></name> = <name>cntx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>process</name>-&gt;<name>pconf</name></name></expr></argument>, <argument><expr><name><name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pconf</name></name></expr></argument>, <argument><expr>"pconf"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>process</name>-&gt;<name>argc</name></name> = *<name>argc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>process</name>-&gt;<name>argv</name></name> = *<name>argv</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>process</name>-&gt;<name>short_name</name></name> = <call><name>apr_filepath_name_get</name><argument_list>(<argument><expr>(*<name>argv</name>)<index>[<expr>0</expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>process</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<param><decl><type><name>process_rec</name> *</type><name>process</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bin</name> <init>= <expr><name><name>process</name>-&gt;<name>argv</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pad_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Usage: %s [-D name] [-d directory] [-f file]"</expr></argument>, <argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" %*s [-C \"directive\"] [-c \"directive\"]"</expr></argument>, <argument><expr><name>pad_len</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" %*s [-w] [-k start|restart|stop|shutdown] [-n service_name]"</expr></argument>,
<argument><expr><name>pad_len</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" %*s [-k install|config|uninstall] [-n service_name]"</expr></argument>,
<argument><expr><name>pad_len</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" %*s [-k start|restart|graceful|graceful-stop|stop]"</expr></argument>,
<argument><expr><name>pad_len</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" %*s [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]"</expr></argument>,
<argument><expr><name>pad_len</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"Options:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -D name : define a name for use in "
"&lt;IfDefine name&gt; directives"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -d directory : specify an alternate initial "
"ServerRoot"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -f file : specify an alternate ServerConfigFile"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -C \"directive\" : process directive before reading "
"config files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -c \"directive\" : process directive after reading "
"config files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -n name : set screen name"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -n name : set service name and use its "
"ServerConfigFile and ServerRoot"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -k start : tell Apache to start"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -k restart : tell running Apache to do a graceful "
"restart"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -k stop|shutdown : tell running Apache to shutdown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -k install : install an Apache service"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -k config : change startup Options of an Apache "
"service"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -k uninstall : uninstall an Apache service"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -w : hold open the console window on error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -e level : show startup errors of level "
"(see LogLevel)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -E file : log startup errors to file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -v : show version number"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -V : show compile settings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -h : list available command line options "
"(this page)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -l : list compiled in modules"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -L : list available configuration "
"directives"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -t -D DUMP_VHOSTS : show parsed vhost settings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -t -D DUMP_RUN_CFG : show parsed run settings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -S : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -t -D DUMP_MODULES : show all loaded modules "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -M : a synonym for -t -D DUMP_MODULES"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -t -D DUMP_INCLUDES: show all included configuration files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -t : run syntax check for config files"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -T : start without DocumentRoot(s) check"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>" -X : debug mode (only one worker, do not detach)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>showcompile</name> <init>= <expr>0</expr></init>, <name>showdirectives</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>confname</name> <init>= <expr><name>SERVER_CONFIG_FILE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>def_server_root</name> <init>= <expr><name>HTTPD_ROOT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_error_log</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>process_rec</name> *</type><name>process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pcommands</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> **</type><name>mod</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_signal_server</name></expr></argument>)</argument_list></call> *<name>signal_server</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_MONCONTROL</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>process</name> = <call><name>init_process</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_pglobal</name> = <name><name>process</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pconf</name> = <name><name>process</name>-&gt;<name>pconf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_argv0</name> = <name><name>process</name>-&gt;<name>short_name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_init_rng</name><argument_list>(<argument><expr><name>ap_pglobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_abort_set</name><argument_list>(<argument><expr><name>abort_on_oom</name></expr></argument>, <argument><expr><call><name>apr_pool_parent_get</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>ap_init_ebcdic</name><argument_list>(<argument><expr><name>ap_pglobal</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pcommands</name></expr></argument>, <argument><expr><name>ap_pglobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr>"pcommands"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_pre_read_config</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_post_read_config</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_config_defines</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>error</name> = <call><name>ap_setup_prelinked_modules</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00012</expr></argument>)</argument_list></call>
"%s: %s"</expr></argument>, <argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_run_rewrite_args</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr><name>pcommands</name></expr></argument>, <argument><expr><name><name>process</name>-&gt;<name>argc</name></name></expr></argument>, <argument><expr><name><name>process</name>-&gt;<name>argv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>rv</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEARGS</name></expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>)
== <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
<case>case <expr>'c'</expr>:
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_post_read_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'C'</expr>:
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_pre_read_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'d'</expr>:
<expr_stmt><expr><name>def_server_root</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'D'</expr>:
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pcommands</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"DUMP_VHOSTS"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"DUMP_RUN_CFG"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"DUMP_MODULES"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>"DUMP_INCLUDES"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt></then></if></else></if></else></if></else></if>
<break>break;</break>
</case><case>case <expr>'e'</expr>:
<if>if <condition>(<expr><call><name>ap_parse_log_level</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>&amp;<name>ap_default_loglevel</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr>'E'</expr>:
<expr_stmt><expr><name>temp_error_log</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'X'</expr>:
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = "DEBUG"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<expr_stmt><expr><name>confname</name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'v'</expr>:
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server version: %s\n"</expr></argument>, <argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"Server built: %s\n"</expr></argument>, <argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case><case>case <expr>'l'</expr>:
<expr_stmt><expr><call><name>ap_show_modules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case><case>case <expr>'L'</expr>:
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>showdirectives</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<if>if <condition>(<expr><name>ap_run_mode</name> == <name>AP_SQ_RM_UNKNOWN</name></expr>)</condition><then>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_TEST</name></expr>;</expr_stmt></then></if>
<break>break;</break>
</case><case>case <expr>'T'</expr>:
<expr_stmt><expr><name>ap_document_root_check</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'S'</expr>:
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = "DUMP_VHOSTS"</expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = "DUMP_RUN_CFG"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'M'</expr>:
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = (const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>ap_server_config_defines</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>new</name> = "DUMP_MODULES"</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'V'</expr>:
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>show_compile_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>showcompile</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_CONFIG_DUMP</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr>'h'</expr>:
</case><case>case <expr>'?'</expr>:
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</case>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name>ap_run_mode</name> == <name>AP_SQ_RM_UNKNOWN</name></expr>)</condition><then>
<expr_stmt><expr><name>ap_run_mode</name> = <name>AP_SQ_RM_NORMAL</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_EOF</name> || <name><name>opt</name>-&gt;<name>ind</name></name> &lt; <name><name>opt</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ap_main_state</name> = <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>plog</name></expr></argument>, <argument><expr><name>ap_pglobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>plog</name></expr></argument>, <argument><expr>"plog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>ptemp</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>"ptemp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_root</name> = <name>def_server_root</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>temp_error_log</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_replace_stderr_log</name><argument_list>(<argument><expr><name><name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>temp_error_log</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ap_server_conf</name> = <call><name>ap_read_config</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>confname</name></expr></argument>, <argument><expr>&amp;<name>ap_conftree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_server_conf</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>showcompile</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>show_compile_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>&amp;<name>ap_server_conf</name></expr></argument>, <argument><expr><name>ap_pool_cleanup_set_null</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>showcompile</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>show_compile_settings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hook_sort_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_pre_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name> |<name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00013</expr></argument>)</argument_list></call> "Pre-configuration failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_process_config_tree</name><argument_list>(<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>,
<argument><expr><name><name>process</name>-&gt;<name>pconf</name></name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_fixup_virtual_hosts</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fini_vhost_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hook_sort_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_check_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name> |<name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00014</expr></argument>)</argument_list></call> "Configuration check failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ap_run_mode</name> != <name>AP_SQ_RM_NORMAL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>showdirectives</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_show_directives</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_run_test_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_run_mode</name> == <name>AP_SQ_RM_CONFIG_TEST</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"Syntax OK"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>signal_server</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_signal_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>signal_server</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>exit_status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>signal_server</name><argument_list>(<argument><expr>&amp;<name>exit_status</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>exit_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>plog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><call><name>ap_run_open_logs</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name> |<name>APLOG_ERR</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00015</expr></argument>)</argument_list></call> "Unable to open logs"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>( <expr><call><name>ap_run_post_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name> |<name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00016</expr></argument>)</argument_list></call> "Configuration Failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>ap_main_state</name> = <name>AP_SQ_MS_DESTROY_CONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hook_deregister_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_clear_auth_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_main_state</name> = <name>AP_SQ_MS_CREATE_CONFIG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_config_generation</name>++</expr>;</expr_stmt>
<for>for (<init><expr><name>mod</name> = <name>ap_prelinked_modules</name></expr>;</init> <condition><expr>*<name>mod</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>mod</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_register_hooks</name><argument_list>(<argument><expr>*<name>mod</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>ap_conftree</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>ptemp</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>"ptemp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_root</name> = <name>def_server_root</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_server_conf</name> = <call><name>ap_read_config</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>confname</name></expr></argument>, <argument><expr>&amp;<name>ap_conftree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_server_conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>&amp;<name>ap_server_conf</name></expr></argument>,
<argument><expr><name>ap_pool_cleanup_set_null</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hook_sort_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_pre_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00017</expr></argument>)</argument_list></call> "Pre-configuration failed, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_process_config_tree</name><argument_list>(<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>, <argument><expr><name><name>process</name>-&gt;<name>pconf</name></name></expr></argument>,
<argument><expr><name>ptemp</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_fixup_virtual_hosts</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fini_vhost_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hook_sort_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_check_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00018</expr></argument>)</argument_list></call> "Configuration check failed, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>plog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_run_open_logs</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00019</expr></argument>)</argument_list></call> "Unable to open logs, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_run_post_config</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00020</expr></argument>)</argument_list></call> "Configuration Failed, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_lock</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_optional_fn_retrieve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_main_state</name> = <name>AP_SQ_MS_RUN_MPM</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ap_run_mpm</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_lock</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rc</name> == <name>OK</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rc</name> == <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02818</expr></argument>)</argument_list></call>
"MPM run failed, exiting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>destroy_and_exit_process</name><argument_list>(<argument><expr><name>process</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_USING_AUTOCONF</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>const</specifier> <name>void</name> *</type><name>ap_suck_in_APR</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>const</specifier> <name>void</name> *</type><name>ap_suck_in_APR</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>void</name> *</type><name>ap_ugly_hack</name></decl>;</decl_stmt>
<return>return <expr><name>ap_ugly_hack</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
