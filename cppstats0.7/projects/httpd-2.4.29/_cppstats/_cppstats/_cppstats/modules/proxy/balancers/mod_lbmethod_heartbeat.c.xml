<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/proxy/balancers/mod_lbmethod_heartbeat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_slotmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heartbeat.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LBM_HEARTBEAT_MAX_LASTSEEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LBM_HEARTBEAT_MAX_LASTSEEN</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>lbmethod_heartbeat_module</name></decl>;</decl_stmt>
<expr_stmt><expr>static <call><call><name>int</name> <argument_list>(<argument><expr>*<name>ap_proxy_retry_worker_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
<argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_slotmem_provider_t</name> *</type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_slotmem_instance_t</name> *</type><name>hm_serversmem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>lb_hb_ctx_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
}</block></struct></type> <name>lb_hb_ctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>hb_server_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
}</block></struct></type> <name>hb_server_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>ctx_servers</name> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>servers</name></decl>;</decl_stmt>
}</block></struct></type> <name>ctx_servers_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>argstr_to_table</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>parms</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>strtok_state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>key</name></expr>)</condition> <block>{
<expr_stmt><expr><name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>value</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>value</name> = "1"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>readfile_heartbeats</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>servers</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>fi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>path</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_READ</name>|<name>APR_BINARY</name>|<name>APR_BUFFERED</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<block>{
<decl_stmt><decl><type><name>char</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lineno</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>ba</name> <init>= <expr><call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmpbb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>hbt</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>fi</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>hb_server_t</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ip</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_split_line</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lineno</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bsize</name> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bsize</name> - 1</expr>]</index></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>t</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>t</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>ip</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name> - <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>server</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>server</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hb_server_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>ip</name></name> = <name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>port</name></name> = 80</expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>seen</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name><name>server</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>argstr_to_table</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"busy"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>busy</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"ready"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>ready</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"lastseen"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>seen</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"port"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>port</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>server</name>-&gt;<name>busy</name></name> == 0 &amp;&amp; <name><name>server</name>-&gt;<name>ready</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>ready</name></name> = <name><name>server</name>-&gt;<name>ready</name></name> / 4</expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr>1</expr>)</condition>;</do>
}</block>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_read</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>mem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_slot_server_t</name> *</type><name>slotserver</name> <init>= <expr>(<name>hm_slot_server_t</name> *) <name>mem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ctx_servers_t</name> *</type><name>ctx</name> <init>= <expr>(<name>ctx_servers_t</name> *) <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>servers</name> <init>= <expr>(<name>apr_hash_t</name> *) <name><name>ctx</name>-&gt;<name>servers</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hb_server_t</name> *</type><name>server</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name><name>slotserver</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>server</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hb_server_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>ip</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>slotserver</name>-&gt;<name>ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>seen</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name><name>server</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>server</name>-&gt;<name>busy</name></name> = <name><name>slotserver</name>-&gt;<name>busy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>ready</name></name> = <name><name>slotserver</name>-&gt;<name>ready</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>seen</name></name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>now</name></name> - <name><name>slotserver</name>-&gt;<name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server</name>-&gt;<name>id</name></name> = <name><name>slotserver</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>server</name>-&gt;<name>busy</name></name> == 0 &amp;&amp; <name><name>server</name>-&gt;<name>ready</name></name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>ready</name></name> = <name><name>server</name>-&gt;<name>ready</name></name> / 4</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>readslot_heartbeats</name><parameter_list>(<param><decl><type><name>ctx_servers_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>doall</name></name><argument_list>(<argument><expr><name>hm_serversmem</name></expr></argument>, <argument><expr><name>hm_read</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_heartbeats</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>apr_hash_t</name> *</type><name>servers</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>hm_serversmem</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ctx_servers_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>now</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>servers</name></name> = <name>servers</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>readslot_heartbeats</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>rv</name> = <call><name>readfile_heartbeats</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>servers</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>find_best_hb</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>openslots</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hb_server_t</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>up_servers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>mycandidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>servers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>ctx</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lbmethod_heartbeat_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_proxy_retry_worker_fn</name> =
<call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_retry_worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>tpool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>servers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>tpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>read_heartbeats</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>servers</name></expr></argument>, <argument><expr><name>tpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01213</expr></argument>)</argument_list></call>
"lb_heartbeat: Unable to read heartbeats at '%s'"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>tpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>up_servers</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>tpool</name></expr></argument>, <argument><expr><call><name>apr_hash_count</name><argument_list>(<argument><expr><name>servers</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hb_server_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>worker</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>workers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>proxy_worker</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>servers</name></expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>hostname</name></name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>server</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01214</expr></argument>)</argument_list></call>
"lb_heartbeat: No server for worker %s"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_retry_worker_fn</name><argument_list>(<argument><expr>"BALANCER"</expr></argument>, <argument><expr>*<name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>server</name>-&gt;<name>worker</name></name> = *<name>worker</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>server</name>-&gt;<name>seen</name></name> &lt; <name>LBM_HEARTBEAT_MAX_LASTSEEN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>openslots</name> += <name><name>server</name>-&gt;<name>ready</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>up_servers</name></expr></argument>, <argument><expr><name>hb_server_t</name> *</expr></argument>)</argument_list></call> = <name>server</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>openslots</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>c</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>pick</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>pick</name> = <call><name>ap_random_pick</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>openslots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>up_servers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>server</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>up_servers</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>hb_server_t</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>pick</name> &gt;= <name>c</name> &amp;&amp; <name>pick</name> &lt;= <name>c</name> + <name><name>server</name>-&gt;<name>ready</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mycandidate</name> = <name><name>server</name>-&gt;<name>worker</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>c</name> += <name><name>server</name>-&gt;<name>ready</name></name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>tpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>mycandidate</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reset</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>age</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>proxy_balancer_method</name></type> <name>heartbeat</name> <init>= <expr><block>{
<expr>"heartbeat"</expr>,
<expr>&amp;<name>find_best_hb</name></expr>,
<expr><name>NULL</name></expr>,
<expr>&amp;<name>reset</name></expr>,
<expr>&amp;<name>age</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lb_hb_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>ctx</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lbmethod_heartbeat_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then>
<return>return <expr><name>OK</name></expr>;</return></then></if>
<expr_stmt><expr><name>storage</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"shm"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>storage</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02281</expr></argument>)</argument_list></call>
"Failed to lookup provider 'shm' for '%s'. Maybe you "
"need to load mod_slotmem_shm?"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>attach</name></name><argument_list>(<argument><expr>&amp;<name>hm_serversmem</name></expr></argument>, <argument><expr>"mod_heartmonitor"</expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>num</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hm_serversmem</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02282</expr></argument>)</argument_list></call>
"No slotmem from mod_heartmonitor"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02283</expr></argument>)</argument_list></call>
"Using slotmem from mod_heartmonitor"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>hm_serversmem</name></expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>path</name></name> = "(slotmem)"</expr>;</expr_stmt></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszPred</name><index>[]</index></name><init>= <expr><block>{ <expr>"mod_heartmonitor.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr>"heartbeat"</expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr>&amp;<name>heartbeat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>lb_hb_init</name></expr></argument>, <argument><expr><name>aszPred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>lb_hb_create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>lb_hb_ctx_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lb_hb_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>path</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DEFAULT_HEARTBEAT_STORAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>lb_hb_merge_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>ps</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lb_hb_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>base</name> <init>= <expr>(<name>lb_hb_ctx_t</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>overrides</name> <init>= <expr>(<name>lb_hb_ctx_t</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>overrides</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>path</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>ps</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_lb_hb_storage</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lb_hb_ctx_t</name> *</type><name>ctx</name> <init>=
<expr>(<name>lb_hb_ctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>lbmethod_heartbeat_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>path</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"HeartbeatStorage"</expr></argument>, <argument><expr><name>cmd_lb_hb_storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Path to read heartbeat data."</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>lbmethod_heartbeat</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>lb_hb_create_config</name></expr>,
<expr><name>lb_hb_merge_config</name></expr>,
<expr><name>cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
