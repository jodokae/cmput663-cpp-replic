<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/proxy/ajp_link.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ajp.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>proxy_ajp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>apr_status_t</name></type> <name>ajp_ilink_send</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ajp_msg_end</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = <name><name>msg</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = (<name>char</name> *)<name><name>msg</name>-&gt;<name>buf</name></name></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01029</expr></argument>)</argument_list></call>
"ajp_ilink_send(): send failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>length</name> -= <name>written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> += <name>written</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>length</name></expr>)</condition>;</do>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ilink_read</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>apr_byte_t</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rdlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name>rdlen</name> &lt; <name>len</name></expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><call>(<name>char</name> *)<argument_list>(<argument><expr><name>buf</name> + <name>rdlen</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_EOF</name></expr>)</condition><then>
<return>return <expr><name>status</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<continue>continue;</continue></then>
<else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>status</name></expr>;</return></then></if></else></if></else></if>
<expr_stmt><expr><name>rdlen</name> += <name>length</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = <name>len</name> - <name>rdlen</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ajp_ilink_receive</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>hlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>blen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>hlen</name> = <name><name>msg</name>-&gt;<name>header_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ilink_read</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01030</expr></argument>)</argument_list></call>
"ajp_ilink_receive() can't receive header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> ? <name>APR_TIMEUP</name> : <name>AJP_ENO_HEADER</name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ajp_msg_check_header</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01031</expr></argument>)</argument_list></call>
"ajp_ilink_receive() received bad header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_HEADER</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ilink_read</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>buf</name></name> + <name>hlen</name></expr></argument>, <argument><expr><name>blen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01032</expr></argument>)</argument_list></call>
"ajp_ilink_receive() error while receiving message body "
"of length %" <name>APR_SIZE_T_FMT</name></expr></argument>,
<argument><expr><name>hlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AJP_EBAD_MESSAGE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01033</expr></argument>)</argument_list></call>
"ajp_ilink_receive() received packet len=%" <name>APR_SIZE_T_FMT</name>
"type=%d"</expr></argument>,
<argument><expr><name>blen</name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>hlen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
