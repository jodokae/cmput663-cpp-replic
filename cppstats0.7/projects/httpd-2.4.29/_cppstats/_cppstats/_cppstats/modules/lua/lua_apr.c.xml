<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/lua/lua_apr.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_lua.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lua_apr.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>lua</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><name>req_table_t</name> *</type><name>ap_lua_check_apr_table</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>int</name></type> <name>index</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>req_table_t</name>*</type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>luaL_checkudata</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr>"Apr.Table"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>lua_unboxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>t</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_lua_push_apr_table</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>req_table_t</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>lua_boxpointer</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>luaL_getmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apr.Table"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_setmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_table_set</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>req_table_t</name> *</type><name>t</name> <init>= <expr><call><name>ap_lua_check_apr_table</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>n</name></name></expr></argument>, <argument><expr>"notes"</expr></argument>)</argument_list></call> &amp;&amp; <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>badchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>replacement</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>badchar</name> = <name>replacement</name></expr>;</expr_stmt>
<while>while <condition>( <expr>(<name>badchar</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>badchar</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call>)</expr> )</condition> <block>{
<expr_stmt><expr>*<name>badchar</name> = ' '</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02614</expr></argument>)</argument_list></call>
"mod_lua: Value for '%s' in table '%s' contains newline!"</expr></argument>,
<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>t</name>-&gt;<name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>t</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>t</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lua_table_get</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>req_table_t</name> *</type><name>t</name> <init>= <expr><call><name>ap_lua_check_apr_table</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><call><name>luaL_checkstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>t</name>-&gt;<name>t</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>luaL_Reg</name></type> <name><name>lua_table_methods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr>"set"</expr>, <expr><name>lua_table_set</name></expr>}</block></expr>,
<expr><block>{<expr>"get"</expr>, <expr><name>lua_table_get</name></expr>}</block></expr>,
<expr><block>{<expr>0</expr>, <expr>0</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>ap_lua_init</name><parameter_list>(<param><decl><type><name>lua_State</name> *</type><name>L</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>luaL_newmetatable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"Apr.Table"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LUA_VERSION_NUM</name> &lt; 502</expr></cpp:if>
<expr_stmt><expr><call><name>luaL_register</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"apr_table"</expr></argument>, <argument><expr><name>lua_table_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>luaL_newlib</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr><name>lua_table_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"__index"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"get"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"__newindex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_pushstring</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>"set"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_gettable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>lua_settable</name><argument_list>(<argument><expr><name>L</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
