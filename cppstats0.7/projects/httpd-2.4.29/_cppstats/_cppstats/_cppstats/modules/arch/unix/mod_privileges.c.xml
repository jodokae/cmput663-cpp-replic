<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/arch/unix/mod_privileges.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;priv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_CHECK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if ((x) == -1) { char msgbuf[128]; apr_strerror(errno, msgbuf, sizeof(msgbuf)); return apr_pstrdup(cmd-&gt;pool, msgbuf); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR_CHECK</name><parameter_list>(<param><type><name>x</name></type></param>, <param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (x == -1) ap_log_error(APLOG_MARK, APLOG_CRIT, errno, 0, y "Failed to initialise privileges")</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>privileges_module</name></decl>;</decl_stmt>
<typedef>typedef <type><enum>enum <block>{ <decl><name>PRIV_UNSET</name></decl>, <decl><name>PRIV_FAST</name></decl>, <decl><name>PRIV_SECURE</name></decl>, <decl><name>PRIV_SELECTIVE</name></decl> }</block></enum></type> <name>priv_mode</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>priv_set_t</name> *</type><name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_set_t</name> *</type><name>child_priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>gid_t</name></type> <name>gid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_mode</name></type> <name>mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>priv_cfg</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>priv_mode</name></type> <name>mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>priv_dir_cfg</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>priv_set_t</name> *</type><name>priv_setid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>priv_set_t</name> *</type><name>priv_default</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dtrace_enabled</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>priv_cfg_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>priv_freeset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>priv_freeset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>privileges_merge_cfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>BASE</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>base</name> <init>= <expr><name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>add</name> <init>= <expr><name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>add</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>priv_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>mode</name></name> = (<name><name>add</name>-&gt;<name>mode</name></name> == <name>PRIV_UNSET</name>) ? <name><name>base</name>-&gt;<name>mode</name></name> : <name><name>add</name>-&gt;<name>mode</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>privileges_create_cfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>priv_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>priv</name></name> = <call><name>priv_str_to_set</name><argument_list>(<argument><expr>"basic"</expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name> = <call><name>priv_str_to_set</name><argument_list>(<argument><expr>"basic"</expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_FILE_LINK_ANY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03160</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_INFO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03161</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_SESSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03162</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>uid</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>gid</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mode</name></name> = <name>PRIV_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>priv_cfg_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>priv_default</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>priv_default</name> = <name><name>cfg</name>-&gt;<name>priv</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>privileges_create_dir_cfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>priv_dir_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mode</name></name> = <name>PRIV_UNSET</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>privileges_merge_dir_cfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>BASE</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>base</name> <init>= <expr><name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>add</name> <init>= <expr><name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>ret</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>priv_dir_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>mode</name></name> = (<name><name>add</name>-&gt;<name>mode</name></name> == <name>PRIV_UNSET</name>) ? <name><name>base</name>-&gt;<name>mode</name></name> : <name><name>add</name>-&gt;<name>mode</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>privileges_end_req</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>dcfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>unixd_config_rec</name></type> <name>ap_unixd_config</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>mode</name></name> == <name>PRIV_SECURE</name>) ||
((<name><name>cfg</name>-&gt;<name>mode</name></name> == <name>PRIV_SELECTIVE</name>) &amp;&amp; (<name><name>dcfg</name>-&gt;<name>mode</name></name> == <name>PRIV_SECURE</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>uid</name></name> || <name><name>cfg</name>-&gt;<name>gid</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_ON</name></expr></argument>, <argument><expr><name>PRIV_EFFECTIVE</name></expr></argument>, <argument><expr><name>priv_setid</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02136</expr></argument>)</argument_list></call>
"PRIV_ON failed restoring default user/group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>uid</name></name> &amp;&amp; (<call><name>setuid</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02137</expr></argument>)</argument_list></call>
"Error restoring default userid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>gid</name></name> &amp;&amp; (<call><name>setgid</name><argument_list>(<argument><expr><name><name>ap_unixd_config</name>.<name>group_id</name></name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02138</expr></argument>)</argument_list></call>
"Error restoring default group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_SET</name></expr></argument>, <argument><expr><name>PRIV_EFFECTIVE</name></expr></argument>, <argument><expr><name>priv_default</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02139</expr></argument>)</argument_list></call>
"Error restoring default privileges"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>privileges_req</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_proc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exitcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_exit_why_e</name></type> <name>exitwhy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fork_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>breadcrumb</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>breadcrumb</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fork_req</name> = (<name><name>cfg</name>-&gt;<name>mode</name></name> == <name>PRIV_SECURE</name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>privileges_module</name></expr></argument>, <argument><expr>&amp;<name><name>cfg</name>-&gt;<name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>mode</name></name> == <name>PRIV_SELECTIVE</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>dcfg</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>mode</name></name> != <name>PRIV_SELECTIVE</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dcfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fork_req</name> = (<name><name>dcfg</name>-&gt;<name>mode</name></name> == <name>PRIV_SECURE</name>)</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>fork_req</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_fork</name><argument_list>(<argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name>rv</name></expr>)</condition> <block>{
<case>case <expr><name>APR_INPARENT</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02140</expr></argument>)</argument_list></call>
"parent waiting for child"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_wait</name><argument_list>(<argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr>&amp;<name>exitcode</name></expr></argument>, <argument><expr>&amp;<name>exitwhy</name></expr></argument>, <argument><expr><name>APR_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02141</expr></argument>)</argument_list></call> "parent: child %s"</expr></argument>,
<argument><expr>(<name>rv</name> == <name>APR_CHILD_DONE</name>) ? "done" : "notdone"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>eos_sent</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
</case><case>case <expr><name>APR_INCHILD</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02142</expr></argument>)</argument_list></call> "In child!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02143</expr></argument>)</argument_list></call>
"Failed to fork secure child process!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
</default>}</block></switch>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>privileges_end_req</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>uid</name></name> || <name><name>cfg</name>-&gt;<name>gid</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_ON</name></expr></argument>, <argument><expr><name>PRIV_EFFECTIVE</name></expr></argument>, <argument><expr><name>priv_setid</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02144</expr></argument>)</argument_list></call>
"No privilege to set user/group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>uid</name></name> &amp;&amp; (<call><name>setuid</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>uid</name></name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02145</expr></argument>)</argument_list></call>
"Error setting userid"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>gid</name></name> &amp;&amp; (<call><name>setgid</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>gid</name></name></expr></argument>)</argument_list></call> == -1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02146</expr></argument>)</argument_list></call>
"Error setting group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_SET</name></expr></argument>, <argument><expr><name>PRIV_EFFECTIVE</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02147</expr></argument>)</argument_list></call>
"Error setting effective privileges"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_SET</name></expr></argument>, <argument><expr><name>PRIV_INHERITABLE</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02148</expr></argument>)</argument_list></call>
"Error setting inheritable privileges"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_SET</name></expr></argument>, <argument><expr><name>PRIV_LIMIT</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02149</expr></argument>)</argument_list></call>
"Error setting limit privileges"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>fork_req</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>setppriv</name><argument_list>(<argument><expr><name>PRIV_SET</name></expr></argument>, <argument><expr><name>PRIV_PERMITTED</name></expr></argument>, <argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02150</expr></argument>)</argument_list></call>
"Error setting permitted privileges"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PDROP_CHECK</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (x == -1) { ap_log_error(APLOG_MARK, APLOG_CRIT, errno, s, APLOGNO(02151) "Error dropping privileges"); return !OK; }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>privileges_drop_first</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>spcfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>sp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>priv_set_t</name> *</type><name>ppriv</name> <init>= <expr><call><name>priv_allocset</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>priv_copyset</name><argument_list>(<argument><expr><name>priv_setid</name></expr></argument>, <argument><expr><name>ppriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>sp</name> = <name>s</name></expr>;</init> <condition><expr><name>sp</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>sp</name>=<name><name>sp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>spcfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>sp</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>priv_union</name><argument_list>(<argument><expr><name><name>spcfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>ppriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<macro><name>PDROP_CHECK</name><argument_list>(<argument>setppriv(PRIV_SET, PRIV_PERMITTED, ppriv)</argument>)</argument_list></macro>
<macro><name>PDROP_CHECK</name><argument_list>(<argument>setppriv(PRIV_SET, PRIV_EFFECTIVE, ppriv)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>priv_freeset</name><argument_list>(<argument><expr><name>ppriv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>privileges_drop_last</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<macro><name>PDROP_CHECK</name><argument_list>(<argument>setppriv(PRIV_SET, PRIV_LIMIT, cfg-&gt;child_priv)</argument>)</argument_list></macro>
<macro><name>PDROP_CHECK</name><argument_list>(<argument>setppriv(PRIV_SET, PRIV_INHERITABLE, cfg-&gt;child_priv)</argument>)</argument_list></macro>
<macro><name>PDROP_CHECK</name><argument_list>(<argument>setppriv(PRIV_SET, PRIV_EFFECTIVE, cfg-&gt;priv)</argument>)</argument_list></macro>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>privileges_term</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>rec</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>priv_freeset</name><argument_list>(<argument><expr><name>priv_setid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>privileges_postconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>sp</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dtrace_enabled</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>sp</name> = <name>s</name></expr>;</init> <condition><expr><name>sp</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>sp</name> = <name><name>sp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>sp</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_DTRACE_KERNEL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03168</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_DTRACE_PROC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03169</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_DTRACE_USER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03170</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_DTRACE_KERNEL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03171</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_DTRACE_PROC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03172</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_DTRACE_USER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03173</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name>priv_default</name></expr></argument>, <argument><expr><name>PRIV_DTRACE_KERNEL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03174</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name>priv_default</name></expr></argument>, <argument><expr><name>PRIV_DTRACE_PROC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03175</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CR_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name>priv_default</name></expr></argument>, <argument><expr><name>PRIV_DTRACE_USER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03176</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>priv_setid</name> = <call><name>priv_allocset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>privileges_term</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>priv_emptyset</name><argument_list>(<argument><expr><name>priv_setid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>priv_addset</name><argument_list>(<argument><expr><name>priv_setid</name></expr></argument>, <argument><expr><name>PRIV_PROC_SETID</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02152</expr></argument>)</argument_list></call>
"priv_addset"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>privileges_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>threaded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_THREADED</name></expr></argument>, <argument><expr>&amp;<name>threaded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02153</expr></argument>)</argument_list></call>
"mod_privileges: unable to determine MPM characteristics."
" Please ensure you are using a non-threaded MPM "
"with this module."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>threaded</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02154</expr></argument>)</argument_list></call>
"mod_privileges is not compatible with a threaded MPM."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>privileges_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>privileges_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_header_parser</name><argument_list>(<argument><expr><name>privileges_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_drop_privileges</name><argument_list>(<argument><expr><name>privileges_drop_first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_drop_privileges</name><argument_list>(<argument><expr><name>privileges_drop_last</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>privileges_postconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>privileges_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_user</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>uid</name></name> = <call><name>ap_uname2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>uid</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid userid for VHostUser: "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_group</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>gid</name></name> = <call><name>ap_gname2id</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>uid</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid groupid for VHostGroup: "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_secure</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>arg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_FILE_LINK_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_INFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_SESSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_cgimode</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_FORK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_EXEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"secure"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_FORK</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_EXEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_FILE_LINK_ANY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_INFO</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>PRIV_PROC_SESSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"VHostCGIMode must be On, Off or Secure"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dtraceenable</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dtrace_enabled</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>privs_mode</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_mode</name></type> <name>mode</name> <init>= <expr><name>PRIV_UNSET</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"FAST"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>PRIV_FAST</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"SECURE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>PRIV_SECURE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"SELECTIVE"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>PRIV_SELECTIVE</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>priv_dir_cfg</name> *</type><name>cfg</name> <init>= <expr><name>dir</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mode</name></name> = <name>mode</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>mode</name> == <name>PRIV_UNSET</name>) || (<name>mode</name> == <name>PRIV_SELECTIVE</name>)</expr>)</condition><then> <block>{
<return>return <expr>"PrivilegesMode in a Directory context must be FAST or SECURE"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>mode</name></name> = <name>mode</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> == <name>PRIV_UNSET</name></expr>)</condition><then> <block>{
<return>return <expr>"PrivilegesMode must be FAST, SECURE or SELECTIVE"</expr>;</return>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_SECURITY_HOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_privs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>priv</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>priv</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>priv</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>priv</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>priv</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>priv_emptyset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>priv</name></name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_cgiprivs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>priv_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>privileges_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>priv</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>priv</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_delset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>priv</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>priv</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>priv</name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>priv_emptyset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CFG_CHECK</name><argument_list>(<argument><expr><call><name>priv_addset</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>child_priv</name></name></expr></argument>, <argument><expr><name>priv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>privileges_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VHostUser"</expr></argument>, <argument><expr><name>vhost_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Userid under which the virtualhost will run"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VHostGroup"</expr></argument>, <argument><expr><name>vhost_group</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Group under which the virtualhost will run"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"VHostSecure"</expr></argument>, <argument><expr><name>vhost_secure</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Run in enhanced security mode (default ON)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VHostCGIMode"</expr></argument>, <argument><expr><name>vhost_cgimode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Enable fork+exec for this virtualhost (Off|Secure|On)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"DTracePrivileges"</expr></argument>, <argument><expr><name>dtraceenable</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Enable DTrace"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"PrivilegesMode"</expr></argument>, <argument><expr><name>privs_mode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"tradeoff performance vs security (fast or secure)"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BIG_SECURITY_HOLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"VHostPrivs"</expr></argument>, <argument><expr><name>vhost_privs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Privileges available in the (virtual) server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"VHostCGIPrivs"</expr></argument>, <argument><expr><name>vhost_cgiprivs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Privileges available to external programs"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>privileges</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>privileges_create_dir_cfg</name></expr>,
<expr><name>privileges_merge_dir_cfg</name></expr>,
<expr><name>privileges_create_cfg</name></expr>,
<expr><name>privileges_merge_cfg</name></expr>,
<expr><name>privileges_cmds</name></expr>,
<expr><name>privileges_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
