<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/metadata/mod_ident.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_RFC1413</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_RFC1413</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC1413_UNSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>RFC1413_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC1413_TIMEOUT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC1413_PORT</name></cpp:macro> <cpp:value>113</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC1413_USERLEN</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFC1413_MAXDATA</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_UNKNOWN</name></cpp:macro> <cpp:value>"unknown"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>do_rfc1413</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout_unset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>ident_config_rec</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>rfc1413_connect</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> **</type><name>newsock</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>srv</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>localsa</name></decl>, *<decl><type ref="prev"/><name>destsa</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>localsa</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>local_ip</name></name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01492</expr></argument>)</argument_list></call>
"rfc1413: apr_sockaddr_info_get(%s) failed"</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>local_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>destsa</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>client_ip</name></name></expr></argument>,
<argument><expr><name><name>localsa</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>RFC1413_PORT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01493</expr></argument>)</argument_list></call>
"rfc1413: apr_sockaddr_info_get(%s) failed"</expr></argument>,
<argument><expr><name><name>conn</name>-&gt;<name>client_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>,
<argument><expr><name><name>localsa</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01494</expr></argument>)</argument_list></call>
"rfc1413: error creating query socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01495</expr></argument>)</argument_list></call>
"rfc1413: error setting query socket timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>localsa</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01496</expr></argument>)</argument_list></call>
"rfc1413: Error binding query socket to local port"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>destsa</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>rfc1413_query</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>conn</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>srv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>rmt_port</name></decl>, <decl><type ref="prev"/><name>our_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>sav_rmt_port</name></decl>, <decl><type ref="prev"/><name>sav_our_port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>RFC1413_MAXDATA</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>user</name><index>[<expr><name>RFC1413_USERLEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buflen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sav_our_port</name> = <name><name>conn</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sav_rmt_port</name> = <name><name>conn</name>-&gt;<name>client_addr</name>-&gt;<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>buflen</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%hu,%hu\r\n"</expr></argument>, <argument><expr><name>sav_rmt_port</name></expr></argument>,
<argument><expr><name>sav_our_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>i</name> &lt; <name>buflen</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>j</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name> + <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_send</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name>+<name>i</name></expr></argument>, <argument><expr>&amp;<name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01497</expr></argument>)</argument_list></call>
"write: rfc1413: error sending request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>j</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name>+=<name>j</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></while>
<expr_stmt><expr><name>i</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>cp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>'\012'</expr></argument>)</argument_list></call>) == <name>NULL</name> &amp;&amp; <name>i</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>j</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> - 1 - <name>i</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>buffer</name>+<name>i</name></expr></argument>, <argument><expr>&amp;<name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01498</expr></argument>)</argument_list></call>
"read: rfc1413: error reading response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>j</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name>+=<name>j</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>j</name> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if></else></if></else></if>
}</block></while>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"%hu , %hu : USERID :%*[^:]:%512s"</expr></argument>, <argument><expr>&amp;<name>rmt_port</name></expr></argument>, <argument><expr>&amp;<name>our_port</name></expr></argument>,
<argument><expr><name>user</name></expr></argument>)</argument_list></call> != 3 || <name>sav_rmt_port</name> != <name>rmt_port</name>
|| <name>sav_our_port</name> != <name>our_port</name></expr>)</condition><then>
<return>return <expr><name>APR_EINVAL</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>cp</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr>'\r'</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr>*<name>cp</name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>conn</name>-&gt;<name>remote_logname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_idcheck</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>do_rfc1413</name></name> = <name>arg</name> ? 1 : 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>d_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>d</name> <init>= <expr><name>d_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>d</name>-&gt;<name>timeout_unset</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_ident_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>do_rfc1413</name></name> = <name>DEFAULT_RFC1413</name> | <name>RFC1413_UNSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>RFC1413_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>timeout_unset</name></name> = 1</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_ident_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>old_</name></decl></param>, <param><decl><type><name>void</name> *</type><name>new_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>conf</name> <init>= <expr>(<name>ident_config_rec</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>old</name> <init>= <expr>(<name>ident_config_rec</name> *) <name>old_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>new</name> <init>= <expr>(<name>ident_config_rec</name> *) <name>new_</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>timeout</name></name> = <name><name>new</name>-&gt;<name>timeout_unset</name></name>
? <name><name>old</name>-&gt;<name>timeout</name></name>
: <name><name>new</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>do_rfc1413</name></name> = <name><name>new</name>-&gt;<name>do_rfc1413</name></name> &amp; <name>RFC1413_UNSET</name>
? <name><name>old</name>-&gt;<name>do_rfc1413</name></name>
: <name><name>new</name>-&gt;<name>do_rfc1413</name></name></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>ident_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"IdentityCheck"</expr></argument>, <argument><expr><name>set_idcheck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Enable identd (RFC 1413) user lookups - SLOW"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"IdentityCheckTimeout"</expr></argument>, <argument><expr><name>set_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Identity check (RFC 1413) timeout duration (sec)"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>ident_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ap_ident_lookup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ident_config_rec</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>conn</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>srv</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>ident_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>conf</name>-&gt;<name>do_rfc1413</name></name> &amp; ~<name>RFC1413_UNSET</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>rfc1413_connect</name><argument_list>(<argument><expr>&amp;<name>sock</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>rfc1413_query</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>conn</name></expr></argument>, <argument><expr><name>srv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conn</name>-&gt;<name>remote_logname</name></name> = <name>FROM_UNKNOWN</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(const <name>char</name> *)<name><name>conn</name>-&gt;<name>remote_logname</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_ident_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_ident_dir_config</name></expr>,
<expr><name>merge_ident_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>ident_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
