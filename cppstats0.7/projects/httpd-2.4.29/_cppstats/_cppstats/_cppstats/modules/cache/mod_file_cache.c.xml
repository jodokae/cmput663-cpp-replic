<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/cache/mod_file_cache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!(<name>APR_HAS_SENDFILE</name> || <name>APR_HAS_MMAP</name>)</expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> mod_file_cache only works on systems with APR_HAS_SENDFILE or APR_HAS_MMAP</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_mmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>file_cache_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_mmapped</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_mmap_t</name> *</type><name>mm</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>char</name></type> <name><name>mtimestr</name><index>[<expr><name>APR_RFC822_DATE_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sizestr</name><index>[<expr>21</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>a_file</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>fileht</name></decl>;</decl_stmt>
}</block></struct></type> <name>a_server_config</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>a_server_config</name> *</type><name>sconf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>sconf</name>-&gt;<name>fileht</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>sconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_the_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><name>int</name></type> <name>mmap</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>a_server_config</name> *</type><name>sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>a_file</name> *</type><name>new_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>a_file</name></type> <name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fspec</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fspec</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fspec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00794</expr></argument>)</argument_list></call>
"invalid file path "
"%s, skipping"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>tmp</name>.<name>finfo</name></name></expr></argument>, <argument><expr><name>fspec</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00795</expr></argument>)</argument_list></call>
"unable to stat(%s), skipping"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>tmp</name>.<name>finfo</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00796</expr></argument>)</argument_list></call>
"%s isn't a regular file, skipping"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>tmp</name>.<name>finfo</name>.<name>size</name></name> &gt; <name>AP_MAX_SENDFILE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00797</expr></argument>)</argument_list></call>
"%s is too large to cache, skipping"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name>fspec</name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BINARY</name> | <name>APR_XTHREAD</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00798</expr></argument>)</argument_list></call>
"unable to open(%s, O_RDONLY), skipping"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_inherit_set</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_file</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_file</name>-&gt;<name>finfo</name></name> = <name><name>tmp</name>.<name>finfo</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<if>if <condition>(<expr><name>mmap</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_mmap_create</name><argument_list>(<argument><expr>&amp;<name><name>new_file</name>-&gt;<name>mm</name></name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>(<name>apr_size_t</name>)<name><name>new_file</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>,
<argument><expr><name>APR_MMAP_READ</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00799</expr></argument>)</argument_list></call>
"unable to mmap %s, skipping"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_file</name>-&gt;<name>is_mmapped</name></name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
<if>if <condition>(<expr>!<name>mmap</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_file</name>-&gt;<name>is_mmapped</name></name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_file</name>-&gt;<name>file</name></name> = <name>fd</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>new_file</name>-&gt;<name>filename</name></name> = <name>fspec</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name><name>new_file</name>-&gt;<name>mtimestr</name></name></expr></argument>, <argument><expr><name><name>new_file</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>new_file</name>-&gt;<name>sizestr</name></name></expr></argument>, <argument><expr>sizeof <name><name>new_file</name>-&gt;<name>sizestr</name></name></expr></argument>, <argument><expr>"%" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>new_file</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>file_cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>fileht</name></name></expr></argument>, <argument><expr><name><name>new_file</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>new_file</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>new_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cachefilehandle</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
<expr_stmt><expr><call><name>cache_the_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00800</expr></argument>)</argument_list></call>
"unable to cache file: %s. Sendfile is not supported on this OS"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cachefilemmap</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<expr_stmt><expr><call><name>cache_the_file</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00801</expr></argument>)</argument_list></call>
"unable to cache file: %s. MMAP is not supported by this OS"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>file_cache_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>file_cache_xlat</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>a_server_config</name> *</type><name>sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>a_file</name> *</type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>file_cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_hash_count</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>fileht</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>ap_core_translate</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != <name>OK</name> || !<name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>match</name> = (<name>a_file</name> *) <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>fileht</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>match</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>file_cache_module</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>finfo</name></name> = <name><name>match</name>-&gt;<name>finfo</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mmap_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>a_file</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_mmap_t</name> *</type><name>mm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_mmap_dup</name><argument_list>(<argument><expr>&amp;<name>mm</name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>mm</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_mmap_create</name><argument_list>(<argument><expr><name>mm</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>apr_size_t</name>)<name><name>file</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sendfile_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>a_file</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name> <init>= <expr><call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>file</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>file</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>file_cache_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>a_file</name> *</type><name>match</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>errstatus</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_strcmp_match</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"*/*"</expr></argument>)</argument_list></call> &amp;&amp; !<call><name>AP_IS_DEFAULT_HANDLER_NAME</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><name>match</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>file_cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>match</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_GET</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>errstatus</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
<return>return <expr><name>errstatus</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>match</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>mod_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>datestr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mod_time</name> = <call><name>ap_rationalize_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mod_time</name> == <name><name>match</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr>)</condition><then>
<expr_stmt><expr><name>datestr</name> = <name><name>match</name>-&gt;<name>mtimestr</name></name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>datestr</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>datestr</name></expr></argument>, <argument><expr><name>mod_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>, <argument><expr><name>datestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><name><name>r</name>-&gt;<name>clength</name></name> = <name><name>match</name>-&gt;<name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>, <argument><expr><name><name>match</name>-&gt;<name>sizestr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>errstatus</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>errstatus</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>match</name>-&gt;<name>is_mmapped</name></name> == <name>TRUE</name></expr>)</condition><then>
<expr_stmt><expr><name>rc</name> = <call><name>mmap_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rc</name> = <call><name>sendfile_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>command_rec</name></type> <name><name>file_cache_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"cachefile"</expr></argument>, <argument><expr><name>cachefilehandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A space separated list of files to add to the file handle cache at config time"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"mmapfile"</expr></argument>, <argument><expr><name>cachefilemmap</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A space separated list of files to mmap at config time"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>file_cache_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>file_cache_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>file_cache_xlat</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>file_cache</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_server_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>file_cache_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
