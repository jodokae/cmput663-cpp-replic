<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/cache/cache_storage.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_util.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<extern>extern APR_OPTIONAL_FN_TYPE(ap_cache_generate_key</extern>) <expr_stmt><expr>*<name>cache_generate_key</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>cache_module</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>cache_remove_url</name><parameter_list>(<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>list</name> = <name><name>cache</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>h</name> = <name><name>cache</name>-&gt;<name>stale_handle</name></name> ? <name><name>cache</name>-&gt;<name>stale_handle</name></name> : <name><name>cache</name>-&gt;<name>handle</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>h</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00691</expr></argument>)</argument_list></call>
"cache: Removing url %s from the cache"</expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>remove_url</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cache_create_entity</name><parameter_list>(<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_handle_t</name> *</type><name>h</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_handle_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00692</expr></argument>)</argument_list></call>
"cache: No cache request information available for key"
" generation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cache</name>-&gt;<name>key</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>cache_generate_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>cache</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <name><name>cache</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>create_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>OK</name></expr>: <block>{
<expr_stmt><expr><name><name>cache</name>-&gt;<name>handle</name></name> = <name>h</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>provider</name></name> = <name><name>list</name>-&gt;<name>provider</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>provider_name</name></name> = <name><name>list</name>-&gt;<name>provider_name</name></name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
</case><case>case <expr><name>DECLINED</name></expr>: <block>{
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block>
</case><default>default: <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block>
</default>}</block></switch>
}</block></while>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_header_do</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(*<name>key</name> == 'W' || *<name>key</name> == 'w') &amp;&amp; !<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Warning"</expr></argument>)</argument_list></call>
&amp;&amp; *<name>val</name> == '1'</expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_header_do</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>(*<name>key</name> == 'W' || *<name>key</name> == 'w') &amp;&amp; !<call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Warning"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_header_do</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>cache_accept_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>top</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>bottom</name></decl></param>, <param><decl><type><name>int</name></type> <name>revalidation</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>revalidation</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>filter_header_do</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_out</name></name> != <name>bottom</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>remove_header_do</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>add_header_do</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>v</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>v</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>v</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>cache_select</name><parameter_list>(<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00693</expr></argument>)</argument_list></call>
"cache: No cache request information available for key"
" generation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_cache_check_no_cache</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cache</name>-&gt;<name>key</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>cache_generate_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>cache</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>h</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_handle_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name><name>cache</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr>(<name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>open_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<case>case <expr><name>OK</name></expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>vary</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mismatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>last</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>recall_headers</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>vary</name> = <call><name>cache_strqtok</name><argument_list>(
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>CACHE_SEPARATOR</name></expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>vary</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>h1</name></decl>, *<decl><type ref="prev"/><name>h2</name></decl>;</decl_stmt>
<expr_stmt><expr><name>h1</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>vary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h2</name> = <call><name>cache_table_getm</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>req_hdrs</name></name></expr></argument>, <argument><expr><name>vary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>h1</name> == <name>h2</name></expr>)</condition><then> <block>{
}</block></then> <else>else <if>if <condition>(<expr><name>h1</name> &amp;&amp; <name>h2</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00694</expr></argument>)</argument_list></call> "cache_select(): Vary header mismatch."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mismatch</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if>
<expr_stmt><expr><name>vary</name> = <call><name>cache_strqtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CACHE_SEPARATOR</name></expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>mismatch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>provider</name></name> = <name><name>list</name>-&gt;<name>provider</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>provider_name</name></name> = <name><name>list</name>-&gt;<name>provider_name</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_condition_if_match</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>)</argument_list></call> == <name>AP_CONDITION_NOMATCH</name>
|| <call><name>ap_condition_if_unmodified_since</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>)</argument_list></call>
== <name>AP_CONDITION_NOMATCH</name>
|| <call><name>ap_condition_if_none_match</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>)</argument_list></call>
== <name>AP_CONDITION_NOMATCH</name>
|| <call><name>ap_condition_if_modified_since</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>)</argument_list></call>
== <name>AP_CONDITION_NOMATCH</name>
|| <call><name>ap_condition_if_range</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>)</argument_list></call> == <name>AP_CONDITION_NOMATCH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mismatch</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mismatch</name> || !<call><name>cache_check_freshness</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>etag</name></decl>, *<decl><type ref="prev"/><name>lastmod</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>control_in</name>.<name>only_if_cached</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>stale_headers</name></name> = <call><name>apr_table_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>stale_handle</name></name> = <name>h</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mismatch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00695</expr></argument>)</argument_list></call> "Cached response for %s isn't fresh. Adding "
"conditional request headers."</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Modified-Since"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-None-Match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Unmodified-Since"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>etag</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>lastmod</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>etag</name> || <name>lastmod</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>etag</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-None-Match"</expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>lastmod</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"If-Modified-Since"</expr></argument>,
<argument><expr><name>lastmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>cache_accept_headers</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cache</name>-&gt;<name>handle</name></name> = <name>h</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
</case><case>case <expr><name>DECLINED</name></expr>: <block>{
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block>
</case><default>default: <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block>
</default>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name><name>cache</name>-&gt;<name>control_in</name>.<name>only_if_cached</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00696</expr></argument>)</argument_list></call>
"cache: 'only-if-cached' requested and no cached entity, "
"returning 504 Gateway Timeout for: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_GATEWAY_TIME_OUT</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cache_canonicalise_key</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>parsed_uri</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>port_str</name></decl>, *<decl><type ref="prev"/><name>hn</name></decl>, *<decl><type ref="prev"/><name>lcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>, *<decl><type ref="prev"/><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>kpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>kquery</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>key</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = (<name>cache_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cache_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>proxyreq</name></name> || (<name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_REVERSE</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>base_uri</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hostname</name> = <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>hostname</name> = <call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hostname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hostname</name> = "_default_"</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>parsed_uri</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>hn</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>parsed_uri</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>hn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hostname</name> = <name>hn</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>hostname</name> = "_default_"</expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> &amp;&amp; <name><name>parsed_uri</name>-&gt;<name>scheme</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lcs</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>parsed_uri</name>-&gt;<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>lcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scheme</name> = <name>lcs</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>base_uri</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>scheme</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>scheme</name> = <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>scheme</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>scheme</name> = <call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> &amp;&amp; (<name><name>r</name>-&gt;<name>proxyreq</name></name> != <name>PROXYREQ_REVERSE</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>parsed_uri</name>-&gt;<name>port_str</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port_str</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>parsed_uri</name>-&gt;<name>port_str</name></name></expr></argument>)</argument_list></call> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>port_str</name><index>[<expr>0</expr>]</index></name> = ':'</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>parsed_uri</name>-&gt;<name>port_str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>port_str</name><index>[<expr><name>i</name> + 1</expr>]</index></name> = <call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>parsed_uri</name>-&gt;<name>port_str</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>":%u"</expr></argument>, <argument><expr><call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>port_str</name> = ""</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>base_uri</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>port_str</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port_str</name> = <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>port_str</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>base_uri</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>base_uri</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port_str</name> = ""</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>port_str</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>":%u"</expr></argument>, <argument><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></else></if>
<expr_stmt><expr><name>kpath</name> = <name>path</name></expr>;</expr_stmt>
<expr_stmt><expr><name>kquery</name> = <name><name>conf</name>-&gt;<name>ignorequerystring</name></name> ? <name>NULL</name> : <name>query</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>ignore_session_id</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>identifier</name></decl>;</decl_stmt>
<expr_stmt><expr><name>identifier</name> = (<name>char</name> **) <name><name>conf</name>-&gt;<name>ignore_session_id</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>ignore_session_id</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>identifier</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>param</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr>*<name>identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>param</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>kpath</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call>)
&amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name>param</name> + 1</expr></argument>, <argument><expr>*<name>identifier</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>
&amp;&amp; (*(<name>param</name> + <name>len</name> + 1) == '=')
&amp;&amp; !<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>param</name> + <name>len</name> + 2</expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>kpath</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kpath</name></expr></argument>, <argument><expr><name>param</name> - <name>kpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>kquery</name> &amp;&amp; *<name>kquery</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>kquery</name></expr></argument>, <argument><expr>*<name>identifier</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>kquery</name><index>[<expr><name>len</name></expr>]</index></name> == '='</expr>)</condition><then> <block>{
<expr_stmt><expr><name>param</name> = <name>kquery</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>complete</name></decl>;</decl_stmt>
<expr_stmt><expr><name>complete</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>*<name>identifier</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>param</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>kquery</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>param</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>param</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>param</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>amp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>kquery</name> != <name>param</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dup</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kquery</name></expr></argument>, <argument><expr><name>param</name> - <name>kquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>kquery</name> = <name>dup</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>kquery</name> = ""</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>amp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>param</name> + <name>len</name> + 1</expr></argument>, <argument><expr>'&amp;'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>kquery</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>kquery</name></expr></argument>, <argument><expr><name>amp</name> + 1</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>dup</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dup</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr>*<name>key</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr>"://"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>port_str</name></expr></argument>,
<argument><expr><name>kpath</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name>kquery</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00698</expr></argument>)</argument_list></call>
"cache: Key for entity %s?%s is %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr>*<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>cache_generate_key_default</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name>*</type> <name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><name><name>r</name>-&gt;<name>uri</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name> <init>= <expr><name><name>r</name>-&gt;<name>args</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>cache_use_early_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>query</name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>cache_canonicalise_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cache_invalidate</name><parameter_list>(<param><decl><type><name>cache_request_rec</name> *</type><name>cache</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cache_provider_list</name> *</type><name>list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>status</name> <init>= <expr><name>DECLINED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>location_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>content_location_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl>, *<decl><type ref="prev"/><name>location_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_location</name></decl>, *<decl><type ref="prev"/><name>content_location_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>cache</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00697</expr></argument>)</argument_list></call> "cache: No cache request information available for key"
" generation"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cache</name>-&gt;<name>key</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>cache_generate_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>cache</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>location</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>&amp;<name>location_uri</name></expr></argument>)</argument_list></call>
|| <call><name>cache_canonicalise_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>location_uri</name>.<name>path</name></name></expr></argument>,
<argument><expr><name><name>location_uri</name>.<name>query</name></name></expr></argument>,
<argument><expr>&amp;<name>location_uri</name></expr></argument>, <argument><expr>&amp;<name>location_key</name></expr></argument>)</argument_list></call>
|| !(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name>
&amp;&amp; <name><name>location_uri</name>.<name>hostname</name></name>
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name><name>location_uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>location_key</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>content_location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Location"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>content_location</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>content_location</name></expr></argument>,
<argument><expr>&amp;<name>content_location_uri</name></expr></argument>)</argument_list></call>
|| <call><name>cache_canonicalise_key</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>content_location_uri</name>.<name>path</name></name></expr></argument>,
<argument><expr><name><name>content_location_uri</name>.<name>query</name></name></expr></argument>,
<argument><expr>&amp;<name>content_location_uri</name></expr></argument>,
<argument><expr>&amp;<name>content_location_key</name></expr></argument>)</argument_list></call>
|| !(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name>
&amp;&amp; <name><name>content_location_uri</name>.<name>hostname</name></name>
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name><name>content_location_uri</name>.<name>hostname</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>content_location_key</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>h</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_handle_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>list</name> = <name><name>cache</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>list</name></expr>)</condition> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>open_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>invalidate_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02468</expr></argument>)</argument_list></call> "cache: Attempted to invalidate cached entity with key: %s"</expr></argument>, <argument><expr><name><name>cache</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>location_key</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>open_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>location_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>invalidate_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02469</expr></argument>)</argument_list></call> "cache: Attempted to invalidate cached entity with key: %s"</expr></argument>, <argument><expr><name>location_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>content_location_key</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>open_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>content_location_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>OK</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name><name>list</name>-&gt;<name>provider</name>-&gt;<name>invalidate_entity</name></name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02470</expr></argument>)</argument_list></call> "cache: Attempted to invalidate cached entity with key: %s"</expr></argument>, <argument><expr><name>content_location_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>list</name> = <name><name>list</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
</unit>
