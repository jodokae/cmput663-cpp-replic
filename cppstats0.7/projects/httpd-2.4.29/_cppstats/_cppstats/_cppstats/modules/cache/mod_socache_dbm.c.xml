<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/cache/mod_socache_dbm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_socache.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>ap_socache_instance_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>expiry_interval</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_MODE</name></cpp:macro> <cpp:value>( APR_UREAD | APR_UWRITE | APR_GREAD | APR_WREAD )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DBM_PREFIX</name></cpp:macro> <cpp:value>"socache-dbm-"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DBM_FILE_SUFFIX_DIR</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>DBM_FILE_SUFFIX_PAG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DBM_SUFFIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_SUFFIX_DIR</name></cpp:macro> <cpp:value>DBM_SUFFIX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_SUFFIX_PAG</name></cpp:macro> <cpp:value>DBM_SUFFIX</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call> || (<call><name>defined</name><argument_list>(<argument><expr><name>DB_LOCK</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DB_SHMEM</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_SUFFIX_DIR</name></cpp:macro> <cpp:value>".db"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_SUFFIX_PAG</name></cpp:macro> <cpp:value>".db"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_SUFFIX_DIR</name></cpp:macro> <cpp:value>".dir"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBM_FILE_SUFFIX_PAG</name></cpp:macro> <cpp:value>".pag"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>socache_dbm_expire</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dbm_remove</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>socache_dbm_create</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> **</type><name>context</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>tmp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>context</name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> &amp;&amp; *<name>arg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>data_file</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>data_file</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>"Invalid cache file path %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>try_chown</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>suffix</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>suffix</name></expr>)</condition><then>
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>-1 == <call><name>chown</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>,
<argument><expr>(<name>gid_t</name>)-1</expr></argument> )</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>errno</name> != <name>ENOENT</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00802</expr></argument>)</argument_list></call>
"Can't change owner of %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dbm_init</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl></param>,
<param><decl><type><specifier>const</specifier> struct <name>ap_socache_hints</name> *</type><name>hints</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>data_file</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DEFAULT_DBM_PREFIX</name></expr></argument>, <argument><expr><name>namespace</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>data_file</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>data_file</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00803</expr></argument>)</argument_list></call>
"could not use default path '%s' for DBM socache"</expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>,
<argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>, <argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00804</expr></argument>)</argument_list></call>
"Cannot create socache DBM file `%s'"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>expiry_interval</name></name> = (<name>hints</name> &amp;&amp; <name><name>hints</name>-&gt;<name>expiry_interval</name></name>
? <name><name>hints</name>-&gt;<name>expiry_interval</name></name> : <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>30</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>geteuid</name><argument_list>()</argument_list></call> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>DBM_FILE_SUFFIX_DIR</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".db"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".dir"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
<if>if <condition>(<expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>DBM_FILE_SUFFIX_PAG</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<if>if <condition>(<expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".db"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>try_chown</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".pag"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>socache_dbm_expire</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_dbm_destroy</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>DBM_FILE_SUFFIX_DIR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>DBM_FILE_SUFFIX_PAG</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".dir"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".pag"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr>".db"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dbm_store</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>ucaData</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>nData</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PAIRMAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>idlen</name> + <name>nData</name>) &gt;= <name>PAIRMAX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00805</expr></argument>)</argument_list></call>
"data size too large for DBM socache: %d &gt;= %d"</expr></argument>,
<argument><expr>(<name>idlen</name> + <name>nData</name>)</expr></argument>, <argument><expr><name>PAIRMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr>(<name>idlen</name> + <name>nData</name>) &gt;= 950</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00806</expr></argument>)</argument_list></call>
"data size too large for DBM socache: %d &gt;= %d"</expr></argument>,
<argument><expr>(<name>idlen</name> + <name>nData</name>)</expr></argument>, <argument><expr>950</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dptr</name></name> = (<name>char</name> *)<name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dsize</name></name> = <name>idlen</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmval</name>.<name>dsize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof> + <name>nData</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmval</name>.<name>dptr</name></name> = (<name>char</name> *)<call><name>ap_malloc</name><argument_list>(<argument><expr><name><name>dbmval</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>dbmval</name>.<name>dptr</name></name></expr></argument>, <argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>dbmval</name>.<name>dptr</name></name>+<sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ucaData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>,
<argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>, <argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00807</expr></argument>)</argument_list></call>
"Cannot open socache DBM file `%s' for writing "
"(store)"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_store</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>, <argument><expr><name>dbmval</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00808</expr></argument>)</argument_list></call>
"Cannot store socache object to DBM file `%s'"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>socache_dbm_expire</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dbm_retrieve</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>destlen</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>socache_dbm_expire</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dptr</name></name> = (<name>char</name> *)<name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dsize</name></name> = <name>idlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00809</expr></argument>)</argument_list></call>
"Cannot open socache DBM file `%s' for reading "
"(fetch)"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>, <argument><expr>&amp;<name>dbmval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dbmval</name>.<name>dptr</name></name> == <name>NULL</name> || <name><name>dbmval</name>.<name>dsize</name></name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>nData</name> = <name><name>dbmval</name>.<name>dsize</name></name>-<sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nData</name> &gt; *<name>destlen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ENOSPC</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>destlen</name> = <name>nData</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr>(<name>char</name> *)<name><name>dbmval</name>.<name>dptr</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expiry</name> &lt;= <name>now</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>socache_dbm_remove</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dbm_remove</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>idlen</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dptr</name></name> = (<name>char</name> *)<name>id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dsize</name></name> = <name>idlen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00810</expr></argument>)</argument_list></call>
"Cannot open socache DBM file `%s' for writing "
"(delete)"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_delete</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_dbm_expire</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>deleted</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name> *</type><name>keylist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keyidx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>now</name> &lt; <name><name>ctx</name>-&gt;<name>last_expiry</name></name> + <name><name>ctx</name>-&gt;<name>expiry_interval</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>last_expiry</name></name> = <name>now</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYMAX</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>keylist</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbmkey</name></expr></argument>)</argument_list></sizeof>*<name>KEYMAX</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>keyidx</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00811</expr></argument>)</argument_list></call>
"Cannot open socache DBM file `%s' for "
"scanning"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr>&amp;<name>dbmkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>dbmkey</name>.<name>dptr</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>elts</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>expired</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>, <argument><expr>&amp;<name>dbmval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dbmval</name>.<name>dsize</name></name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof> || <name><name>dbmval</name>.<name>dptr</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>expired</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expiry</name> &lt;= <name>now</name></expr>)</condition><then>
<expr_stmt><expr><name>expired</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>expired</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>keylist</name><index>[<expr><name>keyidx</name></expr>]</index></name>.<name>dptr</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbmkey</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>dbmkey</name>.<name>dsize</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>keylist</name><index>[<expr><name>keyidx</name></expr>]</index></name>.<name>dsize</name> = <name><name>dbmkey</name>.<name>dsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>keyidx</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>keyidx</name> == <name>KEYMAX</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr>&amp;<name>dbmkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00812</expr></argument>)</argument_list></call>
"Cannot re-open socache DBM file `%s' for "
"expiring"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>keyidx</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_dbm_delete</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name><name>keylist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>deleted</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>keyidx</name> &lt; <name>KEYMAX</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00813</expr></argument>)</argument_list></call>
"DBM socache expiry: "
"old: %d, new: %d, removed: %d"</expr></argument>,
<argument><expr><name>elts</name></expr></argument>, <argument><expr><name>elts</name>-<name>deleted</name></expr></argument>, <argument><expr><name>deleted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_dbm_status</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>avg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>elts</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00814</expr></argument>)</argument_list></call>
"Cannot open socache DBM file `%s' for status "
"retrival"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr>&amp;<name>dbmkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for ( <init>;</init> <condition><expr><name><name>dbmkey</name>.<name>dptr</name></name> != <name>NULL</name></expr>;</condition> <incr><expr><call><name>apr_dbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr>&amp;<name>dbmkey</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>, <argument><expr>&amp;<name>dbmval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dbmval</name>.<name>dptr</name></name> == <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>elts</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> += <name><name>dbmval</name>.<name>dsize</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &gt; 0 &amp;&amp; <name>elts</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>avg</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name>size</name> / (<name>long</name>)<name>elts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>avg</name> = 0</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"cache type: &lt;b&gt;DBM&lt;/b&gt;, maximum size: &lt;b&gt;unlimited&lt;/b&gt;&lt;br&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"current entries: &lt;b&gt;%d&lt;/b&gt;, current size: &lt;b&gt;%ld&lt;/b&gt; bytes&lt;br&gt;"</expr></argument>, <argument><expr><name>elts</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"average entry size: &lt;b&gt;%d&lt;/b&gt; bytes&lt;br&gt;"</expr></argument>, <argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"CacheType: DBM\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"CacheMaximumSize: unlimited\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheCurrentEntries: %d\n"</expr></argument>, <argument><expr><name>elts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheCurrentSize: %ld\n"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"CacheAvgEntrySize: %d\n"</expr></argument>, <argument><expr><name>avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>socache_dbm_iterate</name><parameter_list>(<param><decl><type><name>ap_socache_instance_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userctx</name></decl></param>,
<param><decl><type><name>ap_socache_iterator_t</name> *</type><name>iterator</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>expired</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name>dbm</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>DBM_FILE_MODE</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00815</expr></argument>)</argument_list></call>
"Cannot open socache DBM file `%s' for "
"iterating"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_firstkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr>&amp;<name>dbmkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>dbmkey</name>.<name>dptr</name></name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>expired</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>, <argument><expr>&amp;<name>dbmval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dbmval</name>.<name>dsize</name></name> &lt;= <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof> || <name><name>dbmval</name>.<name>dptr</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>expired</name> = <name>TRUE</name></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expiry</name> &lt;= <name>now</name></expr>)</condition><then>
<expr_stmt><expr><name>expired</name> = <name>TRUE</name></expr>;</expr_stmt></then></if>
}</block></else></if>
<if>if <condition>(<expr>!<name>expired</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>iterator</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>userctx</name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<name><name>dbmkey</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>dbmkey</name>.<name>dsize</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<name><name>dbmval</name>.<name>dptr</name></name> + <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>dbmval</name>.<name>dsize</name></name> - <sizeof>sizeof<argument_list>(<argument><expr><name>apr_time_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00816</expr></argument>)</argument_list></call>
"dbm `%s' entry iterated"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_nextkey</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr>&amp;<name>dbmkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00817</expr></argument>)</argument_list></call>
"Failure reading first/next socache DBM file `%s' record"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>data_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_socache_provider_t</name></type> <name>socache_dbm</name> <init>= <expr><block>{
<expr>"dbm"</expr>,
<expr><name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>,
<expr><name>socache_dbm_create</name></expr>,
<expr><name>socache_dbm_init</name></expr>,
<expr><name>socache_dbm_destroy</name></expr>,
<expr><name>socache_dbm_store</name></expr>,
<expr><name>socache_dbm_retrieve</name></expr>,
<expr><name>socache_dbm_remove</name></expr>,
<expr><name>socache_dbm_status</name></expr>,
<expr><name>socache_dbm_iterate</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbm"</expr></argument>,
<argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>socache_dbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>socache_dbm</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
