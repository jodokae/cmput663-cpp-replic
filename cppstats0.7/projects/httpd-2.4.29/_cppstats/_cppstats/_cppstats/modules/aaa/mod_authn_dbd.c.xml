<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/aaa/mod_authn_dbd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu_version.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authn_dbd_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl>;</decl_stmt>
}</block></struct></type> <name>authn_dbd_conf</name>;</typedef>
<expr_stmt><expr>static <call><call><name>ap_dbd_t</name> *<argument_list>(<argument><expr>*<name>authn_dbd_acquire_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name>*</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>void</name> <argument_list>(<argument><expr>*<name>authn_dbd_prepare_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>server_rec</name>*</expr></argument>, <argument><expr>const <name>char</name>*</expr></argument>, <argument><expr>const <name>char</name>*</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_authn_cache_store</name></expr></argument>)</argument_list></call> *<name>authn_cache_store</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_CACHE_STORE</name><parameter_list>(<param><type><name>r</name></type></param>,<param><type><name>user</name></type></param>,<param><type><name>realm</name></type></param>,<param><type><name>data</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (authn_cache_store != NULL) authn_cache_store((r), "dbd", (user), (realm), (data))</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>authn_dbd_cr_conf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_dbd_conf</name> *</type><name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_dbd_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>authn_dbd_merge_conf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>BASE</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_dbd_conf</name> *</type><name>add</name> <init>= <expr><name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_dbd_conf</name> *</type><name>base</name> <init>= <expr><name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_dbd_conf</name> *</type><name>ret</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_dbd_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>user</name></name> = (<name><name>add</name>-&gt;<name>user</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>user</name></name> : <name><name>add</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>realm</name></name> = (<name><name>add</name>-&gt;<name>realm</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>realm</name></name> : <name><name>add</name>-&gt;<name>realm</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authn_dbd_prepare</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>label_num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>label</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>authn_dbd_prepare_fn</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>authn_dbd_prepare_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>authn_dbd_prepare_fn</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"You must load mod_dbd to enable AuthDBD functions"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>authn_dbd_acquire_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>label</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"authn_dbd_%d"</expr></argument>, <argument><expr>++<name>label_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>authn_dbd_prepare_fn</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_set_string_slot</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authn_dbd_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDBDUserPWQuery"</expr></argument>, <argument><expr><name>authn_dbd_prepare</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_dbd_conf</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Query used to fetch password for user"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDBDUserRealmQuery"</expr></argument>, <argument><expr><name>authn_dbd_prepare</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_dbd_conf</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"Query used to fetch password for user+realm"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>authn_dbd_password</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbd_password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>statement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_row_t</name> *</type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_dbd_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name> <init>= <expr><call><name>authn_dbd_acquire_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dbd</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01653</expr></argument>)</argument_list></call>
"Failed to acquire database connection to look up "
"user '%s'"</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>user</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01654</expr></argument>)</argument_list></call>
"No AuthDBDUserPWQuery has been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>statement</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>statement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01655</expr></argument>)</argument_list></call>
"A prepared statement could not be found for "
"AuthDBDUserPWQuery with the key '%s'"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>ret</name> = <call><name>apr_dbd_pvselect</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>,
<argument><expr><name>statement</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01656</expr></argument>)</argument_list></call>
"Query execution error looking up '%s' "
"in database [%s]"</expr></argument>,
<argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>rv</name> != -1</expr>;</condition>
<incr><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01657</expr></argument>)</argument_list></call>
"Error retrieving results while looking up '%s' "
"in database"</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>dbd_password</name> == <name>NULL</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_MAJOR_VERSION</name> &gt; 1 || (<name>APU_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APU_MINOR_VERSION</name> &gt;= 3)</expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<for>for (<init><expr><name>name</name> = <call><name>apr_dbd_get_name</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>name</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>name</name> = <call><name>apr_dbd_get_name</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHN_PREFIX</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AUTHN_PREFIX</name></expr></argument>)</argument_list></sizeof>-1</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> = '_'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> = <call><name>apr_toupper</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>dbd_password</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>dbd_password</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>AUTHN_CACHE_STORE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dbd_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_password_validate</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>dbd_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_DENIED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>AUTH_GRANTED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>authn_dbd_realm</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>char</name> **</type><name>rethash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbd_hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>statement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbd_row_t</name> *</type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_dbd_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name> <init>= <expr><call><name>authn_dbd_acquire_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dbd</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01658</expr></argument>)</argument_list></call>
"Failed to acquire database connection to look up "
"user '%s:%s'"</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>realm</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01659</expr></argument>)</argument_list></call>
"No AuthDBDUserRealmQuery has been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>statement</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>statement</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01660</expr></argument>)</argument_list></call>
"A prepared statement could not be found for "
"AuthDBDUserRealmQuery with the key '%s'"</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>realm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>ret</name> = <call><name>apr_dbd_pvselect</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>,
<argument><expr><name>statement</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01661</expr></argument>)</argument_list></call>
"Query execution error looking up '%s:%s' "
"in database [%s]"</expr></argument>,
<argument><expr><name>user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>,
<argument><expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>rv</name> != -1</expr>;</condition>
<incr><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01662</expr></argument>)</argument_list></call>
"Error retrieving results while looking up '%s:%s' "
"in database"</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>dbd_hash</name> == <name>NULL</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_MAJOR_VERSION</name> &gt; 1 || (<name>APU_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APU_MINOR_VERSION</name> &gt;= 3)</expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<for>for (<init><expr><name>name</name> = <call><name>apr_dbd_get_name</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>name</name> != <name>NULL</name></expr>;</condition>
<incr><expr><name>name</name> = <call><name>apr_dbd_get_name</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHN_PREFIX</name></expr></argument>,
<argument><expr><name>name</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AUTHN_PREFIX</name></expr></argument>)</argument_list></sizeof>-1</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>apr_isalnum</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> = '_'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name> = <call><name>apr_toupper</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>,
<argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>dbd_hash</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>dbd_hash</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>AUTHN_CACHE_STORE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>dbd_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rethash</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dbd_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_USER_FOUND</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>opt_retr</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>authn_cache_store</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_authn_cache_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>authn_dbd_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authn_provider</name></type> <name>authn_dbd_provider</name> <init>= <expr><block>{
<expr>&amp;<name>authn_dbd_password</name></expr>,
<expr>&amp;<name>authn_dbd_realm</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbd"</expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authn_dbd_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_optional_fn_retrieve</name><argument_list>(<argument><expr><name>opt_retr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authn_dbd</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>authn_dbd_cr_conf</name></expr>,
<expr><name>authn_dbd_merge_conf</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>authn_dbd_cmds</name></expr>,
<expr><name>authn_dbd_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
