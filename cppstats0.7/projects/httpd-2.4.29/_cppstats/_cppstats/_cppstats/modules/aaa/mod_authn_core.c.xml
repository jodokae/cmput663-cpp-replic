<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/aaa/mod_authn_core.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_NETINET_IN_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>auth_type_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_auth_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>authn_core_dir_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <name>provider_alias_rec</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>sec_auth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
}</block></struct></type> <name>provider_alias_rec</name>;</typedef>
<typedef>typedef <type><struct>struct <name>authn_alias_srv_conf</name> <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>alias_rec</name></decl>;</decl_stmt>
}</block></struct></type> <name>authn_alias_srv_conf</name>;</typedef>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authn_core_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authn_core_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>authn_core_dir_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_core_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_authn_core_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>newv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>authn_core_dir_conf</name> *)<name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>authn_core_dir_conf</name> *)<name>newv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>authn_core_dir_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_core_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>auth_type_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_auth_type</name></name> = <name><name>new</name>-&gt;<name>ap_auth_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>auth_type_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_auth_type</name></name> = <name><name>base</name>-&gt;<name>ap_auth_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>auth_type_set</name></name> = <name><name>base</name>-&gt;<name>auth_type_set</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>ap_auth_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_auth_name</name></name> = <name><name>new</name>-&gt;<name>ap_auth_name</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>ap_auth_name</name></name> = <name><name>base</name>-&gt;<name>ap_auth_name</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>(<name>void</name>*)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>authn_alias_check_password</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_status</name></type> <name>ret</name> <init>= <expr><name>AUTH_USER_NOT_FOUND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_alias_srv_conf</name> *</type><name>authcfg</name> <init>=
<expr>(<name>authn_alias_srv_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_core_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>provider_name</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>provider_alias_rec</name> *</type><name>prvdraliasrec</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name></expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>orig_dir_config</name> <init>= <expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prvdraliasrec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>orig_dir_config</name></expr></argument>,
<argument><expr><name><name>prvdraliasrec</name>-&gt;<name>sec_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name><name>prvdraliasrec</name>-&gt;<name>provider</name>-&gt;<name>check_password</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name>orig_dir_config</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>authn_alias_get_realm_hash</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>char</name> **</type><name>rethash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_status</name></type> <name>ret</name> <init>= <expr><name>AUTH_USER_NOT_FOUND</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_alias_srv_conf</name> *</type><name>authcfg</name> <init>=
<expr>(<name>authn_alias_srv_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_core_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>provider_name</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>provider_alias_rec</name> *</type><name>prvdraliasrec</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name></expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>orig_dir_config</name> <init>= <expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>prvdraliasrec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>orig_dir_config</name></expr></argument>,
<argument><expr><name><name>prvdraliasrec</name>-&gt;<name>sec_auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name><name>prvdraliasrec</name>-&gt;<name>provider</name>-&gt;<name>get_realm_hash</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>user</name></expr></argument>,<argument><expr><name>realm</name></expr></argument>,<argument><expr><name>rethash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name>orig_dir_config</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authn_alias_svr_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_alias_srv_conf</name> *</type><name>authcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>authcfg</name> = (<name>authn_alias_srv_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>authn_alias_srv_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>authcfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_authn_alias_svr_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>basev</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authn_provider</name></type> <name>authn_alias_provider</name> <init>= <expr><block>{
<expr>&amp;<name>authn_alias_check_password</name></expr>,
<expr>&amp;<name>authn_alias_get_realm_hash</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authn_provider</name></type> <name>authn_alias_provider_nodigest</name> <init>= <expr><block>{
<expr>&amp;<name>authn_alias_check_password</name></expr>,
<expr><name>NULL</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authaliassection</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_auth_config</name> <init>= <expr><call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_alias_srv_conf</name> *</type><name>authcfg</name> <init>=
<expr>(<name>authn_alias_srv_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_core_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>args</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>args</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive requires additional arguments"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider_name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>provider_alias</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>provider_name</name><index>[<expr>0</expr>]</index></name> || !<name><name>provider_alias</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive requires additional arguments"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>provider_name</name></expr></argument>, <argument><expr><name>provider_alias</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"The alias provider name must be different from the base provider name."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>, <argument><expr><name>provider_alias</name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"The alias provider "</expr></argument>, <argument><expr><name>provider_alias</name></expr></argument>,
<argument><expr>" has already be registered previously as either a base provider or an alias provider."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_AUTHCFG</name> | <name>ACCESS_CONF</name></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new_auth_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>errmsg</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>provider_alias_rec</name> *</type><name>prvdraliasrec</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>provider_alias_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>provider</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>, <argument><expr><name>provider_name</name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Unknown Authn provider: %s"</expr></argument>,
<argument><expr><name>provider_name</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>sec_auth</name></name> = <name>new_auth_config</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_name</name></name> = <name>provider_name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider_alias</name></name> = <name>provider_alias</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>prvdraliasrec</name>-&gt;<name>provider</name></name> = <name>provider</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>authcfg</name>-&gt;<name>alias_rec</name></name></expr></argument>, <argument><expr><name>provider_alias</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>prvdraliasrec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name>provider_alias</name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>get_realm_hash</name></name> ?
&amp;<name>authn_alias_provider</name> :
&amp;<name>authn_alias_provider_nodigest</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>errmsg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_authname</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>aconfig</name> <init>= <expr>(<name>authn_core_dir_conf</name> *)<name>mconfig</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>aconfig</name>-&gt;<name>ap_auth_name</name></name> = <call><name>ap_escape_quotes</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>word1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_authtype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>word1</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>aconfig</name> <init>= <expr>(<name>authn_core_dir_conf</name> *)<name>mconfig</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>aconfig</name>-&gt;<name>auth_type_set</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>aconfig</name>-&gt;<name>ap_auth_type</name></name> = <call><name>strcasecmp</name><argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call> ? <name>word1</name> : <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authn_ap_auth_type</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>authn_core_dir_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>ap_auth_type</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>authn_ap_auth_name</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_core_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>authn_core_dir_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_core_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>ap_auth_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authn_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthType"</expr></argument>, <argument><expr><name>set_authtype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"an HTTP authorization type (e.g., \"Basic\")"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthName"</expr></argument>, <argument><expr><name>set_authname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"the authentication realm (e.g. \"Members Only\")"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;AuthnProviderAlias"</expr></argument>, <argument><expr><name>authaliassection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"container for grouping an authentication provider's "
"directives under a provider alias"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>authenticate_no_user</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01796</expr></argument>)</argument_list></call>
"AuthType %s configured without corresponding module"</expr></argument>,
<argument><expr><call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authn_ap_auth_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>authn_ap_auth_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>authenticate_no_user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authn_core</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_authn_core_dir_config</name></expr>,
<expr><name>merge_authn_core_dir_config</name></expr>,
<expr><name>create_authn_alias_svr_config</name></expr>,
<expr><name>merge_authn_alias_svr_config</name></expr>,
<expr><name>authn_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
