<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/generators/mod_cgid.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_SOCKET_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_suexec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../filters/mod_include.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/un.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRUCT_RLIMIT</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CGID_USE_RLIMIT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>cgid_module</name></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cgid_start</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>main_server</name></decl></param>, <param><decl><type><name>apr_proc_t</name> *</type><name>procnew</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cgid_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>main_server</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>handle_exec</name><parameter_list>(<param><decl><type><name>include_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_register_include_handler</name></expr></argument>)</argument_list></call> *<name>cgid_pfn_reg_with_ssi</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_ssi_get_tag_and_value</name></expr></argument>)</argument_list></call> *<name>cgid_pfn_gtv</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_ssi_parse_string</name></expr></argument>)</argument_list></call> *<name>cgid_pfn_ps</name></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>pcgi</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>daemon_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>daemon_should_exit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>server_rec</name> *</type><name>root_server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>root_pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>sockname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>sockaddr_un</name> *</type><name>server_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_socklen_t</name></type> <name>server_addr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>pid_t</name></type> <name>parent_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_unix_identity_t</name></type> <name>empty_ugid</name> <init>= <expr><block>{ <expr>(<name>uid_t</name>)-1</expr>, <expr>(<name>gid_t</name>)-1</expr>, <expr>-1</expr> }</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgid_dirconf</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAEMON_STARTUP_ERROR</name></cpp:macro> <cpp:value>254</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>discard_script_output</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>ap_unix_identity_t</name> *</type><name>cgid_suexec_id_doer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<name>ap_unix_identity_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_scriptaliased</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"alias-forced-type"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>t</name> &amp;&amp; (!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"cgi-script"</expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LOGBYTES</name></cpp:macro> <cpp:value>10385760</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_BUFBYTES</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SOCKET</name></cpp:macro> <cpp:value>"cgisock"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGI_REQ</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_REQ</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GETPID_REQ</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRFN_USERDATA_KEY</name></cpp:macro> <cpp:value>"CGIDCHILDERRFN"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CGID_LISTENBACKLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CGID_LISTENBACKLOG</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CONNECT_ATTEMPTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CONNECT_ATTEMPTS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_CONNECT_STARTUP_DELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CONNECT_STARTUP_DELAY</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>logbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>bufbytes</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgid_server_conf</name>;</typedef>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><struct>struct <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>limit_cpu_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rlimit</name></type> <name>limit_cpu</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>limit_mem_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rlimit</name></type> <name>limit_mem</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>limit_nproc_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>rlimit</name></type> <name>limit_nproc</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>cgid_rlimit_t</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>req_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>conn_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>ppid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_unix_identity_t</name></type> <name>ugid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>filename_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>argv0_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>uri_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>args_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>cgid_rlimit_t</name></type> <name>limits</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>cgid_req_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>char</name> **</type><name>create_argv</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><name>char</name> *</type><name>group</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>av0</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>numwords</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>av</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!(*<name>args</name>) || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>numwords</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>x</name> = 0</expr>, <expr><name>numwords</name> = 1</expr>;</init> <condition><expr><name><name>args</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>args</name><index>[<expr><name>x</name></expr>]</index></name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>numwords</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></else></if>
<if>if <condition>(<expr><name>numwords</name> &gt; <name>APACHE_ARG_MAX</name> - 5</expr>)</condition><then> <block>{
<expr_stmt><expr><name>numwords</name> = <name>APACHE_ARG_MAX</name> - 5</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>av</name> = (<name>char</name> **) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>numwords</name> + 5) * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>path</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>av</name><index>[<expr><name>idx</name>++</expr>]</index></name> = <name>path</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>av</name><index>[<expr><name>idx</name>++</expr>]</index></name> = <name>user</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>group</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>av</name><index>[<expr><name>idx</name>++</expr>]</index></name> = <name>group</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>av</name><index>[<expr><name>idx</name>++</expr>]</index></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>av0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>x</name> = 1</expr>;</init> <condition><expr><name>x</name> &lt;= <name>numwords</name></expr>;</condition> <incr><expr><name>x</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>w</name> = <call><name>ap_getword_nulls</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr>'+'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>av</name><index>[<expr><name>idx</name>++</expr>]</index></name> = <call><name>ap_escape_shell_cmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>av</name><index>[<expr><name>idx</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>av</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_OTHER_CHILD</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cgid_maint</name><parameter_list>(<param><decl><type><name>int</name></type> <name>reason</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_wait_t</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>proc</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mpm_state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stopping</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>reason</name></expr>)</condition> <block>{
<case>case <expr><name>APR_OC_REASON_DEATH</name></expr>:
<expr_stmt><expr><call><name>apr_proc_other_child_unregister</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stopping</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MPM_STATE</name></expr></argument>, <argument><expr>&amp;<name>mpm_state</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name> &amp;&amp;
<name>mpm_state</name> != <name>AP_MPMQ_STOPPING</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>stopping</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>stopping</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> == <name>DAEMON_STARTUP_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01238</expr></argument>)</argument_list></call>
"cgid daemon failed to initialize"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01239</expr></argument>)</argument_list></call>
"cgid daemon process died, restarting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cgid_start</name><argument_list>(<argument><expr><name>root_pool</name></expr></argument>, <argument><expr><name>root_server</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>APR_OC_REASON_RESTART</name></expr>:
<expr_stmt><expr><call><name>apr_proc_other_child_unregister</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>APR_OC_REASON_LOST</name></expr>:
<expr_stmt><expr><call><name>apr_proc_other_child_unregister</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>cgid_start</name><argument_list>(<argument><expr><name>root_pool</name></expr></argument>, <argument><expr><name>root_server</name></expr></argument>, <argument><expr><name>proc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>APR_OC_REASON_UNREGISTER</name></expr>:
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>proc</name>-&gt;<name>pid</name></name></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>sockname</name></expr></argument>)</argument_list></call> &lt; 0 &amp;&amp; <name>errno</name> != <name>ENOENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01240</expr></argument>)</argument_list></call>
"Couldn't unlink unix domain socket %s"</expr></argument>,
<argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>close_unix_socket</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>thefd</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr>(<name>long</name>)<name>thefd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sock_read</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>vbuf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>buf_size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><name>vbuf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>bytes_read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<do>do <block>{
<do>do <block>{
<expr_stmt><expr><name>rc</name> = <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name> + <name>bytes_read</name></expr></argument>, <argument><expr><name>buf_size</name> - <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rc</name> &lt; 0 &amp;&amp; <name>errno</name> == <name>EINTR</name></expr>)</condition>;</do>
<switch>switch<condition>(<expr><name>rc</name></expr>)</condition> <block>{
<case>case <expr>-1</expr>:
<return>return <expr><name>errno</name></expr>;</return>
</case><case>case <expr>0</expr>:
<return>return <expr><name>ECONNRESET</name></expr>;</return>
</case><default>default:
<expr_stmt><expr><name>bytes_read</name> += <name>rc</name></expr>;</expr_stmt>
</default>}</block></switch>
}</block> while <condition>(<expr><name>bytes_read</name> &lt; <name>buf_size</name></expr>)</condition>;</do>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sock_write</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>buf_size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><name>rc</name> = <call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rc</name> &lt; 0 &amp;&amp; <name>errno</name> == <name>EINTR</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>errno</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sock_writev</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>count</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name> *</type><name>vec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>vec</name> = (struct <name>iovec</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>count</name> * <sizeof>sizeof<argument_list>(<argument>struct <expr><name>iovec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_base</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>caddr_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>apr_size_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>rc</name> = <call><name>writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rc</name> &lt; 0 &amp;&amp; <name>errno</name> == <name>EINTR</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>errno</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_req</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv0</name></decl></param>, <param><decl><type><name>char</name> ***</type><name>env</name></decl></param>,
<param><decl><type><name>cgid_req_t</name> *</type><name>req</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>environ</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_request_config</name> *</type><name>temp_core</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>rconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>server</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>log</name>.<name>level</name></name> = <name><name>req</name>-&gt;<name>loglevel</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>req</name>-&gt;<name>req_type</name></name> == <name>GETPID_REQ</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rconf</name> = (<name>void</name> **)<call><name>ap_create_request_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>temp_core</name> = (<name>core_request_config</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>core_module</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rconf</name><index>[<expr><name>AP_CORE_MODULE_INDEX</name></expr>]</index></name> = (<name>void</name> *)<name>temp_core</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>request_config</name></name> = (<name>ap_conf_vector_t</name> *)<name>rconf</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>cgid_module</name></expr></argument>, <argument><expr>(<name>void</name> *)&amp;<name><name>req</name>-&gt;<name>ugid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>filename_len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>argv0</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>argv0_len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>uri</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>uri_len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>filename_len</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name> ||
(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>*<name>argv0</name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>argv0_len</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name> ||
(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>uri_len</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>args_len</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>req</name>-&gt;<name>args_len</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name><name>req</name>-&gt;<name>args_len</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>environ</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name><name>req</name>-&gt;<name>env_count</name></name> + 2) *<sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>req</name>-&gt;<name>env_count</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>curlen</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;<name>curlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curlen</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>environ</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>curlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>environ</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>curlen</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr>*<name>env</name> = <name>environ</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>-&gt;<name>limits</name></name>)</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgid_rlimit_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>stat</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_req</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>argv0</name></decl></param>, <param><decl><type><name>char</name> **</type><name>env</name></decl></param>,
<param><decl><type><name>int</name></type> <name>req_type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_req_t</name></type> <name>req</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_unix_identity_t</name> *</type> <name>ugid</name> <init>= <expr><call><name>ap_run_get_suexec_identity</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_dir_config</name> *</type><name>core_conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ugid</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>req</name>.<name>ugid</name></name> = <name>empty_ugid</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>req</name>.<name>ugid</name></name></expr></argument>, <argument><expr><name>ugid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_unix_identity_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>req</name>.<name>req_type</name></name> = <name>req_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>ppid</name></name> = <name>parent_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>conn_id</name></name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name><name>req</name>.<name>env_count</name></name> = 0</expr>;</init> <condition><expr><name><name>env</name><index>[<expr><name><name>req</name>.<name>env_count</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name><name>req</name>.<name>env_count</name></name>++</expr></incr>) <block>{
<continue>continue;</continue>
}</block></for>
<expr_stmt><expr><name><name>req</name>.<name>filename_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>argv0_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>uri_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>args_len</name></name> = <name><name>r</name>-&gt;<name>args</name></name> ? <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>loglevel</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>log</name>.<name>level</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>req</name>.<name>args_len</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>stat</name> = <call><name>sock_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>5</expr></argument>,
<argument><expr>&amp;<name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>req</name>.<name>filename_len</name></name></expr></argument>,
<argument><expr><name>argv0</name></expr></argument>, <argument><expr><name><name>req</name>.<name>argv0_len</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>req</name>.<name>uri_len</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name><name>req</name>.<name>args_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>stat</name> = <call><name>sock_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>4</expr></argument>,
<argument><expr>&amp;<name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>req</name>.<name>filename_len</name></name></expr></argument>,
<argument><expr><name>argv0</name></expr></argument>, <argument><expr><name><name>req</name>.<name>argv0_len</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>req</name>.<name>uri_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>stat</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>req</name>.<name>env_count</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>curlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>stat</name> = <call><name>sock_writev</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>curlen</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>curlen</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>env</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>curlen</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>core_conf</name>-&gt;<name>limit_cpu</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_cpu</name></name> = *(<name><name>core_conf</name>-&gt;<name>limit_cpu</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_cpu_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_cpu_set</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call> &amp;&amp; (<call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call>)</expr></cpp:if>
<if>if <condition>(<expr><name><name>core_conf</name>-&gt;<name>limit_mem</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_mem</name></name> = *(<name><name>core_conf</name>-&gt;<name>limit_mem</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_mem_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_mem_set</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>core_conf</name>-&gt;<name>limit_nproc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_nproc</name></name> = *(<name><name>core_conf</name>-&gt;<name>limit_nproc</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_nproc_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>req</name>.<name>limits</name>.<name>limit_nproc_set</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>( <expr>(<name>stat</name> = <call><name>sock_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr>&amp;(<name><name>req</name>.<name>limits</name></name>)</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgid_rlimit_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>stat</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>daemon_signal_handler</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sig</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>sig</name> == <name>SIGHUP</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>daemon_should_exit</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cgid_child_errfn</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_status_t</name></type> <name>err</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>description</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>vr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>vr</name></expr></argument>, <argument><expr><name>ERRFN_USERDATA_KEY</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <name>vr</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01241</expr></argument>)</argument_list></call> "%s"</expr></argument>, <argument><expr><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cgid_server</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sd</name></decl>, <decl><type ref="prev"/><name>sd2</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mode_t</name></type> <name>omask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptrans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>main_server</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>script_hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pcgi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>ptrans</name></expr></argument>, <argument><expr><name>pcgi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>daemon_signal_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_close_listeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_get_suexec_identity</name><argument_list>(<argument><expr><name>cgid_suexec_id_doer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hook_sort_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>sd</name> = <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01242</expr></argument>)</argument_list></call>
"Couldn't create unix domain socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errno</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>omask</name> = <call><name>umask</name><argument_list>(<argument><expr>0077</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>bind</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr>(struct <name>sockaddr</name> *)<name>server_addr</name></expr></argument>, <argument><expr><name>server_addr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><name>omask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01243</expr></argument>)</argument_list></call>
"Couldn't bind unix domain socket %s"</expr></argument>,
<argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errno</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_perms_set</name><argument_list>(<argument><expr><name>sockname</name></expr></argument>, <argument><expr><name>APR_FPROT_UREAD</name>|<name>APR_FPROT_UWRITE</name>|<name>APR_FPROT_UEXECUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01244</expr></argument>)</argument_list></call>
"Couldn't set permissions on unix domain socket %s"</expr></argument>,
<argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>listen</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>DEFAULT_CGID_LISTENBACKLOG</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01245</expr></argument>)</argument_list></call>
"Couldn't listen on unix domain socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errno</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>geteuid</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>chown</name><argument_list>(<argument><expr><name>sockname</name></expr></argument>, <argument><expr><name><name>ap_unixd_config</name>.<name>user_id</name></name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01246</expr></argument>)</argument_list></call>
"Couldn't change owner of unix domain socket %s"</expr></argument>,
<argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>errno</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pcgi</name></expr></argument>, <argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>(<name>long</name>)<name>sd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>close_unix_socket</name></expr></argument>, <argument><expr><name>close_unix_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rc</name> = <call><name>ap_run_drop_privileges</name><argument_list>(<argument><expr><name>pcgi</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>!<name>daemon_should_exit</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errfileno</name> <init>= <expr><name>STDERR_FILENO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argv0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>env</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>in_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>out_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>err_pipe</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_cmdtype_e</name></type> <name>cmd_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_procattr_t</name> *</type><name>procattr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>procnew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>inout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_req_t</name></type> <name>cgid_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socklen_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sockaddr_un</name></type> <name>unix_addr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>ptrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>unix_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>sd2</name> = <call><name>accept</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr>(struct <name>sockaddr</name> *)&amp;<name>unix_addr</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sd2</name> &lt; 0</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENETDOWN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>errno</name> == <name>ENETDOWN</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>daemon_should_exit</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>errno</name> != <name>EINTR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr>(<name>server_rec</name> *)<name>data</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01247</expr></argument>)</argument_list></call>
"Error accepting on cgid socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>r</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>ptrans</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>procnew</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>ptrans</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>procnew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>pool</name></name> = <name>ptrans</name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <call><name>get_req</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>argv0</name></expr></argument>, <argument><expr>&amp;<name>env</name></expr></argument>, <argument><expr>&amp;<name>cgid_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>,
<argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01248</expr></argument>)</argument_list></call>
"Error reading request on cgid socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>cgid_req</name>.<name>ppid</name></name> != <name>parent_pid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01249</expr></argument>)</argument_list></call>
"CGI request received from wrong server instance; "
"see ScriptSock directive"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>cgid_req</name>.<name>req_type</name></name> == <name>GETPID_REQ</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>pid</name> = <call>(<name>pid_t</name>)<argument_list>(<argument><expr>(<name>long</name>)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>script_hash</name></expr></argument>, <argument><expr>&amp;<name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>sock_write</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>, <argument><expr>&amp;<name>pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01250</expr></argument>)</argument_list></call>
"Error writing pid %" <name>APR_PID_T_FMT</name> " to handler"</expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>server</name>-&gt;<name>error_log</name></name></expr></argument>, <argument><expr>&amp;<name>errfileno</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>inout</name></expr></argument>, <argument><expr>&amp;<name>sd2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cgid_req</name>.<name>req_type</name></name> == <name>SSI_REQ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>in_pipe</name> = <name>APR_NO_PIPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_pipe</name> = <name>APR_FULL_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err_pipe</name> = <name>APR_NO_PIPE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_type</name> = <name>APR_SHELLCMD</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>in_pipe</name> = <name>APR_CHILD_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>out_pipe</name> = <name>APR_CHILD_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>err_pipe</name> = <name>APR_CHILD_BLOCK</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cmd_type</name> = <name>APR_PROGRAM</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>((<name>rc</name> = <call><name>apr_procattr_create</name><argument_list>(<argument><expr>&amp;<name>procattr</name></expr></argument>, <argument><expr><name>ptrans</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
((<name><name>cgid_req</name>.<name>req_type</name></name> == <name>CGI_REQ</name>) &amp;&amp;
(((<name>rc</name> = <call><name>apr_procattr_io_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>,
<argument><expr><name>in_pipe</name></expr></argument>,
<argument><expr><name>out_pipe</name></expr></argument>,
<argument><expr><name>err_pipe</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
((<name>rc</name> = <call><name>apr_procattr_child_err_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>error_log</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
((<name>rc</name> = <call><name>apr_procattr_child_in_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>inout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>))) ||
((<name>rc</name> = <call><name>apr_procattr_child_out_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>inout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
((<name>rc</name> = <call><name>apr_procattr_dir_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>,
<argument><expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
((<name>rc</name> = <call><name>apr_procattr_cmdtype_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>cmd_type</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>) ||
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_CGID_USE_RLIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_CPU</name></expr></argument>)</argument_list></call></expr></cpp:if>
( (<name><name>cgid_req</name>.<name>limits</name>.<name>limit_cpu_set</name></name>) &amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_limit_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>APR_LIMIT_CPU</name></expr></argument>,
<argument><expr>&amp;<name><name>cgid_req</name>.<name>limits</name>.<name>limit_cpu</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)) ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_DATA</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_VMEM</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>)</argument_list></call></expr></cpp:if>
( (<name><name>cgid_req</name>.<name>limits</name>.<name>limit_mem_set</name></name>) &amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_limit_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>APR_LIMIT_MEM</name></expr></argument>,
<argument><expr>&amp;<name><name>cgid_req</name>.<name>limits</name>.<name>limit_mem</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)) ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>RLIMIT_NPROC</name></expr></argument>)</argument_list></call></expr></cpp:if>
( (<name><name>cgid_req</name>.<name>limits</name>.<name>limit_nproc_set</name></name>) &amp;&amp; ((<name>rc</name> = <call><name>apr_procattr_limit_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>APR_LIMIT_NPROC</name></expr></argument>,
<argument><expr>&amp;<name><name>cgid_req</name>.<name>limits</name>.<name>limit_nproc</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)) ||
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
((<name>rc</name> = <call><name>apr_procattr_child_errfn_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>cgid_child_errfn</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01251</expr></argument>)</argument_list></call>
"couldn't set child process attributes: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>pid</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ERRFN_USERDATA_KEY</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name>ptrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>argv</name> = (const <name>char</name> * const *)<call><name>create_argv</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr>&amp;<name>empty_ugid</name></expr></argument>, <argument><expr>&amp;<name><name>cgid_req</name>.<name>ugid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>empty_ugid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ap_os_create_privileged_process</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
<argument><expr>(const <name>char</name> * const *)<name>env</name></expr></argument>,
<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>ptrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_proc_create</name><argument_list>(<argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>,
<argument><expr>(const <name>char</name> * const *)<name>env</name></expr></argument>,
<argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>ptrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01252</expr></argument>)</argument_list></call>
"couldn't create child process: %d: %s"</expr></argument>, <argument><expr><name>rc</name></expr></argument>,
<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>pid</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>script_hash</name></expr></argument>, <argument><expr>&amp;<name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>key</name> = &amp;<name><name>cgid_req</name>.<name>conn_id</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>key</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pcgi</name></expr></argument>, <argument><expr>&amp;<name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>script_hash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cgid_req</name>.<name>conn_id</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>(<name>long</name>)<name><name>procnew</name>-&gt;<name>pid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cgid_start</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>main_server</name></decl></param>,
<param><decl><type><name>apr_proc_t</name> *</type><name>procnew</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>daemon_should_exit</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>daemon_pid</name> = <call><name>fork</name><argument_list>()</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01253</expr></argument>)</argument_list></call>
"mod_cgid: Couldn't spawn cgid daemon process"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>daemon_pid</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>pcgi</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pcgi</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>cgid_server</name><argument_list>(<argument><expr><name>main_server</name></expr></argument>)</argument_list></call> &gt; 0 ? <name>DAEMON_STARTUP_ERROR</name> : -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>pid</name></name> = <name>daemon_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>err</name></name> = <name><name>procnew</name>-&gt;<name>in</name></name> = <name><name>procnew</name>-&gt;<name>out</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_note_subprocess</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>APR_KILL_AFTER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_OTHER_CHILD</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_proc_other_child_register</name><argument_list>(<argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>cgid_maint</name></expr></argument>, <argument><expr><name>procnew</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cgid_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>sockname</name> = <call><name>ap_append_pid</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>DEFAULT_SOCKET</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cgid_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>main_server</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>procnew</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>userdata_key</name> <init>= <expr>"cgid_init"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>data</name></decl>;</decl_stmt>
<expr_stmt><expr><name>root_server</name> = <name>main_server</name></expr>;</expr_stmt>
<expr_stmt><expr><name>root_pool</name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>, <argument><expr><name><name>main_server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>data</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>procnew</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>main_server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>procnew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>pid</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>procnew</name>-&gt;<name>err</name></name> = <name><name>procnew</name>-&gt;<name>in</name></name> = <name><name>procnew</name>-&gt;<name>out</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *)<name>procnew</name></expr></argument>, <argument><expr><name>userdata_key</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name><name>main_server</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>procnew</name> = <name>data</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> != <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp_sockname</name></decl>;</decl_stmt>
<expr_stmt><expr><name>parent_pid</name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_sockname</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>tmp_sockname</name></expr></argument>)</argument_list></call> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>server_addr</name>-&gt;<name>sun_path</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>tmp_sockname</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>server_addr</name>-&gt;<name>sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01254</expr></argument>)</argument_list></call>
"The length of the ScriptSock path exceeds maximum, "
"truncating to %s"</expr></argument>, <argument><expr><name>tmp_sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>sockname</name> = <name>tmp_sockname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>server_addr_len</name> = <call><name>APR_OFFSETOF</name><argument_list>(<argument>struct <expr><name>sockaddr_un</name></expr></argument>, <argument><expr><name>sun_path</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>server_addr</name> = (struct <name>sockaddr_un</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>server_addr_len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_addr</name>-&gt;<name>sun_family</name></name> = <name>AF_UNIX</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>server_addr</name>-&gt;<name>sun_path</name></name></expr></argument>, <argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>cgid_start</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>main_server</name></expr></argument>, <argument><expr><name>procnew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != <name>OK</name></expr> )</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cgid_pfn_reg_with_ssi</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_register_include_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cgid_pfn_gtv</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_ssi_get_tag_and_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cgid_pfn_ps</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_ssi_parse_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>cgid_pfn_reg_with_ssi</name>) &amp;&amp; (<name>cgid_pfn_gtv</name>) &amp;&amp; (<name>cgid_pfn_ps</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>cgid_pfn_reg_with_ssi</name><argument_list>(<argument><expr>"exec"</expr></argument>, <argument><expr><name>handle_exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_cgid_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>c</name> <init>=
<expr>(<name>cgid_server_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgid_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>logname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>logbytes</name></name> = <name>DEFAULT_LOGBYTES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>bufbytes</name></name> = <name>DEFAULT_BUFBYTES</name></expr>;</expr_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_cgid_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>base</name> <init>= <expr>(<name>cgid_server_conf</name> *) <name>basev</name></expr></init>, *<name>overrides</name> <init>= <expr>(<name>cgid_server_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>overrides</name>-&gt;<name>logname</name></name> ? <name>overrides</name> : <name>base</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_cgid_dirconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cgid_dirconf</name> *</type><name>c</name> <init>= <expr>(<name>cgid_dirconf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cgid_dirconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_scriptlog</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>logname</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>logname</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid ScriptLog path "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_scriptlog_length</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>logbytes</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_scriptlog_buffer</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>bufbytes</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_script_socket</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sockname</name> = <call><name>ap_append_pid</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sockname</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sockname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sockname</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid ScriptSock path"</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_script_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cgid_dirconf</name> *</type><name>dc</name> <init>= <expr><name>dummy</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name><name>dc</name>-&gt;<name>timeout</name></name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>"CGIDScriptTimeout has wrong format"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cgid_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScriptLog"</expr></argument>, <argument><expr><name>set_scriptlog</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the name of a log for script debugging info"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScriptLogLength"</expr></argument>, <argument><expr><name>set_scriptlog_length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the maximum length (in bytes) of the script debug log"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScriptLogBuffer"</expr></argument>, <argument><expr><name>set_scriptlog_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the maximum size (in bytes) to record of a POST request"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScriptSock"</expr></argument>, <argument><expr><name>set_script_socket</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"the name of the socket to use for communication with "
"the cgi daemon."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CGIDScriptTimeout"</expr></argument>, <argument><expr><name>set_script_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"The amount of time to wait between successful reads from "
"the CGI script, in seconds."</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_scripterror</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cgid_server_conf</name> *</type> <name>conf</name></decl></param>, <param><decl><type><name>int</name></type> <name>ret</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><name>char</name> *</type><name>error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>stat</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>log_flags</name> <init>= <expr><name>rv</name> ? <name>APLOG_ERR</name> : <name>APLOG_ERR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>log_flags</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>logname</name></name> ||
((<call><name>stat</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>logname</name></name></expr></argument>, <argument><expr>&amp;<name>finfo</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name><name>finfo</name>.<name>st_size</name></name> &gt; <name><name>conf</name>-&gt;<name>logbytes</name></name>)) ||
(<call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>logname</name></name></expr></argument>,
<argument><expr><name>APR_APPEND</name>|<name>APR_WRITE</name>|<name>APR_CREATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%%%% [%s] %s %s%s%s %s\n"</expr></argument>, <argument><expr><name>time_str</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>args</name></name> ? "?" : ""</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name> ? <name><name>r</name>-&gt;<name>args</name></name> : ""</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%%%% %d %s\n"</expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%%error\n%s\n"</expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>log_script</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cgid_server_conf</name> *</type> <name>conf</name></decl></param>, <param><decl><type><name>int</name></type> <name>ret</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>dbuf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sbuf</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_file_t</name> *</type><name>script_err</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>hdrs_arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>hdrs</name> <init>= <expr>(<name>apr_table_entry_t</name> *) <name><name>hdrs_arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>argsbuffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>stat</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>time_str</name><index>[<expr><name>APR_CTIME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>logname</name></name> ||
((<call><name>stat</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>logname</name></name></expr></argument>, <argument><expr>&amp;<name>finfo</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; (<name><name>finfo</name>.<name>st_size</name></name> &gt; <name><name>conf</name>-&gt;<name>logbytes</name></name>)) ||
(<call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>logname</name></name></expr></argument>,
<argument><expr><name>APR_APPEND</name>|<name>APR_WRITE</name>|<name>APR_CREATE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>discard_script_output</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>script_err</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>,
<argument><expr><name>script_err</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition>
<continue>continue;</continue></while>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_ctime</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%%%% [%s] %s %s%s%s %s\n"</expr></argument>, <argument><expr><name>time_str</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>args</name></name> ? "?" : ""</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name> ? <name><name>r</name>-&gt;<name>args</name></name> : ""</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%%%% %d %s\n"</expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr>"%request\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdrs_arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%s: %s\n"</expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_POST</name> || <name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_PUT</name>)
&amp;&amp; *<name>dbuf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"\n%s\n"</expr></argument>, <argument><expr><name>dbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr>"%response\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs_arr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdrs</name> = (const <name>apr_table_entry_t</name> *) <name><name>hdrs_arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdrs_arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%s: %s\n"</expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>sbuf</name> &amp;&amp; *<name>sbuf</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>first</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || (<name>len</name> == 0)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr>"%stdout\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>first</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>script_err</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>,
<argument><expr><name>script_err</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr>"%stderr\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>,
<argument><expr><name>script_err</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></while>
<expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>script_err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>script_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>connect_to_daemon</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>sdptr</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>cgid_server_conf</name> *</type><name>conf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connect_tries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connect_errno</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>sliding_timer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>connect_tries</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>sliding_timer</name> = 100000</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><name>connect_errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>++<name>connect_tries</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>sd</name> = <call><name>socket</name><argument_list>(<argument><expr><name>AF_UNIX</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01255</expr></argument>)</argument_list></call> "unable to create socket to cgi daemon"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr>(struct <name>sockaddr</name> *)<name>server_addr</name></expr></argument>, <argument><expr><name>server_addr_len</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>connect_errno</name> = <name>errno</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>errno</name> == <name>ECONNREFUSED</name> || <name>errno</name> == <name>ENOENT</name>) &amp;&amp;
<name>connect_tries</name> &lt; <name>DEFAULT_CONNECT_ATTEMPTS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01256</expr></argument>)</argument_list></call>
"connect #%d to cgi daemon failed, sleeping before retry"</expr></argument>,
<argument><expr><name>connect_tries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>sliding_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sliding_timer</name> &lt; <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sliding_timer</name> *= 2</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01257</expr></argument>)</argument_list></call>
"unable to connect to cgi daemon after multiple tries"</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>(<name>long</name>)<name>sd</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>close_unix_socket</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
<if>if <condition>(<expr><name>connect_errno</name> == <name>ENOENT</name> &amp;&amp;
<call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> - <name><name>ap_scoreboard_image</name>-&gt;<name>global</name>-&gt;<name>restart_time</name></name></expr></argument>)</argument_list></call> &gt;
<name>DEFAULT_CONNECT_STARTUP_DELAY</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr></argument>, <argument><expr><name>connect_errno</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02833</expr></argument>)</argument_list></call> "ScriptSock "</expr></argument>, <argument><expr><name>sockname</name></expr></argument>, <argument><expr>" does not exist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>connect_errno</name> != <name>ENOENT</name> &amp;&amp; <call><name>kill</name><argument_list>(<argument><expr><name>daemon_pid</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr></argument>, <argument><expr><name>connect_errno</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01258</expr></argument>)</argument_list></call>
"cgid daemon is gone; is Apache terminating?"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr>*<name>sdptr</name> = <name>sd</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>discard_script_output</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></function>
<struct>struct <name>cleanup_script_info</name> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dead_yet</name><parameter_list>(<param><decl><type><name>pid_t</name></type> <name>pid</name></decl></param>, <param><decl><type><name>apr_interval_time_t</name></type> <name>max_wait</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>interval</name> <init>= <expr>10000</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>total</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<do>do <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_AIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>getpgid</name><argument_list>(<argument><expr><name>pid</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>total</name> = <name>total</name> + <name>interval</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>interval</name> &lt; 500000</expr>)</condition><then> <block>{
<expr_stmt><expr><name>interval</name> *= 2</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr><name>total</name> &lt; <name>max_wait</name></expr>)</condition><empty_stmt>;</empty_stmt></while>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block>
static apr_status_t cleanup_nonchild_process(request_rec *r, pid_t pid</do>)</block> <block>{
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>dead_yet</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01259</expr></argument>)</argument_list></call>
"CGI process %" <name>APR_PID_T_FMT</name> " didn't exit, sending SIGKILL"</expr></argument>,
<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>dead_yet</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01260</expr></argument>)</argument_list></call>
"CGI process %" <name>APR_PID_T_FMT</name> " didn't exit, sending SIGKILL again"</expr></argument>,
<argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>get_cgi_pid</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>cgid_server_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>pid_t</name> *</type><name>pid</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cgid_req_t</name></type> <name>req</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>sd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>connect_to_daemon</name><argument_list>(<argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>req</name>.<name>req_type</name></name> = <name>GETPID_REQ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>ppid</name></name> = <name>parent_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>req</name>.<name>conn_id</name></name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>stat</name> = <call><name>sock_write</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr>&amp;<name>req</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>stat</name> = <call><name>sock_read</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>pid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stat</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>stat</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>pid</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01261</expr></argument>)</argument_list></call>
"daemon couldn't find CGI process for connection %lu"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_script</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vptr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>cleanup_script_info</name> *</type><name>info</name> <init>= <expr><name>vptr</name></expr></init></decl>;</decl_stmt>
<return>return <expr><call><name>cleanup_nonchild_process</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pid</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cgid_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>, <decl><type ref="prev"/><name>nph</name></decl>, <decl><type ref="prev"/><name>dbpos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>argv0</name></decl>, *<decl><type ref="prev"/><name>dbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_included</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name></decl>, <decl><type ref="prev"/><name>child_stopped_reading</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tempsock</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cleanup_script_info</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_dirconf</name> *</type><name>dc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>CGI_MAGIC_TYPE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"cgi-script"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dc</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>is_included</name> = !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>protocol</name></name></expr></argument>, <argument><expr>"INCLUDED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>argv0</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>argv0</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>argv0</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>nph</name> = !(<call><name>strncmp</name><argument_list>(<argument><expr><name>argv0</name></expr></argument>, <argument><expr>"nph-"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><name>argv0</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<call><name>ap_allow_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> &amp; <name>OPT_EXECCGI</name>) &amp;&amp; !<call><name>is_scriptaliased</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01262</expr></argument>)</argument_list></call>
"Options ExecCGI is off in this directory"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>nph</name> &amp;&amp; <name>is_included</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01263</expr></argument>)</argument_list></call>
"attempt to include NPH CGI script"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> mod_cgid does not work on this platform. If you teach it to, look</cpp:error>
<cpp:error>#<cpp:directive>error</cpp:directive> at mod_cgi.c for required code in this path.</cpp:error>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01264</expr></argument>)</argument_list></call>
"script not found or unable to stat"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01265</expr></argument>)</argument_list></call>
"attempt to invoke directory as script"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>used_path_info</name></name> == <name>AP_REQ_REJECT_PATH_INFO</name>) &amp;&amp;
<name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>log_scripterror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01266</expr></argument>)</argument_list></call>
"AcceptPathInfo off disallows user's path"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env</name> = <call><name>ap_create_environment</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>retval</name> = <call><name>connect_to_daemon</name><argument_list>(<argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>retval</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>send_req</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>CGI_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01268</expr></argument>)</argument_list></call>
"write to cgi daemon process"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>info</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>cleanup_script_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>conf</name></name> = <name>conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_cgi_pid</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;(<name><name>info</name>-&gt;<name>pid</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>cleanup_script</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"error determining cgi PID"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_os_pipe_put_ex</name><argument_list>(<argument><expr>&amp;<name>tempsock</name></expr></argument>, <argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dc</name>-&gt;<name>timeout</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_pipe_timeout_set</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name><name>dc</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_pipe_timeout_set</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>(<name>long</name>)<name>sd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>close_unix_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen_eos</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>child_stopped_reading</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>dbuf</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dbpos</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>logname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>dbuf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>bufbytes</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<do>do <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01270</expr></argument>)</argument_list></call>
"Error reading request entity data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>bucket</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>bucket</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>bucket</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>child_stopped_reading</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>logname</name></name> &amp;&amp; <name>dbpos</name> &lt; <name><name>conf</name>-&gt;<name>bufbytes</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>cursize</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>dbpos</name> + <name>len</name>) &gt; <name><name>conf</name>-&gt;<name>bufbytes</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cursize</name> = <name><name>conf</name>-&gt;<name>bufbytes</name></name> - <name>dbpos</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cursize</name> = <name>len</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbuf</name> + <name>dbpos</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>cursize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dbpos</name> += <name>cursize</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>child_stopped_reading</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02651</expr></argument>)</argument_list></call>
"Error writing request body to script %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>!<name>seen_eos</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>logname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dbuf</name><index>[<expr><name>dbpos</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>shutdown</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>nph</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>sbuf</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_pipe_create</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>ret</name> = <call><name>ap_scan_script_header_err_brigade_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>log_script</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>dbuf</name></expr></argument>, <argument><expr><name>sbuf</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>location</name> &amp;&amp; <name><name>location</name><index>[<expr>0</expr>]</index></name> == '/' &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> == 200</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>discard_script_output</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method_number</name></name> = <name>M_GET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_internal_redirect_handler</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>location</name> &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> == 200</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>discard_script_output</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Failed to flush CGI output to client"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>nph</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>cur</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cur</name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> &amp;&amp; <name><name>cur</name>-&gt;<name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_CONNECTION</name></expr>)</condition> <block>{
<expr_stmt><expr><name>cur</name> = <name><name>cur</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name> = <name>cur</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_pipe_create</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>include_cgi</name><parameter_list>(<param><decl><type><name>include_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name> <init>= <expr><call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rr_status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>rr</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>rr</name>-&gt;<name>path_info</name></name> &amp;&amp; <name><name>rr</name>-&gt;<name>path_info</name><index>[<expr>0</expr>]</index></name>) || <name><name>rr</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>rr</name>-&gt;<name>path_info</name></name> = <name><name>r</name>-&gt;<name>path_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rr</name>-&gt;<name>args</name></name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>rr</name></expr></argument>, <argument><expr><name>CGI_MAGIC_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rr_status</name> = <call><name>ap_run_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>rr_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>location</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<expr_stmt><expr><name>location</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buffer</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>location</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>,
<argument><expr><name>location</name></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_ssi_vars</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>e</name> <init>= <expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>path_info</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>pa_req</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>, <argument><expr><call><name>ap_escape_shell_cmd</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pa_req</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pa_req</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_TRANSLATED"</expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>pa_req</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>pa_req</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>pa_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>arg_copy</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"QUERY_STRING"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>arg_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"QUERY_STRING_UNESCAPED"</expr></argument>, <argument><expr><call><name>ap_escape_shell_cmd</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg_copy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>include_cmd</name><parameter_list>(<param><decl><type><name>include_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>char</name> *</type><name>command</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tempsock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_server_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cgid_dirconf</name> *</type><name>dc</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cgid_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>cleanup_script_info</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_ssi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>env</name> = <call><name>ap_create_environment</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>retval</name> = <call><name>connect_to_daemon</name><argument_list>(<argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>retval</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>send_req</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>SSI_REQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>info</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>cleanup_script_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>conf</name></name> = <name>conf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>info</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>get_cgi_pid</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;(<name><name>info</name>-&gt;<name>pid</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>cleanup_script</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"error determining cgi PID (for SSI)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>,
<argument><expr><name>cleanup_script</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_pipe_put_ex</name><argument_list>(<argument><expr>&amp;<name>tempsock</name></expr></argument>, <argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dc</name>-&gt;<name>timeout</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_pipe_timeout_set</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name><name>dc</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_pipe_timeout_set</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>(<name>long</name>)<name>sd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>close_unix_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_pipe_create</name><argument_list>(<argument><expr><name>tempsock</name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>flush_now</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>handle_exec</name><parameter_list>(<param><decl><type><name>include_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tag</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tag_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>file</name> <init>= <expr><name><name>r</name>-&gt;<name>filename</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>parsed_string</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>,
<argument><expr>(<name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>SSI_FLAG_PRINTING</name>)
? <name>APLOG_ERR</name> : <name>APLOG_WARNING</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03196</expr></argument>)</argument_list></call>
"missing argument for exec element in %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>SSI_FLAG_PRINTING</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>argc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSI_CREATE_ERROR_BUCKET</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>SSI_FLAG_NO_EXEC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01271</expr></argument>)</argument_list></call> "exec used but not allowed "
"in %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSI_CREATE_ERROR_BUCKET</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>cgid_pfn_gtv</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>tag</name></expr></argument>, <argument><expr>&amp;<name>tag_val</name></expr></argument>, <argument><expr><name>SSI_VALUE_DECODED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tag</name> || !<name>tag_val</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr>"cmd"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cgid_pfn_ps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tag_val</name></expr></argument>, <argument><expr><name>parsed_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parsed_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>SSI_EXPAND_LEAVE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>include_cmd</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>parsed_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01272</expr></argument>)</argument_list></call>
"execution failure for parameter \"%s\" "
"to tag exec in file %s"</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSI_CREATE_ERROR_BUCKET</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr>"cgi"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>cgid_pfn_ps</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tag_val</name></expr></argument>, <argument><expr><name>parsed_string</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>parsed_string</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name>SSI_EXPAND_DROP_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>include_cgi</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>parsed_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01273</expr></argument>)</argument_list></call> "invalid CGI ref "
"\"%s\" in %s"</expr></argument>, <argument><expr><name>tag_val</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSI_CREATE_ERROR_BUCKET</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01274</expr></argument>)</argument_list></call> "unknown parameter "
"\"%s\" to tag exec in %s"</expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSI_CREATE_ERROR_BUCKET</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszPre</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_include.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>cgid_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>cgid_init</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>cgid_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>cgid</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_cgid_dirconf</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_cgid_config</name></expr>,
<expr><name>merge_cgid_config</name></expr>,
<expr><name>cgid_cmds</name></expr>,
<expr><name>register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
