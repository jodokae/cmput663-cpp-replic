<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/dav/main/mod_dav.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>_MOD_DAV_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MOD_DAV_H_</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VERSION</name></cpp:macro> <cpp:value>AP_SERVER_BASEREVISION</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_XML_HEADER</name></cpp:macro> <cpp:value>"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_XML_CONTENT_TYPE</name></cpp:macro> <cpp:value>"text/xml; charset=\"utf-8\""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_READ_BLOCKSIZE</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESPONSE_BODY_1</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\"&gt;\n&lt;html&gt;&lt;head&gt;\n&lt;title&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESPONSE_BODY_2</name></cpp:macro> <cpp:value>"&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESPONSE_BODY_3</name></cpp:macro> <cpp:value>"&lt;/h1&gt;\n&lt;p&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESPONSE_BODY_4</name></cpp:macro> <cpp:value>"&lt;/p&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESPONSE_BODY_5</name></cpp:macro> <cpp:value>"&lt;/body&gt;&lt;/html&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DO_COPY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DO_MOVE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>1</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CR</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG0</name><parameter_list>(<param><type><name>f</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_error(APLOG_MARK, APLOG_ERR, 0, NULL, (f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG1</name><parameter_list>(<param><type><name>f</name></type></param>,<param><type><name>a1</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_error(APLOG_MARK, APLOG_ERR, 0, NULL, f, a1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG2</name><parameter_list>(<param><type><name>f</name></type></param>,<param><type><name>a1</name></type></param>,<param><type><name>a2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_error(APLOG_MARK, APLOG_ERR, 0, NULL, f, a1, a2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG3</name><parameter_list>(<param><type><name>f</name></type></param>,<param><type><name>a1</name></type></param>,<param><type><name>a2</name></type></param>,<param><type><name>a3</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_log_error(APLOG_MARK, APLOG_ERR, 0, NULL, f, a1, a2, a3)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DAV_DEBUG</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_CR</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_INFINITY</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DAV_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DAV_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><struct>struct <name>dav_error</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>error_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>aprerr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>namespace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tagname</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_error</name> *</type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>childtags</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_error</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error*</argument>)</argument_list></macro> <macro><name>dav_new_error</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int status</argument>,
<argument>int error_id</argument>, <argument>apr_status_t aprerr</argument>,
<argument>const char *desc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error*</argument>)</argument_list></macro> <macro><name>dav_new_error_tag</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int status</argument>,
<argument>int error_id</argument>, <argument>apr_status_t aprerr</argument>,
<argument>const char *desc</argument>,
<argument>const char *namespace</argument>,
<argument>const char *tagname</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error*</argument>)</argument_list></macro> <macro><name>dav_push_error</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int status</argument>, <argument>int error_id</argument>,
<argument>const char *desc</argument>, <argument>dav_error *prev</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_join_error</name><argument_list>(<argument><expr><name>dav_error</name>* <name>dest</name></expr></argument>, <argument><expr><name>dav_error</name>* <name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>dav_response</name></type> <name>dav_response</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_handle_err</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>dav_error</name> *<name>err</name></expr></argument>,
<argument><expr><name>dav_response</name> *<name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_IF_PARSE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_IF_MULTIPLE_NOT</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_IF_UNK_CHAR</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_IF_ABSENT</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_IF_TAGGED</name></cpp:macro> <cpp:value>104</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_IF_UNCLOSED_PAREN</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_BAD_MAJOR</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_READONLY</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_NO_DATABASE</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_NOT_FOUND</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_BAD_LOCKDB</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_OPENING</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_PROP_EXEC</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_LOCK_OPENDB</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_LOCK_NO_DB</name></cpp:macro> <cpp:value>401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_LOCK_CORRUPT_DB</name></cpp:macro> <cpp:value>402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_LOCK_UNK_STATE_TOKEN</name></cpp:macro> <cpp:value>403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_LOCK_PARSE_TOKEN</name></cpp:macro> <cpp:value>404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_ERR_LOCK_SAVE_LOCK</name></cpp:macro> <cpp:value>405</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>dav_hooks_propdb</name></type> <name>dav_hooks_propdb</name>;</typedef>
<typedef>typedef <type>struct <name>dav_hooks_locks</name></type> <name>dav_hooks_locks</name>;</typedef>
<typedef>typedef <type>struct <name>dav_hooks_vsn</name></type> <name>dav_hooks_vsn</name>;</typedef>
<typedef>typedef <type>struct <name>dav_hooks_repository</name></type> <name>dav_hooks_repository</name>;</typedef>
<typedef>typedef <type>struct <name>dav_hooks_liveprop</name></type> <name>dav_hooks_liveprop</name>;</typedef>
<typedef>typedef <type>struct <name>dav_hooks_binding</name></type> <name>dav_hooks_binding</name>;</typedef>
<typedef>typedef <type>struct <name>dav_hooks_search</name></type> <name>dav_hooks_search</name>;</typedef>
<typedef>typedef <type><name>dav_hooks_propdb</name></type> <name>dav_hooks_db</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_RESOURCE_TYPE_UNKNOWN</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_REGULAR</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_VERSION</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_HISTORY</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_WORKING</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_WORKSPACE</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_ACTIVITY</name></decl>,
<decl><name>DAV_RESOURCE_TYPE_PRIVATE</name></decl>
}</block></enum></type> <name>dav_resource_type</name>;</typedef>
<typedef>typedef <type>struct <name>dav_resource_private</name></type> <name>dav_resource_private</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_resource</name> <block>{
<decl_stmt><decl><type><name>dav_resource_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>exists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>collection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>versioned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>baselined</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>working</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_repository</name> *</type><name>hooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_resource</name>;</typedef>
<typedef>typedef <type>struct <name>dav_locktoken</name></type> <name>dav_locktoken</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>alloc_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>cur_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_buffer</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_BUFFER_MINSIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_BUFFER_PAD</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_set_bufsize</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>dav_buffer *pbuf</argument>,
<argument>apr_size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_buffer_init</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>dav_buffer</name> *<name>pbuf</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_check_bufsize</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>dav_buffer *pbuf</argument>,
<argument>apr_size_t extra_needed</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_buffer_append</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>dav_buffer</name> *<name>pbuf</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_buffer_place</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>dav_buffer</name> *<name>pbuf</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_buffer_place_mem</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>dav_buffer *pbuf</argument>,
<argument>const void *mem</argument>, <argument>apr_size_t amt</argument>,
<argument>apr_size_t pad</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_text</name> *</type> <name>propstats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_text</name> *</type> <name>xmlns</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_get_props_result</name>;</typedef>
<struct>struct <name>dav_response</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_get_props_result</name></type> <name>propresult</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_response</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rnew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name></type> <name>err</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lookup_result</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_lookup_result</argument>)</argument_list></macro> <macro><name>dav_lookup_uri</name><argument_list>(<argument>const char *uri</argument>, <argument>request_rec *r</argument>,
<argument>int must_be_absolute</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_PROP_INSERT_NOTDEF</name></decl>,
<decl><name>DAV_PROP_INSERT_NOTSUPP</name></decl>,
<decl><name>DAV_PROP_INSERT_NAME</name></decl>,
<decl><name>DAV_PROP_INSERT_VALUE</name></decl>,
<decl><name>DAV_PROP_INSERT_SUPPORTED</name></decl>
}</block></enum></type> <name>dav_prop_insert</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_STYLE_ISO8601</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_STYLE_RFC822</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_TIMEBUF_SIZE</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_send_one_response</name><argument_list>(<argument><expr><name>dav_response</name> *<name>response</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_begin_multistatus</name><argument_list>(<argument>apr_bucket_brigade *bb</argument>,
<argument>request_rec *r</argument>, <argument>int status</argument>,
<argument>apr_array_header_t *namespaces</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_finish_multistatus</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_send_multistatus</name><argument_list>(<argument>request_rec *r</argument>, <argument>int status</argument>,
<argument>dav_response *first</argument>,
<argument>apr_array_header_t *namespaces</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_text *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_failed_proppatch</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>apr_array_header_t</name> *<name>prop_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_text *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_success_proppatch</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>apr_array_header_t</name> *<name>prop_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>dav_get_depth</name><argument_list>(<argument>request_rec *r</argument>, <argument>int def_depth</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_validate_root</name><argument_list>(<argument><expr>const <name>apr_xml_doc</name> *<name>doc</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>apr_xml_elem *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_find_child</name><argument_list>(<argument><expr>const <name>apr_xml_elem</name> *<name>elem</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>tagname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>dav_xml_get_cdata</name><argument_list>(<argument>const apr_xml_elem *elem</argument>, <argument>apr_pool_t *pool</argument>,
<argument>int strip_white</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>uri_prefix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>prefix_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_xmlns_info</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_xmlns_info *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_xmlns_create</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_xmlns_add</name><argument_list>(<argument><expr><name>dav_xmlns_info</name> *<name>xi</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>prefix</name></expr></argument>, <argument><expr>const <name>char</name> *<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_xmlns_add_uri</name><argument_list>(<argument><expr><name>dav_xmlns_info</name> *<name>xi</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_xmlns_get_uri</name><argument_list>(<argument><expr><name>dav_xmlns_info</name> *<name>xi</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_xmlns_get_prefix</name><argument_list>(<argument><expr><name>dav_xmlns_info</name> *<name>xi</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_xmlns_generate</name><argument_list>(<argument><expr><name>dav_xmlns_info</name> *<name>xi</name></expr></argument>,
<argument><expr><name>apr_text_header</name> *<name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_repository</name> *</type><name>repos</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_propdb</name> *</type><name>propdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>locks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_vsn</name> *</type><name>vsn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_binding</name> *</type><name>binding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_search</name> *</type><name>search</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_provider</name>;</typedef>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>dav</argument>, <argument>DAV</argument>, <argument>void</argument>, <argument>gather_propsets</argument>,
<argument>(apr_array_header_t *uris)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>dav</argument>, <argument>DAV</argument>, <argument>int</argument>, <argument>find_liveprop</argument>,
<argument>(const dav_resource *resource,
const char *ns_uri, const char *name,
const dav_hooks_liveprop **hooks)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>dav</argument>, <argument>DAV</argument>, <argument>void</argument>, <argument>insert_all_liveprops</argument>,
<argument>(request_rec *r, const dav_resource *resource,
dav_prop_insert what, apr_text_header *phdr)</argument>)</argument_list></macro>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_locks *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_lock_hooks</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_propdb *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_propdb_hooks</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_vsn *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_vsn_hooks</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_binding *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_binding_hooks</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_hooks_search *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_search_hooks</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_register_provider</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
<argument><expr>const <name>dav_provider</name> *<name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_provider *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_lookup_provider</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_provider_name</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GET_HOOKS_PROPDB</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>dav_get_propdb_hooks(r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GET_HOOKS_LOCKS</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>dav_get_lock_hooks(r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GET_HOOKS_VSN</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>dav_get_vsn_hooks(r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GET_HOOKS_BINDING</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>dav_get_binding_hooks(r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GET_HOOKS_SEARCH</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>dav_get_search_hooks(r)</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>dav_if_etag</name></decl>,
<decl><name>dav_if_opaquelock</name></decl>,
<decl><name>dav_if_unknown</name></decl>
}</block></enum></type> <name>dav_if_state_type</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_if_state_list</name> <block>{
<decl_stmt><decl><type><name>dav_if_state_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>condition</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_IF_COND_NORMAL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_IF_COND_NOT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>etag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_if_state_list</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_if_state_list</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_if_header</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>uri_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_if_state_list</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_if_header</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dummy_header</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_if_header</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_locktoken_list</name> <block>{
<decl_stmt><decl><type><name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_locktoken_list</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_locktoken_list</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_locktoken_list</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>dav_locktoken_list</name> **<name>ltl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>dav_liveprop_rollback</name></type> <name>dav_liveprop_rollback</name>;</typedef>
<struct>struct <name>dav_hooks_liveprop</name> <block>{
<function_decl><type><name>dav_prop_insert</name></type> (*<name>insert_prop</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>propid</name></decl></param>, <param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>is_writable</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>, <param><decl><type><name>int</name></type> <name>propid</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type> <name>namespace_uris</name></decl>;</decl_stmt>
<function_decl><type><name>dav_error</name> *</type> (*<name>patch_validate</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>context</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>defer_to_dead</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>patch_exec</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> **</type><name>rollback_ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (*<name>patch_commit</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> *</type><name>rollback_ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>patch_rollback</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> *</type><name>rollback_ctx</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>propid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_writable</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_liveprop_spec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>specs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>namespace_uris</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> *</type><name>hooks</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_liveprop_group</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_do_find_liveprop</name><argument_list>(<argument><expr>const <name>char</name> *<name>ns_uri</name></expr></argument>, <argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
<argument><expr>const <name>dav_liveprop_group</name> *<name>group</name></expr></argument>,
<argument><expr>const <name>dav_hooks_liveprop</name> **<name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>long</argument>)</argument_list></macro> <macro><name>dav_get_liveprop_info</name><argument_list>(<argument>int propid</argument>,
<argument>const dav_liveprop_group *group</argument>,
<argument>const dav_liveprop_spec **info</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_register_liveprop_group</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr>const <name>dav_liveprop_group</name> *<name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_liveprop_ns_index</name><argument_list>(<argument><expr>const <name>char</name> *<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>long</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_liveprop_ns_count</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_add_all_liveprop_xmlns</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr><name>apr_text_header</name> *<name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_core_find_liveprop</name><argument_list>(
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>ns_uri</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
<argument><expr>const <name>dav_hooks_liveprop</name> **<name>hooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_core_insert_all_liveprops</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>const dav_resource *resource</argument>,
<argument>dav_prop_insert what</argument>,
<argument>apr_text_header *phdr</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_core_register_uris</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<enum>enum <block>{
<decl><name>DAV_PROPID_BEGIN</name> <init>= <expr>20000</expr></init></decl>,
<decl><name>DAV_PROPID_creationdate</name></decl>,
<decl><name>DAV_PROPID_displayname</name></decl>,
<decl><name>DAV_PROPID_getcontentlanguage</name></decl>,
<decl><name>DAV_PROPID_getcontentlength</name></decl>,
<decl><name>DAV_PROPID_getcontenttype</name></decl>,
<decl><name>DAV_PROPID_getetag</name></decl>,
<decl><name>DAV_PROPID_getlastmodified</name></decl>,
<decl><name>DAV_PROPID_lockdiscovery</name></decl>,
<decl><name>DAV_PROPID_resourcetype</name></decl>,
<decl><name>DAV_PROPID_source</name></decl>,
<decl><name>DAV_PROPID_supportedlock</name></decl>,
<decl><name>DAV_PROPID_activity_checkout_set</name></decl>,
<decl><name>DAV_PROPID_activity_set</name></decl>,
<decl><name>DAV_PROPID_activity_version_set</name></decl>,
<decl><name>DAV_PROPID_auto_merge_set</name></decl>,
<decl><name>DAV_PROPID_auto_version</name></decl>,
<decl><name>DAV_PROPID_baseline_collection</name></decl>,
<decl><name>DAV_PROPID_baseline_controlled_collection</name></decl>,
<decl><name>DAV_PROPID_baseline_controlled_collection_set</name></decl>,
<decl><name>DAV_PROPID_checked_in</name></decl>,
<decl><name>DAV_PROPID_checked_out</name></decl>,
<decl><name>DAV_PROPID_checkin_fork</name></decl>,
<decl><name>DAV_PROPID_checkout_fork</name></decl>,
<decl><name>DAV_PROPID_checkout_set</name></decl>,
<decl><name>DAV_PROPID_comment</name></decl>,
<decl><name>DAV_PROPID_creator_displayname</name></decl>,
<decl><name>DAV_PROPID_current_activity_set</name></decl>,
<decl><name>DAV_PROPID_current_workspace_set</name></decl>,
<decl><name>DAV_PROPID_default_variant</name></decl>,
<decl><name>DAV_PROPID_eclipsed_set</name></decl>,
<decl><name>DAV_PROPID_label_name_set</name></decl>,
<decl><name>DAV_PROPID_merge_set</name></decl>,
<decl><name>DAV_PROPID_precursor_set</name></decl>,
<decl><name>DAV_PROPID_predecessor_set</name></decl>,
<decl><name>DAV_PROPID_root_version</name></decl>,
<decl><name>DAV_PROPID_subactivity_set</name></decl>,
<decl><name>DAV_PROPID_subbaseline_set</name></decl>,
<decl><name>DAV_PROPID_successor_set</name></decl>,
<decl><name>DAV_PROPID_supported_method_set</name></decl>,
<decl><name>DAV_PROPID_supported_live_property_set</name></decl>,
<decl><name>DAV_PROPID_supported_report_set</name></decl>,
<decl><name>DAV_PROPID_unreserved</name></decl>,
<decl><name>DAV_PROPID_variant_set</name></decl>,
<decl><name>DAV_PROPID_version_controlled_binding_set</name></decl>,
<decl><name>DAV_PROPID_version_controlled_configuration</name></decl>,
<decl><name>DAV_PROPID_version_history</name></decl>,
<decl><name>DAV_PROPID_version_name</name></decl>,
<decl><name>DAV_PROPID_workspace</name></decl>,
<decl><name>DAV_PROPID_workspace_checkout_set</name></decl>,
<decl><name>DAV_PROPID_END</name></decl>
}</block>;</enum>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPID_CORE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPID_FS</name></cpp:macro> <cpp:value>10100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPID_TEST1</name></cpp:macro> <cpp:value>10300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPID_TEST2</name></cpp:macro> <cpp:value>10400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPID_TEST3</name></cpp:macro> <cpp:value>10500</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>dav_db</name></type> <name>dav_db</name>;</typedef>
<typedef>typedef <type>struct <name>dav_namespace_map</name></type> <name>dav_namespace_map</name>;</typedef>
<typedef>typedef <type>struct <name>dav_deadprop_rollback</name></type> <name>dav_deadprop_rollback</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_prop_name</name>;</typedef>
<struct>struct <name>dav_hooks_propdb</name> <block>{
<function_decl><type><name>dav_error</name> *</type> (*<name>open</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>, <param><decl><type><name>int</name></type> <name>ro</name></decl></param>,
<param><decl><type><name>dav_db</name> **</type><name>pdb</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (*<name>close</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>define_namespaces</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>dav_xmlns_info</name> *</type><name>xi</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>output_value</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_prop_name</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>dav_xmlns_info</name> *</type><name>xi</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>, <param><decl><type><name>int</name> *</type><name>found</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>map_namespaces</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>namespaces</name></decl></param>,
<param><decl><type><name>dav_namespace_map</name> **</type><name>mapping</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>store</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_prop_name</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>dav_namespace_map</name> *</type><name>mapping</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>remove</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_prop_name</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>exists</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_prop_name</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>first_name</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>dav_prop_name</name> *</type><name>pname</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>next_name</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><name>dav_prop_name</name> *</type><name>pname</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>get_rollback</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_prop_name</name> *</type><name>name</name></decl></param>,
<param><decl><type><name>dav_deadprop_rollback</name> **</type><name>prollback</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>apply_rollback</name>)<parameter_list>(<param><decl><type><name>dav_db</name> *</type><name>db</name></decl></param>,
<param><decl><type><name>dav_deadprop_rollback</name> *</type><name>rollback</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_TIMEOUT_INFINITE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>time_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_timeout</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>dav_lockdb_private</name></type> <name>dav_lockdb_private</name>;</typedef>
<typedef>typedef <type>struct <name>dav_lock_private</name></type> <name>dav_lock_private</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name> *</type><name>hooks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ro</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lockdb_private</name> *</type><name>info</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lockdb</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_LOCKSCOPE_UNKNOWN</name></decl>,
<decl><name>DAV_LOCKSCOPE_EXCLUSIVE</name></decl>,
<decl><name>DAV_LOCKSCOPE_SHARED</name></decl>
}</block></enum></type> <name>dav_lock_scope</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_LOCKTYPE_UNKNOWN</name></decl>,
<decl><name>DAV_LOCKTYPE_WRITE</name></decl>
}</block></enum></type> <name>dav_lock_type</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_LOCKREC_DIRECT</name></decl>,
<decl><name>DAV_LOCKREC_INDIRECT</name></decl>,
<decl><name>DAV_LOCKREC_INDIRECT_PARTIAL</name></decl>
}</block></enum></type> <name>dav_lock_rectype</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_lock</name> <block>{
<decl_stmt><decl><type><name>dav_lock_rectype</name></type> <name>rectype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_locknull</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_scope</name></type> <name>scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_type</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_private</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_lock</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lock</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><expr_stmt><expr><call><name>dav_lock_get_activelock</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>dav_lock</name> *<name>locks</name></expr></argument>,
<argument><expr><name>dav_buffer</name> *<name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_lock_parse_lockinfo</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resrouce</name></expr></argument>,
<argument><expr><name>dav_lockdb</name> *<name>lockdb</name></expr></argument>,
<argument><expr>const <name>apr_xml_doc</name> *<name>doc</name></expr></argument>,
<argument><expr><name>dav_lock</name> **<name>lock_request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_unlock</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>,
<argument><expr>const <name>dav_locktoken</name> *<name>locktoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_add_lock</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>,
<argument><expr><name>dav_lockdb</name> *<name>lockdb</name></expr></argument>, <argument><expr><name>dav_lock</name> *<name>request</name></expr></argument>,
<argument><expr><name>dav_response</name> **<name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <macro><name>dav_notify_created</name><argument_list>(<argument>request_rec *r</argument>,
<argument>dav_lockdb *lockdb</argument>,
<argument>const dav_resource *resource</argument>,
<argument>int resource_state</argument>,
<argument>int depth</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error*</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_lock_query</name><argument_list>(<argument><expr><name>dav_lockdb</name> *<name>lockdb</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>,
<argument><expr><name>dav_lock</name> **<name>locks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <macro><name>dav_validate_request</name><argument_list>(<argument>request_rec *r</argument>,
<argument>dav_resource *resource</argument>,
<argument>int depth</argument>,
<argument>dav_locktoken *locktoken</argument>,
<argument>dav_response **response</argument>,
<argument>int flags</argument>,
<argument>dav_lockdb *lockdb</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VALIDATE_RESOURCE</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VALIDATE_PARENT</name></cpp:macro> <cpp:value>0x0020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VALIDATE_ADD_LD</name></cpp:macro> <cpp:value>0x0040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VALIDATE_USE_424</name></cpp:macro> <cpp:value>0x0080</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VALIDATE_IS_PARENT</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_VALIDATE_NO_MODIFY</name></cpp:macro> <cpp:value>0x0200</cpp:value></cpp:define>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_resource_state</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<struct>struct <name>dav_hooks_locks</name> <block>{
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> (*<name>get_supportedlock</name>)<parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>parse_locktoken</name>)<parameter_list>(
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>char_token</name></decl></param>,
<param><decl><type><name>dav_locktoken</name> **</type><name>locktoken_p</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> (*<name>format_locktoken</name>)<parameter_list>(
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>compare_locktoken</name>)<parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>lt1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>lt2</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>open_lockdb</name>)<parameter_list>(
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>int</name></type> <name>ro</name></decl></param>,
<param><decl><type><name>int</name></type> <name>force</name></decl></param>,
<param><decl><type><name>dav_lockdb</name> **</type><name>lockdb</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> (*<name>close_lockdb</name>)<parameter_list>(
<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>remove_locknull_state</name>)<parameter_list>(
<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>create_lock</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>lock</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>get_locks</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>calltype</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>locks</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GETLOCKS_RESOLVED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GETLOCKS_PARTIAL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_GETLOCKS_COMPLETE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<function_decl><type><name>dav_error</name> *</type> (*<name>find_lock</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>,
<param><decl><type><name>int</name></type> <name>partial_ok</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>lock</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>has_locks</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>locks_present</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>append_locks</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>make_indirect</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_lock</name> *</type><name>lock</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>remove_lock</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>refresh_locks</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken_list</name> *</type><name>ltl</name></decl></param>,
<param><decl><type><name>time_t</name></type> <name>new_time</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>locks</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>lookup_resource</name>)<parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>start_resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> **</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESOURCE_LOCK_NULL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESOURCE_NULL</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESOURCE_EXISTS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESOURCE_ERROR</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>dav_propdb</name></type> <name>dav_propdb</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <macro><name>dav_open_propdb</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>dav_lockdb *lockdb</argument>,
<argument>const dav_resource *resource</argument>,
<argument>int ro</argument>,
<argument>apr_array_header_t *ns_xlate</argument>,
<argument>dav_propdb **propdb</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_close_propdb</name><argument_list>(<argument><expr><name>dav_propdb</name> *<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_get_props_result</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_props</name><argument_list>(
<argument><expr><name>dav_propdb</name> *<name>db</name></expr></argument>,
<argument><expr><name>apr_xml_doc</name> *<name>doc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_get_props_result</argument>)</argument_list></macro> <macro><name>dav_get_allprops</name><argument_list>(
<argument>dav_propdb *db</argument>,
<argument>dav_prop_insert what</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_liveprop_supported</name><argument_list>(
<argument><expr><name>dav_propdb</name> *<name>propdb</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>ns_uri</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>propname</name></expr></argument>,
<argument><expr><name>apr_text_header</name> *<name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <name>dav_prop_ctx</name> <block>{
<decl_stmt><decl><type><name>dav_propdb</name> *</type><name>propdb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_elem</name> *</type><name>prop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>operation</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROP_OP_SET</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROP_OP_DELETE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>is_liveprop</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>liveprop_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_rollback_item</name> *</type><name>rollback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_prop_ctx</name>;</typedef>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_prop_validate</name><argument_list>(<argument><expr><name>dav_prop_ctx</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_prop_exec</name><argument_list>(<argument><expr><name>dav_prop_ctx</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_prop_commit</name><argument_list>(<argument><expr><name>dav_prop_ctx</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_prop_rollback</name><argument_list>(<argument><expr><name>dav_prop_ctx</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROP_CTX_HAS_ERR</name><parameter_list>(<param><type><name>dpc</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((dpc).err &amp;&amp; (dpc).err-&gt;status &gt;= 300)</cpp:value></cpp:define>
<enum>enum <block>{
<decl><name>DAV_CALLTYPE_MEMBER</name> <init>= <expr>1</expr></init></decl>,
<decl><name>DAV_CALLTYPE_COLLECTION</name></decl>,
<decl><name>DAV_CALLTYPE_LOCKNULL</name></decl>
}</block>;</enum>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>walk_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_response</name> *</type><name>response</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_walk_resource</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>walk_type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_WALKTYPE_AUTH</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_WALKTYPE_NORMAL</name></cpp:macro> <cpp:value>0x0002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_WALKTYPE_LOCKNULL</name></cpp:macro> <cpp:value>0x0004</cpp:value></cpp:define>
<function_decl><type><name>dav_error</name> *</type> (*<name>func</name>)<parameter_list>(<param><decl><type><name>dav_walk_resource</name> *</type><name>wres</name></decl></param>, <param><decl><type><name>int</name></type> <name>calltype</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>walk_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_walk_params</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_walker_ctx</name> <block>{
<decl_stmt><decl><type><name>dav_walk_params</name></type> <name>w</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>scratchpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>propfind_type</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPFIND_IS_ALLPROP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPFIND_IS_PROPNAME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPFIND_IS_PROP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<decl_stmt><decl><type><name>apr_text</name> *</type><name>propstat_404</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_if_header</name> *</type><name>if_header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_lock</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>skip_root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>work_buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_walker_ctx</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>dav_add_response</name><argument_list>(<argument>dav_walk_resource *wres</argument>,
<argument>int status</argument>,
<argument>dav_get_props_result *propstats</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type>struct <name>dav_stream</name></type> <name>dav_stream</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_MODE_WRITE_TRUNC</name></decl>,
<decl><name>DAV_MODE_WRITE_SEEKABLE</name></decl>
}</block></enum></type> <name>dav_stream_mode</name>;</typedef>
<struct>struct <name>dav_hooks_repository</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>handle_get</name></decl>;</decl_stmt>
<function_decl><type><name>dav_error</name> *</type> (*<name>get_resource</name>)<parameter_list>(
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><name>int</name></type> <name>use_checked_in</name></decl></param>,
<param><decl><type><name>dav_resource</name> **</type><name>resource</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>get_parent_resource</name>)<parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_resource</name> **</type><name>parent_resource</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>is_same_resource</name>)<parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res2</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>is_parent_resource</name>)<parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res2</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>open_stream</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_stream_mode</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>dav_stream</name> **</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>close_stream</name>)<parameter_list>(<param><decl><type><name>dav_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>commit</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>write_stream</name>)<parameter_list>(<param><decl><type><name>dav_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>seek_stream</name>)<parameter_list>(<param><decl><type><name>dav_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>abs_position</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>set_headers</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>deliver</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>create_collection</name>)<parameter_list>(
<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>copy_resource</name>)<parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>dav_resource</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>move_resource</name>)<parameter_list>(
<param><decl><type><name>dav_resource</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>dav_resource</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>remove_resource</name>)<parameter_list>(
<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>walk</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name></decl></param>, <param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> (*<name>getetag</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
<function_decl><type><name>request_rec</name> *</type> (*<name>get_request_rec</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type> (*<name>get_pathname</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
}</block>;</struct>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_add_vary_header</name><argument_list>(<argument><expr><name>request_rec</name> *<name>in_req</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>out_req</name></expr></argument>,
<argument><expr>const <name>dav_resource</name> *<name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><enum>enum <block>{
<decl><name>DAV_AUTO_VERSION_NEVER</name></decl>,
<decl><name>DAV_AUTO_VERSION_ALWAYS</name></decl>,
<decl><name>DAV_AUTO_VERSION_LOCKED</name></decl>
}</block></enum></type> <name>dav_auto_version</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>resource_versioned</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>resource_checkedout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>parent_checkedout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource</name> *</type><name>parent_resource</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_auto_version_info</name>;</typedef>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <macro><name>dav_auto_checkout</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>dav_resource *resource</argument>,
<argument>int parent_only</argument>,
<argument>dav_auto_version_info *av_info</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>dav_error *</argument>)</argument_list></macro> <macro><name>dav_auto_checkin</name><argument_list>(
<argument>request_rec *r</argument>,
<argument>dav_resource *resource</argument>,
<argument>int undo</argument>,
<argument>int unlock</argument>,
<argument>dav_auto_version_info *av_info</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nmspace</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_report_elem</name>;</typedef>
<struct>struct <name>dav_hooks_vsn</name> <block>{
<function_decl><type><name>void</name></type> (*<name>get_vsn_options</name>)<parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>get_option</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>option</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>versionable</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_auto_version</name></type> (*<name>auto_versionable</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>vsn_control</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>target</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>checkout</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>auto_checkout</name></decl></param>,
<param><decl><type><name>int</name></type> <name>is_unreserved</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_fork_ok</name></decl></param>,
<param><decl><type><name>int</name></type> <name>create_activity</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>activities</name></decl></param>,
<param><decl><type><name>dav_resource</name> **</type><name>working_resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>uncheckout</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>checkin</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>keep_checked_out</name></decl></param>,
<param><decl><type><name>dav_resource</name> **</type><name>version_resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>avail_reports</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_report_elem</name> **</type><name>reports</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>report_label_header_allowed</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>deliver_report</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_doc</name> *</type><name>doc</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>update</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>version</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>add_label</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><name>int</name></type> <name>replace</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>remove_label</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>can_be_workspace</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>make_workspace</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>apr_xml_doc</name> *</type><name>doc</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> (*<name>can_be_activity</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>make_activity</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>merge</name>)<parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>target</name></decl></param>, <param><decl><type><name>dav_resource</name> *</type><name>source</name></decl></param>,
<param><decl><type><name>int</name></type> <name>no_auto_merge</name></decl></param>, <param><decl><type><name>int</name></type> <name>no_checkout</name></decl></param>,
<param><decl><type><name>apr_xml_elem</name> *</type><name>prop_elem</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>dav_hooks_binding</name> <block>{
<function_decl><type><name>int</name></type> (*<name>is_bindable</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>bind_resource</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_resource</name> *</type><name>binding</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>dav_hooks_search</name> <block>{
<function_decl><type><name>dav_error</name> *</type> (*<name>set_option_head</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name> *</type> (*<name>search_resource</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>propid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> *</type><name>provider</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_elem_private</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_OPTIONS_EXTENSION_GROUP</name></cpp:macro> <cpp:value>"dav_options"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dav_options_provider</name> <block>{
<function_decl><type><name>dav_error</name>*</type> (*<name>dav_header</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>dav_error</name>*</type> (*<name>dav_method</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_options_provider</name>;</typedef>
<extern>extern DAV_DECLARE(const dav_options_provider *</extern>)</block> <expr_stmt><expr><call><name>dav_get_options_providers</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></extern>
<extern>extern DAV_DECLARE(void</extern>) <expr_stmt><expr><call><name>dav_options_provider_register</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
<argument><expr>const <name>dav_options_provider</name> *<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <name>dav_resource_type_provider</name> <block>{
<function_decl><type><name>int</name></type> (*<name>get_resource_type</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>uri</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>dav_resource_type_provider</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_RESOURCE_TYPE_GROUP</name></cpp:macro> <cpp:value>"dav_resource_type"</cpp:value></cpp:define>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_resource_type_provider_register</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>name</name></expr></argument>,
<argument><expr>const <name>dav_resource_type_provider</name> *<name>provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>DAV_DECLARE</name><argument_list>(<argument>const dav_resource_type_provider *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>dav_get_resource_type_providers</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
