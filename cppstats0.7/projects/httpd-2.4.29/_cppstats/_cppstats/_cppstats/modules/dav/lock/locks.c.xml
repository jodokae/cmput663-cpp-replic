<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/dav/lock/locks.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uuid.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"locks.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_TRUE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FALSE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_CREATE_LIST</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_APPEND_LIST</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_LOCK_DIRECT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_LOCK_INDIRECT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_TYPE_FNAME</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<struct>struct <name>dav_locktoken</name> <block>{
<decl_stmt><decl><type><name>apr_uuid_t</name></type> <name>uuid</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dav_compare_locktoken</name><parameter_list>(<param><type><name>plt1</name></type></param>, <param><type><name>plt2</name></type></param>)</parameter_list></cpp:macro> <cpp:value>memcmp(&amp;(plt1)-&gt;uuid, &amp;(plt2)-&gt;uuid, sizeof((plt1)-&gt;uuid))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>dav_lock_discovery_fixed</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name>scope</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lock_discovery_fixed</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_lock_discovery</name> <block>{
<decl_stmt><decl><type>struct <name>dav_lock_discovery_fixed</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>owner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_lock_discovery</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lock_discovery</name>;</typedef>
<typedef>typedef <type><struct>struct <name>dav_lock_indirect</name> <block>{
<decl_stmt><decl><type><name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dav_lock_indirect</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lock_indirect</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dav_size_direct</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(1 + sizeof(dav_lock_discovery_fixed) + sizeof(apr_uuid_t) + ((a)-&gt;owner ? strlen((a)-&gt;owner) : 0) + ((a)-&gt;auth_user ? strlen((a)-&gt;auth_user) : 0) + 2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dav_size_indirect</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(1 + sizeof(apr_uuid_t) + sizeof(time_t) + sizeof(int) + (a)-&gt;key.dsize)</cpp:value></cpp:define>
<struct>struct <name>dav_lockdb_private</name> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lockdb_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>opened</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>db</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>dav_lockdb</name></type> <name>pub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lockdb_private</name></type> <name>priv</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lockdb_combined</name>;</typedef>
<struct>struct <name>dav_lock_private</name> <block>{
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>dav_lock</name></type> <name>pub</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_private</name></type> <name>priv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_locktoken</name></type> <name>token</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_lock_combined</name>;</typedef>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dav_hooks_locks</name></type> <name>dav_hooks_locks_generic</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_dbm_new_error</name><parameter_list>(<param><decl><type><name>apr_dbm_t</name> *</type><name>db</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>errcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>db</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>errcode</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>errstr</name> = "Could not open property database."</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_dbm_geterror</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>&amp;<name>errcode</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errstr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr><name>errcode</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>errstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_lock</name> *</type><name>dav_generic_alloc_lock</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>, <param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_lock_combined</name> *</type><name>comb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>comb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>comb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>rectype</name></name> = <name>DAV_LOCKREC_DIRECT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>info</name></name> = &amp;<name><name>comb</name>-&gt;<name>priv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>priv</name>.<name>key</name></name> = <name>key</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>locktoken</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>locktoken</name></name> = &amp;<name><name>comb</name>-&gt;<name>token</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_uuid_get</name><argument_list>(<argument><expr>&amp;<name><name>comb</name>-&gt;<name>token</name>.<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>locktoken</name></name> = <name>locktoken</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr>&amp;<name><name>comb</name>-&gt;<name>pub</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_parse_locktoken</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>char_token</name></decl></param>,
<param><decl><type><name>dav_locktoken</name> **</type><name>locktoken_p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_locktoken</name> *</type><name>locktoken</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>char_token</name></expr></argument>, <argument><expr>"opaquelocktoken:"</expr></argument>)</argument_list></call> != <name>char_token</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><name>DAV_ERR_LOCK_UNK_STATE_TOKEN</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The lock token uses an unknown State-token "
"format and could not be parsed."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>char_token</name> += 16</expr>;</expr_stmt>
<expr_stmt><expr><name>locktoken</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>locktoken</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_uuid_parse</name><argument_list>(<argument><expr>&amp;<name><name>locktoken</name>-&gt;<name>uuid</name></name></expr></argument>, <argument><expr><name>char_token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><name>DAV_ERR_LOCK_PARSE_TOKEN</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The opaquelocktoken has an incorrect format "
"and could not be parsed."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>locktoken_p</name> = <name>locktoken</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_generic_format_locktoken</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>APR_UUID_FORMATTED_LENGTH</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_uuid_format</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name><name>locktoken</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"opaquelocktoken:"</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_generic_compare_locktoken</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>lt1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>lt2</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name>lt1</name></expr></argument>, <argument><expr><name>lt2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_really_open_lockdb</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>opened</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_dbm_open</name><argument_list>(<argument><expr>&amp;<name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>lockdb_path</name></name></expr></argument>,
<argument><expr><name><name>lockdb</name>-&gt;<name>ro</name></name> ? <name>APR_DBM_READONLY</name> : <name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_generic_dbm_new_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_LOCK_OPENDB</name></expr></argument>,
<argument><expr>"Could not open the lock database."</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>opened</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_open_lockdb</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>ro</name></decl></param>, <param><decl><type><name>int</name></type> <name>force</name></decl></param>,
<param><decl><type><name>dav_lockdb</name> **</type><name>lockdb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_lockdb_combined</name> *</type><name>comb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>comb</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>comb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>hooks</name></name> = &amp;<name>dav_hooks_locks_generic</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>ro</name></name> = <name>ro</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>pub</name>.<name>info</name></name> = &amp;<name><name>comb</name>-&gt;<name>priv</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>priv</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>priv</name>.<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>comb</name>-&gt;<name>priv</name>.<name>lockdb_path</name></name> = <call><name>dav_generic_get_lockdb_path</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>comb</name>-&gt;<name>priv</name>.<name>lockdb_path</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_LOCK_NO_DB</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"A lock database was not specified with the "
"DAVGenericLockDB directive. One must be "
"specified to use the locking functionality."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>lockdb</name> = &amp;<name><name>comb</name>-&gt;<name>pub</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>force</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_generic_really_open_lockdb</name><argument_list>(<argument><expr>*<name>lockdb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_generic_close_lockdb</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>opened</name></name> = 0</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_datum_t</name></type> <name>dav_generic_build_key</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name> <init>= <expr><name><name>resource</name>-&gt;<name>uri</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>)</argument_list></call> + 2</expr>;</expr_stmt>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name><name>key</name>.<name>dptr</name></name> = <name>DAV_TYPE_FNAME</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name> + 1</expr></argument>, <argument><expr><name>pathname</name></expr></argument>, <argument><expr><name><name>key</name>.<name>dsize</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>key</name>.<name>dptr</name><index>[<expr><name><name>key</name>.<name>dsize</name></name> - 2</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name><index>[<expr>--<name><name>key</name>.<name>dsize</name></name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<return>return <expr><name>key</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_generic_lock_expired</name><parameter_list>(<param><decl><type><name>time_t</name></type> <name>expires</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>expires</name> != <name>DAV_TIMEOUT_INFINITE</name> &amp;&amp; <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &gt;= <name>expires</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_save_lock_record</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>,
<param><decl><type><name>dav_lock_discovery</name> *</type><name>direct</name></decl></param>,
<param><decl><type><name>dav_lock_indirect</name> *</type><name>indirect</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>val</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name> <init>= <expr><name>direct</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name> <init>= <expr><name>indirect</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>lockdb</name>-&gt;<name>ro</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"INTERNAL DESIGN ERROR: the lockdb was opened "
"readonly, but an attempt to save locks was "
"performed."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_really_open_lockdb</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>dp</name> == <name>NULL</name> &amp;&amp; <name>ip</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dbm_delete</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>dp</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>val</name>.<name>dsize</name></name> += <call><name>dav_size_direct</name><argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> = <name><name>dp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>ip</name></expr>)</condition> <block>{
<expr_stmt><expr><name><name>val</name>.<name>dsize</name></name> += <call><name>dav_size_indirect</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> = <name><name>ip</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>ptr</name> = <name><name>val</name>.<name>dptr</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> = <name>direct</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> = <name>indirect</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>dp</name></expr>)</condition> <block>{
<expr_stmt><expr>*<name>ptr</name>++ = <name>DAV_LOCK_DIRECT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>f</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>f</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>owner</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ptr</name>++ = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>dp</name>-&gt;<name>auth_user</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ptr</name>++ = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>auth_user</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>auth_user</name></name></expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>auth_user</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>dp</name> = <name><name>dp</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name>ip</name></expr>)</condition> <block>{
<expr_stmt><expr>*<name>ptr</name>++ = <name>DAV_LOCK_INDIRECT</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>&amp;<name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>&amp;<name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> = <name><name>ip</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_dbm_store</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_generic_dbm_new_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_LOCK_SAVE_LOCK</name></expr></argument>,
<argument><expr>"Could not save lock information."</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_load_lock_record</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><name>apr_datum_t</name></type> <name>key</name></decl></param>,
<param><decl><type><name>int</name></type> <name>add_method</name></decl></param>,
<param><decl><type><name>dav_lock_discovery</name> **</type><name>direct</name></decl></param>,
<param><decl><type><name>dav_lock_indirect</name> **</type><name>indirect</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_save</name> <init>= <expr><name>DAV_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>val</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>add_method</name> != <name>DAV_APPEND_LIST</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>direct</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>indirect</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_really_open_lockdb</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_generic_dbm_new_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>val</name>.<name>dsize</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><name>offset</name> &lt; <name><name>val</name>.<name>dsize</name></name></expr>)</condition> <block>{
<switch>switch <condition>(<expr>*(<name><name>val</name>.<name>dptr</name></name> + <name>offset</name>++)</expr>)</condition> <block>{
<case>case <expr><name>DAV_LOCK_DIRECT</name></expr>:
<expr_stmt><expr><name>dp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>f</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>f</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>locktoken</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<if>if <condition>(<expr>*(<name><name>val</name>.<name>dptr</name></name> + <name>offset</name>) == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>offset</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>owner</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name>len</name> + 1</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>*(<name><name>val</name>.<name>dptr</name></name> + <name>offset</name>) == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>offset</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dp</name>-&gt;<name>auth_user</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name>len</name> + 1</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<call><name>dav_generic_lock_expired</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dp</name>-&gt;<name>next</name></name> = *<name>direct</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>direct</name> = <name>dp</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>need_save</name> = <name>DAV_TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>DAV_LOCK_INDIRECT</name></expr>:
<expr_stmt><expr><name>ip</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ip</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name>-&gt;<name>locktoken</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <sizeof>sizeof<argument_list>(<argument><expr>*<name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name> = *(<call>(<name>int</name> *) <argument_list>(<argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dptr</name></name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name> + <name>offset</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>offset</name> += <name><name>ip</name>-&gt;<name>key</name>.<name>dsize</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>dav_generic_lock_expired</name><argument_list>(<argument><expr><name><name>ip</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ip</name>-&gt;<name>next</name></name> = *<name>indirect</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>indirect</name> = <name>ip</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>need_save</name> = <name>DAV_TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>apr_dbm_freedatum</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name>offset</name></expr>;</expr_stmt>
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_LOCK_CORRUPT_DB</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"The lock database was found to "
"be corrupt. offset %"
<name>APR_SIZE_T_FMT</name> ", c=%02x"</expr></argument>,
<argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</default>}</block></switch>
}</block></while>
<expr_stmt><expr><call><name>apr_dbm_freedatum</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>need_save</name> == <name>DAV_TRUE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_generic_save_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>*<name>direct</name></expr></argument>, <argument><expr>*<name>indirect</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_resolve</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><name>dav_lock_indirect</name> *</type><name>indirect</name></decl></param>,
<param><decl><type><name>dav_lock_discovery</name> **</type><name>direct</name></decl></param>,
<param><decl><type><name>dav_lock_discovery</name> **</type><name>ref_dp</name></decl></param>,
<param><decl><type><name>dav_lock_indirect</name> **</type><name>ref_ip</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ind</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_load_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name><name>indirect</name>-&gt;<name>key</name></name></expr></argument>,
<argument><expr><name>DAV_CREATE_LIST</name></expr></argument>,
<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr>&amp;<name>ind</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ref_dp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>ref_dp</name> = <name>dir</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>ref_ip</name> = <name>ind</name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>dir</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>dir</name> = <name><name>dir</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name><name>indirect</name>-&gt;<name>locktoken</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>direct</name> = <name>dir</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>,
<argument><expr><name>DAV_ERR_LOCK_CORRUPT_DB</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The lock database was found to be corrupt. "
"An indirect lock's direct lock could not "
"be found."</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_generic_get_supportedlock</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>supported</name><index>[]</index></name> <init>= <expr><name>DEBUG_CR</name>
"&lt;D:lockentry&gt;" <name>DEBUG_CR</name>
"&lt;D:lockscope&gt;&lt;D:exclusive/&gt;&lt;/D:lockscope&gt;" <name>DEBUG_CR</name>
"&lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;" <name>DEBUG_CR</name>
"&lt;/D:lockentry&gt;" <name>DEBUG_CR</name>
"&lt;D:lockentry&gt;" <name>DEBUG_CR</name>
"&lt;D:lockscope&gt;&lt;D:shared/&gt;&lt;/D:lockscope&gt;" <name>DEBUG_CR</name>
"&lt;D:locktype&gt;&lt;D:write/&gt;&lt;/D:locktype&gt;" <name>DEBUG_CR</name>
"&lt;/D:lockentry&gt;" <name>DEBUG_CR</name></expr></init></decl>;</decl_stmt>
<return>return <expr><name>supported</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_remove_locknull_state</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_create_lock</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>lock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_get_locks</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>calltype</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>locks</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock</name> *</type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock</name> *</type><name>newlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr><name>calltype</name> == <name>DAV_GETLOCKS_COMPLETE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"INTERNAL DESIGN ERROR: DAV_GETLOCKS_COMPLETE "
"is not yet supported"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_load_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>DAV_CREATE_LIST</name></expr></argument>,
<argument><expr>&amp;<name>dp</name></expr></argument>, <argument><expr>&amp;<name>ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>dp</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>dp</name> = <name><name>dp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>newlock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>scope</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>type</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>depth</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>timeout</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>owner</name></name> = <name><name>dp</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>auth_user</name></name> = <name><name>dp</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>next</name></name> = <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <name>newlock</name></expr>;</expr_stmt>
}</block></for>
<for>for (<init>;</init> <condition><expr><name>ip</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ip</name> = <name><name>ip</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>newlock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>calltype</name> == <name>DAV_GETLOCKS_RESOLVED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_generic_resolve</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr>&amp;<name>dp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>scope</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>type</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>depth</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>timeout</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>owner</name></name> = <name><name>dp</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>auth_user</name></name> = <name><name>dp</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>rectype</name></name> = <name>DAV_LOCKREC_INDIRECT_PARTIAL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>next</name></name> = <name>lock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>lock</name> = <name>newlock</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*<name>locks</name> = <name>lock</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_find_lock</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>,
<param><decl><type><name>int</name></type> <name>partial_ok</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>lock</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_load_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>DAV_CREATE_LIST</name></expr></argument>,
<argument><expr>&amp;<name>dp</name></expr></argument>, <argument><expr>&amp;<name>ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>dp</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>dp</name> = <name><name>dp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name>locktoken</name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>lock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>locktoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>scope</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>type</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>depth</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>timeout</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>owner</name></name> = <name><name>dp</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>auth_user</name></name> = <name><name>dp</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<for>for (<init>;</init> <condition><expr><name>ip</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ip</name> = <name><name>ip</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name>locktoken</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>lock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>locktoken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>partial_ok</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>rectype</name></name> = <name>DAV_LOCKREC_INDIRECT_PARTIAL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>rectype</name></name> = <name>DAV_LOCKREC_INDIRECT</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_resolve</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr>&amp;<name>dp</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>scope</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>type</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>depth</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>timeout</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>owner</name></name> = <name><name>dp</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>lock</name>)-&gt;<name>auth_user</name></name> = <name><name>dp</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_has_locks</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>locks_present</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>locks_present</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_really_open_lockdb</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>locks_present</name> = <call><name>apr_dbm_exists</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>db</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_append_locks</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>make_indirect</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_lock</name> *</type><name>lock</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>dav_generic_load_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>dp</name></expr></argument>, <argument><expr>&amp;<name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>make_indirect</name></expr>)</condition><then> <block>{
<for>for (<init>;</init> <condition><expr><name>lock</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>lock</name> = <name><name>lock</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>newi</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>locktoken</name></name> = (<name>dav_locktoken</name> *)<name><name>lock</name>-&gt;<name>locktoken</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>timeout</name></name> = <name><name>lock</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>key</name></name> = <name><name>lock</name>-&gt;<name>info</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>next</name></name> = <name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> = <name>newi</name></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<for>for (<init>;</init> <condition><expr><name>lock</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>lock</name> = <name><name>lock</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>lock</name>-&gt;<name>rectype</name></name> == <name>DAV_LOCKREC_DIRECT</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>newd</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>f</name>.<name>scope</name></name> = <name><name>lock</name>-&gt;<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>f</name>.<name>type</name></name> = <name><name>lock</name>-&gt;<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>f</name>.<name>depth</name></name> = <name><name>lock</name>-&gt;<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>f</name>.<name>timeout</name></name> = <name><name>lock</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>locktoken</name></name> = (<name>dav_locktoken</name> *)<name><name>lock</name>-&gt;<name>locktoken</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>owner</name></name> = <name><name>lock</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>auth_user</name></name> = <name><name>lock</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newd</name>-&gt;<name>next</name></name> = <name>dp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dp</name> = <name>newd</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>newi</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>locktoken</name></name> = (<name>dav_locktoken</name> *)<name><name>lock</name>-&gt;<name>locktoken</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>key</name></name> = <name><name>lock</name>-&gt;<name>info</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newi</name>-&gt;<name>next</name></name> = <name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ip</name> = <name>newi</name></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
}</block></else></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_save_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_remove_lock</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken</name> *</type><name>locktoken</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dh</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ih</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>locktoken</name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dprev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>iprev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_load_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>DAV_CREATE_LIST</name></expr></argument>,
<argument><expr>&amp;<name>dh</name></expr></argument>, <argument><expr>&amp;<name>ih</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>dp</name> = <name>dh</name></expr>;</init> <condition><expr><name>dp</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>dp</name> = <name><name>dp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name>locktoken</name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>dprev</name></expr>)</condition><then>
<expr_stmt><expr><name><name>dprev</name>-&gt;<name>next</name></name> = <name><name>dp</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>dh</name> = <name><name>dh</name>-&gt;<name>next</name></name></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name>dprev</name> = <name>dp</name></expr>;</expr_stmt>
}</block></for>
<for>for (<init><expr><name>ip</name> = <name>ih</name></expr>;</init> <condition><expr><name>ip</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ip</name> = <name><name>ip</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name>locktoken</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>iprev</name></expr>)</condition><then>
<expr_stmt><expr><name><name>iprev</name>-&gt;<name>next</name></name> = <name><name>ip</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>ih</name> = <name><name>ih</name>-&gt;<name>next</name></name></expr>;</expr_stmt></else></if>
}</block></then></if>
<expr_stmt><expr><name>iprev</name> = <name>ip</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_save_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>, <argument><expr><name>ih</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_generic_do_refresh</name><parameter_list>(<param><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken_list</name> *</type><name>ltl</name></decl></param>,
<param><decl><type><name>time_t</name></type> <name>new_time</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init>;</init> <condition><expr><name>ltl</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ltl</name> = <name><name>ltl</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>dav_compare_locktoken</name><argument_list>(<argument><expr><name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>, <argument><expr><name><name>ltl</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name> = <name>new_time</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirty</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<return>return <expr><name>dirty</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_generic_refresh_locks</name><parameter_list>(<param><decl><type><name>dav_lockdb</name> *</type><name>lockdb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_locktoken_list</name> *</type><name>ltl</name></decl></param>,
<param><decl><type><name>time_t</name></type> <name>new_time</name></decl></param>,
<param><decl><type><name>dav_lock</name> **</type><name>locks</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>dp_scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock</name> *</type><name>newlock</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>locks</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>dav_generic_build_key</name><argument_list>(<argument><expr><name><name>lockdb</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_load_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>DAV_CREATE_LIST</name></expr></argument>,
<argument><expr>&amp;<name>dp</name></expr></argument>, <argument><expr>&amp;<name>ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>dp_scan</name> = <name>dp</name></expr>;</init> <condition><expr><name>dp_scan</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>dp_scan</name> = <name><name>dp_scan</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>dav_generic_do_refresh</name><argument_list>(<argument><expr><name>dp_scan</name></expr></argument>, <argument><expr><name>ltl</name></expr></argument>, <argument><expr><name>new_time</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newlock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>dp_scan</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>scope</name></name> = <name><name>dp_scan</name>-&gt;<name>f</name>.<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>type</name></name> = <name><name>dp_scan</name>-&gt;<name>f</name>.<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>depth</name></name> = <name><name>dp_scan</name>-&gt;<name>f</name>.<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>timeout</name></name> = <name><name>dp_scan</name>-&gt;<name>f</name>.<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>owner</name></name> = <name><name>dp_scan</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>auth_user</name></name> = <name><name>dp_scan</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>next</name></name> = *<name>locks</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>locks</name> = <name>newlock</name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirty</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>dirty</name>
&amp;&amp; (<name>err</name> = <call><name>dav_generic_save_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>dp</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<for>for (<init>;</init> <condition><expr><name>ip</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>ip</name> = <name><name>ip</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>dav_lock_discovery</name> *</type><name>ref_dp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock_indirect</name> *</type><name>ref_ip</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_resolve</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr>&amp;<name>dp_scan</name></expr></argument>,
<argument><expr>&amp;<name>ref_dp</name></expr></argument>, <argument><expr>&amp;<name>ref_ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>dav_generic_do_refresh</name><argument_list>(<argument><expr><name>dp_scan</name></expr></argument>, <argument><expr><name>ltl</name></expr></argument>, <argument><expr><name>new_time</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newlock</name> = <call><name>dav_generic_alloc_lock</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>dp</name>-&gt;<name>locktoken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>is_locknull</name></name> = !<name><name>resource</name>-&gt;<name>exists</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>scope</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>scope</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>type</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>depth</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>depth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>timeout</name></name> = <name><name>dp</name>-&gt;<name>f</name>.<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>owner</name></name> = <name><name>dp</name>-&gt;<name>owner</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>auth_user</name></name> = <name><name>dp_scan</name>-&gt;<name>auth_user</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newlock</name>-&gt;<name>next</name></name> = *<name>locks</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>locks</name> = <name>newlock</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_generic_save_lock_record</name><argument_list>(<argument><expr><name>lockdb</name></expr></argument>, <argument><expr><name><name>ip</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name>ref_dp</name></expr></argument>,
<argument><expr><name>ref_ip</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_hooks_locks</name></type> <name>dav_hooks_locks_generic</name> <init>= <expr><block>{
<expr><name>dav_generic_get_supportedlock</name></expr>,
<expr><name>dav_generic_parse_locktoken</name></expr>,
<expr><name>dav_generic_format_locktoken</name></expr>,
<expr><name>dav_generic_compare_locktoken</name></expr>,
<expr><name>dav_generic_open_lockdb</name></expr>,
<expr><name>dav_generic_close_lockdb</name></expr>,
<expr><name>dav_generic_remove_locknull_state</name></expr>,
<expr><name>dav_generic_create_lock</name></expr>,
<expr><name>dav_generic_get_locks</name></expr>,
<expr><name>dav_generic_find_lock</name></expr>,
<expr><name>dav_generic_has_locks</name></expr>,
<expr><name>dav_generic_append_locks</name></expr>,
<expr><name>dav_generic_remove_lock</name></expr>,
<expr><name>dav_generic_refresh_locks</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
