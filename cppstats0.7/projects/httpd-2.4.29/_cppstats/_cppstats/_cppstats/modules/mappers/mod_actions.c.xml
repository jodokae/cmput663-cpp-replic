<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/mappers/mod_actions.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>action_types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>scripted</name><index>[<expr><name>METHODS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>configured</name></decl>;</decl_stmt>
}</block></struct></type> <name>action_dir_config</name>;</typedef>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>actions_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_action_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>new</name> <init>=
<expr>(<name>action_dir_config</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action_types</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_action_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>action_dir_config</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>action_dir_config</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>action_dir_config</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>action_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>action_types</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>action_types</name></name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>action_types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>METHODS</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>scripted</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>add</name>-&gt;<name>scripted</name><index>[<expr><name>i</name></expr>]</index></name> ? <name><name>add</name>-&gt;<name>scripted</name><index>[<expr><name>i</name></expr>]</index></name>
: <name><name>base</name>-&gt;<name>scripted</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>new</name>-&gt;<name>configured</name></name> = (<name><name>base</name>-&gt;<name>configured</name></name> || <name><name>add</name>-&gt;<name>configured</name></name>)</expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_action</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m_v</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>script</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>option</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>m</name> <init>= <expr>(<name>action_dir_config</name> *)<name>m_v</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>option</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr>"virtual"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"unrecognized option '"</expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>action_types</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>option</name> ? "1" : "0"</expr></argument>, <argument><expr><name>script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name>-&gt;<name>configured</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_script</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>m_v</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>script</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>m</name> <init>= <expr>(<name>action_dir_config</name> *)<name>m_v</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>methnum</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>pool</name></name> == <name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_number_of</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>methnum</name> = <call><name>ap_method_register</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>methnum</name> == <name>M_TRACE</name></expr>)</condition><then> <block>{
<return>return <expr>"TRACE not allowed for Script"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>methnum</name> == <name>M_INVALID</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Could not register method '"</expr></argument>, <argument><expr><name>method</name></expr></argument>,
<argument><expr>"' for Script"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>m</name>-&gt;<name>scripted</name><index>[<expr><name>methnum</name></expr>]</index></name> = <name>script</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>m</name>-&gt;<name>configured</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>action_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"Action"</expr></argument>, <argument><expr><name>add_action</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a media type followed by a script name"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"Script"</expr></argument>, <argument><expr><name>set_script</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name> | <name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a method followed by a script name"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>action_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>action_dir_config</name> *</type><name>conf</name> <init>= <expr>(<name>action_dir_config</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>actions_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl>, *<decl><type ref="prev"/><name>action</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>script</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>configured</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>METHODS</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>scripted</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>i</name>)</expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then>
<expr_stmt><expr><name>script</name> = <name><name>conf</name>-&gt;<name>scripted</name><index>[<expr><name>M_GET</name></expr>]</index></name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>script</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>script</name> = <name><name>conf</name>-&gt;<name>scripted</name><index>[<expr><name><name>r</name>-&gt;<name>method_number</name></name></expr>]</index></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>script</name> &amp;&amp; <name><name>r</name>-&gt;<name>prev</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>prev</name>-&gt;<name>prev</name></name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><name>action</name> = <name><name>r</name>-&gt;<name>handler</name></name> ? <name><name>r</name>-&gt;<name>handler</name></name> :
<call><name>ap_field_noparam</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>action</name> &amp;&amp; (<name>t</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>action_types</name></name></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>virtual</name> <init>= <expr>(*<name>t</name>++ == '0' ? 0 : 1)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>virtual</name> &amp;&amp; <name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00652</expr></argument>)</argument_list></call>
"File does not exist: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>script</name> = <name>t</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HANDLER"</expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>virtual</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"virtual_script"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>script</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_internal_redirect_handler</name><argument_list>(<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>script</name></expr></argument>,
<argument><expr><call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>args</name></name> ? "?" : <name>NULL</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>action_handler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>actions</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_action_dir_config</name></expr>,
<expr><name>merge_action_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>action_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
