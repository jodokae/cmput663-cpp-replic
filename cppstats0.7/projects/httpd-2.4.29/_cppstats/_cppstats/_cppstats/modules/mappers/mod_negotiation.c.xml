<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/mappers/mod_negotiation.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_FILE_MAGIC_TYPE</name></cpp:macro> <cpp:value>"application/x-type-map"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>forcelangpriority</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>language_priority</name></decl>;</decl_stmt>
}</block></struct></type> <name>neg_dir_config</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLP_UNDEF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLP_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLP_PREFER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLP_FALLBACK</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLP_DEFAULT</name></cpp:macro> <cpp:value>FLP_PREFER</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCARD_ALL_ENCODINGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISCARD_ALL_BUT_HTML</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>negotiation_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_neg_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>neg_dir_config</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>neg_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>forcelangpriority</name></name> = <name>FLP_UNDEF</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>language_priority</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_neg_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>neg_dir_config</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>neg_dir_config</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>neg_dir_config</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>neg_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>forcelangpriority</name></name> = (<name><name>add</name>-&gt;<name>forcelangpriority</name></name> != <name>FLP_UNDEF</name>)
? <name><name>add</name>-&gt;<name>forcelangpriority</name></name>
: <name><name>base</name>-&gt;<name>forcelangpriority</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>language_priority</name></name> = <name><name>add</name>-&gt;<name>language_priority</name></name>
? <name><name>add</name>-&gt;<name>language_priority</name></name>
: <name><name>base</name>-&gt;<name>language_priority</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_language_priority</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n_</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lang</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>n</name> <init>= <expr><name>n_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>langp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>n</name>-&gt;<name>language_priority</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>n</name>-&gt;<name>language_priority</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>langp</name> = (const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>n</name>-&gt;<name>language_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>langp</name> = <name>lang</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_force_priority</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>n_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>w</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>n</name> <init>= <expr><name>n_</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>forcelangpriority</name></name> &amp; ~<name>FLP_NONE</name></expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine ForceLanguagePriority options with None"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>n</name>-&gt;<name>forcelangpriority</name></name> = <name>FLP_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Prefer"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>forcelangpriority</name></name> &amp; <name>FLP_NONE</name></expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine ForceLanguagePriority options None and "
"Prefer"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>n</name>-&gt;<name>forcelangpriority</name></name> |= <name>FLP_PREFER</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Fallback"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>n</name>-&gt;<name>forcelangpriority</name></name> &amp; <name>FLP_NONE</name></expr>)</condition><then> <block>{
<return>return <expr>"Cannot combine ForceLanguagePriority options None and "
"Fallback"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>n</name>-&gt;<name>forcelangpriority</name></name> |= <name>FLP_FALLBACK</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid ForceLanguagePriority option "</expr></argument>,
<argument><expr><name>w</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cache_negotiated_docs</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>negotiation_module</name></expr></argument>,
<argument><expr>(<name>arg</name> ? "Cache" : <name>NULL</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_cache_negotiated_docs</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>negotiation_module</name></expr></argument>)</argument_list></call> != <name>NULL</name>)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>negotiation_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CacheNegotiatedDocs"</expr></argument>, <argument><expr><name>cache_negotiated_docs</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Either 'on' or 'off' (default)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"LanguagePriority"</expr></argument>, <argument><expr><name>set_language_priority</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"space-delimited list of MIME language abbreviations"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"ForceLanguagePriority"</expr></argument>, <argument><expr><name>set_force_priority</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Force LanguagePriority elections, either None, or "
"Fallback and/or Prefer"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>accept_rec</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>charset</name></decl>;</decl_stmt>
}</block></struct></type> <name>accept_rec</name>;</typedef>
<typedef>typedef <type><struct>struct <name>var_rec</name> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>sub_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>content_languages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_charset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>description</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>lang_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>encoding_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>charset_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>mime_type_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>source_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>level</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lang_index</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_pseudo_html</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>level_matched</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mime_stars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>definite</name></decl>;</decl_stmt>
}</block></struct></type> <name>var_rec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>neg_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dir_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accept_q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>default_lang_quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>accepts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>accept_encodings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>accept_charsets</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>accept_langs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>avail_vars</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count_multiviews_variants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_transparent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dont_fiddle_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ua_supports_trans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_alternates</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>may_choose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_rvsa</name></decl>;</decl_stmt>
}</block></struct></type> <name>negotiation_state</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clean_var_rec</name><parameter_list>(<param><decl><type><name>var_rec</name> *</type><name>mime_info</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>sub_req</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>mime_type</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>file_name</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>body</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>content_encoding</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>content_languages</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>content_charset</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>description</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>is_pseudo_html</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>level</name></name> = 0.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>level_matched</name></name> = 0.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>bytes</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>lang_index</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>mime_stars</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>definite</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>charset_quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>encoding_quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>lang_quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>mime_type_quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>-&gt;<name>source_quality</name></name> = 0.0f</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_mime_fields</name><parameter_list>(<param><decl><type><name>var_rec</name> *</type><name>var</name></decl></param>, <param><decl><type><name>accept_rec</name> *</type><name>mime_info</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>var</name>-&gt;<name>mime_type</name></name> = <name><name>mime_info</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name>-&gt;<name>source_quality</name></name> = <name><name>mime_info</name>-&gt;<name>quality</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name>-&gt;<name>level</name></name> = <name><name>mime_info</name>-&gt;<name>level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name>-&gt;<name>content_charset</name></name> = <name><name>mime_info</name>-&gt;<name>charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>var</name>-&gt;<name>is_pseudo_html</name></name> = (!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE</name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE3</name></expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_vlist_validator</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>vlistr</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>vlistr</name></expr></argument>, <argument><expr><name><name>vlistr</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>vlist_validator</name></name> = <call><name>ap_make_etag</name><argument_list>(<argument><expr><name>vlistr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>float</name></type> <name>atoq</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>string</name> || !*<name>string</name></expr>)</condition><then> <block>{
<return>return <expr>1.0f</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>string</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>string</name> != '.' &amp;&amp; *<name>string</name>++ != '0'</expr>)</condition><then> <block>{
<return>return <expr>1.0f</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>string</name> == '.'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*++<name>string</name> &gt;= '0' &amp;&amp; *<name>string</name> &lt;= '9'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> += (*<name>string</name> - '0') * 100</expr>;</expr_stmt>
<if>if <condition>(<expr>*++<name>string</name> &gt;= '0' &amp;&amp; *<name>string</name> &lt;= '9'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> += (*<name>string</name> - '0') * 10</expr>;</expr_stmt>
<if>if <condition>(<expr>*++<name>string</name> &gt; '0' &amp;&amp; *<name>string</name> &lt;= '9'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>i</name> += (*<name>string</name> - '0')</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr>(<name>float</name>)<name>i</name> / 1000.0f</expr>;</return>
}</block></then></if>
<return>return <expr>0.0f</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_entry</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>accept_rec</name> *</type><name>result</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>accept_line</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>level</name></name> = 0.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>charset</name></name> = ""</expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>name</name></name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>accept_line</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>result</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>result</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call> &amp;&amp; (<name><name>result</name>-&gt;<name>level</name></name> == 0.0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>level</name></name> = 2.0f</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>result</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>level</name></name> = 2.0f</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>result</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE3</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>level</name></name> = 3.0f</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<while>while <condition>(<expr>*<name>accept_line</name> == ';'</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>parm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr>++<name>accept_line</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parm</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>accept_line</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>cp</name> = <name>parm</name></expr>;</init> <condition><expr>(*<name>cp</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>cp</name> != '=')</expr>;</condition> <incr><expr>++<name>cp</name></expr></incr>) <block>{
<expr_stmt><expr>*<name>cp</name> = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!*<name>cp</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr>*<name>cp</name>++ = '\0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call> || *<name>cp</name> == '='</expr>)</condition> <block>{
<expr_stmt><expr>++<name>cp</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>cp</name> == '"'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>cp</name></expr>;</expr_stmt>
<for>for (<init><expr><name>end</name> = <name>cp</name></expr>;</init>
<condition><expr>(*<name>end</name> &amp;&amp; *<name>end</name> != '\n' &amp;&amp; *<name>end</name> != '\r' &amp;&amp; *<name>end</name> != '\"')</expr>;</condition>
<incr><expr><name>end</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>end</name> = <name>cp</name></expr>;</init> <condition><expr>(*<name>end</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>end</name></expr></argument>)</argument_list></call>)</expr>;</condition> <incr><expr><name>end</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
}</block></else></if>
<if>if <condition>(<expr>*<name>end</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>end</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>parm</name><index>[<expr>0</expr>]</index></name> == 'q'
&amp;&amp; (<name><name>parm</name><index>[<expr>1</expr>]</index></name> == '\0' || (<name><name>parm</name><index>[<expr>1</expr>]</index></name> == 's' &amp;&amp; <name><name>parm</name><index>[<expr>2</expr>]</index></name> == '\0'))</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>quality</name></name> = <call><name>atoq</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>parm</name><index>[<expr>0</expr>]</index></name> == 'l' &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr>&amp;<name><name>parm</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>"evel"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>level</name></name> = (<name>float</name>)<call><name>atoi</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr>"charset"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>charset</name></name> = <name>cp</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
}</block></while>
<if>if <condition>(<expr>*<name>accept_line</name> == ','</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>accept_line</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>accept_line</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>do_header_line</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>accept_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>accept_recs</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>accept_line</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>accept_recs</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>40</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>accept_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>accept_line</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>new</name> <init>= <expr>(<name>accept_rec</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>accept_recs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>accept_line</name> = <call><name>get_entry</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>new</name></expr></argument>, <argument><expr><name>accept_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>accept_recs</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>do_languages_line</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>lang_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>lang_recs</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>lang_line</name></expr>)</condition><then> <block>{
<return>return <expr><name>lang_recs</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>**<name>lang_line</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>new</name> <init>= <expr>(<name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>lang_recs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>lang_line</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr>*<name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>**<name>lang_line</name> == ',' || **<name>lang_line</name> == ';'</expr>)</condition><then> <block>{
<expr_stmt><expr>++(*<name>lang_line</name>)</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<return>return <expr><name>lang_recs</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>negotiation_state</name> *</type><name>parse_accept_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>negotiation_state</name> *</type><name>new</name> <init>=
<expr>(<name>negotiation_state</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>negotiation_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>hdrs</name> <init>= <expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>conf</name></name> = (<name>neg_dir_config</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>negotiation_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>dir_name</name></name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>accepts</name></name> = <call><name>do_header_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>accepts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>elts</name> = (<name>accept_rec</name> *) <name><name>new</name>-&gt;<name>accepts</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>new</name>-&gt;<name>accepts</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>quality</name> &lt; 1.0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>accept_q</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>accept_encodings</name></name> =
<call><name>do_header_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>accept_langs</name></name> =
<call><name>do_header_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept-Language"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>accept_charsets</name></name> =
<call><name>do_header_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Accept-Charset"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>avail_vars</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>40</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>var_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_negotiate_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>negotiate</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Negotiate"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>ua_supports_trans</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>send_alternates</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>may_choose</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>use_rvsa</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>negotiate</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>negotiate</name></expr></argument>, <argument><expr>"trans"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ua</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"User-Agent"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ua</name> &amp;&amp; (<call><name>strncmp</name><argument_list>(<argument><expr><name>ua</name></expr></argument>, <argument><expr>"Lynx"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
<return>return;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>may_choose</name></name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>tok</name> = <call><name>ap_get_list_item</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>negotiate</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr>"trans"</expr></argument>)</argument_list></call> == 0 ||
<call><name>strcmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr>"vlist"</expr></argument>)</argument_list></call> == 0 ||
<call><name>strcmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr>"guess-small"</expr></argument>)</argument_list></call> == 0 ||
<call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>tok</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> ||
<call><name>strcmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>ua_supports_trans</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>send_alternates</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr>"1.0"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>may_choose</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>use_rvsa</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>tok</name><index>[<expr>0</expr>]</index></name> == '*'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>may_choose</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00680</expr></argument>)</argument_list></call>
"dont_fiddle_headers=%d use_rvsa=%d ua_supports_trans=%d "
"send_alternates=%d, may_choose=%d"</expr></argument>,
<argument><expr><name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>use_rvsa</name></name></expr></argument>,
<argument><expr><name><name>neg</name>-&gt;<name>ua_supports_trans</name></name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>send_alternates</name></name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>may_choose</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>maybe_add_default_accepts</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>,
<param><decl><type><name>int</name></type> <name>prefer_scripts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>new_accept</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>accepts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>accepts</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>accept_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_accept</name> = (<name>accept_rec</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>accepts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>name</name></name> = "*/*"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>level</name></name> = 0.0f</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>new_accept</name> = (<name>accept_rec</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>accepts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>name</name></name> = <name>CGI_MAGIC_TYPE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>use_rvsa</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>quality</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>quality</name></name> = <name>prefer_scripts</name> ? 2.0f : 0.001f</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new_accept</name>-&gt;<name>level</name></name> = 0.0f</expr>;</expr_stmt>
}</block></function>
<enum>enum <name>header_state</name> <block>{
<decl><name>header_eof</name></decl>, <decl><name>header_seen</name></decl>, <decl><name>header_sep</name></decl>
}</block>;</enum>
<enum><specifier>static</specifier> enum <name>header_state</name> <name>get_header_line</name><expr_stmt><expr>(<name>char</name> *<name>buffer</name>, <name>int</name> <name>len</name>, <name>apr_file_t</name> *<name>map</name>) <block>{
<expr><name>char</name> *<name>buf_end</name> = <name>buffer</name> + <name>len</name></expr>;
<expr><name>char</name> *<name>cp</name></expr>;
<expr><name>char</name> <name>c</name></expr>;
<do>do <block>{
<if>if <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>header_eof</name></expr>;</return>
<expr_stmt/></block></then></if></block></do>}</block></expr></expr_stmt></enum>
} while <expr_stmt><expr>(<name><name>buffer</name><index>[<expr>0</expr>]</index></name> == '#')</expr>;</expr_stmt>
<for>for (<init><expr><name>cp</name> = <name>buffer</name></expr>;</init> <condition><expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>cp</name></expr></incr>) <block>{
<continue>continue;</continue>
}</block></for>
<if>if <condition>(<expr>*<name>cp</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>header_sep</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cp</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"Body:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>header_seen</name></expr>;</return></then></if>
<while>while <condition>(<expr><call><name>apr_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call> != <name>APR_EOF</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>c</name> == '#'</expr>)</condition><then> <block>{
<while>while <condition>(<expr><call><name>apr_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call> != <name>APR_EOF</name> &amp;&amp; <name>c</name> != '\n'</expr>)</condition> <block>{
<continue>continue;</continue>
}</block></while>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name>c</name> != '\n' &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>apr_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_file_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == '\n'</expr>)</condition><then> <block>{
<return>return <expr><name>header_seen</name></expr>;</return>
}</block></then></if>
<while>while <condition>( <expr><name>cp</name> &lt; <name>buf_end</name> - 2
&amp;&amp; (<call><name>apr_file_getc</name><argument_list>(<argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call>) != <name>APR_EOF</name>
&amp;&amp; <name>c</name> != '\n'</expr>)</condition> <block>{
<expr_stmt><expr>*<name>cp</name>++ = <name>c</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>cp</name>++ = '\n'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>cp</name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_ungetc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>header_seen</name></expr>;</return>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name>header_seen</name></expr>;</return>
}
static <function><type><name>apr_off_t</name></type> <name>get_body</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>,
<param><decl><type><name>apr_file_t</name> *</type><name>map</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endbody</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bodylen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>pos</name></decl>;</decl_stmt>
<expr_stmt><expr>--*<name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>buffer</name><index>[<expr>*<name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>endbody</name> = <call><name>ap_strstr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>endbody</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bodylen</name> = <name>endbody</name> - <name>buffer</name></expr>;</expr_stmt>
<expr_stmt><expr><name>endbody</name> += <call><name>strlen</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>endbody</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>endbody</name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>endbody</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr>++<name>endbody</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>pos</name> = -<call>(<name>apr_off_t</name>)<argument_list>(<argument><expr>*<name>len</name> - (<name>endbody</name> - <name>buffer</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name>APR_CUR</name></expr></argument>, <argument><expr>&amp;<name>pos</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>len</name> = <name>bodylen</name></expr>;</expr_stmt>
<return>return <expr><name>pos</name> - (<name>endbody</name> - <name>buffer</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>strip_paren_comments</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>hdr</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr>*<name>hdr</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>hdr</name> == '"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>hdr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr>'"'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hdr</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr>++<name>hdr</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>hdr</name> == '('</expr>)</condition><then> <block>{
<while>while <condition>(<expr>*<name>hdr</name> &amp;&amp; *<name>hdr</name> != ')'</expr>)</condition> <block>{
<expr_stmt><expr>*<name>hdr</name>++ = ' '</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>hdr</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>hdr</name>++ = ' '</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>++<name>hdr</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>lcase_header_name_return_body</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>header</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name> <init>= <expr><name>header</name></expr></init></decl>;</decl_stmt>
<for>for ( <init>;</init> <condition><expr>*<name>cp</name> &amp;&amp; *<name>cp</name> != ':'</expr> ;</condition> <incr><expr>++<name>cp</name></expr></incr>) <block>{
<expr_stmt><expr>*<name>cp</name> = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!*<name>cp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00681</expr></argument>)</argument_list></call>
"Syntax error in type map, no ':' in %s for header %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<do>do <block>{
<expr_stmt><expr>++<name>cp</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>cp</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if>if <condition>(<expr>!*<name>cp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00682</expr></argument>)</argument_list></call>
"Syntax error in type map --- no header body: %s for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>cp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>read_type_map</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>map</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>rr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>neg</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>map_</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<enum>enum <name>header_state</name> <name>hstate</name>;</enum>
<decl_stmt><decl><type>struct <name>var_rec</name></type> <name>mime_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>has_content</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>map</name></expr>)</condition><then>
<expr_stmt><expr><name>map</name> = &amp;<name>map_</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>count_multiviews_variants</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BUFFERED</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00683</expr></argument>)</argument_list></call>
"cannot access type map file: %s"</expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTDIR</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> || <call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>clean_var_rec</name><argument_list>(<argument><expr>&amp;<name>mime_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_content</name> = 0</expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>hstate</name> = <call><name>get_header_line</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr>*<name>map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>hstate</name> == <name>header_seen</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>body1</name> <init>= <expr><call><name>lcase_header_name_return_body</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>body</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>body1</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>strip_paren_comments</name><argument_list>(<argument><expr><name>body1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>body</name> = <name>body1</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"uri:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mime_info</name>.<name>file_name</name></name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"content-type:"</expr></argument>, <argument><expr>13</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type>struct <name>accept_rec</name></type> <name>accept_info</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>get_entry</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accept_info</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mime_fields</name><argument_list>(<argument><expr>&amp;<name>mime_info</name></expr></argument>, <argument><expr>&amp;<name>accept_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_content</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"content-length:"</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>errp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>number</name></decl>;</decl_stmt>
<expr_stmt><expr><name>body1</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>number</name></expr></argument>, <argument><expr><name>body1</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
|| *<name>errp</name> || <name>number</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00684</expr></argument>)</argument_list></call>
"Parse error in type map, Content-Length: "
"'%s' in %s is invalid."</expr></argument>,
<argument><expr><name>body1</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>mime_info</name>.<name>bytes</name></name> = <name>number</name></expr>;</expr_stmt>
<expr_stmt><expr><name>has_content</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"content-language:"</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mime_info</name>.<name>content_languages</name></name> = <call><name>do_languages_line</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_content</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"content-encoding:"</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mime_info</name>.<name>content_encoding</name></name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>body</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_content</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"description:"</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>desc</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<for>for (<init><expr><name>cp</name> = <name>desc</name></expr>;</init> <condition><expr>*<name>cp</name></expr>;</condition> <incr><expr>++<name>cp</name></expr></incr>) <block>{
<if>if <condition>(<expr>*<name>cp</name>=='\n'</expr>)</condition><then> <expr_stmt><expr>*<name>cp</name>=' '</expr>;</expr_stmt></then></if>
}</block></for>
<if>if <condition>(<expr><name>cp</name>&gt;<name>desc</name></expr>)</condition><then> <expr_stmt><expr>*(<name>cp</name>-1)=0</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>mime_info</name>.<name>description</name></name> = <name>desc</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"body:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tag</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>eol</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr>'\0'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>MAX_STRING_LEN</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>--<name>eol</name> &gt;= <name>tag</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>eol</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>*<name>eol</name> = '\0'</expr>;</expr_stmt></while>
<if>if <condition>(<expr>(<name><name>mime_info</name>.<name>body</name></name> = <call><name>get_body</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>*<name>map</name></expr></argument>)</argument_list></call>) &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00685</expr></argument>)</argument_list></call>
"Syntax error in type map, no end tag '%s'"
"found in %s for Body: content."</expr></argument>,
<argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>mime_info</name>.<name>bytes</name></name> = <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>.<name>file_name</name></name> = <call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>rr</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name><name>mime_info</name>.<name>file_name</name></name> &amp;&amp; <name>has_content</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>new_var</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>avail_vars</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_var</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>mime_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>var_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>clean_var_rec</name><argument_list>(<argument><expr>&amp;<name>mime_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>has_content</name> = 0</expr>;</expr_stmt>
}</block></else></if>
}</block> while <condition>(<expr><name>hstate</name> != <name>header_eof</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>map_</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>map_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>set_vlist_validator</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>variantsortf</name><parameter_list>(<param><decl><type><name>var_rec</name> *</type><name>a</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>source_quality</name></name> &lt; <name><name>b</name>-&gt;<name>source_quality</name></name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>source_quality</name></name> &gt; <name><name>b</name>-&gt;<name>source_quality</name></name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>read_types_multi</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>neg</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>filp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prefix_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dirp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>var_rec</name></type> <name>mime_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>accept_rec</name></type> <name>accept_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>new_var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>anymatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>clean_var_rec</name><argument_list>(<argument><expr>&amp;<name>mime_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> || !<name><name>r</name>-&gt;<name>filename</name></name>
|| !<call><name>ap_os_is_path_absolute</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>filp</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>++<name>filp</name></expr>;</expr_stmt>
<expr_stmt><expr><name>prefix_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>filp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dirp</name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>dir_name</name></name></expr></argument>,
<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00686</expr></argument>)</argument_list></call>
"cannot read directory for multi: %s"</expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_DIRENT</name></expr></argument>, <argument><expr><name>dirp</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>exception_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>sub_req</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>filp</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>filp</name></expr></argument>, <argument><expr><name>prefix_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>dirent</name>.<name>name</name><index>[<expr><name>prefix_len</name></expr>]</index></name> != '.'</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>dirent</name>.<name>valid</name></name> &amp; <name>APR_FINFO_TYPE</name>) &amp;&amp; (<name><name>dirent</name>.<name>filetype</name></name> == <name>APR_DIR</name>)</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>anymatch</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>sub_req</name> = <call><name>ap_sub_req_lookup_dirent</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>AP_SUBREQ_MERGE_ARGS</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>handler</name></name> &amp;&amp; !<name><name>sub_req</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>, <argument><expr><name>CGI_MAGIC_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>exception_list</name> =
(<name>apr_array_header_t</name> *)<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>notes</name></name></expr></argument>,
<argument><expr>"ap-mime-exceptions-list"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>exception_list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<block>{
<decl_stmt><decl><type><name>int</name></type> <name>nexcept</name> <init>= <expr><name><name>exception_list</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>cur_except</name> <init>= <expr>(<name>char</name>**)<name><name>exception_list</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>segstart</name> <init>= <expr><name>filp</name></expr></init>, *<name>segend</name></decl>, <decl><type ref="prev"/><name>saveend</name></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>segstart</name> &amp;&amp; <name>nexcept</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!(<name>segend</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>segstart</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr><name>segend</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>segstart</name></expr></argument>, <argument><expr>'\0'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>saveend</name> = *<name>segend</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>segend</name> = '\0'</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CASE_BLIND_FILESYSTEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>segstart</name></expr></argument>, <argument><expr>*<name>cur_except</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>segstart</name></expr></argument>, <argument><expr>*<name>cur_except</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>--<name>nexcept</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>cur_except</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>saveend</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>*<name>segend</name> = <name>saveend</name></expr>;</expr_stmt>
<expr_stmt><expr><name>segstart</name> = <name>segend</name> + 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>nexcept</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name> || (!<name><name>sub_req</name>-&gt;<name>content_type</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>((<name><name>sub_req</name>-&gt;<name>content_type</name></name>) &amp;&amp;
!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr><name>MAP_FILE_MAGIC_TYPE</name></expr></argument>)</argument_list></call>) ||
((<name><name>sub_req</name>-&gt;<name>handler</name></name>) &amp;&amp;
!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"type-map"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>sub_req</name>-&gt;<name>status</name></name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>read_type_map</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr><name>sub_req</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>mime_info</name>.<name>sub_req</name></name> = <name>sub_req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mime_info</name>.<name>file_name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mime_info</name>.<name>content_encoding</name></name> = <name><name>sub_req</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>content_languages</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mime_info</name>.<name>content_languages</name></name> = <name><name>sub_req</name>-&gt;<name>content_languages</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>get_entry</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accept_info</name></expr></argument>, <argument><expr><name><name>sub_req</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_mime_fields</name><argument_list>(<argument><expr>&amp;<name>mime_info</name></expr></argument>, <argument><expr>&amp;<name>accept_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>new_var</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>avail_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_var</name></expr></argument>, <argument><expr>(<name>void</name> *) &amp;<name>mime_info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>var_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>count_multiviews_variants</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>clean_var_rec</name><argument_list>(<argument><expr>&amp;<name>mime_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>anymatch</name> &amp;&amp; !<name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00687</expr></argument>)</argument_list></call>
"Negotiation: discovered file(s) matching request: %s"
" (None could be negotiated)."</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>set_vlist_validator</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>var_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>(<call><call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>void</name> *</expr></argument>, <argument><expr>const <name>void</name> *</expr></argument>)</argument_list></call>) <name>variantsortf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mime_match</name><parameter_list>(<param><decl><type><name>accept_rec</name> *</type><name>accept_r</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>avail</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>accept_type</name> <init>= <expr><name><name>accept_r</name>-&gt;<name>name</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>avail_type</name> <init>= <expr><name><name>avail</name>-&gt;<name>mime_type</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>accept_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>len</name> == 1 &amp;&amp; <name><name>accept_type</name><index>[<expr>0</expr>]</index></name> == '*')
|| (<name>len</name> == 3 &amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name>accept_type</name></expr></argument>, <argument><expr>"*/*"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>avail</name>-&gt;<name>mime_stars</name></name> &lt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avail</name>-&gt;<name>mime_stars</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>len</name> &gt; 2 &amp;&amp; <name><name>accept_type</name><index>[<expr><name>len</name> - 2</expr>]</index></name> == '/'
&amp;&amp; <name><name>accept_type</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '*'
&amp;&amp; !<call><name>strncmp</name><argument_list>(<argument><expr><name>accept_type</name></expr></argument>, <argument><expr><name>avail_type</name></expr></argument>, <argument><expr><name>len</name> - 2</expr></argument>)</argument_list></call>
&amp;&amp; <name><name>avail_type</name><index>[<expr><name>len</name> - 2</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>avail</name>-&gt;<name>mime_stars</name></name> &lt; 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avail</name>-&gt;<name>mime_stars</name></name> = 2</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>accept_type</name></expr></argument>, <argument><expr><name>avail_type</name></expr></argument>)</argument_list></call>
|| (!<call><name>strcmp</name><argument_list>(<argument><expr><name>accept_type</name></expr></argument>, <argument><expr>"text/html"</expr></argument>)</argument_list></call>
&amp;&amp; (!<call><name>strcmp</name><argument_list>(<argument><expr><name>avail_type</name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE</name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name>avail_type</name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE3</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>accept_r</name>-&gt;<name>level</name></name> &gt;= <name><name>avail</name>-&gt;<name>level</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>avail</name>-&gt;<name>level_matched</name></name> = <name><name>avail</name>-&gt;<name>level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>avail</name>-&gt;<name>mime_stars</name></name> = 3</expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></then></if></else></if></else></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>level_cmp</name><parameter_list>(<param><decl><type><name>var_rec</name> *</type><name>var1</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>var2</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>var1</name>-&gt;<name>is_pseudo_html</name></name> &amp;&amp; !<name><name>var2</name>-&gt;<name>is_pseudo_html</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>var1</name>-&gt;<name>is_pseudo_html</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>var1</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr><name><name>var2</name>-&gt;<name>mime_type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>var1</name>-&gt;<name>level_matched</name></name> &gt; <name><name>var2</name>-&gt;<name>level_matched</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>var1</name>-&gt;<name>level_matched</name></name> &lt; <name><name>var2</name>-&gt;<name>level_matched</name></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>var1</name>-&gt;<name>level</name></name> &lt; <name><name>var2</name>-&gt;<name>level</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>var1</name>-&gt;<name>level</name></name> &gt; <name><name>var2</name>-&gt;<name>level</name></name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_lang_index</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>accept_langs</name></decl></param>, <param><decl><type><name>char</name> *</type><name>lang</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>alang</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>lang</name> || !<name>accept_langs</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>alang</name> = (const <name>char</name> **) <name><name>accept_langs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>accept_langs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr>*<name>alang</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr>*<name>alang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>i</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>alang</name> += (<name><name>accept_langs</name>-&gt;<name>elt_size</name></name> / <sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof>)</expr>;</expr_stmt>
}</block></for>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_default_lang_quality</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>avail_recs</name> <init>= <expr>(<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;<name><name>avail_recs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>content_languages</name></name> &amp;&amp;
<name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>default_lang_quality</name></name> = 0.0001f</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>default_lang_quality</name></name> = 1.0f</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_language_quality</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>forcepriority</name> <init>= <expr><name><name>neg</name>-&gt;<name>conf</name>-&gt;<name>forcelangpriority</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>forcepriority</name> == <name>FLP_UNDEF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>forcepriority</name> = <name>FLP_DEFAULT</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>variant</name>-&gt;<name>content_languages</name></name> || !<name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>lang_quality</name></name> = <name><name>neg</name>-&gt;<name>default_lang_quality</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>accept_langs</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<return>return;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>accept_langs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>accs</name> <init>= <expr>(<name>accept_rec</name> *) <name><name>neg</name>-&gt;<name>accept_langs</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>best</name> <init>= <expr><name>NULL</name></expr></init>, *<name>star</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>bestthistag</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lang</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>fiddle_q</name> <init>= <expr>0.0f</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>any_match_on_star</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>alen</name></decl>, <decl><type ref="prev"/><name>longest_lang_range_len</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<expr_stmt><expr><name>p</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bestthistag</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>longest_lang_range_len</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>lang</name> = (<call>(<name>char</name> **) <argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>elts</name></name></expr></argument>)</argument_list></call>)<index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>neg</name>-&gt;<name>accept_langs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>star</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>star</name> = &amp;<name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>alen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>strlen</name><argument_list>(<argument><expr><name>lang</name></expr></argument>)</argument_list></call> &gt;= <name>alen</name>) &amp;&amp;
!<call><name>strncmp</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>alen</name></expr></argument>)</argument_list></call> &amp;&amp;
((<name><name>lang</name><index>[<expr><name>alen</name></expr>]</index></name> == 0) || (<name><name>lang</name><index>[<expr><name>alen</name></expr>]</index></name> == '-'))</expr> )</condition><then> <block>{
<if>if <condition>(<expr><name>alen</name> &gt; <name>longest_lang_range_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>longest_lang_range_len</name> = <name>alen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bestthistag</name> = &amp;<name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name>bestthistag</name> &amp;&amp; !<name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>plen</name> <init>= <expr><name>p</name> - <name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>lang</name></expr></argument>, <argument><expr><name><name>accs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fiddle_q</name> = 0.001f</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>best</name> ||
(<name>bestthistag</name> &amp;&amp; <name><name>bestthistag</name>-&gt;<name>quality</name></name> &gt; <name><name>best</name>-&gt;<name>quality</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>best</name> = <name>bestthistag</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>bestthistag</name> &amp;&amp; <name>star</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>any_match_on_star</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>( <expr><name>any_match_on_star</name> &amp;&amp;
((<name>best</name> &amp;&amp; <name><name>star</name>-&gt;<name>quality</name></name> &gt; <name><name>best</name>-&gt;<name>quality</name></name>) ||
(!<name>best</name>))</expr> )</condition><then> <block>{
<expr_stmt><expr><name>best</name> = <name>star</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>lang_quality</name></name> = <name>best</name> ? <name><name>best</name>-&gt;<name>quality</name></name> : <name>fiddle_q</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
<if>if <condition>(<expr>((<name>forcepriority</name> &amp; <name>FLP_PREFER</name>)
&amp;&amp; (<name><name>variant</name>-&gt;<name>lang_index</name></name> &lt; 0))
|| ((<name>forcepriority</name> &amp; <name>FLP_FALLBACK</name>)
&amp;&amp; !<name><name>variant</name>-&gt;<name>lang_quality</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>bestidx</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>lang</name> <init>= <expr>(<call>(<name>char</name> **) <argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>elts</name></name></expr></argument>)</argument_list></call>)<index>[<expr><name>j</name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>idx</name> = <call><name>find_lang_index</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>conf</name>-&gt;<name>language_priority</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>idx</name> &gt;= 0) &amp;&amp; ((<name>bestidx</name> == -1) || (<name>idx</name> &lt; <name>bestidx</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bestidx</name> = <name>idx</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>bestidx</name> &gt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>lang_quality</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>forcepriority</name> &amp; <name>FLP_PREFER</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>lang_index</name></name> = <name>bestidx</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>forcepriority</name> &amp; <name>FLP_FALLBACK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>lang_index</name></name> = <name>bestidx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>lang_quality</name></name> = .0001f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_off_t</name></type> <name>find_content_length</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>statb</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>bytes</name></name> &lt; 0</expr>)</condition><then> <block>{
<if>if <condition>( <expr><name><name>variant</name>-&gt;<name>sub_req</name></name>
&amp;&amp; (<name><name>variant</name>-&gt;<name>sub_req</name>-&gt;<name>finfo</name>.<name>valid</name></name> &amp; <name>APR_FINFO_SIZE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>bytes</name></name> = <name><name>variant</name>-&gt;<name>sub_req</name>-&gt;<name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>fullname</name> <init>= <expr><call><name>ap_make_full_path</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>dir_name</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>statb</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>,
<argument><expr><name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>bytes</name></name> = <name><name>statb</name>.<name>size</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
<return>return <expr><name><name>variant</name>-&gt;<name>bytes</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_accept_quality</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>accept_recs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>q</name> <init>= <expr>0.0f</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>q_definite</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>accepts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>mime_type</name></name> &amp;&amp; *<name><name>variant</name>-&gt;<name>mime_type</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 0</expr>;</expr_stmt></then></if>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>accept_recs</name> = (<name>accept_rec</name> *) <name><name>neg</name>-&gt;<name>accepts</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>neg</name>-&gt;<name>accepts</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>type</name> <init>= <expr>&amp;<name><name>accept_recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>prev_mime_stars</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prev_mime_stars</name> = <name><name>variant</name>-&gt;<name>mime_stars</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>mime_match</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>prev_mime_stars</name> == <name><name>variant</name>-&gt;<name>mime_stars</name></name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name> &amp;&amp; !<name><name>neg</name>-&gt;<name>accept_q</name></name> &amp;&amp;
<name><name>variant</name>-&gt;<name>mime_stars</name></name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>q</name> = 0.01f</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name> &amp;&amp; !<name><name>neg</name>-&gt;<name>accept_q</name></name> &amp;&amp;
<name><name>variant</name>-&gt;<name>mime_stars</name></name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><name>q</name> = 0.02f</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>q</name> = <name><name>type</name>-&gt;<name>quality</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name>q_definite</name> = (<name><name>variant</name>-&gt;<name>mime_stars</name></name> == 3)</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>mime_type_quality</name></name> = <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = <name><name>variant</name>-&gt;<name>definite</name></name> &amp;&amp; <name>q_definite</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_charset_quality</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>accept_recs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>charset</name> <init>= <expr><name><name>variant</name>-&gt;<name>content_charset</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>star</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>accept_charsets</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>charset</name> &amp;&amp; *<name>charset</name></expr>)</condition><then>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 0</expr>;</expr_stmt></then></if>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>accept_recs</name> = (<name>accept_rec</name> *) <name><name>neg</name>-&gt;<name>accept_charsets</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>charset</name> == <name>NULL</name> || !*<name>charset</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr>"text/"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE</name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr><name>INCLUDES_MAGIC_TYPE3</name></expr></argument>)</argument_list></call>
)</expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>dont_fiddle_headers</name></name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>charset</name> = "iso-8859-1"</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>neg</name>-&gt;<name>accept_charsets</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>type</name> <init>= <expr>&amp;<name><name>accept_recs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>type</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>charset_quality</name></name> = <name><name>type</name>-&gt;<name>quality</name></name></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>type</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>star</name> = <name>type</name></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>star</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>charset_quality</name></name> = <name><name>star</name>-&gt;<name>quality</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 0</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr>"iso-8859-1"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>charset_quality</name></name> = 1.0f</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>charset_quality</name></name> = 0.0f</expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_identity_encoding</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>enc</name></decl></param>)</parameter_list> <block>{
<return>return <expr>(!<name>enc</name> || !<name><name>enc</name><index>[<expr>0</expr>]</index></name> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr>"7bit"</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr>"8bit"</expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name>enc</name></expr></argument>, <argument><expr>"binary"</expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_encoding_quality</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>accept_recs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>enc</name> <init>= <expr><name><name>variant</name>-&gt;<name>content_encoding</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>star</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>value_if_not_found</name> <init>= <expr>0.0f</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>accept_encodings</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>enc</name> || <call><name>is_identity_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> = 1.0f</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> = 0.5f</expr>;</expr_stmt></else></if>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>enc</name> || <call><name>is_identity_encoding</name><argument_list>(<argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>enc</name> = "identity"</expr>;</expr_stmt>
<expr_stmt><expr><name>value_if_not_found</name> = 0.0001f</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>accept_recs</name> = (<name>accept_rec</name> *) <name><name>neg</name>-&gt;<name>accept_encodings</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>enc</name><index>[<expr>0</expr>]</index></name> == 'x' &amp;&amp; <name><name>enc</name><index>[<expr>1</expr>]</index></name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>enc</name> += 2</expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>neg</name>-&gt;<name>accept_encodings</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name><name>accept_recs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == 'x' &amp;&amp; <name><name>name</name><index>[<expr>1</expr>]</index></name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> += 2</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> = <name><name>accept_recs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>quality</name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>star</name> = &amp;<name><name>accept_recs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>star</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> = <name><name>star</name>-&gt;<name>quality</name></name></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> = <name>value_if_not_found</name></expr>;</expr_stmt>
}</block></function>
<enum>enum <name>algorithm_results</name> <block>{
<decl><name>alg_choice</name> <init>= <expr>1</expr></init></decl>,
<decl><name>alg_list</name></decl>
}</block>;</enum>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_variant_better_rvsa</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>,
<param><decl><type><name>var_rec</name> *</type><name>best</name></decl></param>, <param><decl><type><name>float</name> *</type><name>p_bestq</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>bestq</name> <init>= <expr>*<name>p_bestq</name></expr></init>, <name>q</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> == 0.0f</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>q</name> = <name><name>variant</name>-&gt;<name>mime_type_quality</name></name> *
<name><name>variant</name>-&gt;<name>source_quality</name></name> *
<name><name>variant</name>-&gt;<name>charset_quality</name></name> *
<name><name>variant</name>-&gt;<name>lang_quality</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00688</expr></argument>)</argument_list></call>
"Variant: file=%s type=%s lang=%s sourceq=%1.3f "
"mimeq=%1.3f langq=%1.3f charq=%1.3f encq=%1.3f "
"q=%1.5f definite=%d"</expr></argument>,
<argument><expr>(<name><name>variant</name>-&gt;<name>file_name</name></name> ? <name><name>variant</name>-&gt;<name>file_name</name></name> : "")</expr></argument>,
<argument><expr>(<name><name>variant</name>-&gt;<name>mime_type</name></name> ? <name><name>variant</name>-&gt;<name>mime_type</name></name> : "")</expr></argument>,
<argument><expr>(<name><name>variant</name>-&gt;<name>content_languages</name></name>
? <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>variant</name>-&gt;<name>content_languages</name></name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call>
: "")</expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>source_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>mime_type_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>lang_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>charset_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name></expr></argument>,
<argument><expr><name>q</name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>definite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>q</name> &lt;= 0.0f</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>q</name> &gt; <name>bestq</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>q</name> == <name>bestq</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> &gt; <name><name>best</name>-&gt;<name>encoding_quality</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_variant_better</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>,
<param><decl><type><name>var_rec</name> *</type><name>best</name></decl></param>, <param><decl><type><name>float</name> *</type><name>p_bestq</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>bestq</name> <init>= <expr>*<name>p_bestq</name></expr></init>, <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>levcmp</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NEG_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00689</expr></argument>)</argument_list></call>
"Variant: file=%s type=%s lang=%s sourceq=%1.3f "
"mimeq=%1.3f langq=%1.3f langidx=%d charq=%1.3f encq=%1.3f "</expr></argument>,
<argument><expr>(<name><name>variant</name>-&gt;<name>file_name</name></name> ? <name><name>variant</name>-&gt;<name>file_name</name></name> : "")</expr></argument>,
<argument><expr>(<name><name>variant</name>-&gt;<name>mime_type</name></name> ? <name><name>variant</name>-&gt;<name>mime_type</name></name> : "")</expr></argument>,
<argument><expr>(<name><name>variant</name>-&gt;<name>content_languages</name></name>
? <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>variant</name>-&gt;<name>content_languages</name></name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call>
: "")</expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>source_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>mime_type_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>lang_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>lang_index</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>charset_quality</name></name></expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> == 0.0f ||
<name><name>variant</name>-&gt;<name>lang_quality</name></name> == 0.0f ||
<name><name>variant</name>-&gt;<name>source_quality</name></name> == 0.0f ||
<name><name>variant</name>-&gt;<name>charset_quality</name></name> == 0.0f ||
<name><name>variant</name>-&gt;<name>mime_type_quality</name></name> == 0.0f</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>q</name> = <name><name>variant</name>-&gt;<name>mime_type_quality</name></name> * <name><name>variant</name>-&gt;<name>source_quality</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>q</name> == 0.0 || <name>q</name> &lt; <name>bestq</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>q</name> &gt; <name>bestq</name> || !<name>best</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>lang_quality</name></name> &lt; <name><name>best</name>-&gt;<name>lang_quality</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>lang_quality</name></name> &gt; <name><name>best</name>-&gt;<name>lang_quality</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>best</name>-&gt;<name>lang_index</name></name> != -1 &amp;&amp;
(<name><name>variant</name>-&gt;<name>lang_index</name></name> == -1 || <name><name>variant</name>-&gt;<name>lang_index</name></name> &gt; <name><name>best</name>-&gt;<name>lang_index</name></name>)</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>lang_index</name></name> != -1 &amp;&amp;
(<name><name>best</name>-&gt;<name>lang_index</name></name> == -1 || <name><name>variant</name>-&gt;<name>lang_index</name></name> &lt; <name><name>best</name>-&gt;<name>lang_index</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>levcmp</name> = <call><name>level_cmp</name><argument_list>(<argument><expr><name>variant</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>levcmp</name> == -1</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>levcmp</name> == 1</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>charset_quality</name></name> &lt; <name><name>best</name>-&gt;<name>charset_quality</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>charset_quality</name></name> &gt; <name><name>best</name>-&gt;<name>charset_quality</name></name> ||
((<name><name>variant</name>-&gt;<name>content_charset</name></name> != <name>NULL</name> &amp;&amp;
*<name><name>variant</name>-&gt;<name>content_charset</name></name> != '\0' &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>content_charset</name></name></expr></argument>, <argument><expr>"iso-8859-1"</expr></argument>)</argument_list></call> != 0) &amp;&amp;
(<name><name>best</name>-&gt;<name>content_charset</name></name> == <name>NULL</name> ||
*<name><name>best</name>-&gt;<name>content_charset</name></name> == '\0' ||
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>best</name>-&gt;<name>content_charset</name></name></expr></argument>, <argument><expr>"iso-8859-1"</expr></argument>)</argument_list></call> == 0))</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> &lt; <name><name>best</name>-&gt;<name>encoding_quality</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>encoding_quality</name></name> &gt; <name><name>best</name>-&gt;<name>encoding_quality</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>find_content_length</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call> &gt;= <call><name>find_content_length</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>p_bestq</name> = <name>q</name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>variant_has_language</name><parameter_list>(<param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lang</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr>!<name>lang</name>
|| !<name><name>variant</name>-&gt;<name>content_languages</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_array_str_contains</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>content_languages</name></name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>discard_variant_by_env</name><parameter_list>(<param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>, <param><decl><type><name>int</name></type> <name>discard</name></decl></param>)</parameter_list> <block>{
<if>if <condition>( <expr><call><name>is_identity_encoding</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>content_encoding</name></name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>content_encoding</name></name></expr></argument>, <argument><expr>"identity"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>( (<name>discard</name> == <name>DISCARD_ALL_ENCODINGS</name>)
|| (<name>discard</name> == <name>DISCARD_ALL_BUT_HTML</name>
&amp;&amp; (!<name><name>variant</name>-&gt;<name>mime_type</name></name>
|| <call><name>strncmp</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>mime_type</name></name></expr></argument>, <argument><expr>"text/html"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call>)))</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>best_match</name><parameter_list>(<param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>, <param><decl><type><name>var_rec</name> **</type><name>pbest</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_rec</name> *</type><name>best</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>bestq</name> <init>= <expr>0.0f</expr></init></decl>;</decl_stmt>
<enum>enum <name>algorithm_results</name> <name>algorithm_result</name>;</enum>
<decl_stmt><decl><type><name>int</name></type> <name>may_discard</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_rec</name> *</type><name>avail_recs</name> <init>= <expr>(<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>preferred_language</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"prefer-language"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"no-gzip"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>may_discard</name> = <name>DISCARD_ALL_ENCODINGS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>env_value</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>neg</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"gzip-only-text/html"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>env_value</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>env_value</name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>may_discard</name> = <name>DISCARD_ALL_BUT_HTML</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>set_default_lang_quality</name><argument_list>(<argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>best</name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;<name><name>avail_recs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr><name>may_discard</name>
&amp;&amp; <call><name>discard_variant_by_env</name><argument_list>(<argument><expr><name>variant</name></expr></argument>, <argument><expr><name>may_discard</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>( <expr><name>preferred_language</name>
&amp;&amp; !<call><name>variant_has_language</name><argument_list>(<argument><expr><name>variant</name></expr></argument>, <argument><expr><name>preferred_language</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>set_accept_quality</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>preferred_language</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>variant</name>-&gt;<name>lang_quality</name></name> = 1.0f</expr>;</expr_stmt>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>definite</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>set_language_quality</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>set_encoding_quality</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_charset_quality</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>may_choose</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>use_rvsa</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>is_variant_better_rvsa</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>, <argument><expr><name>best</name></expr></argument>, <argument><expr>&amp;<name>bestq</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>best</name> = <name>variant</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>is_variant_better</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>, <argument><expr><name>best</name></expr></argument>, <argument><expr>&amp;<name>bestq</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>best</name> = <name>variant</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>use_rvsa</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>algorithm_result</name> = (<name>best</name> &amp;&amp; <name><name>best</name>-&gt;<name>definite</name></name>) &amp;&amp; (<name>bestq</name> &gt; 0) ?
<name>alg_choice</name> : <name>alg_list</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>algorithm_result</name> = <name>bestq</name> &gt; 0 ? <name>alg_choice</name> : <name>alg_list</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>preferred_language</name> &amp;&amp; (!<name>best</name> || <name>algorithm_result</name> != <name>alg_choice</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>preferred_language</name> = <name>NULL</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<break>break;</break>
}</block> while <condition>(<expr>1</expr>)</condition>;</do>
<expr_stmt><expr>*<name>pbest</name> = <name>best</name></expr>;</expr_stmt>
<return>return <expr><name>algorithm_result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>set_neg_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>,
<param><decl><type><name>int</name></type> <name>alg_result</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>hdrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_rec</name> *</type><name>avail_recs</name> <init>= <expr>(<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sample_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sample_language</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sample_encoding</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sample_charset</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>lang</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>qstr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_vlist_array</name> <init>= <expr>(<name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name> * 21)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>first_variant</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vary_by_type</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vary_by_language</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vary_by_charset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vary_by_encoding</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>send_alternates</name></name> &amp;&amp; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>)</condition><then>
<expr_stmt><expr><name>arr</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>max_vlist_array</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>arr</name> = <name>NULL</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>hdrs</name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;<name><name>avail_recs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>content_languages</name></name> &amp;&amp; <name><name>variant</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>lang</name> = <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>variant</name>-&gt;<name>content_languages</name></name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>lang</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>first_variant</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>sample_type</name> = <name><name>variant</name>-&gt;<name>mime_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_charset</name> = <name><name>variant</name>-&gt;<name>content_charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_language</name> = <name>lang</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sample_encoding</name> = <name><name>variant</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<name>vary_by_type</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>sample_type</name> ? <name>sample_type</name> : ""</expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>mime_type</name></name> ? <name><name>variant</name>-&gt;<name>mime_type</name></name> : ""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vary_by_type</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>vary_by_charset</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>sample_charset</name> ? <name>sample_charset</name> : ""</expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>content_charset</name></name> ?
<name><name>variant</name>-&gt;<name>content_charset</name></name> : ""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vary_by_charset</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>vary_by_language</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>sample_language</name> ? <name>sample_language</name> : ""</expr></argument>,
<argument><expr><name>lang</name> ? <name>lang</name> : ""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vary_by_language</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>vary_by_encoding</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>sample_encoding</name> ? <name>sample_encoding</name> : ""</expr></argument>,
<argument><expr><name><name>variant</name>-&gt;<name>content_encoding</name></name> ?
<name><name>variant</name>-&gt;<name>content_encoding</name></name> : ""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>vary_by_encoding</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>first_variant</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>neg</name>-&gt;<name>send_alternates</name></name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "{\""</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>ap_escape_path_segment</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>variant</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "\" "</expr>;</expr_stmt>
<expr_stmt><expr><name>qstr</name> = (<name>char</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>"%1.3f"</expr></argument>, <argument><expr><name><name>variant</name>-&gt;<name>source_quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>qstr</name><index>[<expr>4</expr>]</index></name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>qstr</name><index>[<expr>4</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>qstr</name><index>[<expr>3</expr>]</index></name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>qstr</name><index>[<expr>3</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>qstr</name><index>[<expr>2</expr>]</index></name> == '0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>qstr</name><index>[<expr>1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name>qstr</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>mime_type</name></name> &amp;&amp; *<name><name>variant</name>-&gt;<name>mime_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = " {type "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name><name>variant</name>-&gt;<name>mime_type</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "}"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>content_charset</name></name> &amp;&amp; *<name><name>variant</name>-&gt;<name>content_charset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = " {charset "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name><name>variant</name>-&gt;<name>content_charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "}"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>lang</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = " {language "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name>lang</name></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "}"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>content_encoding</name></name> &amp;&amp; *<name><name>variant</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = " {encoding "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name><name>variant</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "}"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>variant</name>-&gt;<name>sub_req</name></name> &amp;&amp; <name><name>variant</name>-&gt;<name>sub_req</name>-&gt;<name>handler</name></name>)
&amp;&amp; (<name>len</name> = <call><name>find_content_length</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>variant</name></expr></argument>)</argument_list></call>) &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = " {length "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "}"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "}"</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = ", "</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>send_alternates</name></name> &amp;&amp; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>arr</name>-&gt;<name>nelts</name></name>--</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Alternates"</expr></argument>,
<argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr>'\0'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> || <name>vary_by_type</name> || <name>vary_by_language</name> ||
<name>vary_by_charset</name> || <name>vary_by_encoding</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"Vary"</expr></argument>, <argument><expr>2 + <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> ? ", negotiate" : ""</expr></argument>,
<argument><expr><name>vary_by_type</name> ? ", accept" : ""</expr></argument>,
<argument><expr><name>vary_by_language</name> ? ", accept-language" : ""</expr></argument>,
<argument><expr><name>vary_by_charset</name> ? ", accept-charset" : ""</expr></argument>,
<argument><expr><name>vary_by_encoding</name> ? ", accept-encoding" : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>is_transparent</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>hdrs</name></expr></argument>, <argument><expr>"TCN"</expr></argument>,
<argument><expr><name>alg_result</name> == <name>alg_list</name> ? "list" : "choice"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>make_variant_list</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_vlist_array</name> <init>= <expr>(<name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name> * 15) + 2</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>arr</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>max_vlist_array</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "Available variants:\n&lt;ul&gt;\n"</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;((<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name> <init>= <expr><name><name>variant</name>-&gt;<name>file_name</name></name> ? <name><name>variant</name>-&gt;<name>file_name</name></name> : ""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>languages</name> <init>= <expr><name><name>variant</name>-&gt;<name>content_languages</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>description</name> <init>= <expr><name><name>variant</name>-&gt;<name>description</name></name>
? <name><name>variant</name>-&gt;<name>description</name></name>
: ""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "&lt;li&gt;&lt;a href=\""</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>ap_escape_path_segment</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "\"&gt;"</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "&lt;/a&gt; "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name>description</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>mime_type</name></name> &amp;&amp; *<name><name>variant</name>-&gt;<name>mime_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = ", type "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name><name>variant</name>-&gt;<name>mime_type</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>languages</name> &amp;&amp; <name><name>languages</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = ", language "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>languages</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>content_charset</name></name> &amp;&amp; *<name><name>variant</name>-&gt;<name>content_charset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = ", charset "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name><name>variant</name>-&gt;<name>content_charset</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = ", encoding "</expr>;</expr_stmt>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name><name>variant</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "&lt;/li&gt;\n"</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = "&lt;/ul&gt;\n"</expr>;</expr_stmt>
<return>return <expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr>'\0'</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>store_variant_list</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"variant-list"</expr></argument>, <argument><expr><call><name>make_variant_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name/></name>main-&gt;<name>notes</name></expr></argument>, <argument><expr>"variant-list"</expr></argument>,
<argument><expr><call><name>make_variant_list</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name/></name>main</expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setup_choice_response</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>,
<param><decl><type><name>var_rec</name> *</type><name>variant</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>sub_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sub_vary</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>variant</name>-&gt;<name>sub_req</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sub_req</name> = <call><name>ap_sub_req_lookup_file</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name><name>sub_req</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>HTTP_OK</name> &amp;&amp;
!<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"TCN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>variant</name>-&gt;<name>sub_req</name></name> = <name>sub_req</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sub_req</name> = <name><name>variant</name>-&gt;<name>sub_req</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> &amp;&amp;
<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"TCN"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_VARIANT_ALSO_VARIES</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>handler</name></name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"type-map"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_VARIANT_ALSO_VARIES</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>sub_vary</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Variant-Vary"</expr></argument>, <argument><expr><name>sub_vary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>, <argument><expr><name>sub_vary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>sub_req</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Location"</expr></argument>,
<argument><expr><call><name>ap_escape_path_segment</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>variant</name>-&gt;<name>file_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_neg_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr><name>alg_choice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_negotiation</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl></param>,
<param><decl><type><name>var_rec</name> **</type><name>bestp</name></decl></param>, <param><decl><type><name>int</name></type> <name>prefer_scripts</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>avail_recs</name> <init>= <expr>(<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alg_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_GET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> = 0</expr>;</expr_stmt></then></if>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;<name><name>avail_recs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> = 0</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>body</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>is_transparent</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>parse_negotiate_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>may_choose</name></name> = 1</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>maybe_add_default_accepts</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>prefer_scripts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>alg_result</name> = <call><name>best_match</name><argument_list>(<argument><expr><name>neg</name></expr></argument>, <argument><expr><name>bestp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>alg_result</name> == <name>alg_list</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>neg</name>-&gt;<name>send_alternates</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>set_neg_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr><name>alg_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>store_variant_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>is_transparent</name></name> &amp;&amp; <name><name>neg</name>-&gt;<name>ua_supports_trans</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_MULTIPLE_CHOICES</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!*<name>bestp</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00690</expr></argument>)</argument_list></call>
"no acceptable variant: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_NOT_ACCEPTABLE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>is_transparent</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>setup_choice_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr>*<name>bestp</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>set_neg_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr><name>alg_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(!<call><name>do_cache_negotiated_docs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>r</name>-&gt;<name>proto_num</name></name> &lt; <call><name>HTTP_VERSION</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call>))
&amp;&amp; <name><name>neg</name>-&gt;<name>count_multiviews_variants</name></name> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>no_cache</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_map_file</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>map</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_rec</name> *</type><name>best</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>udir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_req</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name>MAP_FILE_MAGIC_TYPE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"type-map"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>neg</name> = <call><name>parse_accept_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>res</name> = <call><name>read_type_map</name><argument_list>(<argument><expr>&amp;<name>map</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>do_negotiation</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr>&amp;<name>best</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>best</name>-&gt;<name>body</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_allow_standard_methods</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REPLACE_ALLOW</name></expr></argument>, <argument><expr><name>M_GET</name></expr></argument>, <argument><expr><name>M_OPTIONS</name></expr></argument>,
<argument><expr><name>M_POST</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name> &amp;&amp; <name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_set_accept_ranges</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>best</name>-&gt;<name>mime_type</name></name> &amp;&amp; *<name><name>best</name>-&gt;<name>mime_type</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>best</name>-&gt;<name>content_charset</name></name> &amp;&amp; *<name><name>best</name>-&gt;<name>content_charset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>best</name>-&gt;<name>mime_type</name></name></expr></argument>,
<argument><expr>"; charset="</expr></argument>,
<argument><expr><name><name>best</name>-&gt;<name>content_charset</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>mime_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>best</name>-&gt;<name>content_languages</name></name> &amp;&amp; <name><name>best</name>-&gt;<name>content_languages</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_languages</name></name> = <call><name>apr_array_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>best</name>-&gt;<name>content_languages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>best</name>-&gt;<name>content_encoding</name></name> &amp;&amp; *<name><name>best</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>best</name>-&gt;<name>content_encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>res</name> = <call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>res</name> = <call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>body</name></name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade_fchk</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>uri</name><index>[<expr><call><name>ap_find_path_info</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>udir</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>udir</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_req</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>file_name</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_req</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>file_name</name></name></expr></argument>,
<argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new_req</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>udir</name></expr></argument>, <argument><expr><name><name>best</name>-&gt;<name>file_name</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_internal_redirect</name><argument_list>(<argument><expr><name>new_req</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_multi</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>negotiation_state</name> *</type><name>neg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>var_rec</name> *</type><name>best</name></decl>, *<decl><type ref="prev"/><name>avail_recs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>sub_req</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name>
|| !(<call><name>ap_allow_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> &amp; <name>OPT_MULTI</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>neg</name> = <call><name>parse_accept_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>res</name> = <call><name>read_types_multi</name><argument_list>(<argument><expr><name>neg</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<label><name>return_from_multi</name>:</label>
<expr_stmt><expr><name>avail_recs</name> = (<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;<name><name>avail_recs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>variant</name>-&gt;<name>sub_req</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>sub_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>res</name> = <call><name>do_negotiation</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>neg</name></expr></argument>, <argument><expr>&amp;<name>best</name></expr></argument>,
<argument><expr>(<name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name>) || <name><name>r</name>-&gt;<name>args</name></name> ||
(<name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> != 0</expr>)</condition><then>
<goto>goto <name>return_from_multi</name>;</goto></then></if>
<if>if <condition>(<expr>!(<name>sub_req</name> = <name><name>best</name>-&gt;<name>sub_req</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>sub_req</name> = <call><name>ap_sub_req_lookup_file</name><argument_list>(<argument><expr><name><name>best</name>-&gt;<name>file_name</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>res</name> = <name><name>sub_req</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>return_from_multi</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>sub_req</name>-&gt;<name>args</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sub_req</name>-&gt;<name>args</name></name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_internal_fast_redirect</name><argument_list>(<argument><expr><name>sub_req</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>mtime</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avail_recs</name> = (<name>var_rec</name> *) <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>neg</name>-&gt;<name>avail_vars</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>var_rec</name> *</type><name>variant</name> <init>= <expr>&amp;<name><name>avail_recs</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>variant</name> != <name>best</name> &amp;&amp; <name><name>variant</name>-&gt;<name>sub_req</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name><name>variant</name>-&gt;<name>sub_req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fix_encoding</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>enc</name> <init>= <expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>x_enc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>accept_encodings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>accept_rec</name> *</type><name>accept_recs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>enc</name> || !*<name>enc</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>enc</name><index>[<expr>0</expr>]</index></name> == 'x' &amp;&amp; <name><name>enc</name><index>[<expr>1</expr>]</index></name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>enc</name> += 2</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>accept_encodings</name> = <call><name>do_header_line</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>accept_recs</name> = (<name>accept_rec</name> *) <name><name>accept_encodings</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>accept_encodings</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name><name>accept_recs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>name</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == 'x' &amp;&amp; <name><name>name</name><index>[<expr>1</expr>]</index></name> == '-' &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name>name</name>+2</expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>x_enc</name> = <name>name</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>x_enc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name>x_enc</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>fix_encoding</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>handle_multi</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>handle_map_file</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>negotiation</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_neg_dir_config</name></expr>,
<expr><name>merge_neg_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>negotiation_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt></block></while></block></function>
</unit>
