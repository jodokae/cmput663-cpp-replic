<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/ssl/ssl_engine_io.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl_openssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<expr_stmt><expr><call><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>SSL</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>proxy_post_handshake</name></expr></argument>,
<argument><expr>(<name>conn_rec</name> *<name>c</name>,<name>SSL</name> *<name>ssl</name>)</expr></argument>,
<argument><expr>(<name>c</name>,<name>ssl</name>)</expr></argument>,<argument><expr><name>OK</name></expr></argument>,<argument><expr><name>DECLINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SSL</name> *</type><name>pssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> *</type><name>pbioRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> *</type><name>pbioWrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>pInputFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>pOutputFilter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>config</name></decl>;</decl_stmt>
}</block></struct></type> <name>ssl_filter_ctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
}</block></struct></type> <name>bio_filter_out_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>bio_filter_out_ctx_t</name> *</type><name>bio_filter_out_ctx_new</name><parameter_list>(<param><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>outctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>filter_ctx</name></name> = <name>filter_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>outctx</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_out_pass</name><parameter_list>(<param><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pOutputFilter</name>-&gt;<name>next</name></name></expr></argument>,
<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>outctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>outctx</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_ECONNRESET</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name><name>outctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name>) ? 1 : -1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_out_flush</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name> <init>= <expr>(<name>bio_filter_out_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>bio_filter_out_pass</name><argument_list>(<argument><expr><name>outctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_create</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>BIO_set_shutdown</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_init</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<expr_stmt><expr><name><name>bio</name>-&gt;<name>num</name></name> = -1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>BIO_set_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_destroy</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>bio</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_out_read</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>char</name> *</type><name>out</name></decl></param>, <param><decl><type><name>int</name></type> <name>outl</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_out_write</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>inl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name> <init>= <expr>(<name>bio_filter_out_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>need_flush</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>outctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>config</name>-&gt;<name>reneg_state</name></name> == <name>RENEG_ABORT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_ECONNABORTED</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>BIO_clear_retry_flags</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>inl</name></expr></argument>, <argument><expr><name><name>outctx</name>-&gt;<name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x0009080df</expr></cpp:if>
<expr_stmt><expr><name>need_flush</name> = !<call><name>SSL_is_init_finished</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>need_flush</name> = <call><name>SSL_in_connect_init</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>need_flush</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>bio_filter_out_pass</name><argument_list>(<argument><expr><name>outctx</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<return>return <expr><name>inl</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type> <name>bio_filter_out_ctrl</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>int</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>long</name></type> <name>num</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>ret</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name> <init>= <expr>(<name>bio_filter_out_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>cmd</name></expr>)</condition> <block>{
<case>case <expr><name>BIO_CTRL_RESET</name></expr>:
</case><case>case <expr><name>BIO_CTRL_EOF</name></expr>:
</case><case>case <expr><name>BIO_C_SET_BUF_MEM_EOF_RETURN</name></expr>:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>outctx</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"output bio: unhandled control %d"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BIO_CTRL_WPENDING</name></expr>:
</case><case>case <expr><name>BIO_CTRL_PENDING</name></expr>:
</case><case>case <expr><name>BIO_CTRL_INFO</name></expr>:
<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BIO_CTRL_GET_CLOSE</name></expr>:
<expr_stmt><expr><name>ret</name> = (<name>long</name>)<call><name>BIO_get_shutdown</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BIO_CTRL_SET_CLOSE</name></expr>:
<expr_stmt><expr><call><name>BIO_set_shutdown</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>(<name>int</name>)<name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BIO_CTRL_FLUSH</name></expr>:
<expr_stmt><expr><name>ret</name> = <call><name>bio_filter_out_flush</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BIO_CTRL_DUP</name></expr>:
<expr_stmt><expr><name>ret</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>BIO_C_SET_BUF_MEM</name></expr>:
</case><case>case <expr><name>BIO_C_GET_BUF_MEM_PTR</name></expr>:
</case><case>case <expr><name>BIO_CTRL_PUSH</name></expr>:
</case><case>case <expr><name>BIO_CTRL_POP</name></expr>:
</case><default>default:
<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_out_gets</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_out_puts</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>char_buffer_t</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char_buffer_t</name></type> <name>cbuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>AP_IOBUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>bio_filter_in_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>char_buffer_read</name><parameter_list>(<param><decl><type><name>char_buffer_t</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>inl</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>buffer</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>buffer</name>-&gt;<name>length</name></name> &gt; <name>inl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>buffer</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name>inl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name>-&gt;<name>value</name></name> += <name>inl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name>-&gt;<name>length</name></name> -= <name>inl</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>buffer</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>buffer</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>inl</name> = <name><name>buffer</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name>-&gt;<name>value</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name>-&gt;<name>length</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>inl</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>char_buffer_write</name><parameter_list>(<param><decl><type><name>char_buffer_t</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>inl</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>buffer</name>-&gt;<name>value</name></name> = <name>in</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name>-&gt;<name>length</name></name> = <name>inl</name></expr>;</expr_stmt>
<return>return <expr><name>inl</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>brigade_consume</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>actual</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>str_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>consume</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EOF</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>str_len</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>str_len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>block</name> = <name>APR_NONBLOCK_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>consume</name> = (<name>str_len</name> + <name>actual</name> &gt; *<name>len</name>) ? *<name>len</name> - <name>actual</name> : <name>str_len</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>consume</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> += <name>consume</name></expr>;</expr_stmt>
<expr_stmt><expr><name>actual</name> += <name>consume</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>consume</name> &gt;= <name><name>b</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>b</name>-&gt;<name>start</name></name> += <name>consume</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>length</name></name> -= <name>consume</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>b</name>-&gt;<name>length</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>actual</name> &gt;= *<name>len</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
<expr_stmt><expr>*<name>len</name> = <name>actual</name></expr>;</expr_stmt>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_in_read</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>inlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>inl</name> <init>= <expr><name>inlen</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name> <init>= <expr>(<name>bio_filter_in_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_read_type_e</name></type> <name>block</name> <init>= <expr><name><name>inctx</name>-&gt;<name>block</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>in</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>config</name>-&gt;<name>reneg_state</name></name> == <name>RENEG_ABORT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_ECONNABORTED</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>BIO_clear_retry_flags</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>inctx</name>-&gt;<name>bb</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_EOF</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>block</name></expr></argument>,
<argument><expr><name>inl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call> || <call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call>
|| (<name><name>inctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_set_retry_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>block</name> == <name>APR_BLOCK_READ</name>
&amp;&amp; <call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>rc</name></name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>bb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <call><name>brigade_consume</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr>&amp;<name>inl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>int</name>)<name>inl</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_set_retry_read</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>int</name>)<name>inl</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>bb</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name>inl</name></expr>)</condition><then> <block>{
<return>return <expr>(<name>int</name>)<name>inl</name></expr>;</return>
}</block></then></if>
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_in_write</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>in</name></decl></param>, <param><decl><type><name>int</name></type> <name>inl</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_in_puts</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bio_filter_in_gets</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>long</name></type> <name>bio_filter_in_ctrl</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>int</name></type> <name>cmd</name></decl></param>, <param><decl><type><name>long</name></type> <name>num</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list> <block>{
<return>return <expr>-1</expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>BIO_METHOD</name></type> <name>bio_filter_out_method</name> <init>= <expr><block>{
<expr><name>BIO_TYPE_MEM</name></expr>,
<expr>"APR output filter"</expr>,
<expr><name>bio_filter_out_write</name></expr>,
<expr><name>bio_filter_out_read</name></expr>,
<expr><name>bio_filter_out_puts</name></expr>,
<expr><name>bio_filter_out_gets</name></expr>,
<expr><name>bio_filter_out_ctrl</name></expr>,
<expr><name>bio_filter_create</name></expr>,
<expr><name>bio_filter_destroy</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BIO_METHOD</name></type> <name>bio_filter_in_method</name> <init>= <expr><block>{
<expr><name>BIO_TYPE_MEM</name></expr>,
<expr>"APR input filter"</expr>,
<expr><name>bio_filter_in_write</name></expr>,
<expr><name>bio_filter_in_read</name></expr>,
<expr><name>bio_filter_in_puts</name></expr>,
<expr><name>bio_filter_in_gets</name></expr>,
<expr><name>bio_filter_in_ctrl</name></expr>,
<expr><name>bio_filter_create</name></expr>,
<expr><name>bio_filter_destroy</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <name>BIO_METHOD</name> *</type><name>bio_filter_out_method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>BIO_METHOD</name> *</type><name>bio_filter_in_method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init_bio_methods</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>bio_filter_out_method</name> = <call><name>BIO_meth_new</name><argument_list>(<argument><expr><name>BIO_TYPE_MEM</name></expr></argument>, <argument><expr>"APR output filter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_write</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_out_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_read</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_out_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_puts</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_out_puts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_gets</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_out_gets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_ctrl</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_out_ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_create</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_destroy</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bio_filter_in_method</name> = <call><name>BIO_meth_new</name><argument_list>(<argument><expr><name>BIO_TYPE_MEM</name></expr></argument>, <argument><expr>"APR input filter"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_write</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_in_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_read</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_in_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_puts</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_in_puts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_gets</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_in_gets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_ctrl</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_in_ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_create</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_create</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_set_destroy</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>, <argument><expr>&amp;<name>bio_filter_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>free_bio_methods</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>BIO_meth_free</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_meth_free</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_input_read</name><parameter_list>(<param><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wanted</name> <init>= <expr>*<name>len</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>bytes</name> = <call><name>char_buffer_read</name><argument_list>(<argument><expr>&amp;<name><name>inctx</name>-&gt;<name>cbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>wanted</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> = <name>bytes</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>mode</name></name> == <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>length</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>value</name></name> -= <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>length</name></name> += <name>bytes</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>char_buffer_write</name><argument_list>(<argument><expr>&amp;<name><name>inctx</name>-&gt;<name>cbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>(<name>int</name>)<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>len</name> &gt;= <name>wanted</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>mode</name></name> == <name>AP_MODE_GETLINE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>block</name></name> = <name>APR_NONBLOCK_READ</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr>!<name><name>inctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>SSL_read</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>, <argument><expr><name>buf</name> + <name>bytes</name></expr></argument>, <argument><expr><name>wanted</name> - <name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>len</name> += <name>rc</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>mode</name></name> == <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>char_buffer_write</name><argument_list>(<argument><expr>&amp;<name><name>inctx</name>-&gt;<name>cbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>block</name></name> == <name>APR_NONBLOCK_READ</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_EOF</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ssl_err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr>(<name>conn_rec</name>*)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_WANT_READ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>block</name></name> == <name>APR_NONBLOCK_READ</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_SYSCALL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call>
|| <call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>block</name></name> == <name>APR_NONBLOCK_READ</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01991</expr></argument>)</argument_list></call>
"SSL input filter read failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01992</expr></argument>)</argument_list></call>
"SSL library error %d reading data"</expr></argument>, <argument><expr><name>ssl_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></else></if></else></if>
}</block></while>
<return>return <expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_input_getline</name><parameter_list>(<param><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>tmplen</name> <init>= <expr>*<name>len</name></expr></init>, <name>buflen</name> <init>= <expr>*<name>len</name></expr></init>, <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>tmplen</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>ssl_io_input_read</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>buf</name> + <name>offset</name></expr></argument>, <argument><expr>&amp;<name>tmplen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> &amp;&amp; (*<name>len</name> &gt; 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>char_buffer_write</name><argument_list>(<argument><expr>&amp;<name><name>inctx</name>-&gt;<name>cbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>len</name> += <name>tmplen</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>pos</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>offset</name> += <name>tmplen</name></expr>;</expr_stmt>
<expr_stmt><expr><name>tmplen</name> = <name>buflen</name> - <name>offset</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>pos</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr><name>pos</name> - <name>buf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>bytes</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>buf</name> + <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>length</name> = *<name>len</name> - <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>char_buffer_write</name><argument_list>(<argument><expr>&amp;<name><name>inctx</name>-&gt;<name>cbuf</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = <name>bytes</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_filter_write</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outctx</name> = (<name>bio_filter_out_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = <call><name>SSL_write</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *)<name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ssl_err</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr>(<name>conn_rec</name>*)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_WANT_WRITE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_WANT_READ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>c</name>-&gt;<name>cs</name>-&gt;<name>sense</name></name> = <name>CONN_SENSE_WANT_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_SYSCALL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name><name>outctx</name>-&gt;<name>rc</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01993</expr></argument>)</argument_list></call>
"SSL output filter write failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name><name>outctx</name>-&gt;<name>rc</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01994</expr></argument>)</argument_list></call>
"SSL library error %d writing data"</expr></argument>, <argument><expr><name>ssl_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>outctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name>apr_size_t</name>)<name>res</name> != <name>len</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>f</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>reason</name> <init>= <expr>"reason unknown"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SSL_total_renegotiations</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reason</name> = "likely due to failed renegotiation"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name><name>outctx</name>-&gt;<name>rc</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01995</expr></argument>)</argument_list></call>
"failed to write %" <name>APR_SSIZE_T_FMT</name>
" of %" <name>APR_SIZE_T_FMT</name> " bytes (%s)"</expr></argument>,
<argument><expr><name>len</name> - (<name>apr_size_t</name>)<name>res</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name><name>outctx</name>-&gt;<name>rc</name></name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_ON_HTTPS_PORT</name></cpp:macro> <cpp:value>"GET / HTTP/1.0" CRLF</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_ON_HTTPS_PORT_BUCKET</name><parameter_list>(<param><type><name>alloc</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_bucket_immortal_create(HTTP_ON_HTTPS_PORT, sizeof(HTTP_ON_HTTPS_PORT) - 1, alloc)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_ERROR_HTTP_ON_HTTPS</name></cpp:macro> <cpp:value>(APR_OS_START_USERERR + 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_ERROR_BAD_GATEWAY</name></cpp:macro> <cpp:value>(APR_OS_START_USERERR + 1)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_io_filter_disable</name><parameter_list>(<param><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name></decl></param>,
<param><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>ssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>ssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>ssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>filter_ctx</name>-&gt;<name>pssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_error</name><parameter_list>(<param><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>,
<param><decl><type><name>int</name></type> <name>is_init</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name> <init>= <expr><name><name>inctx</name>-&gt;<name>f</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>send_eos</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>MODSSL_ERROR_HTTP_ON_HTTPS</name></expr>:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01996</expr></argument>)</argument_list></call>
"SSL handshake failed: HTTP spoken on HTTPS port; "
"trying to send HTML error page"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name><name>sslconn</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_io_filter_disable</name><argument_list>(<argument><expr><name>sslconn</name></expr></argument>, <argument><expr><name>inctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_init</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>non_ssl_request</name></name> = <name>NON_SSL_SEND_REQLINE</name></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>non_ssl_request</name></name> = <name>NON_SSL_SEND_HDR_SEP</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bucket</name> = <call><name>HTTP_ON_HTTPS_PORT_BUCKET</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>send_eos</name> = 0</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MODSSL_ERROR_BAD_GATEWAY</name></expr>:
<expr_stmt><expr><name>bucket</name> = <call><name>ap_bucket_error_create</name><argument_list>(<argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01997</expr></argument>)</argument_list></call>
"SSL handshake failed: sending 502"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<return>return <expr><name>status</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>send_eos</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bucket</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ssl_io_filter</name><index>[]</index></name> <init>= <expr>"SSL/TLS Filter"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ssl_io_buffer</name><index>[]</index></name> <init>= <expr>"SSL/TLS Buffer"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ssl_io_coalesce</name><index>[]</index></name> <init>= <expr>"SSL/TLS Coalescing Filter"</expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_filter_io_shutdown</name><parameter_list>(<param><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>abortive</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name> <init>= <expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>shutdown_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><name>APLOG_DEBUG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>logno</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ssl</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name>abortive</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>shutdown_type</name> = <name>SSL_SENT_SHUTDOWN</name>|<name>SSL_RECEIVED_SHUTDOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> = "abortive"</expr>;</expr_stmt>
<expr_stmt><expr><name>logno</name> = <call><name>APLOGNO</name><argument_list>(<argument><expr>01998</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>loglevel</name> = <name>APLOG_INFO</name></expr>;</expr_stmt>
}</block></then> <else>else <switch>switch <condition>(<expr><name><name>sslconn</name>-&gt;<name>shutdown_type</name></name></expr>)</condition> <block>{
<case>case <expr><name>SSL_SHUTDOWN_TYPE_UNCLEAN</name></expr>:
<expr_stmt><expr><name>shutdown_type</name> = <name>SSL_SENT_SHUTDOWN</name>|<name>SSL_RECEIVED_SHUTDOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> = "unclean"</expr>;</expr_stmt>
<expr_stmt><expr><name>logno</name> = <call><name>APLOGNO</name><argument_list>(<argument><expr>01999</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SSL_SHUTDOWN_TYPE_ACCURATE</name></expr>:
<expr_stmt><expr><name>shutdown_type</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> = "accurate"</expr>;</expr_stmt>
<expr_stmt><expr><name>logno</name> = <call><name>APLOGNO</name><argument_list>(<argument><expr>02000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>shutdown_type</name> = <name>SSL_RECEIVED_SHUTDOWN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>type</name> = "standard"</expr>;</expr_stmt>
<expr_stmt><expr><name>logno</name> = <call><name>APLOGNO</name><argument_list>(<argument><expr>02001</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch></else></if>
<expr_stmt><expr><call><name>SSL_set_shutdown</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>shutdown_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_smart_shutdown</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APLOG_CS_IS_LEVEL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cserror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>"%sConnection closed to child %ld with %s shutdown "
"(server %s)"</expr></argument>,
<argument><expr><name>logno</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sslconn</name>-&gt;<name>client_cert</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>sslconn</name>-&gt;<name>client_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>client_cert</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>ssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>abortive</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr>(<name>conn_rec</name> *)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>ssl</name></name> = <name><name>filter_ctx</name>-&gt;<name>pssl</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_handshake</name><parameter_list>(<param><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr>(<name>conn_rec</name> *)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ssl_err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>verify_result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SSL_is_init_finished</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>server</name> = <name><name>sslconn</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sslconn</name>-&gt;<name>is_proxy</name></name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>apr_ipsubnet_t</name> *</type><name>ip</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alpn_note</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname_note</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>,
<argument><expr>"proxy-request-hostname"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>proxy_ssl_check_peer_ok</name> <init>= <expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>post_handshake_rc</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>alpn_note</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-request-alpn-protos"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>alpn_note</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>protos</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>, *<decl><type ref="prev"/><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <name>protos</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>alpn_note</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>alpn_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>p</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>", "</expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><name>len</name> = <name>last</name> - <name>p</name> - (*<name>last</name>? 1 : 0)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 255</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03309</expr></argument>)</argument_list></call>
"ALPN proxy protocol identifier too long: %s"</expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>s</name>++ = (<name>unsigned</name> <name>char</name>)<name>len</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>len</name>--</expr>)</condition> <block>{
<expr_stmt><expr>*<name>s</name>++ = *<name>p</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>p</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"setting alpn protos from '%s', protolen=%d"</expr></argument>,
<argument><expr><name>alpn_note</name></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>s</name> - <name>protos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>protos</name> != <name>s</name> &amp;&amp; <call><name>SSL_set_alpn_protos</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>,
<argument><expr>(<name>unsigned</name> <name>char</name> *)<name>protos</name></expr></argument>,
<argument><expr><name>s</name> - <name>protos</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03310</expr></argument>)</argument_list></call>
"error setting alpn protos from '%s'"</expr></argument>, <argument><expr><name>alpn_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>hostname_note</name> &amp;&amp;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>protocol</name></name> != <name>SSL_PROTOCOL_SSLV3</name> &amp;&amp;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<call><name>apr_ipsubnet_create</name><argument_list>(<argument><expr>&amp;<name>ip</name></expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"SNI extension for SSL Proxy request set to '%s'"</expr></argument>,
<argument><expr><name>hostname_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02002</expr></argument>)</argument_list></call>
"Failed to set SNI extension for SSL Proxy "
"request to '%s'"</expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>n</name> = <call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call>) &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02003</expr></argument>)</argument_list></call>
"SSL Proxy connect failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_filter_io_shutdown</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"SSL_connect_rv"</expr></argument>, <argument><expr>"err"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>MODSSL_ERROR_BAD_GATEWAY</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cert</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_expire</name></name> != <name>SSL_ENABLED_FALSE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>cert</name>
|| (<call><name>X509_cmp_current_time</name><argument_list>(
<argument><expr><call><name>X509_get_notBefore</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &gt;= 0)
|| (<call><name>X509_cmp_current_time</name><argument_list>(
<argument><expr><call><name>X509_get_notAfter</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> &lt;= 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>proxy_ssl_check_peer_ok</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02004</expr></argument>)</argument_list></call>
"SSL Proxy: Peer certificate is expired"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_name</name></name> != <name>SSL_ENABLED_FALSE</name>) &amp;&amp;
((<name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_cn</name></name> != <name>SSL_ENABLED_FALSE</name>) ||
(<name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_name</name></name> == <name>SSL_ENABLED_TRUE</name>)) &amp;&amp;
<name>hostname_note</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-request-hostname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cert</name>
|| <call><name>modssl_X509_match_name</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proxy_ssl_check_peer_ok</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02411</expr></argument>)</argument_list></call>
"SSL Proxy: Peer certificate does not match "
"for hostname %s"</expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>proxy_ssl_check_peer_cn</name></name> == <name>SSL_ENABLED_TRUE</name>) &amp;&amp;
<name>hostname_note</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>hostname</name> = <call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>server</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SSL_CLIENT_S_DN_CN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-request-hostname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> = <call><name>strcasecmp</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>)</argument_list></call> == 0</expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>match</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>hostname</name></expr></argument>, <argument><expr>"*."</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name> <init>= <expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>hostname_note</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>match</name> = <name>p</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hostname</name> + 1</expr></argument>)</argument_list></call> == 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>match</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proxy_ssl_check_peer_ok</name> = <name>FALSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02005</expr></argument>)</argument_list></call>
"SSL Proxy: Peer certificate CN mismatch:"
" Certificate CN: %s Requested hostname: %s"</expr></argument>,
<argument><expr><name>hostname</name></expr></argument>, <argument><expr><name>hostname_note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>proxy_ssl_check_peer_ok</name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>post_handshake_rc</name> = <call><name>ssl_run_proxy_post_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>cert</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>proxy_ssl_check_peer_ok</name> != <name>TRUE</name>
|| (<name>post_handshake_rc</name> != <name>OK</name> &amp;&amp; <name>post_handshake_rc</name> != <name>DECLINED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_filter_io_shutdown</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"SSL_connect_rv"</expr></argument>, <argument><expr>"err"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_GATEWAY</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"SSL_connect_rv"</expr></argument>, <argument><expr>"ok"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>n</name> = <call><name>SSL_accept</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call>) &lt;= 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name> <init>= <expr>(<name>bio_filter_in_ctx_t</name> *)
<call><name>BIO_get_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioRead</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name> <init>= <expr>(<name>bio_filter_out_ctx_t</name> *)
<call><name>BIO_get_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><name><name>inctx</name>-&gt;<name>rc</name></name> ? <name><name>inctx</name>-&gt;<name>rc</name></name> : <name><name>outctx</name>-&gt;<name>rc</name></name></expr></init></decl> ;</decl_stmt>
<expr_stmt><expr><name>ssl_err</name> = <call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_ZERO_RETURN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02006</expr></argument>)</argument_list></call>
"SSL handshake stopped: connection was closed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_WANT_READ</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>outctx</name>-&gt;<name>rc</name></name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ERR_GET_LIB</name><argument_list>(<argument><expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == <name>ERR_LIB_SSL</name> &amp;&amp;
<call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><call><name>ERR_peek_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> == <name>SSL_R_HTTP_REQUEST</name></expr>)</condition><then> <block>{
<return>return <expr><name>MODSSL_ERROR_HTTP_ON_HTTPS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>ssl_err</name> == <name>SSL_ERROR_SYSCALL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02007</expr></argument>)</argument_list></call>
"SSL handshake interrupted by system "
"[Hint: Stop button pressed in browser?!]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02008</expr></argument>)</argument_list></call>
"SSL library error %d in handshake "
"(server %s)"</expr></argument>, <argument><expr><name>ssl_err</name></expr></argument>,
<argument><expr><call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>rc</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ssl_filter_io_shutdown</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>inctx</name>-&gt;<name>rc</name></name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>sslconn</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>verify_result</name> = <call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>verify_result</name> != <name>X509_V_OK</name>) ||
<name><name>sslconn</name>-&gt;<name>verify_error</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ssl_verify_error_is_optional</name><argument_list>(<argument><expr><name>verify_result</name></expr></argument>)</argument_list></call> &amp;&amp;
(<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_OPTIONAL_NO_CA</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02009</expr></argument>)</argument_list></call>
"SSL client authentication failed, "
"accepting certificate based on "
"\"SSLVerifyClient optional_no_ca\" "
"configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name> <init>= <expr><name><name>sslconn</name>-&gt;<name>verify_error</name></name> ?
<name><name>sslconn</name>-&gt;<name>verify_error</name></name> :
<call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>verify_result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02010</expr></argument>)</argument_list></call>
"SSL client authentication failed: %s"</expr></argument>,
<argument><expr><name>error</name> ? <name>error</name> : "unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_filter_io_shutdown</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>cert</name> = <call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>sslconn</name>-&gt;<name>client_cert</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name><name>sslconn</name>-&gt;<name>client_cert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>client_cert</name></name> = <name>cert</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>client_dn</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_REQUIRE</name>) &amp;&amp;
!<name><name>sslconn</name>-&gt;<name>client_cert</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02011</expr></argument>)</argument_list></call>
"No acceptable peer certificate available"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_filter_io_shutdown</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_input</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name> <init>= <expr><name><name>inctx</name>-&gt;<name>buffer</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>buffer</name></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_init</name> <init>= <expr>(<name>mode</name> == <name>AP_MODE_INIT</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bucket</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>inctx</name>-&gt;<name>ssl</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>sslconn</name>-&gt;<name>non_ssl_request</name></name> == <name>NON_SSL_SEND_REQLINE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bucket</name> = <call><name>HTTP_ON_HTTPS_PORT_BUCKET</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>non_ssl_request</name></name> = <name>NON_SSL_SEND_HDR_SEP</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>sslconn</name>-&gt;<name>non_ssl_request</name></name> == <name>NON_SSL_SEND_HDR_SEP</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bucket</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sslconn</name>-&gt;<name>non_ssl_request</name></name> = <name>NON_SSL_SET_ERROR_MSG</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name> &amp;&amp; <name>mode</name> != <name>AP_MODE_GETLINE</name> &amp;&amp;
<name>mode</name> != <name>AP_MODE_SPECULATIVE</name> &amp;&amp; <name>mode</name> != <name>AP_MODE_INIT</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>mode</name></name> = <name>mode</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>block</name></name> = <name>block</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ssl_io_filter_handshake</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>filter_ctx</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ssl_io_filter_error</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>is_init</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>is_init</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>mode</name></name> == <name>AP_MODE_READBYTES</name> ||
<name><name>inctx</name>-&gt;<name>mode</name></name> == <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>readbytes</name> &lt; <name>len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = (<name>apr_size_t</name>)<name>readbytes</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ssl_io_input_read</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name><name>inctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>mode</name></name> == <name>AP_MODE_GETLINE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>length</name></name>
&amp;&amp; (<name>pos</name> = <call><name>memchr</name><argument_list>(<argument><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>value</name></name></expr></argument>, <argument><expr><name>APR_ASCII_LF</name></expr></argument>,
<argument><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>length</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>start</name> = <name><name>inctx</name>-&gt;<name>cbuf</name>.<name>value</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = 1 + <name>pos</name> - <name>start</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>value</name></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>length</name></name> -= <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>ssl_io_input_getline</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name><name>inctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <name>APR_ENOTIMPL</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>block</name></name> = <name>APR_BLOCK_READ</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ssl_io_filter_error</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>bucket</name> =
<call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COALESCE_BYTES</name></cpp:macro> <cpp:value>(2048)</cpp:value></cpp:define>
<struct>struct <name>coalesce_ctx</name> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>COALESCE_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_coalesce</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>, *<decl><type ref="prev"/><name>upto</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>coalesce_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call>
&amp;&amp; <name><name>e</name>-&gt;<name>length</name></name> != (<name>apr_size_t</name>)-1
&amp;&amp; <name><name>e</name>-&gt;<name>length</name></name> &lt; <name>COALESCE_BYTES</name>
&amp;&amp; (<name>bytes</name> + <name><name>e</name>-&gt;<name>length</name></name>) &lt; <name>COALESCE_BYTES</name>
&amp;&amp; (<name>ctx</name> == <name>NULL</name>
|| <name>bytes</name> + <name><name>ctx</name>-&gt;<name>bytes</name></name> + <name><name>e</name>-&gt;<name>length</name></name> &lt; <name>COALESCE_BYTES</name>)</expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>length</name></name></expr>)</condition><then> <expr_stmt><expr><name>count</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>bytes</name> += <name><name>e</name>-&gt;<name>length</name></name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>upto</name> = <name>e</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bytes</name> &gt; 0
&amp;&amp; (<name>count</name> &gt; 1
|| (<name>upto</name> == <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>)
|| (<name>ctx</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>bytes</name></name> &gt; 0))</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"coalesce: have %" <name>APR_SIZE_T_FMT</name> " bytes, "
"adding %" <name>APR_SIZE_T_FMT</name> " more"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>e</name> != <name>upto</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>next</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call>
|| <name><name>e</name>-&gt;<name>length</name></name> == (<name>apr_size_t</name>)-1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02012</expr></argument>)</argument_list></call>
"unexpected bucket type during coalesce"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>e</name>-&gt;<name>length</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02013</expr></argument>)</argument_list></call>
"coalesce failed to read from data bucket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &gt; sizeof <name><name>ctx</name>-&gt;<name>buffer</name></name>
|| (<name>len</name> + <name><name>ctx</name>-&gt;<name>bytes</name></name> &gt; sizeof <name><name>ctx</name>-&gt;<name>buffer</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02014</expr></argument>)</argument_list></call>
"unexpected coalesced bucket data length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name> + <name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> += <name>len</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <name>next</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ctx</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>bytes</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"coalesce: passing on %" <name>APR_SIZE_T_FMT</name> " bytes"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>, <argument><expr><name><name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_output</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bio_filter_out_ctx_t</name> *</type><name>outctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_read_type_e</name></type> <name>rblock</name> <init>= <expr><name>APR_NONBLOCK_READ</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>filter_ctx</name>-&gt;<name>pssl</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inctx</name> = (<name>bio_filter_in_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioRead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>outctx</name> = (<name>bio_filter_out_ctx_t</name> *)<call><name>BIO_get_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>mode</name></name> = <name>AP_MODE_READBYTES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>block</name></name> = <name>APR_BLOCK_READ</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ssl_io_filter_handshake</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ssl_io_filter_error</name><argument_list>(<argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> &amp;&amp; <name>status</name> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_EOC</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_filter_io_shutdown</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>f</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <name>APR_ECONNRESET</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>outctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>rblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>bio_filter_out_flush</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name><name>outctx</name>-&gt;<name>rc</name></name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rblock</name> = <name>APR_BLOCK_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>rblock</name> = <name>APR_NONBLOCK_READ</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>status</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ssl_filter_write</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<struct>struct <name>modssl_buffer_ctx</name> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><name>int</name></type> <name>ssl_io_buffer_fill</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>maxlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>modssl_buffer_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tempb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>total</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tempb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"filling buffer, max size "
"%" <name>APR_SIZE_T_FMT</name> " bytes"</expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>, *<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr></argument>, <argument><expr><name>tempb</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr>8192</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02015</expr></argument>)</argument_list></call>
"could not read request body for SSL buffer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>tempb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>tempb</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>eos</name></expr>;</condition> <incr><expr><name>e</name> = <name>next</name></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>eos</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02016</expr></argument>)</argument_list></call>
"could not read bucket for SSL buffer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>total</name> += <name>len</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02017</expr></argument>)</argument_list></call>
"could not setaside bucket for SSL buffer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"total of %" <name>APR_OFF_T_FMT</name> " bytes in buffer, eos=%d"</expr></argument>,
<argument><expr><name>total</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>total</name> &gt; <name>maxlen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02018</expr></argument>)</argument_list></call>
"request body exceeds maximum size (%" <name>APR_SIZE_T_FMT</name>
") for SSL buffer"</expr></argument>, <argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
}</block></then></if>
}</block> while <condition>(<expr>!<name>eos</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>tempb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>r</name>-&gt;<name>proto_input_filters</name>-&gt;<name>frec</name>-&gt;<name>ftype</name></name> &lt; <name>AP_FTYPE_CONNECTION</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr><name>ssl_io_buffer</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_io_filter_buffer</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>modssl_buffer_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>, *<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"read from buffered SSL brigade, mode %d, "
"%" <name>APR_OFF_T_FMT</name> " bytes"</expr></argument>,
<argument><expr><name>mode</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name> &amp;&amp; <name>mode</name> != <name>AP_MODE_GETLINE</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> &amp;&amp; <name>rv</name> != <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02019</expr></argument>)</argument_list></call>
"could not partition buffered SSL brigade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>d</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BUCKET_PREV</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_UNSPLICE</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_SPLICE_HEAD</name><argument_list>(<argument><expr>&amp;<name><name>bb</name>-&gt;<name>list</name></name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>apr_bucket</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_CHECK_CONSISTENCY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_CHECK_CONSISTENCY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_split_line</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02020</expr></argument>)</argument_list></call>
"could not split line from buffered SSL brigade"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>e</name> == <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> || !<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"buffered SSL brigade exhausted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_io_input_add_filter</name><parameter_list>(<param><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>bio_filter_in_ctx_t</name> *</type><name>inctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>inctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>inctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pInputFilter</name></name> = <call><name>ap_add_input_filter</name><argument_list>(<argument><expr><name>ssl_io_filter</name></expr></argument>, <argument><expr><name>inctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pbioRead</name></name> = <call><name>BIO_new</name><argument_list>(<argument><expr>&amp;<name>bio_filter_in_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pbioRead</name></name> = <call><name>BIO_new</name><argument_list>(<argument><expr><name>bio_filter_in_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>BIO_set_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioRead</name></name></expr></argument>, <argument><expr>(<name>void</name> *)<name>inctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>ssl</name></name> = <name>ssl</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>bio_out</name></name> = <name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>f</name></name> = <name><name>filter_ctx</name>-&gt;<name>pInputFilter</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>rc</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>mode</name></name> = <name>AP_MODE_READBYTES</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>cbuf</name>.<name>length</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>block</name></name> = <name>APR_BLOCK_READ</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>pool</name></name> = <name><name>c</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>inctx</name>-&gt;<name>filter_ctx</name></name> = <name>filter_ctx</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>ssl_io_filter_init</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>SSL</name> *</type><name>ssl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ssl_filter_ctx_t</name> *</type><name>filter_ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>filter_ctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ssl_filter_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>config</name></name> = <call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr><name>ssl_io_coalesce</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pOutputFilter</name></name> = <call><name>ap_add_output_filter</name><argument_list>(<argument><expr><name>ssl_io_filter</name></expr></argument>,
<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name> = <call><name>BIO_new</name><argument_list>(<argument><expr>&amp;<name>bio_filter_out_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name> = <call><name>BIO_new</name><argument_list>(<argument><expr><name>bio_filter_out_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>BIO_set_data</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>, <argument><expr>(<name>void</name> *)<call><name>bio_filter_out_ctx_new</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>cs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_set_nbio</name><argument_list>(<argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ssl_io_input_add_filter</name><argument_list>(<argument><expr><name>filter_ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_set_bio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioRead</name></name></expr></argument>, <argument><expr><name><name>filter_ctx</name>-&gt;<name>pbioWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter_ctx</name>-&gt;<name>pssl</name></name> = <name>ssl</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>void</name>*)<name>filter_ctx</name></expr></argument>,
<argument><expr><name>ssl_io_filter_cleanup</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APLOG_CS_IS_LEVEL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>rbio</name> <init>= <expr><call><name>SSL_get_rbio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init>,
*<name>wbio</name> <init>= <expr><call><name>SSL_get_wbio</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BIO_set_callback</name><argument_list>(<argument><expr><name>rbio</name></expr></argument>, <argument><expr><name>ssl_io_data_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_callback_arg</name><argument_list>(<argument><expr><name>rbio</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wbio</name> &amp;&amp; <name>wbio</name> != <name>rbio</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_set_callback</name><argument_list>(<argument><expr><name>wbio</name></expr></argument>, <argument><expr><name>ssl_io_data_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_set_callback_arg</name><argument_list>(<argument><expr><name>wbio</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_io_filter_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_input_filter</name> <argument_list>(<argument><expr><name>ssl_io_filter</name></expr></argument>, <argument><expr><name>ssl_io_filter_input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONNECTION</name> + 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name> <argument_list>(<argument><expr><name>ssl_io_coalesce</name></expr></argument>, <argument><expr><name>ssl_io_filter_coalesce</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONNECTION</name> + 4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name> <argument_list>(<argument><expr><name>ssl_io_filter</name></expr></argument>, <argument><expr><name>ssl_io_filter_output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONNECTION</name> + 5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name> <argument_list>(<argument><expr><name>ssl_io_buffer</name></expr></argument>, <argument><expr><name>ssl_io_filter_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_WIDTH</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_io_data_dump</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>long</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>tmp</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>, <decl><type ref="prev"/><name>trunc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<expr_stmt><expr><name>trunc</name> = 0</expr>;</expr_stmt>
<for>for(<init>;</init> <condition><expr>(<name>len</name> &gt; 0) &amp;&amp; ((<name><name>b</name><index>[<expr><name>len</name>-1</expr>]</index></name> == ' ') || (<name><name>b</name><index>[<expr><name>len</name>-1</expr>]</index></name> == '\0'))</expr>;</condition> <incr><expr><name>len</name>--</expr></incr>)
<expr_stmt><expr><name>trunc</name>++</expr>;</expr_stmt></for>
<expr_stmt><expr><name>rows</name> = (<name>len</name> / <name>DUMP_WIDTH</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rows</name> * <name>DUMP_WIDTH</name>) &lt; <name>len</name></expr>)</condition><then>
<expr_stmt><expr><name>rows</name>++</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"+-------------------------------------------------------------------------+"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for(<init><expr><name>i</name> = 0</expr> ;</init> <condition><expr><name>i</name>&lt; <name>rows</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>ebcdic_text</name><index>[<expr><name>DUMP_WIDTH</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>j</name> = <name>DUMP_WIDTH</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>i</name> * <name>DUMP_WIDTH</name> + <name>j</name>) &gt; <name>len</name></expr>)</condition><then>
<expr_stmt><expr><name>j</name> = <name>len</name> % <name>DUMP_WIDTH</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>j</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name>j</name> = <name>DUMP_WIDTH</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ebcdic_text</name></expr></argument>,<argument><expr><call>(<name>char</name> *)<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> + <name>i</name> * <name>DUMP_WIDTH</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>ebcdic_text</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"| %04x: "</expr></argument>, <argument><expr><name>i</name> * <name>DUMP_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>DUMP_WIDTH</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>((<name>i</name> * <name>DUMP_WIDTH</name>) + <name>j</name>) &gt;= <name>len</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof>-<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>ch</name> = ((<name>unsigned</name> <name>char</name>)*(<call>(<name>char</name> *)<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> + <name>i</name> * <name>DUMP_WIDTH</name> + <name>j</name>)) &amp; 0xff</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%02x%c"</expr></argument>, <argument><expr><name>ch</name></expr></argument> , <argument><expr><name>j</name>==7 ? '-' : ' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof>-<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof>-<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>DUMP_WIDTH</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>((<name>i</name> * <name>DUMP_WIDTH</name>) + <name>j</name>) &gt;= <name>len</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof>-<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>ch</name> = ((<name>unsigned</name> <name>char</name>)*(<call>(<name>char</name> *)<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> + <name>i</name> * <name>DUMP_WIDTH</name> + <name>j</name>)) &amp; 0xff</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%c"</expr></argument>, <argument><expr>(<name>ch</name> &gt;= 0x20 &amp;&amp; <name>ch</name> &lt;= 0x7F) ? <name><name>ebcdic_text</name><index>[<expr><name>j</name></expr>]</index></name> : '.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%c"</expr></argument>, <argument><expr>((<name>ch</name> &gt;= ' ') &amp;&amp; (<name>ch</name> &lt;= '~')) ? <name>ch</name> : '.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof>-<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name>+<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" |"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof>-<call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>trunc</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"| %04ld - &lt;SPACES/NULS&gt;"</expr></argument>, <argument><expr><name>len</name> + <name>trunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"+-------------------------------------------------------------------------+"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><name>long</name></type> <name>ssl_io_data_cb</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>int</name></type> <name>cmd</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>argp</name></decl></param>,
<param><decl><type><name>int</name></type> <name>argi</name></decl></param>, <param><decl><type><name>long</name></type> <name>argl</name></decl></param>, <param><decl><type><name>long</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ssl</name> = (<name>SSL</name> *)<call><name>BIO_get_callback_arg</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>rc</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>c</name> = (<name>conn_rec</name> *)<call><name>SSL_get_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>rc</name></expr>;</return></then></if>
<expr_stmt><expr><name>s</name> = <call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>cmd</name> == (<name>BIO_CB_WRITE</name>|<name>BIO_CB_RETURN</name>)
|| <name>cmd</name> == (<name>BIO_CB_READ</name> |<name>BIO_CB_RETURN</name>)</expr> )</condition><then> <block>{
<if>if <condition>(<expr><name>rc</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cserror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"%s: %s %ld/%d bytes %s BIO#%pp [mem: %pp] %s"</expr></argument>,
<argument><expr><name>MODSSL_LIBRARY_NAME</name></expr></argument>,
<argument><expr>(<name>cmd</name> == (<name>BIO_CB_WRITE</name>|<name>BIO_CB_RETURN</name>) ? "write" : "read")</expr></argument>,
<argument><expr><name>rc</name></expr></argument>, <argument><expr><name>argi</name></expr></argument>, <argument><expr>(<name>cmd</name> == (<name>BIO_CB_WRITE</name>|<name>BIO_CB_RETURN</name>) ? "to" : "from")</expr></argument>,
<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>,
<argument><expr>(<name>argp</name> != <name>NULL</name> ? "(BIO dump follows)" : "(Oops, no memory buffer?)")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>argp</name> != <name>NULL</name>) &amp;&amp; <call><name>APLOG_CS_IS_LEVEL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ssl_io_data_dump</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cserror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"%s: I/O error, %d bytes expected to %s on BIO#%pp [mem: %pp]"</expr></argument>,
<argument><expr><name>MODSSL_LIBRARY_NAME</name></expr></argument>, <argument><expr><name>argi</name></expr></argument>,
<argument><expr>(<name>cmd</name> == (<name>BIO_CB_WRITE</name>|<name>BIO_CB_RETURN</name>) ? "write" : "read")</expr></argument>,
<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>argp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
</unit>
