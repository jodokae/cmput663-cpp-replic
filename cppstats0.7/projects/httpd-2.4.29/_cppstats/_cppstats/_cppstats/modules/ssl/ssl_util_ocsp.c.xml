<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/ssl/ssl_util_ocsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>BIO</name> *</type><name>serialize_request</name><parameter_list>(<param><decl><type><name>OCSP_REQUEST</name> *</type><name>req</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>proxy_uri</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>i2d_OCSP_REQUEST</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"POST "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>proxy_uri</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"http://%s:%d"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>BIO_printf</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr>"%s%s%s HTTP/1.0\r\n"
"Host: %s:%d\r\n"
"Content-Type: application/ocsp-request\r\n"
"Content-Length: %d\r\n"
"\r\n"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>path</name></name> ? <name><name>uri</name>-&gt;<name>path</name></name> : "/"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>query</name></name> ? "?" : ""</expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>query</name></name> ? <name><name>uri</name>-&gt;<name>query</name></name> : ""</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>uri</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>i2d_OCSP_REQUEST_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>req</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>bio</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_socket_t</name> *</type><name>send_request</name><parameter_list>(<param><decl><type><name>BIO</name> *</type><name>request</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>proxy_uri</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>sa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>next_hop_uri</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>proxy_uri</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>next_hop_uri</name> = <name>proxy_uri</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>next_hop_uri</name> = <name>uri</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>sa</name></expr></argument>, <argument><expr><name><name>next_hop_uri</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>,
<argument><expr><name><name>next_hop_uri</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01972</expr></argument>)</argument_list></call>
"could not resolve address of %s %s"</expr></argument>,
<argument><expr><name>proxy_uri</name> ? "proxy" : "OCSP responder"</expr></argument>,
<argument><expr><name><name>next_hop_uri</name>-&gt;<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01973</expr></argument>)</argument_list></call>
"connecting to %s '%s'"</expr></argument>,
<argument><expr><name>proxy_uri</name> ? "proxy" : "OCSP responder"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init>;</init> <condition><expr><name>sa</name></expr>;</condition> <incr><expr><name>sa</name> = <name><name>sa</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name>sd</name></expr></argument>, <argument><expr><name><name>sa</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>APR_PROTO_TCP</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>sa</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01974</expr></argument>)</argument_list></call>
"could not connect to %s '%s'"</expr></argument>,
<argument><expr><name>proxy_uri</name> ? "proxy" : "OCSP responder"</expr></argument>,
<argument><expr><name><name>next_hop_uri</name>-&gt;<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01975</expr></argument>)</argument_list></call>
"sending request to OCSP responder"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>len</name> = <call><name>BIO_read</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>sizeof <name>buf</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>wbuf</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>remain</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wlen</name> <init>= <expr><name>remain</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_send</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>wbuf</name></expr></argument>, <argument><expr>&amp;<name>wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>wbuf</name> += <name>remain</name></expr>;</expr_stmt>
<expr_stmt><expr><name>remain</name> -= <name>wlen</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>remain</name> &gt; 0</expr>)</condition>;</do>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01976</expr></argument>)</argument_list></call>
"failed to send request to OCSP responder '%s'"</expr></argument>,
<argument><expr><name><name>uri</name>-&gt;<name>hostinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><name>sd</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>get_line</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bbout</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bbin</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>line</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bbout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_split_line</name><argument_list>(<argument><expr><name>bbout</name></expr></argument>, <argument><expr><name>bbin</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr>8192</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01977</expr></argument>)</argument_list></call>
"failed reading line from OCSP server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_pflatten</name><argument_list>(<argument><expr><name>bbout</name></expr></argument>, <argument><expr>&amp;<name>line</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01978</expr></argument>)</argument_list></call>
"failed reading line from OCSP server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02321</expr></argument>)</argument_list></call>
"empty response from OCSP server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>line</name><index>[<expr><name>len</name>-1</expr>]</index></name> != <name>APR_ASCII_LF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01979</expr></argument>)</argument_list></call>
"response header line too long from OCSP server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>line</name><index>[<expr><name>len</name>-2</expr>]</index></name> == <name>APR_ASCII_CR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>line</name><index>[<expr><name>len</name>-2</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>line</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HEADERS</name></cpp:macro> <cpp:value>(256)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONTENT</name></cpp:macro> <cpp:value>(2048 * 1024)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>OCSP_RESPONSE</name> *</type><name>read_response</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sd</name></decl></param>, <param><decl><type><name>BIO</name> *</type><name>bio</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>, *<decl><type ref="prev"/><name>tmpbb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OCSP_RESPONSE</name> *</type><name>response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>code</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpbb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><call><name>apr_bucket_socket_create</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>line</name> = <call><name>get_line</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>line</name> || <call><name>strncmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>"HTTP/"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call>
|| (<name>line</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call>) == <name>NULL</name>
|| (<name>code</name> = <call><name>apr_atoi64</name><argument_list>(<argument><expr>++<name>line</name></expr></argument>)</argument_list></call>) &lt; 200 || <name>code</name> &gt; 299</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01980</expr></argument>)</argument_list></call>
"bad response from OCSP server: %s"</expr></argument>,
<argument><expr><name>line</name> ? <name>line</name> : "(none)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>line</name> = <call><name>get_line</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>NULL</name> &amp;&amp; <name><name>line</name><index>[<expr>0</expr>]</index></name>
&amp;&amp; ++<name>count</name> &lt; <name>MAX_HEADERS</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01981</expr></argument>)</argument_list></call>
"OCSP response header: %s"</expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>count</name> == <name>MAX_HEADERS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01982</expr></argument>)</argument_list></call>
"could not read response headers from OCSP server, "
"exceeded maximum count (%u)"</expr></argument>, <argument><expr><name>MAX_HEADERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<name>line</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01983</expr></argument>)</argument_list></call>
"could not read response header from OCSP server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>count</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_EOF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01984</expr></argument>)</argument_list></call>
"OCSP response: got EOF"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01985</expr></argument>)</argument_list></call>
"error reading response from OCSP server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>count</name> += <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> &gt; <name>MAX_CONTENT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01986</expr></argument>)</argument_list></call>
"OCSP response size exceeds %u byte limit"</expr></argument>,
<argument><expr><name>MAX_CONTENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01987</expr></argument>)</argument_list></call>
"OCSP response: got %" <name>APR_SIZE_T_FMT</name>
" bytes, %" <name>APR_SIZE_T_FMT</name> " total"</expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_write</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr>(<name>int</name>)<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>response</name> = <call><name>d2i_OCSP_RESPONSE_bio</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>response</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01988</expr></argument>)</argument_list></call>
"failed to decode OCSP response data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>response</name></expr>;</return>
}</block></function>
<function><type><name>OCSP_RESPONSE</name> *</type><name>modssl_dispatch_ocsp_request</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>,
<param><decl><type><name>OCSP_REQUEST</name> *</type><name>request</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>OCSP_RESPONSE</name> *</type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_uri_t</name> *</type><name>proxy_uri</name></decl>;</decl_stmt>
<expr_stmt><expr><name>proxy_uri</name> = (<call><name>mySrvConfigFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>)-&gt;<name><name>server</name>-&gt;<name>proxy_uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>bio</name> = <call><name>serialize_request</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>proxy_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bio</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01989</expr></argument>)</argument_list></call>
"could not serialize OCSP request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>mySrvFromConn</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sd</name> = <call><name>send_request</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>proxy_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sd</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>)<call><name>BIO_reset</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>response</name> = <call><name>read_response</name><argument_list>(<argument><expr><name>sd</name></expr></argument>, <argument><expr><name>bio</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>response</name></expr>;</return>
}</block></function>
<expr_stmt><expr>static <call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<macro><name>modssl_read_ocsp_certificates</name><argument_list>(<argument>const char *file</argument>)</argument_list></macro> <block>{
<expr><name>BIO</name> *<name>bio</name></expr>;
<expr><name>X509</name> *<name>x509</name></expr>;
<expr><name>unsigned</name> <name>long</name> <name>err</name></expr>;
<expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>other_certs</name> = <name>NULL</name></expr>;
<if>if <condition>(<expr>(<name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if></block></expr></expr_stmt>
<if>if <condition>(<expr><call><name>BIO_read_filename</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<name>x509</name> = <call><name>PEM_read_bio_X509</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<name>other_certs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>other_certs</name> = <call><name>sk_X509_new_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>other_certs</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>sk_X509_push</name><argument_list>(<argument><expr><name>other_certs</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>other_certs</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ERR_peek_error</name><argument_list>()</argument_list></call>) &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <call><name>ERR_GET_LIB</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> == <name>ERR_LIB_PEM</name>
&amp;&amp; <call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> == <name>PEM_R_NO_START_LINE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>other_certs</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition> <empty_stmt>;</empty_stmt></while>
}</block></then></if>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>other_certs</name></expr>;</return>
}
void <macro><name>ssl_init_ocsp_certificates</name><argument_list>(<argument>server_rec *s</argument>, <argument>modssl_ctx_t *mctx</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name><name>mctx</name>-&gt;<name>ocsp_certs_file</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Configuring Trusted OCSP certificates"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_certs</name></name> = <call><name>modssl_read_ocsp_certificates</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ocsp_certs_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>mctx</name>-&gt;<name>ocsp_certs</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Unable to configure OCSP Trusted Certificates"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ocsp_verify_flags</name></name> |= <name>OCSP_TRUSTOTHER</name></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
