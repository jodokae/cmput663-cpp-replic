<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/http/http_request.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDARG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>http</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>update_r_in_filters</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>from</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>to</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr><name>f</name></expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name></name> == <name>from</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>r</name></name> = <name>to</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>f</name> = <name><name>f</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_die_r</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>recursive_error</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>custom_response</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r_1st_err</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name> == <name>OK</name> || <name>type</name> == <name>DONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_VALID_RESPONSE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> &amp;&amp; (<name><name>next</name>-&gt;<name>frec</name></name> != <name>ap_http_header_filter_handle</name>)</expr>)</condition> <block>{
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>type</name> != <name>AP_FILTER_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01579</expr></argument>)</argument_list></call>
"Invalid response status %i"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02831</expr></argument>)</argument_list></call>
"Response from AP_FILTER_ERROR"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>type</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>recursive_error</name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr><name><name>r_1st_err</name>-&gt;<name>prev</name></name> &amp;&amp; (<name><name>r_1st_err</name>-&gt;<name>prev</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name>)</expr>)</condition>
<expr_stmt><expr><name>r_1st_err</name> = <name><name>r_1st_err</name>-&gt;<name>prev</name></name></expr>;</expr_stmt></while>
<if>if <condition>(<expr><name>r_1st_err</name> != <name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>update_r_in_filters</name><argument_list>(<argument><expr><name><name>r_1st_err</name>-&gt;<name>proto_output_filters</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r_1st_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_r_in_filters</name><argument_list>(<argument><expr><name><name>r_1st_err</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>r_1st_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>custom_response</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>error_index</name> <init>= <expr><call><name>ap_index_of_response</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>custom_response</name> = <call><name>ap_response_code_string</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>error_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>recursive_error</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>type</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>HTTP_UNAUTHORIZED</name> == <name><name>r</name>-&gt;<name>status</name></name> &amp;&amp; <name>PROXYREQ_PROXY</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_PROXY_AUTHENTICATION_REQUIRED</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_status_drops_connection</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>custom_response</name> &amp;&amp; <name><name>custom_response</name><index>[<expr>0</expr>]</index></name> != '"'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_is_url</name><argument_list>(<argument><expr><name>custom_response</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_MOVED_TEMPORARILY</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>custom_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>custom_response</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error_notes</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>no_local_copy</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"REQUEST_METHOD"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>error_notes</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>,
<argument><expr>"error-notes"</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"ERROR_NOTES"</expr></argument>, <argument><expr><name>error_notes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>method_number</name></name> = <name>M_GET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_internal_redirect</name><argument_list>(<argument><expr><name>custom_response</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>recursive_error</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01580</expr></argument>)</argument_list></call>
"Invalid error redirection directive: %s"</expr></argument>,
<argument><expr><name>custom_response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_send_error_response</name><argument_list>(<argument><expr><name>r_1st_err</name></expr></argument>, <argument><expr><name>recursive_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_die</name><argument_list>(<argument>int type</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_die_r</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_check_pipeline</name><argument_list>(<argument>conn_rec *c</argument>, <argument>apr_bucket_brigade *bb</argument>,
<argument>unsigned int max_blank_lines</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_EOF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_input_mode_t</name></type> <name>mode</name> <init>= <expr><name>AP_MODE_SPECULATIVE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num_blank_lines</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>cr</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>c</name>-&gt;<name>keepalive</name></name> != <name>AP_CONN_CLOSE</name> &amp;&amp; !<name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>cr</name> + 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> || !<name>max_blank_lines</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02967</expr></argument>)</argument_list></call>
"Can't consume pipelined empty lines"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>n</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if></else></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>len</name> != <name>cr</name> + 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>log_level</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>log_level</name> = <name>APLOG_ERR</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>log_level</name> = <name>APLOG_DEBUG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>log_level</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02968</expr></argument>)</argument_list></call>
"Can't check pipelined data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>AP_MODE_SPECULATIVE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>cr</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>cr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>len</name> == 2 &amp;&amp; <name><name>buf</name><index>[<expr>0</expr>]</index></name> == <name>APR_ASCII_CR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>buf</name><index>[<expr>1</expr>]</index></name> == <name>APR_ASCII_LF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>AP_MODE_READBYTES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_blank_lines</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> == <name>APR_ASCII_LF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = <name>AP_MODE_READBYTES</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_blank_lines</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> == <name>APR_ASCII_CR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cr</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if></else></if>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>num_blank_lines</name> &gt; <name>max_blank_lines</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_NOTFOUND</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_process_request_after_handler</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>ap_bucket_eor_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_check_pipeline</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>DEFAULT_LIMIT_BLANK_LINES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>data_in_input_filters</name></name> = (<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>cs</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cs</name>-&gt;<name>state</name></name> = (<name><name>c</name>-&gt;<name>aborted</name></name>) ? <name>CONN_STATE_LINGER</name>
: <name>CONN_STATE_WRITE_COMPLETION</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>AP_PROCESS_REQUEST_RETURN</name><argument_list>(<argument><expr>(<name>uintptr_t</name>)<name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_time_process_request</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>STOP_PREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<function><type><name>void</name></type> <name>ap_process_async_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_PROCESS_REQUEST_ENTRY</name><argument_list>(<argument><expr>(<name>uintptr_t</name>)<name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_time_process_request</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>START_PREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APLOGrtrace4</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>t_h</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>t_elt</name> <init>= <expr>(<name>apr_table_entry_t</name> *)<name><name>t_h</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Headers received from client:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>t_h</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>t_elt</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>" %s: %s"</expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>t_elt</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>t_elt</name>-&gt;<name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_run_quick_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_invoke_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>access_status</name> == <name>SUSPENDED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>AP_PROCESS_REQUEST_RETURN</name><argument_list>(<argument><expr>(<name>uintptr_t</name>)<name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>access_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_time_process_request</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>STOP_PREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>cs</name></name></expr>)</condition><then>
<expr_stmt><expr><name><name>c</name>-&gt;<name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_SUSPENDED</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>invoke_mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_die_r</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_request_after_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_process_request</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_process_async_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>data_in_input_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01581</expr></argument>)</argument_list></call>
"Timeout while writing data for URI %s to the"
" client"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>ap_extended_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_time_process_request</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>STOP_PREQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<function><type><specifier>static</specifier> <name>apr_table_t</name> *</type><name>rename_original_env</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>env_arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *) <name><name>env_arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>new</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>env_arr</name>-&gt;<name>nalloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>env_arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"REDIRECT_"</expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>internal_internal_redirect</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_uri</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>new</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_is_recursion_limit_exceeded</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>new</name> = (<name>request_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>connection</name></name> = <name><name>r</name>-&gt;<name>connection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>server</name></name> = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>method</name></name> = <name><name>r</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>method_number</name></name> = <name><name>r</name>-&gt;<name>method_number</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>allowed_methods</name></name> = <call><name>ap_make_method_list</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name>new_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>parsed_uri</name>.<name>port</name></name> = <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>request_config</name></name> = <call><name>ap_create_request_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>per_dir_config</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>lookup_defaults</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>prev</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>next</name></name> = <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>useragent_addr</name></name> = <name><name>r</name>-&gt;<name>useragent_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>useragent_ip</name></name> = <name><name>r</name>-&gt;<name>useragent_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_create_request</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>the_request</name></name> = <name><name>r</name>-&gt;<name>the_request</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>allowed</name></name> = <name><name>r</name>-&gt;<name>allowed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>status</name></name> = <name><name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>assbackwards</name></name> = <name><name>r</name>-&gt;<name>assbackwards</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>header_only</name></name> = <name><name>r</name>-&gt;<name>header_only</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>protocol</name></name> = <name><name>r</name>-&gt;<name>protocol</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>proto_num</name></name> = <name><name>r</name>-&gt;<name>proto_num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>hostname</name></name> = <name><name>r</name>-&gt;<name>hostname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>request_time</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name/></name>main = <name><name>r</name>-&gt;<name/></name>main</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>headers_in</name></name> = <name><name>r</name>-&gt;<name>headers_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>trailers_in</name></name> = <name><name>r</name>-&gt;<name>trailers_in</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>location</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>err_headers_out</name></name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>trailers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>subprocess_env</name></name> = <call><name>rename_original_env</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>notes</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>htaccess</name></name> = <name><name>r</name>-&gt;<name>htaccess</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>no_cache</name></name> = <name><name>r</name>-&gt;<name>no_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>expecting_100</name></name> = <name><name>r</name>-&gt;<name>expecting_100</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>no_local_copy</name></name> = <name><name>r</name>-&gt;<name>no_local_copy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>read_length</name></name> = <name><name>r</name>-&gt;<name>read_length</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>vlist_validator</name></name> = <name><name>r</name>-&gt;<name>vlist_validator</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>proto_output_filters</name></name> = <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>proto_input_filters</name></name> = <name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>input_filters</name></name> = <name><name>new</name>-&gt;<name>proto_input_filters</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>, *<decl><type ref="prev"/><name>nextf</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>output_filters</name></name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> = <name><name>new</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>nextf</name> = <name><name>f</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name></name> == <name>r</name> &amp;&amp; <name><name>f</name>-&gt;<name>frec</name></name> != <name>ap_subreq_core_filter_handle</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01582</expr></argument>)</argument_list></call>
"dropping filter '%s' in internal redirect from %s to %s"</expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr><name>new_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>r</name></name> = <name>new</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>f</name> = <name>nextf</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>f</name> &amp;&amp; <name>f</name> != <name><name>new</name>-&gt;<name>proto_output_filters</name></name></expr>)</condition>;</do>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>output_filters</name></name> = <name><name>new</name>-&gt;<name>proto_output_filters</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>update_r_in_filters</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_r_in_filters</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"REDIRECT_STATUS"</expr></argument>,
<argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>used_path_info</name></name> = <name>AP_REQ_DEFAULT_PATH_INFO</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>invoke_mtx</name></name> = <name><name>r</name>-&gt;<name>invoke_mtx</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>ap_run_post_read_request</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_internal_fast_redirect</name><argument_list>(<argument>request_rec *rr</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>apr_pool_join</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name><name>rr</name>-&gt;<name>proxyreq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>no_cache</name></name> = (<name><name>r</name>-&gt;<name>no_cache</name></name> &amp;&amp; <name><name>rr</name>-&gt;<name>no_cache</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>no_local_copy</name></name> = (<name><name>r</name>-&gt;<name>no_local_copy</name></name> &amp;&amp; <name><name>rr</name>-&gt;<name>no_local_copy</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>mtime</name></name> = <name><name>rr</name>-&gt;<name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>uri</name></name> = <name><name>rr</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name><name>rr</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> = <name><name>rr</name>-&gt;<name>canonical_filename</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <name><name>rr</name>-&gt;<name>path_info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <name><name>rr</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>finfo</name></name> = <name><name>rr</name>-&gt;<name>finfo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name><name>rr</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <name><name>rr</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_languages</name></name> = <name><name>rr</name>-&gt;<name>content_languages</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name><name>rr</name>-&gt;<name>per_dir_config</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>notes</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>trailers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>trailers_out</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>trailers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>output_filters</name></name> = <name><name>rr</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>input_filters</name></name> = <name><name>rr</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_r_in_filters</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>update_r_in_filters</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>next</name> <init>= <expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>next</name> &amp;&amp; (<name>next</name> != <name><name>r</name>-&gt;<name>proto_output_filters</name></name>)</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>frec</name></name> == <name>ap_subreq_core_filter_handle</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>next</name> || <name>next</name> == <name><name>r</name>-&gt;<name>proto_output_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_subreq_core_filter_handle</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl>;</decl_stmt>
<expr_stmt><expr><name>next</name> = <name><name>r</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next</name> &amp;&amp; (<name><name>next</name>-&gt;<name>frec</name></name> != <name>ap_subreq_core_filter_handle</name>)
&amp;&amp; (<name>next</name> != <name><name>r</name>-&gt;<name>proto_output_filters</name></name>)</expr>)</condition> <block>{
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>next</name> &amp;&amp; (<name><name>next</name>-&gt;<name>frec</name></name> == <name>ap_subreq_core_filter_handle</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_internal_redirect</name><argument_list>(<argument>const char *new_uri</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>new</name> <init>= <expr><call><name>internal_internal_redirect</name><argument_list>(<argument><expr><name>new_uri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_INTERNAL_REDIRECT</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>new_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>new</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_run_quick_handler</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_invoke_handler</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_internal_redirect_handler</name><argument_list>(<argument>const char *new_uri</argument>, <argument>request_rec *r</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>new</name> <init>= <expr><call><name>internal_internal_redirect</name><argument_list>(<argument><expr><name>new_uri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>new</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>handler</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>new</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_process_request_internal</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>access_status</name> = <call><name>ap_invoke_handler</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_allow_methods</name><argument_list>(<argument>request_rec *r</argument>, <argument>int reset</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>methods</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>reset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_clear_method_list</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>allowed_methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>method</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_method_list_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>allowed_methods</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_allow_standard_methods</name><argument_list>(<argument>request_rec *r</argument>, <argument>int reset</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mask</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>reset</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_clear_method_list</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>allowed_methods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>mask</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>method</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>methods</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call>) != -1</expr>)</condition> <block>{
<expr_stmt><expr><name>mask</name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>method</name>)</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed_methods</name>-&gt;<name>method_mask</name></name> |= <name>mask</name></expr>;</expr_stmt>
}</block>
</unit>
