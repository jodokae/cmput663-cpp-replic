<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/slotmem/mod_slotmem_plain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_slotmem.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_IS_PREGRAB</name><parameter_list>(<param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(t-&gt;type &amp; AP_SLOTMEM_TYPE_PREGRAB)</cpp:value></cpp:define>
<struct>struct <name>ap_slotmem_instance_t</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>gpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_slotmem_instance_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>ap_slotmem_instance_t</name> *</type><name>globallistmem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>gpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_do</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>mem</name></decl></param>, <param><decl><type><name>ap_slotmem_callback_fn_t</name> *</type><name>func</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>retval</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>mem</name></expr>)</condition><then>
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<name><name>mem</name>-&gt;<name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inuse</name> = <name><name>mem</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mem</name>-&gt;<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call> ||
(<call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>inuse</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>retval</name> = <call><name>func</name><argument_list>(<argument><expr>(<name>void</name> *) <name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> += <name><name>mem</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_create</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>new</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>item_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_num</name></decl></param>, <param><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>next</name> <init>= <expr><name>globallistmem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>basesize</name> <init>= <expr>(<name>item_size</name> * <name>item_num</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>name</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == ':'</expr>)</condition><then>
<expr_stmt><expr><name>fname</name> = <name>name</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>fname</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>next</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>new</name> = <name>next</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>next</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></then> <else>else
<expr_stmt><expr><name>fname</name> = "anonymous"</expr>;</expr_stmt></else></if>
<expr_stmt><expr><name>res</name> = (<name>ap_slotmem_instance_t</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_slotmem_instance_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>base</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>, <argument><expr><name>basesize</name> + (<name>item_num</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>res</name>-&gt;<name>base</name></name></expr>)</condition><then>
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>res</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>size</name></name> = <name>item_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>num</name></name> = <name>item_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>inuse</name></name> = (<name>char</name> *)<name><name>res</name>-&gt;<name>base</name></name> + <name>basesize</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>globallistmem</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>globallistmem</name> = <name>res</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>next</name>-&gt;<name>next</name></name> = <name>res</name></expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>new</name> = <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_attach</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>new</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>item_size</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>item_num</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>next</name> <init>= <expr><name>globallistmem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>name</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == ':'</expr>)</condition><then>
<expr_stmt><expr><name>fname</name> = <name>name</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>fname</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then> <else>else
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return></else></if>
<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>next</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>new</name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>item_size</name> = <name><name>next</name>-&gt;<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>item_num</name> = <name><name>next</name>-&gt;<name>num</name></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_dptr</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>score</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>void</name> **</type><name>mem</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>score</name></expr>)</condition><then>
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>score</name>-&gt;<name>num</name></name></expr>)</condition><then>
<return>return <expr><name>APR_EINVAL</name></expr>;</return></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<name><name>score</name>-&gt;<name>base</name></name> + <name><name>score</name>-&gt;<name>size</name></name> * <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ptr</name></expr>)</condition><then>
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return></then></if>
<expr_stmt><expr>*<name>mem</name> = <name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_get</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>dest_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name> + <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> &amp;&amp; !*<name>inuse</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>slotmem_dptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inuse</name>=1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dest_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_put</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>src_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name> + <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> &amp;&amp; !*<name>inuse</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>slotmem_dptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inuse</name>=1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>slotmem_num_slots</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>slot</name>-&gt;<name>num</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>slotmem_num_free_slots</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>counter</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name> <init>= <expr><name><name>slot</name>-&gt;<name>inuse</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>slot</name>-&gt;<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!*<name>inuse</name></expr>)</condition><then>
<expr_stmt><expr><name>counter</name>++</expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>counter</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>slotmem_slot_size</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>slot</name>-&gt;<name>size</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_grab</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>slot</name>-&gt;<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!*<name>inuse</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>i</name> &gt;= <name><name>slot</name>-&gt;<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inuse</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>id</name> = <name>i</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_fgrab</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name> + <name>id</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>inuse</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_release</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>inuse</name><index>[<expr><name>id</name></expr>]</index></name></expr> )</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>inuse</name><index>[<expr><name>id</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_slotmem_provider_t</name></type> <name>storage</name> <init>= <expr><block>{
<expr>"plainmem"</expr>,
<expr>&amp;<name>slotmem_do</name></expr>,
<expr>&amp;<name>slotmem_create</name></expr>,
<expr>&amp;<name>slotmem_attach</name></expr>,
<expr>&amp;<name>slotmem_dptr</name></expr>,
<expr>&amp;<name>slotmem_get</name></expr>,
<expr>&amp;<name>slotmem_put</name></expr>,
<expr>&amp;<name>slotmem_num_slots</name></expr>,
<expr>&amp;<name>slotmem_num_free_slots</name></expr>,
<expr>&amp;<name>slotmem_slot_size</name></expr>,
<expr>&amp;<name>slotmem_grab</name></expr>,
<expr>&amp;<name>slotmem_release</name></expr>,
<expr>&amp;<name>slotmem_fgrab</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>gpool</name> = <name>p</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_slotmem_plain_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"plain"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_VERSION</name></expr></argument>, <argument><expr>&amp;<name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>slotmem_plain</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>ap_slotmem_plain_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
