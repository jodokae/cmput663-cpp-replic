<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/filters/mod_xml2enc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XML2ENC_DECLARE_EXPORT</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/encoding.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_xlate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_xml2enc.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>xml2enc_module</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFLEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_MIN</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_BRIGADE_DO</name><parameter_list>(<param><type><name>b</name></type></param>,<param><type><name>bb</name></type></param>)</parameter_list></cpp:macro> <cpp:value>for (b = APR_BRIGADE_FIRST(bb); b != APR_BRIGADE_SENTINEL(bb); b = APR_BUCKET_NEXT(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_INITIALISED</name></cpp:macro> <cpp:value>0x100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_SEEN_EOS</name></cpp:macro> <cpp:value>0x200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENC_SKIPTO</name></cpp:macro> <cpp:value>ENCIO_SKIPTO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_ENCODING</name><parameter_list>(<param><type><name>enc</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((enc)!=XML_CHAR_ENCODING_NONE)&amp;&amp;((enc)!=XML_CHAR_ENCODING_ERROR))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>xmlCharEncoding</name></type> <name>xml2enc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_xlate_t</name>*</type> <name>convset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bblen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name>*</type> <name>bbnext</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name>*</type> <name>bbsave</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>encoding</name></decl>;</decl_stmt>
}</block></struct></type> <name>xml2ctx</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>default_charset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xmlCharEncoding</name></type> <name>default_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>skipto</name></decl>;</decl_stmt>
}</block></struct></type> <name>xml2cfg</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>val</name></decl>;</decl_stmt>
}</block></struct></type> <name>tattr</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_regex_t</name>*</type> <name>seek_meta_ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_regex_t</name>*</type> <name>seek_charset</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>xml2enc_filter</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>enc</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_xlate_t</name>*</type> <name>convset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr>(<name>mode</name> ^ <name>ENCIO</name>)</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>mode</name> &amp; <name>ENCIO</name>) == <name>ENCIO_OUTPUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>convset</name></expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>ENC_INITIALISED</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>mode</name> &amp; <name>ENCIO</name>) == <name>ENCIO_INPUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name>convset</name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>, <argument><expr><name>enc</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flags</name> |= <name>ENC_INITIALISED</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>mode</name> &amp; <name>ENCIO</name>) == <name>ENCIO_INPUT_CHECKS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>convset</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01426</expr></argument>)</argument_list></call>
"xml2enc: bad mode %x"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>xml2ctx</name>*</type> <name>ctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xml2ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>ENC_INITIALISED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>convset</name></name> = <name>convset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bblen</name></name> = <name>BUFLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buf</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>apr_size_t</name>)<name><name>ctx</name>-&gt;<name>bblen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"xml2enc"</expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01427</expr></argument>)</argument_list></call>
"xml2enc: Charset %s not supported."</expr></argument>, <argument><expr><name>enc</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fix_skipto</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>, <param><decl><type><name>xml2ctx</name>*</type> <name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>xml2enc_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>skipto</name></name> != <name>NULL</name>) &amp;&amp; (<name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>ENC_SKIPTO</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>p</name> <init>= <expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>tattr</name>*</type> <name>starts</name> <init>= <expr>(<name>tattr</name>*) <name><name>cfg</name>-&gt;<name>skipto</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>!<name>found</name> &amp;&amp; <name>p</name> &amp;&amp; *<name>p</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cfg</name>-&gt;<name>skipto</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name>+1</expr></argument>, <argument><expr><name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>bstart</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr>(<name>p</name>-<name><name>ctx</name>-&gt;<name>buf</name></name>)</expr></argument>,
<argument><expr>&amp;<name>bstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>b</name> != <name>bstart</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> -= (<name>p</name>-<name><name>ctx</name>-&gt;<name>buf</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buf</name></name> = <name>p</name></expr> ;</expr_stmt>
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01428</expr></argument>)</argument_list></call>
"Skipped to first &lt;%s&gt; element"</expr></argument>,
<argument><expr><name><name>starts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>p</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>p</name>+1</expr></argument>, <argument><expr>'&lt;'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01429</expr></argument>)</argument_list></call>
"Failed to find start of recognised HTML!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sniff_encoding</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>, <param><decl><type><name>xml2ctx</name>*</type> <name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>cfg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>p</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>cutb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>cute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>match</name><index>[<expr>2</expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>ctype</name> <init>= <expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ctype</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01430</expr></argument>)</argument_list></call>
"Content-Type is %s"</expr></argument>, <argument><expr><name>ctype</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<if>if <condition>(<expr><name>ctype</name> &amp;&amp; (<name>p</name> = <call><name>ap_strcasestr</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr>"charset="</expr></argument>)</argument_list></call> , <name>p</name> != <name>NULL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> += 8</expr> ;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>encoding</name></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strcspn</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>" ;"</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
<expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01431</expr></argument>)</argument_list></call>
"Got charset %s from HTTP headers"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> = <call><name>xmlParseCharEncoding</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> == <name>XML_CHAR_ENCODING_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> = <call><name>xmlDetectCharEncoding</name><argument_list>(<argument><expr>(const <name>xmlChar</name>*)<name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>HAVE_ENCODING</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01432</expr></argument>)</argument_list></call>
"Got charset from XML rules."</expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>encoding</name></name> = <call><name>xmlGetCharEncodingName</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name>seek_meta_ctype</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0</expr> )</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr><name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr></argument>, <argument><expr>&amp;<name>cute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr><name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>, <argument><expr>&amp;<name>cutb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> = <name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>encoding</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>p</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name> + <name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name>seek_charset</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>encoding</name></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name>+<name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_eo</name> - <name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>,
<expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> = <call><name>xmlParseCharEncoding</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>HAVE_ENCODING</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01433</expr></argument>)</argument_list></call>
"Got charset %s from HTML META"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr><name>cutb</name> != <name>cute</name></expr>)</condition> <block>{
<expr_stmt><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>cutb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>cutb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cutb</name> = <name>b</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buf</name><index>[<expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>HAVE_ENCODING</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>xml2enc_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>encoding</name></name> = <name><name>cfg</name>-&gt;<name>default_charset</name></name>?<name><name>cfg</name>-&gt;<name>default_charset</name></name>:"ISO-8859-1"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01434</expr></argument>)</argument_list></call>
"Charset %s not supported by libxml2; trying apr_xlate"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_xlate_open</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>convset</name></name></expr></argument>, <argument><expr>"UTF-8"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> = <name>XML_CHAR_ENCODING_UTF8</name></expr> ;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01435</expr></argument>)</argument_list></call>
"Charset %s not supported. Consider aliasing it?"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>encoding</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>HAVE_ENCODING</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01436</expr></argument>)</argument_list></call>
"No usable charset information; using configuration default"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> = (<name><name>cfg</name>-&gt;<name>default_encoding</name></name> == <name>XML_CHAR_ENCODING_NONE</name>)
? <name>XML_CHAR_ENCODING_8859_1</name> : <name><name>cfg</name>-&gt;<name>default_encoding</name></name></expr> ;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>ctype</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>encoding</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name>seek_charset</name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_type</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctype</name></expr></argument>, <argument><expr>";charset=utf-8"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>str</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call> + 13
- (<name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name><name>match</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name>) + 1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr><name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>str</name> + <name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_so</name></expr></argument>, <argument><expr>"utf-8"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name> + <name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_so</name> + 5</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name>+<name><name>match</name><index>[<expr>1</expr>]</index></name>.<name>rm_eo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_type</name></name> = <name>str</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>xml2enc_filter_init</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2ctx</name>*</type> <name>ctx</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>f</name>-&gt;<name>ctx</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>xml2enc_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xml2ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name> = <name>XML_CHAR_ENCODING_NONE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>skipto</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>flags</name></name> |= <name>ENC_SKIPTO</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>xml2enc_ffunc</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name>*</type> <name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2ctx</name>*</type> <name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>bstart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>insz</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ctype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ctx</name> || !<name><name>f</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></then></if>
<expr_stmt><expr><name>ctype</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>p</name> = <name>ctype</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
<if>if <condition>(<expr><call><name>isupper</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr>*<name>p</name> = <call><name>tolower</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></for>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr>"text/"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> &amp;&amp; !<call><name>strstr</name><argument_list>(<argument><expr><name>ctype</name></expr></argument>, <argument><expr>"xml"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>bbsave</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>ENC_INITIALISED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>bblen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>bblen</name></name> &lt; <name>BUF_MIN</name>) &amp;&amp; (<name><name>ctx</name>-&gt;<name>bblen</name></name> != -1)</expr>)</condition><then> <block>{
<macro><name>APR_BRIGADE_DO</name><argument_list>(<argument>b</argument>, <argument>ctx-&gt;bbsave</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>flags</name></name> |= <name>ENC_SEEN_EOS</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block>
<if>if <condition>(<expr>!(<name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>ENC_SEEN_EOS</name>)</expr>)</condition><then> <block>{
<macro><name>APR_BRIGADE_DO</name><argument_list>(<argument>b</argument>, <argument>ctx-&gt;bbsave</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>bblen</name></name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bblen</name></name> = <name>BUFLEN</name>-1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buf</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call>(<name>apr_size_t</name>)<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bblen</name></name>+1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> = (<name>apr_size_t</name>)<name><name>ctx</name>-&gt;<name>bblen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>buf</name><index>[<expr><name><name>ctx</name>-&gt;<name>bytes</name></name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>sniff_encoding</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fix_skipto</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>flags</name></name> |= <name>ENC_INITIALISED</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>xml2enc_module</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>bbnext</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>convset</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>, <expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name>*</type> <name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>fixbuf</name><index>[<expr><name>BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name>*</type> <name>bdestroy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>insz</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <name>fixbuf</name></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes</name> = <name>BUFLEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bytes</name> == <name>insz</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01437</expr></argument>)</argument_list></call>
"xml2enc: Setting aside %" <name>APR_SIZE_T_FMT</name>
" unconverted bytes"</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bbsave</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>APR_BRIGADE_DO</name><argument_list>(<argument>b</argument>, <argument>ctx-&gt;bbsave</argument>)</argument_list></macro> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>
== <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>bstart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>, <expr><name>b</name> != <name>bstart</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01438</expr></argument>)</argument_list></call>
"xml2enc: consuming %" <name>APR_SIZE_T_FMT</name>
" bytes flattened"</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>(const <name>char</name>**)&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bdestroy</name> = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01439</expr></argument>)</argument_list></call>
"xml2enc: consuming %" <name>APR_SIZE_T_FMT</name>
" bytes from bucket"</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>consumed</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>xml2enc_run_preprocess</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> = <name>insz</name> = <name>bytes</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>insz</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv2</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>bytes</name></name> == <name><name>ctx</name>-&gt;<name>bblen</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>buf</name>+(<name>bytes</name> - <name>insz</name>)</expr></argument>, <argument><expr><name>insz</name></expr></argument>,
<argument><expr><name><name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01440</expr></argument>)</argument_list></call>
"xml2enc: reinserting %" <name>APR_SIZE_T_FMT</name>
" unconsumed bytes from bucket"</expr></argument>, <argument><expr><name>insz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bytes</name></name> = (<name>apr_size_t</name>)<name><name>ctx</name>-&gt;<name>bblen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_xlate_conv_buffer</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>convset</name></name></expr></argument>, <argument><expr><name>buf</name>+(<name>bytes</name> - <name>insz</name>)</expr></argument>,
<argument><expr>&amp;<name>insz</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01441</expr></argument>)</argument_list></call>
"xml2enc: converted %" <name>APR_SIZE_T_FMT</name>
"/%" <name>APR_OFF_T_FMT</name> " bytes"</expr></argument>, <argument><expr><name>consumed</name> - <name>insz</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>bblen</name></name> - <name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>consumed</name> = <name>insz</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv2</name> = <call><name>ap_fwrite</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>buf</name></name></expr></argument>,
<argument><expr>(<name>apr_size_t</name>)<name><name>ctx</name>-&gt;<name>bblen</name></name> - <name><name>ctx</name>-&gt;<name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv2</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv2</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01442</expr></argument>)</argument_list></call>
"ap_fwrite failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv2</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>rv</name></expr>)</condition> <block>{
<case>case <expr><name>APR_SUCCESS</name></expr>:
<continue>continue;</continue>
</case><case>case <expr><name>APR_EINCOMPLETE</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01443</expr></argument>)</argument_list></call>
"INCOMPLETE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
</case><case>case <expr><name>APR_EINVAL</name></expr>:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01444</expr></argument>)</argument_list></call>
"Skipping invalid byte(s) in input stream!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>--<name>insz</name></expr>;</expr_stmt>
<continue>continue;</continue>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01445</expr></argument>)</argument_list></call>
"Failed to convert input; trying it raw"</expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>convset</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_fflush</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01446</expr></argument>)</argument_list></call>
"ap_fflush failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bbnext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
</default>}</block></switch>
}</block></while>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01447</expr></argument>)</argument_list></call>
"xml2enc: error reading data"</expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>bdestroy</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name>bdestroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></else></if>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>xml2enc_charset</name><parameter_list>(<param><decl><type><name>request_rec</name>*</type> <name>r</name></decl></param>, <param><decl><type><name>xmlCharEncoding</name>*</type> <name>encp</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>**</type> <name>encoding</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2ctx</name>*</type> <name>ctx</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>xml2enc_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ctx</name> || !(<name><name>ctx</name>-&gt;<name>flags</name></name> &amp; <name>ENC_INITIALISED</name>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>encp</name> = <name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>encoding</name> = <name><name>ctx</name>-&gt;<name>encoding</name></name></expr>;</expr_stmt>
<return>return <expr><call><name>HAVE_ENCODING</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>xml2enc</name></name></expr></argument>)</argument_list></call> ? <name>APR_SUCCESS</name> : <name>APR_EGENERAL</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FLAGS</name></cpp:macro> <cpp:value>AP_FILTER_PROTO_CHANGE|AP_FILTER_PROTO_CHANGE_LENGTH</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>xml2enc_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_output_filter_protocol</name><argument_list>(<argument><expr>"xml2enc"</expr></argument>, <argument><expr><name>xml2enc_ffunc</name></expr></argument>,
<argument><expr><name>xml2enc_filter_init</name></expr></argument>,
<argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>, <argument><expr><name>PROTO_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>xml2enc_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>xml2enc_charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seek_meta_ctype</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
<argument><expr>"(&lt;meta[^&gt;]*http-equiv[ \t\r\n='\"]*content-type[^&gt;]*&gt;)"</expr></argument>,
<argument><expr><name>AP_REG_EXTENDED</name>|<name>AP_REG_ICASE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name>seek_charset</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"charset=([A-Za-z0-9_-]+)"</expr></argument>,
<argument><expr><name>AP_REG_EXTENDED</name>|<name>AP_REG_ICASE</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>set_alias</name><parameter_list>(<param><decl><type><name>cmd_parms</name>*</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>CFG</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>charset</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>alias</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>errmsg</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr> ;</return></then>
<else>else <if>if <condition>(<expr><call><name>xmlAddEncodingAlias</name><argument_list>(<argument><expr><name>charset</name></expr></argument>, <argument><expr><name>alias</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then>
<else>else
<return>return <expr>"Error setting charset alias"</expr>;</return></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>set_default</name><parameter_list>(<param><decl><type><name>cmd_parms</name>*</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>charset</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>default_charset</name></name> = <name>charset</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>default_encoding</name></name> = <call><name>xmlParseCharEncoding</name><argument_list>(<argument><expr><name>charset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch<condition>(<expr><name><name>cfg</name>-&gt;<name>default_encoding</name></name></expr>)</condition> <block>{
<case>case <expr><name>XML_CHAR_ENCODING_NONE</name></expr>:
<return>return <expr>"Default charset not found"</expr>;</return>
</case><case>case <expr><name>XML_CHAR_ENCODING_ERROR</name></expr>:
<return>return <expr>"Invalid or unsupported default charset"</expr>;</return>
</case><default>default:
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>set_skipto</name><parameter_list>(<param><decl><type><name>cmd_parms</name>*</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>tattr</name>*</type> <name>attr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>skipto</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>skipto</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tattr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>attr</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>skipto</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>attr</name>-&gt;<name>val</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>xml2enc_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"xml2EncDefault"</expr></argument>, <argument><expr><name>set_default</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Usage: xml2EncDefault charset"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"xml2EncAlias"</expr></argument>, <argument><expr><name>set_alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"EncodingAlias charset alias [more aliases]"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"xml2StartParse"</expr></argument>, <argument><expr><name>set_skipto</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
<argument><expr>"Ignore anything in front of the first of these elements"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name>*</type> <name>xml2enc_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xml2cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>default_encoding</name></name> = <name>XML_CHAR_ENCODING_NONE</name></expr> ;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name>*</type> <name>xml2enc_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name>*</type> <name>pool</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>BASE</name></decl></param>, <param><decl><type><name>void</name>*</type> <name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>base</name> <init>= <expr><name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>add</name> <init>= <expr><name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>xml2cfg</name>*</type> <name>ret</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xml2cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>default_encoding</name></name> = (<name><name>add</name>-&gt;<name>default_encoding</name></name> == <name>XML_CHAR_ENCODING_NONE</name>)
? <name><name>base</name>-&gt;<name>default_encoding</name></name> : <name><name>add</name>-&gt;<name>default_encoding</name></name></expr> ;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>default_charset</name></name> = <name><name>add</name>-&gt;<name>default_charset</name></name>
? <name><name>add</name>-&gt;<name>default_charset</name></name> : <name><name>base</name>-&gt;<name>default_charset</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>skipto</name></name> = <name><name>add</name>-&gt;<name>skipto</name></name> ? <name><name>add</name>-&gt;<name>skipto</name></name> : <name><name>base</name>-&gt;<name>skipto</name></name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>xml2enc</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>xml2enc_config</name></expr>,
<expr><name>xml2enc_merge</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>xml2enc_cmds</name></expr>,
<expr><name>xml2enc_hooks</name></expr>
}</block></expr>;</expr_stmt>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>xml2enc</argument>, <argument>XML2ENC</argument>, <argument>int</argument>, <argument>preprocess</argument>,
<argument>(ap_filter_t *f, char** bufp, apr_size_t* bytesp)</argument>,
<argument>(f, bufp, bytesp)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
</unit>
