<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/session/mod_session.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MOD_SESSION_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SESSION_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SESSION_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro> <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_NOTES_KEY</name></cpp:macro> <cpp:value>"mod_session_key"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_USER</name></cpp:macro> <cpp:value>"user"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_PW</name></cpp:macro> <cpp:value>"pw"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uuid_t</name> *</type><name>uuid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remote_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>entries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>dirty</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>written</name></decl>;</decl_stmt>
}</block></struct></type> <name>session_rec</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>enabled_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>maxage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>maxage_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>env_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>includes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>excludes</name></decl>;</decl_stmt>
}</block></struct></type> <name>session_dir_conf</name>;</typedef>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_load</argument>,
<argument>(request_rec * r, session_rec ** z)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_save</argument>,
<argument>(request_rec * r, session_rec * z)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_encode</argument>,
<argument>(request_rec * r, session_rec * z)</argument>)</argument_list></macro>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_decode</argument>,
<argument>(request_rec * r, session_rec * z)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(
<argument><expr><name>apr_status_t</name></expr></argument>,
<argument><expr><name>ap_session_get</name></expr></argument>,
<argument><expr>(<name>request_rec</name> * <name>r</name>, <name>session_rec</name> * <name>z</name>, const <name>char</name> *<name>key</name>, const <name>char</name> **<name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_session_set</name></expr></argument>,
<argument><expr>(<name>request_rec</name> * <name>r</name>, <name>session_rec</name> * <name>z</name>, const <name>char</name> *<name>key</name>, const <name>char</name> *<name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_session_load</name></expr></argument>,
<argument><expr>(<name>request_rec</name> *, <name>session_rec</name> **)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_session_save</name></expr></argument>,
<argument><expr>(<name>request_rec</name> *, <name>session_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>session_module</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
