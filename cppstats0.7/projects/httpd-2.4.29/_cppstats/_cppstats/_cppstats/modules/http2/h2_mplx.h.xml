<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/http2/h2_mplx.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__mod_h2__h2_mplx__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_mplx__</name></cpp:macro></cpp:define>
<struct_decl>struct <name>apr_pool_t</name>;</struct_decl>
<struct_decl>struct <name>apr_thread_mutex_t</name>;</struct_decl>
<struct_decl>struct <name>apr_thread_cond_t</name>;</struct_decl>
<struct_decl>struct <name>h2_bucket_beam</name>;</struct_decl>
<struct_decl>struct <name>h2_config</name>;</struct_decl>
<struct_decl>struct <name>h2_ihash_t</name>;</struct_decl>
<struct_decl>struct <name>h2_task</name>;</struct_decl>
<struct_decl>struct <name>h2_stream</name>;</struct_decl>
<struct_decl>struct <name>h2_request</name>;</struct_decl>
<struct_decl>struct <name>apr_thread_cond_t</name>;</struct_decl>
<struct_decl>struct <name>h2_workers</name>;</struct_decl>
<struct_decl>struct <name>h2_iqueue</name>;</struct_decl>
<struct_decl>struct <name>h2_ngn_shed</name>;</struct_decl>
<struct_decl>struct <name>h2_req_engine</name>;</struct_decl>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_queue.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type>struct <name>h2_mplx</name></type> <name>h2_mplx</name>;</typedef>
<struct>struct <name>h2_mplx</name> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>event_pending</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>aborted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>is_registered</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ihash_t</name> *</type><name>streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ihash_t</name> *</type><name>sredo</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ihash_t</name> *</type><name>shold</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ihash_t</name> *</type><name>spurge</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_iqueue</name> *</type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ififo</name> *</type><name>readyq</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ihash_t</name> *</type><name>redo_tasks</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_stream_started</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tasks_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_idle_block</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_limit_change</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>limit_change_interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_thread_cond_t</name> *</type><name>added_output</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_thread_cond_t</name> *</type><name>task_thawed</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_thread_cond_t</name> *</type><name>join_wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>stream_max_mem</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>spare_io_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>spare_slaves</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_workers</name> *</type><name>workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_ngn_shed</name> *</type><name>ngn_shed</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>h2_mplx</name> *</type><name>h2_mplx_create</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>master</name></decl></param>,
<param><decl><type><specifier>const</specifier> struct <name>h2_config</name> *</type><name>conf</name></decl></param>,
<param><decl><type>struct <name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_mplx_release_and_join</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type>struct <name>apr_thread_cond_t</name> *</type><name>wait</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_pop_task</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type>struct <name>h2_task</name> **</type><name>ptask</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_mplx_task_done</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type>struct <name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type>struct <name>h2_task</name> **</type><name>ptask</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_mplx_shutdown</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_mplx_is_busy</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type>struct <name>h2_stream</name> *</type><name>h2_mplx_stream_get</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_stream_cleanup</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type>struct <name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_out_trywait</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>,
<param><decl><type>struct <name>apr_thread_cond_t</name> *</type><name>iowait</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_keep_active</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type>struct <name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_process</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type>struct <name>h2_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><name>h2_stream_pri_cmp</name> *</type><name>cmp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_reprioritize</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type><name>h2_stream_pri_cmp</name> *</type><name>cmp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>stream_ev_callback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type>struct <name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>int</name></type> <name>h2_mplx_has_master_events</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_dispatch_master_events</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>,
<param><decl><type><name>stream_ev_callback</name> *</type><name>on_resume</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_mplx_awaits_data</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> <name>h2_mplx_stream_cb</name><parameter_list>(<param><decl><type>struct <name>h2_stream</name> *</type><name>s</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_stream_do</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>, <param><decl><type><name>h2_mplx_stream_cb</name> *</type><name>cb</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_out_open</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>mplx</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>,
<param><decl><type>struct <name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_LIST_SENTINEL</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_SENTINEL((b), h2_mplx, link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_LIST_EMPTY</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_EMPTY((b), h2_mplx, link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_LIST_FIRST</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_FIRST(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_LIST_LAST</name><parameter_list>(<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_LAST(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_LIST_INSERT_HEAD</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { h2_mplx *ap__b = (e); APR_RING_INSERT_HEAD((b), ap__b, h2_mplx, link); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_LIST_INSERT_TAIL</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { h2_mplx *ap__b = (e); APR_RING_INSERT_TAIL((b), ap__b, h2_mplx, link); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_NEXT</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_NEXT((e), link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_PREV</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_PREV((e), link)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_MPLX_REMOVE</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_RING_REMOVE((e), link)</cpp:value></cpp:define>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_idle</name><parameter_list>(<param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>void</name></type> <name>h2_output_consumed</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>consumed</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_req_engine_init</name><parameter_list>(<param><decl><type>struct <name>h2_req_engine</name> *</type><name>engine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>req_buffer_size</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>h2_output_consumed</name> **</type><name>pconsumed</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>pbaton</name></decl></param>)</parameter_list>;</function_decl></typedef>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_req_engine_push</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ngn_type</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>h2_mplx_req_engine_init</name> *</type><name>einit</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_mplx_req_engine_pull</name><parameter_list>(<param><decl><type>struct <name>h2_req_engine</name> *</type><name>ngn</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>int</name></type> <name>capacity</name></decl></param>,
<param><decl><type><name>request_rec</name> **</type><name>pr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_mplx_req_engine_done</name><parameter_list>(<param><decl><type>struct <name>h2_req_engine</name> *</type><name>ngn</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>r_conn</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
