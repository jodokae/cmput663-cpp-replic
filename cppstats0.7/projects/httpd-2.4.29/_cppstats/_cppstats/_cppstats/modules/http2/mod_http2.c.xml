<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/http2/mod_http2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_optional.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_optional_hooks.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_want.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_alt_svc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_push.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_switch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_version.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>h2_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>http2</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>h2_config_create_dir</name></expr>,
<expr><name>h2_config_merge_dir</name></expr>,
<expr><name>h2_config_create_svr</name></expr>,
<expr><name>h2_config_merge_svr</name></expr>,
<expr><name>h2_cmds</name></expr>,
<expr><name>h2_hooks</name></expr>
}</block></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>change_prio</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>sha256</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>inv_headers</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>dyn_windows</name> : 1</expr>;</expr_stmt>
}</block></struct></type> <name>features</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>features</name></type> <name>myfeats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mpm_warned</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mod_h2_init_key</name> <init>= <expr>"mod_http2_init_counter"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>nghttp2_info</name> *</type><name>ngh2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>)<name>plog</name></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>ptemp</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_CHANGE_PRIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>myfeats</name>.<name>change_prio</name></name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_OPENSSL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>myfeats</name>.<name>sha256</name></name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_INVALID_HEADER_CB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>myfeats</name>.<name>inv_headers</name></name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>H2_NG2_LOCAL_WIN_SIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>myfeats</name>.<name>dyn_windows</name></name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>mod_h2_init_key</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>data</name> == <name>NULL</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03089</expr></argument>)</argument_list></call>
"initializing post config dry run"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *)1</expr></argument>, <argument><expr><name>mod_h2_init_key</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ngh2</name> = <call><name>nghttp2_version</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03090</expr></argument>)</argument_list></call>
"mod_http2 (v%s, feats=%s%s%s%s, nghttp2 %s), initializing..."</expr></argument>,
<argument><expr><name>MOD_HTTP2_VERSION</name></expr></argument>,
<argument><expr><name><name>myfeats</name>.<name>change_prio</name></name>? "CHPRIO" : ""</expr></argument>,
<argument><expr><name><name>myfeats</name>.<name>sha256</name></name>? "+SHA256" : ""</expr></argument>,
<argument><expr><name><name>myfeats</name>.<name>inv_headers</name></name>? "+INVHD" : ""</expr></argument>,
<argument><expr><name><name>myfeats</name>.<name>dyn_windows</name></name>? "+DWINS" : ""</expr></argument>,
<argument><expr><name>ngh2</name>? <name><name>ngh2</name>-&gt;<name>version_str</name></name> : "unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<switch>switch <condition>(<expr><call><name>h2_conn_mpm_type</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
<case>case <expr><name>H2_MPM_SIMPLE</name></expr>:
</case><case>case <expr><name>H2_MPM_MOTORZ</name></expr>:
</case><case>case <expr><name>H2_MPM_NETWARE</name></expr>:
</case><case>case <expr><name>H2_MPM_WINNT</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_MPM_EVENT</name></expr>:
</case><case>case <expr><name>H2_MPM_WORKER</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_MPM_PREFORK</name></expr>:
<break>break;</break>
</case><case>case <expr><name>H2_MPM_UNKNOWN</name></expr>:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03091</expr></argument>)</argument_list></call>
"post_config: mpm type unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<if>if <condition>(<expr>!<call><name>h2_mpm_supported</name><argument_list>()</argument_list></call> &amp;&amp; !<name>mpm_warned</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mpm_warned</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10034</expr></argument>)</argument_list></call>
"The mpm module (%s) is not supported by mod_http2. The mpm determines "
"how things are processed in your server. HTTP/2 has more demands in "
"this regard and the currently selected mpm will just not do. "
"This is an advisory warning. Your server will continue to work, but "
"the HTTP/2 protocol will be inactive."</expr></argument>,
<argument><expr><call><name>h2_conn_mpm_name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>h2_h2_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_switch_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_task_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>char</name> *</type><name>http2_var_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>server_rec</name> *</type></decl></param>,
<param><decl><type><name>conn_rec</name> *</type></decl></param>, <param><decl><type><name>request_rec</name> *</type></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>http2_is_h2</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>http2_req_engine_push</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ngn_type</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>http2_req_engine_init</name> *</type><name>einit</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_mplx_req_engine_push</name><argument_list>(<argument><expr><name>ngn_type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>einit</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>http2_req_engine_pull</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>int</name></type> <name>capacity</name></decl></param>,
<param><decl><type><name>request_rec</name> **</type><name>pr</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_mplx_req_engine_pull</name><argument_list>(<argument><expr><name>ngn</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>http2_req_engine_done</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>ngn</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>r_conn</name></decl></param>,
<param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>h2_mplx_req_engine_done</name><argument_list>(<argument><expr><name>ngn</name></expr></argument>, <argument><expr><name>r_conn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>h2_conn_child_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02949</expr></argument>)</argument_list></call> "initializing connection handling"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>mod_ssl</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_ssl.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_is_h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_req_engine_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_req_engine_pull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_req_engine_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr>"installing hooks"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>h2_post_config</name></expr></argument>, <argument><expr><name>mod_ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>h2_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_h2_register_hooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_switch_register_hooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_task_register_hooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_alt_svc_register_hooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>h2_h2_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>h2_filter_h2_status_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>val_HTTP2</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>ctx</name>? "on" : "off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>val_H2_PUSH</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>task</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name> <init>= <expr><call><name>h2_mplx_stream_get</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>stream</name> &amp;&amp; <name><name>stream</name>-&gt;<name>push_policy</name></name> != <name>H2_PUSH_NONE</name></expr>)</condition><then> <block>{
<return>return <expr>"on"</expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name>c</name> &amp;&amp; <call><name>h2_session_push_enabled</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"on"</expr>;</return>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>cfg</name> <init>= <expr><call><name>h2_config_sget</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cfg</name> &amp;&amp; <call><name>h2_config_geti</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_PUSH</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"on"</expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
<return>return <expr>"off"</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>val_H2_PUSHED</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>task</name> &amp;&amp; !<call><name>H2_STREAM_CLIENT_INITIATED</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"PUSHED"</expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr>""</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>val_H2_PUSHED_ON</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>task</name> &amp;&amp; !<call><name>H2_STREAM_CLIENT_INITIATED</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name> <init>= <expr><call><name>h2_mplx_stream_get</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>initiated_on</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr>""</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>val_H2_STREAM_TAG</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>task</name></expr>)</condition><then> <block>{
<return>return <expr><name><name>task</name>-&gt;<name>id</name></name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr>""</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>val_H2_STREAM_ID</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cp</name> <init>= <expr><call><name>val_H2_STREAM_TAG</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cp</name> &amp;&amp; (<name>cp</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr>'-'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>++<name>cp</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>h2_var_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><struct>struct <name>h2_var_def</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_var_lookup</name> *</type><name>lookup</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>subprocess</name> : 1</expr>;</expr_stmt>
}</block></struct></type> <name>h2_var_def</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>h2_var_def</name></type> <name><name>H2_VARS</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"HTTP2"</expr>, <expr><name>val_HTTP2</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"H2PUSH"</expr>, <expr><name>val_H2_PUSH</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"H2_PUSH"</expr>, <expr><name>val_H2_PUSH</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"H2_PUSHED"</expr>, <expr><name>val_H2_PUSHED</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"H2_PUSHED_ON"</expr>, <expr><name>val_H2_PUSHED_ON</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"H2_STREAM_ID"</expr>, <expr><name>val_H2_STREAM_ID</name></expr>, <expr>1</expr> }</block></expr>,
<expr><block>{ <expr>"H2_STREAM_TAG"</expr>, <expr><name>val_H2_STREAM_TAG</name></expr>, <expr>1</expr> }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>H2_ALEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_ALEN</name><parameter_list>(<param><type><name>a</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(sizeof(a)/sizeof((a)[0]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>http2_is_h2</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_ctx_get</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>master</name></name>? <name><name>c</name>-&gt;<name>master</name></name> : <name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>http2_var_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>name</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>H2_ALEN</name><argument_list>(<argument><expr><name>H2_VARS</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>h2_var_def</name> *</type><name>vdef</name> <init>= <expr>&amp;<name><name>H2_VARS</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>vdef</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr>(<name>r</name>? <call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> :
<call><name>h2_ctx_get</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>master</name></name>? <name><name>c</name>-&gt;<name>master</name></name> : <name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></init></decl>;</decl_stmt>
<return>return <expr>(<name>char</name> *)<call><name><name>vdef</name>-&gt;<name>lookup</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>(<name>char</name>*)""</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>ctx</name> &amp;&amp; <name>i</name> &lt; <call><name>H2_ALEN</name><argument_list>(<argument><expr><name>H2_VARS</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>h2_var_def</name> *</type><name>vdef</name> <init>= <expr>&amp;<name><name>H2_VARS</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>vdef</name>-&gt;<name>subprocess</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name><name>vdef</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><call><name><name>vdef</name>-&gt;<name>lookup</name></name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>,
<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
</unit>
