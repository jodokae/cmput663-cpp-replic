<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/_cppstats/modules/http2/h2_headers.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_headers.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type> <name>is_unsafe</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>(<name><name>conf</name>-&gt;<name>http_conformance</name></name> == <name>AP_HTTP_CONFORMANCE_UNSAFE</name>)</expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_refcount</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>headers</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_bucket_headers</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bucket_read</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>str</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<name>b</name></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>block</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>str</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_bucket</name> *</type> <name>h2_bucket_headers_make</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>h2_headers</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_bucket_headers</name> *</type><name>br</name></decl>;</decl_stmt>
<expr_stmt><expr><name>br</name> = <call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>br</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>br</name>-&gt;<name>headers</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_shared_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>br</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>type</name></name> = &amp;<name>h2_bucket_type_headers</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>apr_bucket</name> *</type> <name>h2_bucket_headers_create</name><parameter_list>(<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>list</name></decl></param>,
<param><decl><type><name>h2_headers</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_INIT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>free</name></name> = <name>apr_bucket_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>list</name></name> = <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>h2_bucket_headers_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>h2_headers</name> *</type><name>h2_bucket_headers_get</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>H2_BUCKET_IS_HEADERS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>((<name>h2_bucket_headers</name> *)<name><name>b</name>-&gt;<name>data</name></name>)-&gt;<name>headers</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>h2_bucket_type_headers</name> <init>= <expr><block>{
<expr>"H2HEADERS"</expr>, <expr>5</expr>, <expr><name>APR_BUCKET_METADATA</name></expr>,
<expr><name>apr_bucket_destroy_noop</name></expr>,
<expr><name>bucket_read</name></expr>,
<expr><name>apr_bucket_setaside_noop</name></expr>,
<expr><name>apr_bucket_split_notimpl</name></expr>,
<expr><name>apr_bucket_shared_copy</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>apr_bucket</name> *</type><name>h2_bucket_headers_beam</name><parameter_list>(<param><decl><type>struct <name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>dest</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_bucket</name> *</type><name>src</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>H2_BUCKET_IS_HEADERS</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>r</name> <init>= <expr>((<name>h2_bucket_headers</name> *)<name><name>src</name>-&gt;<name>data</name></name>)-&gt;<name>headers</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>h2_bucket_headers_create</name><argument_list>(<argument><expr><name><name>dest</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>h2_headers</name> *</type><name>h2_headers_create</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers_in</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>headers</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_headers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>headers</name></name> = (<name>headers_in</name>? <call><name>apr_table_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>headers_in</name></expr></argument>)</argument_list></call>
: <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>notes</name></name> = (<name>notes</name>? <call><name>apr_table_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>notes</name></expr></argument>)</argument_list></call>
: <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
<return>return <expr><name>headers</name></expr>;</return>
}</block></function>
<function><type><name>h2_headers</name> *</type><name>h2_headers_rcreate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>header</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>headers</name> <init>= <expr><call><name>h2_headers_create</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>headers</name>-&gt;<name>status</name></name> == <name>HTTP_FORBIDDEN</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cause</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"ssl-renegotiate-forbidden"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cause</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name><name>headers</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03061</expr></argument>)</argument_list></call>
"h2_headers(%ld): renegotiate forbidden, cause: %s"</expr></argument>,
<argument><expr>(<name>long</name>)<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>cause</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>status</name></name> = <name>H2_ERR_HTTP_1_1_REQUIRED</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>is_unsafe</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>headers</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_HDR_CONFORMANCE</name></expr></argument>,
<argument><expr><name>H2_HDR_CONFORMANCE_UNSAFE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>headers</name></expr>;</return>
}</block></function>
<function><type><name>h2_headers</name> *</type><name>h2_headers_copy</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>h2_headers</name> *</type><name>h</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_headers_create</name><argument_list>(<argument><expr><name><name>h</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><call><name>apr_table_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>headers</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>apr_table_copy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>notes</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>h2_headers</name> *</type><name>h2_headers_die</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>type</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>h2_request</name> *</type><name>req</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_headers</name> *</type><name>headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>date</name></decl>;</decl_stmt>
<expr_stmt><expr><name>headers</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_headers</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>status</name></name> = (<name>type</name> &gt;= 200 &amp;&amp; <name>type</name> &lt; 600)? <name>type</name> : 500</expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>headers</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>headers</name>-&gt;<name>notes</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>date</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_recent_rfc822_date</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name>req</name>? <name><name>req</name>-&gt;<name>request_time</name></name> : <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>headers</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"Date"</expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>headers</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"Server"</expr></argument>, <argument><expr><call><name>ap_get_server_banner</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>headers</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_headers_are_response</name><parameter_list>(<param><decl><type><name>h2_headers</name> *</type><name>headers</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>headers</name>-&gt;<name>status</name></name> &gt;= 200</expr>;</return>
}</block></function>
</unit>
