<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/aaa/mod_access_compat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_BYTEFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_NETINET_IN_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<enum>enum <name>allowdeny_type</name> <block>{
<decl><name>T_ENV</name></decl>,
<decl><name>T_NENV</name></decl>,
<decl><name>T_ALL</name></decl>,
<decl><name>T_IP</name></decl>,
<decl><name>T_HOST</name></decl>,
<decl><name>T_FAIL</name></decl>
}</block>;</enum>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>limited</name></decl>;</decl_stmt>
<union>union <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ipsubnet_t</name> *</type><name>ip</name></decl>;</decl_stmt>
}</block> <decl><name>x</name></decl>;</union>
<enum>enum <name>allowdeny_type</name> <name>type</name>;</enum>
}</block></struct></type> <name>allowdeny</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DENY_THEN_ALLOW</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_THEN_DENY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTUAL_FAILURE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name><name>order</name><index>[<expr><name>METHODS</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>allows</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>denys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name> *</type><name>satisfy</name></decl>;</decl_stmt>
}</block></struct></type> <name>access_compat_dir_conf</name>;</typedef>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>access_compat_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_access_compat_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_compat_dir_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>access_compat_dir_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>access_compat_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>METHODS</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>order</name><index>[<expr><name>i</name></expr>]</index></name> = <name>DENY_THEN_ALLOW</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>allows</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>allowdeny</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>denys</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>allowdeny</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>satisfy</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name><name>conf</name>-&gt;<name>satisfy</name></name></expr></argument>)</argument_list></sizeof> * <name>METHODS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>METHODS</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>satisfy</name><index>[<expr><name>i</name></expr>]</index></name> = <name>SATISFY_NOSPEC</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr>(<name>void</name> *)<name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>order</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dv</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>access_compat_dir_conf</name> *</type><name>d</name> <init>= <expr>(<name>access_compat_dir_conf</name> *) <name>dv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"allow,deny"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>o</name> = <name>ALLOW_THEN_DENY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"deny,allow"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>o</name> = <name>DENY_THEN_ALLOW</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"mutual-failure"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>o</name> = <name>MUTUAL_FAILURE</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr>"unknown order"</expr>;</return></else></if></else></if></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>METHODS</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>limited</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name>i</name>)</expr>)</condition><then>
<expr_stmt><expr><name><name>d</name>-&gt;<name>order</name><index>[<expr><name>i</name></expr>]</index></name> = <name>o</name></expr>;</expr_stmt></then></if></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>satisfy</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dv</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>access_compat_dir_conf</name> *</type><name>d</name> <init>= <expr>(<name>access_compat_dir_conf</name> *) <name>dv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>satisfy</name> <init>= <expr><name>SATISFY_NOSPEC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"all"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>satisfy</name> = <name>SATISFY_ALL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"any"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>satisfy</name> = <name>SATISFY_ANY</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Satisfy either 'any' or 'all'."</expr>;</return>
}</block></else></if></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>METHODS</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>limited</name></name> &amp; (<name>AP_METHOD_BIT</name> &lt;&lt; <name>i</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>d</name>-&gt;<name>satisfy</name><index>[<expr><name>i</name></expr>]</index></name> = <name>satisfy</name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>allow_cmd</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dv</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>from</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>where_c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>access_compat_dir_conf</name> *</type><name>d</name> <init>= <expr>(<name>access_compat_dir_conf</name> *) <name>dv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>allowdeny</name> *</type><name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>where</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>where_c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr>"from"</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>"allow and deny must be followed by 'from'"</expr>;</return></then></if>
<expr_stmt><expr><name>a</name> = (<name>allowdeny</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>info</name></name> ? <name><name>d</name>-&gt;<name>allows</name></name> : <name><name>d</name>-&gt;<name>denys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>x</name>.<name>from</name></name> = <name>where</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>limited</name></name> = <name><name>cmd</name>-&gt;<name>limited</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr>"env=!"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>type</name></name> = <name>T_NENV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>x</name>.<name>from</name></name> += 5</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr>"env="</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>type</name></name> = <name>T_ENV</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>x</name>.<name>from</name></name> += 4</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr>"all"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>type</name></name> = <name>T_ALL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>s</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>s</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_ipsubnet_create</name><argument_list>(<argument><expr>&amp;<name><name>a</name>-&gt;<name>x</name>.<name>ip</name></name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if<condition>(<expr><call><name>APR_STATUS_IS_EINVAL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"An IP address was expected"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name><name>a</name>-&gt;<name>type</name></name> = <name>T_IP</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EINVAL</name><argument_list>(<argument><expr><name>rv</name> = <call><name>apr_ipsubnet_create</name><argument_list>(<argument><expr>&amp;<name><name>a</name>-&gt;<name>x</name>.<name>ip</name></name></expr></argument>, <argument><expr><name>where</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name><name>a</name>-&gt;<name>type</name></name> = <name>T_IP</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>a</name>-&gt;<name>type</name></name> = <name>T_HOST</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>its_an_allow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>access_compat_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"order"</expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_LIMIT</name></expr></argument>,
<argument><expr>"'allow,deny', 'deny,allow', or 'mutual-failure'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"allow"</expr></argument>, <argument><expr><name>allow_cmd</name></expr></argument>, <argument><expr>&amp;<name>its_an_allow</name></expr></argument>, <argument><expr><name>OR_LIMIT</name></expr></argument>,
<argument><expr>"'from' followed by hostnames or IP-address wildcards"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE2</name><argument_list>(<argument><expr>"deny"</expr></argument>, <argument><expr><name>allow_cmd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_LIMIT</name></expr></argument>,
<argument><expr>"'from' followed by hostnames or IP-address wildcards"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Satisfy"</expr></argument>, <argument><expr><name>satisfy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"access policy if both allow and require used ('all' or 'any')"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>in_domain</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>domain</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>what</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>dl</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wl</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>what</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>wl</name> - <name>dl</name>) &gt;= 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr>&amp;<name><name>what</name><index>[<expr><name>wl</name> - <name>dl</name></expr>]</index></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>wl</name> == <name>dl</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>(<name><name>domain</name><index>[<expr>0</expr>]</index></name> == '.' || <name><name>what</name><index>[<expr><name>wl</name> - <name>dl</name> - 1</expr>]</index></name> == '.')</expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr>0</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_allowdeny</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>a</name></decl></param>, <param><decl><type><name>int</name></type> <name>method</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>allowdeny</name> *</type><name>ap</name> <init>= <expr>(<name>allowdeny</name> *) <name><name>a</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>mmask</name> <init>= <expr>(<name>AP_METHOD_BIT</name> &lt;&lt; <name>method</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gothost</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remotehost</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>a</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!(<name>mmask</name> &amp; <name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>limited</name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name>.<name>type</name></expr>)</condition> <block>{
<case>case <expr><name>T_ENV</name></expr>:
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>x</name>.<name>from</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>T_NENV</name></expr>:
<if>if <condition>(<expr>!<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>x</name>.<name>from</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>T_ALL</name></expr>:
<return>return <expr>1</expr>;</return>
</case><case>case <expr><name>T_IP</name></expr>:
<if>if <condition>(<expr><call><name>apr_ipsubnet_test</name><argument_list>(<argument><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>x</name>.<name>ip</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>useragent_addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>T_HOST</name></expr>:
<if>if <condition>(<expr>!<name>gothost</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>remotehost_is_ip</name></decl>;</decl_stmt>
<expr_stmt><expr><name>remotehost</name> = <call><name>ap_get_useragent_host</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REMOTE_DOUBLE_REV</name></expr></argument>,
<argument><expr>&amp;<name>remotehost_is_ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>remotehost</name> == <name>NULL</name>) || <name>remotehost_is_ip</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>gothost</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>gothost</name> = 2</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>gothost</name> == 2) &amp;&amp; <call><name>in_domain</name><argument_list>(<argument><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>x</name>.<name>from</name></name></expr></argument>, <argument><expr><name>remotehost</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>T_FAIL</name></expr>:
<break>break;</break>
</case>}</block></switch>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>access_compat_ap_satisfies</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>access_compat_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>access_compat_dir_conf</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>access_compat_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr><name><name>conf</name>-&gt;<name>satisfy</name><index>[<expr><name><name>r</name>-&gt;<name>method_number</name></name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_dir_access</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><name><name>r</name>-&gt;<name>method_number</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>access_compat_dir_conf</name> *</type><name>a</name> <init>= <expr>(<name>access_compat_dir_conf</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>access_compat_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>a</name>-&gt;<name>order</name><index>[<expr><name>method</name></expr>]</index></name> == <name>ALLOW_THEN_DENY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>HTTP_FORBIDDEN</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>find_allowdeny</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>allows</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>find_allowdeny</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>denys</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>HTTP_FORBIDDEN</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>a</name>-&gt;<name>order</name><index>[<expr><name>method</name></expr>]</index></name> == <name>DENY_THEN_ALLOW</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>find_allowdeny</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>denys</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>HTTP_FORBIDDEN</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>find_allowdeny</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>allows</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>find_allowdeny</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>allows</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>find_allowdeny</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>denys</name></name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <name>OK</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ret</name> = <name>HTTP_FORBIDDEN</name></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>ret</name> == <name>HTTP_FORBIDDEN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01797</expr></argument>)</argument_list></call>
"client denied by server configuration: %s%s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name> ? "" : "uri "</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>filename</name></name> ? <name><name>r</name>-&gt;<name>filename</name></name> : <name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>access_compat_ap_satisfies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_access</name><argument_list>(<argument><expr><name>check_dir_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>access_compat</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_access_compat_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>access_compat_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
