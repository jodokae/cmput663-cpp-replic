<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/aaa/mod_authnz_fcgi.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_fcgi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mmn.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authnz_fcgi_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>backend</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>backend_addrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_authn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_authz</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcgi_provider_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>default_user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>user_expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>authoritative</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>require_basic_auth</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcgi_dir_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>successful_authnz_provider</name></decl>;</decl_stmt>
}</block></struct></type> <name>fcgi_request_notes</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>fcgi_authn_providers</name></decl>, *<decl><type ref="prev"/><name>fcgi_authz_providers</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCGI_IO_TIMEOUT</name></cpp:macro> <cpp:value>apr_time_from_sec(30)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NON200_RESPONSE_BUF_LEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NON200_RESPONSE_BUF_LEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FCGI_BACKEND_REGEX_STR</name></cpp:macro> <cpp:value>"m%^fcgi://(.*):(\\d{1,5})/?$%"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>connect_to_peer</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> **</type><name>newsock</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_sockaddr_t</name> *</type><name>backend_addrs</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>backend_name</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_EINVAL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>connected</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>addr</name> <init>= <expr><name>backend_addrs</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>addr</name> &amp;&amp; !<name>connected</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><name><name>addr</name>-&gt;<name>next</name></name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr><name>newsock</name></expr></argument>, <argument><expr><name><name>addr</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02494</expr></argument>)</argument_list></call> "error creating family %d socket "
"for target %s"</expr></argument>,
<argument><expr><name><name>addr</name>-&gt;<name>family</name></name></expr></argument>, <argument><expr><name>backend_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> = <name><name>addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_opt_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>,
<argument><expr><name>timeout</name> ? <name>timeout</name> : <name><name>r</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_connect</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr>*<name>newsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02495</expr></argument>)</argument_list></call> "attempt to connect to %pI (%s) "
"failed"</expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>backend_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>addr</name> = <name><name>addr</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>connected</name> = 1</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FN_LOG_MARK</name></cpp:undef>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_provider_info</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02496</expr></argument>)</argument_list></call> "name %s, backend %s, host %s, port %d, "
"first address %pI, %c%c"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>host</name></name></expr></argument>,
<argument><expr>(<name>int</name>)<name><name>conf</name>-&gt;<name>port</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>backend_addrs</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>is_authn</name></name> ? 'N' : '_'</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>is_authz</name></name> ? 'Z' : '_'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setupenv</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>apache_role</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"FCGI_ROLE"</expr></argument>, <argument><expr><name>AP_FCGI_AUTHORIZER_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>apache_role</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"FCGI_APACHE_ROLE"</expr></argument>, <argument><expr><name>apache_role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>password</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"REMOTE_PASSWD"</expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"CONTENT_LENGTH"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"PATH_TRANSLATED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"SCRIPT_NAME"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTP_KEEP_ALIVE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTP_TE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTP_TRAILER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTP_TRANSFER_ENCODING"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTP_UPGRADE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"HTTP_CONNECTION"</expr></argument>, <argument><expr>"close"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recv_data</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02497</expr></argument>)</argument_list></call> "Couldn't read from backend %s"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AP_MODULE_MAGIC_AT_LEAST</name><argument_list>(<argument><expr>20130702,2</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rdata</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"FastCGI data received"</expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr>*<name>buflen</name></expr></argument>, <argument><expr><name>AP_LOG_DATA_SHOW_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recv_data_full</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>cumulative_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><name>readlen</name> = <name>buflen</name> - <name>cumulative_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>recv_data</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name> + <name>cumulative_len</name></expr></argument>, <argument><expr>&amp;<name>readlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cumulative_len</name> += <name>readlen</name></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>cumulative_len</name> &lt; <name>buflen</name></expr>)</condition>;</do>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sendv_data</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>,
<param><decl><type>struct <name>iovec</name> *</type><name>vec</name></decl></param>,
<param><decl><type><name>int</name></type> <name>nvec</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>to_write</name> <init>= <expr>0</expr></init>, <name>written</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nvec</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>to_write</name> += <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AP_MODULE_MAGIC_AT_LEAST</name><argument_list>(<argument><expr>20130702,2</expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rdata</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"FastCGI data sent"</expr></argument>,
<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_base</name></expr></argument>, <argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name></expr></argument>, <argument><expr><name>AP_LOG_DATA_SHOW_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<expr_stmt><expr><name>offset</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>to_write</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_sendv</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>vec</name> + <name>offset</name></expr></argument>, <argument><expr><name>nvec</name> - <name>offset</name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02498</expr></argument>)</argument_list></call> "Sending data to %s failed"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>n</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>written</name> += <name>n</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>written</name> &gt;= <name>to_write</name></expr>)</condition><then>
<break>break;</break></then></if>
<for>for (<init><expr><name>i</name> = <name>offset</name></expr>;</init> <condition><expr><name>i</name> &lt; <name>nvec</name></expr>;</condition> <incr/>) <block>{
<if>if <condition>(<expr><name>n</name> &gt;= <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>offset</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> -= <name><name>vec</name><index>[<expr><name>i</name>++</expr>]</index></name>.<name>iov_len</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_len</name> -= <name>n</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name> *) <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iov_base</name> + <name>n</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
}</block></for>
}</block></then></if>
}</block></while>
<expr_stmt><expr>*<name>len</name> = <name>written</name></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_begin_request</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>role</name></decl></param>,
<param><decl><type><name>apr_uint16_t</name></type> <name>request_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>farray</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_begin_request_body</name></type> <name>brb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>abrb</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_BEGIN_REQUEST</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>abrb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_request_body</name><argument_list>(<argument><expr>&amp;<name>brb</name></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_begin_request_body_to_array</name><argument_list>(<argument><expr>&amp;<name>brb</name></expr></argument>, <argument><expr><name>abrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>abrb</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>abrb</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><call><name>sendv_data</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_environment</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_uint16_t</name></type> <name>request_id</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name> <init>= <expr>"send_environment"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>envarr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vec</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_fcgi_header</name></type> <name>header</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>farray</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail_len</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>required_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>next_elem</name></decl>, <decl><type ref="prev"/><name>starting_elem</name></decl>;</decl_stmt>
<expr_stmt><expr><name>envarr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *) <name><name>envarr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APLOG_R_IS_LEVEL</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"%s: '%s': '%s'"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>,
<argument><expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"REMOTE_PASSWD"</expr></argument>)</argument_list></call> ?
"XXXXXXXX" : <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>next_elem</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>avail_len</name> = 16 * 1024</expr>;</expr_stmt>
<while>while <condition>(<expr><name>next_elem</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>starting_elem</name> = <name>next_elem</name></expr>;</expr_stmt>
<expr_stmt><expr><name>required_len</name> = <call><name>ap_fcgi_encoded_env_len</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr><name>avail_len</name></expr></argument>,
<argument><expr>&amp;<name>next_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>required_len</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>next_elem</name> &lt; <name><name>envarr</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02499</expr></argument>)</argument_list></call> "couldn't encode envvar '%s' in %"
<name>APR_SIZE_T_FMT</name> " bytes"</expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>next_elem</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>avail_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>next_elem</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02500</expr></argument>)</argument_list></call> "required len for encoding envvars: %"
<name>APR_SIZE_T_FMT</name> ", %d/%d elems processed so far"</expr></argument>,
<argument><expr><name>required_len</name></expr></argument>, <argument><expr><name>next_elem</name></expr></argument>, <argument><expr><name><name>envarr</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>body</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>required_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_fcgi_encode_env</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>required_len</name></expr></argument>,
<argument><expr>&amp;<name>starting_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>rv</name> == <name>APR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>starting_elem</name> == <name>next_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_PARAMS</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>,
<argument><expr>(<name>apr_uint16_t</name>)<name>required_len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = <name>body</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <name>required_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>sendv_data</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_fcgi_fill_in_header</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>AP_FCGI_PARAMS</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_fcgi_header_to_array</name><argument_list>(<argument><expr>&amp;<name>header</name></expr></argument>, <argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = (<name>void</name> *)<name>farray</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vec</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>farray</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<return>return <expr><call><name>sendv_data</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>vec</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<enum>enum <block>{
<decl><name>HDR_STATE_READING_HEADERS</name></decl>,
<decl><name>HDR_STATE_GOT_CR</name></decl>,
<decl><name>HDR_STATE_GOT_CRLF</name></decl>,
<decl><name>HDR_STATE_GOT_CRLFCR</name></decl>,
<decl><name>HDR_STATE_GOT_LF</name></decl>,
<decl><name>HDR_STATE_DONE_WITH_HEADERS</name></decl>
}</block>;</enum>
<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name> *</type><name>state</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>readbuf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>readlen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>itr</name> <init>= <expr><name>readbuf</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>readlen</name>--</expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>itr</name> == '\r'</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>*<name>state</name></expr>)</condition> <block>{
<case>case <expr><name>HDR_STATE_GOT_CRLF</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_CRLFCR</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_CR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else <if>if <condition>(<expr>*<name>itr</name> == '\n'</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr>*<name>state</name></expr>)</condition> <block>{
<case>case <expr><name>HDR_STATE_GOT_LF</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HDR_STATE_GOT_CR</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_CRLF</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>HDR_STATE_GOT_CRLFCR</name></expr>:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_GOT_LF</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>state</name> = <name>HDR_STATE_READING_HEADERS</name></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr>*<name>state</name> == <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr>++<name>itr</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>state</name> == <name>HDR_STATE_DONE_WITH_HEADERS</name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>handle_response</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl></param>,
<param><decl><type><name>apr_uint16_t</name></type> <name>request_id</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>rspbuf</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>rspbuflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>ob</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>orspbuflen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name> <init>= <expr>"handle_response"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_state</name> <init>= <expr><name>HDR_STATE_READING_HEADERS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_end_of_headers</name> <init>= <expr>0</expr></init>, <name>done</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rspbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>orspbuflen</name> = *<name>rspbuflen</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rspbuflen</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ob</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>done</name> &amp;&amp; <name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>readbuflen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>clen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>rid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>readbuf</name><index>[<expr><name>AP_IOBUFSIZE</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>farray</name><index>[<expr><name>AP_FCGI_HEADER_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>plen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>version</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>recv_data_full</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>farray</name></expr></argument>, <argument><expr><name>AP_FCGI_HEADER_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02501</expr></argument>)</argument_list></call> "%s: Error occurred before reading "
"entire header"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ap_fcgi_header_fields_from_array</name><argument_list>(<argument><expr>&amp;<name>version</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>&amp;<name>rid</name></expr></argument>, <argument><expr>&amp;<name>clen</name></expr></argument>, <argument><expr>&amp;<name>plen</name></expr></argument>,
<argument><expr><name>farray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>version</name> != <name>AP_FCGI_VERSION_1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02502</expr></argument>)</argument_list></call> "%s: Got bogus FastCGI header "
"version %d"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr>(<name>int</name>)<name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>rid</name> != <name>request_id</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02503</expr></argument>)</argument_list></call> "%s: Got bogus FastCGI header "
"request id %d, expected %d"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<label><name>recv_again</name>:</label>
<if>if <condition>(<expr><name>clen</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>readbuf</name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>readbuflen</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>readbuf</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>readbuflen</name> = <name>clen</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>readbuflen</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>recv_data</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>readbuf</name></expr></argument>, <argument><expr>&amp;<name>readbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>readbuf</name><index>[<expr><name>readbuflen</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
<case>case <expr><name>AP_FCGI_STDOUT</name></expr>:
<if>if <condition>(<expr><name>clen</name> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>readbuf</name></expr></argument>,
<argument><expr><name>readbuflen</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>seen_end_of_headers</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><call><name>handle_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>header_state</name></expr></argument>,
<argument><expr><name>readbuf</name></expr></argument>, <argument><expr><name>readbuflen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>st</name> == 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>seen_end_of_headers</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> =
<call><name>ap_scan_script_header_err_brigade_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ob</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02504</expr></argument>)</argument_list></call> "%s: script header "
"parsing -&gt; %d/%d"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rspbuf</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>tmprv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rspbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rspbuflen</name> = <name>orspbuflen</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>tmprv</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>ob</name></expr></argument>, <argument><expr><name>rspbuf</name></expr></argument>, <argument><expr><name>rspbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmprv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>tmprv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02505</expr></argument>)</argument_list></call> "%s: error "
"flattening response body"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02506</expr></argument>)</argument_list></call> "%s: Error parsing "
"script headers from %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>clen</name> &gt; <name>readbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clen</name> -= <name>readbuflen</name></expr>;</expr_stmt>
<goto>goto <name>recv_again</name>;</goto>
}</block></then></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>AP_FCGI_STDERR</name></expr>:
<if>if <condition>(<expr><name>clen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02507</expr></argument>)</argument_list></call> "%s: Logged from %s: '%s'"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>, <argument><expr><name>readbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>clen</name> &gt; <name>readbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>clen</name> -= <name>readbuflen</name></expr>;</expr_stmt>
<goto>goto <name>recv_again</name>;</goto>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>AP_FCGI_END_REQUEST</name></expr>:
<expr_stmt><expr><name>done</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02508</expr></argument>)</argument_list></call> "%s: Got bogus FastCGI record type "
"%d"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>plen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>recv_data_full</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>readbuf</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02509</expr></argument>)</argument_list></call> "%s: Error occurred reading "
"padding"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>ob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; !<name>seen_end_of_headers</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02510</expr></argument>)</argument_list></call> "%s: Never reached end of script headers"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mod_fcgid_modify_auth_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vars</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"Variable-"</expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>vars</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fix_auth_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>vr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name>vr</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"moving %s-&gt;%s"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>key</name> + 9</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>req_rsp</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>apache_role</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>rspbuf</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>rspbuflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name> <init>= <expr>"req_rsp"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>temp_pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>orspbuflen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>saved_subprocess_env</name> <init>=
<expr><call><name>apr_table_copy</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rspbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>orspbuflen</name> = *<name>rspbuflen</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rspbuflen</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>temp_pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setupenv</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>apache_role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>connect_to_peer</name><argument_list>(<argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>backend_addrs</name></name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>, <argument><expr><name>FCGI_IO_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>request_id</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>send_begin_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>AP_FCGI_AUTHORIZER</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02511</expr></argument>)</argument_list></call> "%s: Failed writing request to %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>send_environment</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02512</expr></argument>)</argument_list></call> "%s: Failed writing environment "
"to %s"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rspbuflen</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>rspbuflen</name> = <name>orspbuflen</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>handle_response</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>temp_pool</name></expr></argument>, <argument><expr><name>request_id</name></expr></argument>, <argument><expr><name>rspbuf</name></expr></argument>,
<argument><expr><name>rspbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02514</expr></argument>)</argument_list></call> "%s: Failed handling response "
"from %s"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02515</expr></argument>)</argument_list></call> "%s: Received HTTP status %d"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name> = <name>saved_subprocess_env</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>vars</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>,
<argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>mod_fcgid_modify_auth_header</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>fix_auth_header</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>vars</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>temp_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fcgi_check_authn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name> <init>= <expr>"fcgi_check_authn"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authnz_fcgi_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prov</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>rspbuf</name><index>[<expr><name>NON200_RESPONSE_BUF_LEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rspbuflen</name> <init>= <expr>sizeof <name>rspbuf</name> - 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
<expr_stmt><expr><name>prov</name> = <name>dconf</name> &amp;&amp; <name><name>dconf</name>-&gt;<name>name</name></name> ? <name><name>dconf</name>-&gt;<name>name</name></name> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>prov</name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>prov</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>auth_type</name> = <call><name>ap_auth_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02516</expr></argument>)</argument_list></call> "%s, prov %s, authoritative %s, "
"require-basic %s, user expr? %s type %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>,
<argument><expr><name><name>dconf</name>-&gt;<name>authoritative</name></name> ? "yes" : "no"</expr></argument>,
<argument><expr><name><name>dconf</name>-&gt;<name>require_basic_auth</name></name> ? "yes" : "no"</expr></argument>,
<argument><expr><name><name>dconf</name>-&gt;<name>user_expr</name></name> ? "yes" : "no"</expr></argument>,
<argument><expr><name>auth_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>auth_type</name> &amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>auth_type</name></expr></argument>, <argument><expr>"Basic"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>res</name> = <call><name>ap_get_basic_auth_pw</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>password</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02517</expr></argument>)</argument_list></call> "%s: couldn't retrieve basic auth "
"password"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>require_basic_auth</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>password</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fcgi_authn_providers</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02518</expr></argument>)</argument_list></call> "%s: can't find config for provider %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APLOGrdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_provider_info</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>req_rsp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>password</name></expr></argument>, <argument><expr><name>AP_FCGI_APACHE_ROLE_AUTHENTICATOR_STR</name></expr></argument>,
<argument><expr><name>rspbuf</name></expr></argument>, <argument><expr>&amp;<name>rspbuflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>user_expr</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name> <init>= <expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>user_expr</name></name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>user</name> &amp;&amp; <call><name>strlen</name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02519</expr></argument>)</argument_list></call> "%s: Setting user to '%s'"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>user</name> &amp;&amp; <name><name>dconf</name>-&gt;<name>default_user</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>user</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>default_user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>user</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02520</expr></argument>)</argument_list></call> "%s: Failure extracting user "
"after calling authorizer: user expression "
"yielded empty string (variable not set?)"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02521</expr></argument>)</argument_list></call> "%s: Failure extracting user "
"after calling authorizer: %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>is_authz</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>fcgi_request_notes</name> *</type><name>rnotes</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rnotes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rnotes</name>-&gt;<name>successful_authnz_provider</name></name> = <name><name>conf</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_fcgi_module</name></expr></argument>,
<argument><expr><name>rnotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>rspbuflen</name> &gt; 0 &amp;&amp; !<name><name>dconf</name>-&gt;<name>authoritative</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02522</expr></argument>)</argument_list></call> "%s: Ignoring response body from non-"
"authoritative authorizer"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rspbuflen</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>rspbuflen</name> == sizeof <name>rspbuf</name> - 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02523</expr></argument>)</argument_list></call> "%s: possible overflow handling "
"response body"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>rspbuf</name><index>[<expr><name>rspbuflen</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_custom_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>rspbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></else></if>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name> ?
<name>OK</name> : <name><name>dconf</name>-&gt;<name>authoritative</name></name> ? <name><name>r</name>-&gt;<name>status</name></name> : <name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>fcgi_check_password</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name> <init>= <expr>"fcgi_check_password"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prov</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02524</expr></argument>)</argument_list></call> "%s(%s, XXX): provider %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>prov</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02525</expr></argument>)</argument_list></call> "%s: provider note isn't set"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fcgi_authn_providers</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02526</expr></argument>)</argument_list></call> "%s: can't find config for provider %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APLOGrdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_provider_info</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>req_rsp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>password</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>is_authz</name></name> ? <name>NULL</name> : <name>AP_FCGI_APACHE_ROLE_AUTHENTICATOR_STR</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>is_authz</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>fcgi_request_notes</name> *</type><name>rnotes</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>rnotes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>rnotes</name>-&gt;<name>successful_authnz_provider</name></name> = <name><name>conf</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>authnz_fcgi_module</name></expr></argument>,
<argument><expr><name>rnotes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>AUTH_GRANTED</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AUTH_DENIED</name></expr>;</return>
}</block></else></if></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authn_provider</name></type> <name>fcgi_authn_provider</name> <init>= <expr><block>{
<expr>&amp;<name>fcgi_check_password</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>authz_status</name></type> <name>fcgi_authz_check</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fn</name> <init>= <expr>"fcgi_authz_check"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prov</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_NAME_NOTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>fcgi_provider_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02527</expr></argument>)</argument_list></call> "%s(%s)"</expr></argument>, <argument><expr><name>fn</name></expr></argument>, <argument><expr><name>require_line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>prov</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02528</expr></argument>)</argument_list></call> "%s: provider note isn't set"</expr></argument>, <argument><expr><name>fn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>fcgi_authz_providers</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>conf</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02529</expr></argument>)</argument_list></call> "%s: can't find config for provider %s"</expr></argument>,
<argument><expr><name>fn</name></expr></argument>, <argument><expr><name>prov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APLOGrdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_provider_info</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_DENIED_NO_USER</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>is_authn</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>fcgi_request_notes</name> *</type><name>rnotes</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authnz_fcgi_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rnotes</name>
&amp;&amp; <name><name>rnotes</name>-&gt;<name>successful_authnz_provider</name></name>
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>rnotes</name>-&gt;<name>successful_authnz_provider</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>req_rsp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FCGI_APACHE_ROLE_AUTHORIZER_STR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GRANTED</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTHZ_GENERAL_ERROR</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>AUTHZ_DENIED</name></expr>;</return>
}</block></else></if></else></if>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>fcgi_authz_parse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>require_line</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"mod_authnz_fcgi doesn't support restrictions on providers "
"(i.e., multiple require args)"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authz_provider</name></type> <name>fcgi_authz_provider</name> <init>= <expr><block>{
<expr>&amp;<name>fcgi_authz_check</name></expr>,
<expr>&amp;<name>fcgi_authz_parse</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>fcgi_check_authn_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>d</name></decl></param>,
<param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
<param><decl><type><name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dname</name> <init>= <expr>"AuthnzFcgiCheckAuthnProvider"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_dir_conf</name> *</type><name>dc</name> <init>= <expr><name>d</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ca</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ca</name> &gt;= <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": No provider given"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>name</name></name> = <name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ca</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dc</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ca</name> &lt; <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr>"Options aren't supported with \"None\""</expr>;</return>
}</block></then></if>
}</block></then></if>
<while>while <condition>(<expr><name>ca</name> &lt; <name>argc</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>var</name> <init>= <expr><name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr></init>, *<name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>badarg</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ca</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ca</name> &gt;= <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": "</expr></argument>, <argument><expr><name>var</name></expr></argument>,
<argument><expr>"needs an argument"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>val</name> = <name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ca</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"Authoritative"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>authoritative</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>authoritative</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>badarg</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"DefaultUser"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>default_user</name></name> = <name>val</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"RequireBasicAuth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>require_basic_auth</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>require_basic_auth</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>badarg</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>var</name></expr></argument>, <argument><expr>"UserExpr"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>AP_EXPR_FLAG_DONT_VARY</name> | <name>AP_EXPR_FLAG_RESTRICTED</name>
| <name>AP_EXPR_FLAG_STRING_RESULT</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>user_expr</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
<argument><expr><name>flags</name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s: Error parsing '%s': '%s'"</expr></argument>,
<argument><expr><name>dname</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": Unexpected option '"</expr></argument>,
<argument><expr><name>var</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>badarg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": Bad argument '"</expr></argument>,
<argument><expr><name>val</name></expr></argument>, <argument><expr>"' to option '"</expr></argument>, <argument><expr><name>var</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>fcgi_define_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>d</name></decl></param>,
<param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
<param><decl><type><name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dname</name> <init>= <expr>"AuthnzFcgiDefineProvider"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_rxplus_t</name> *</type><name>fcgi_backend_regex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>stype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_provider_conf</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ca</name> <init>= <expr>0</expr></init>, <name>rc</name></decl>, <decl><type ref="prev"/><name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>fcgi_backend_regex</name> = <call><name>ap_rxplus_compile</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>FCGI_BACKEND_REGEX_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fcgi_backend_regex</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"%s: failed to compile regexec '%s'"</expr></argument>,
<argument><expr><name>dname</name></expr></argument>, <argument><expr><name>FCGI_BACKEND_REGEX_STR</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>ca</name> &gt;= <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": No type given"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>stype</name> = <name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ca</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stype</name></expr></argument>, <argument><expr>"authn"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>is_authn</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stype</name></expr></argument>, <argument><expr>"authz"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>is_authz</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>stype</name></expr></argument>, <argument><expr>"authnz"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>is_authn</name></name> = <name><name>conf</name>-&gt;<name>is_authz</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>dname</name></expr></argument>,
<argument><expr>": Invalid provider type "</expr></argument>,
<argument><expr><name>stype</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name>ca</name> &gt;= <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": No provider name given"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name</name></name> = <name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ca</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ca</name> &gt;= <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr>": No backend-address given"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ap_rxplus_exec</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fcgi_backend_regex</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rc</name> || <call><name>ap_rxplus_nmatch</name><argument_list>(<argument><expr><name>fcgi_backend_regex</name></expr></argument>)</argument_list></call> != 3</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>dname</name></expr></argument>, <argument><expr>": backend-address '"</expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr></argument>,
<argument><expr>"' has invalid form"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>host</name> = <call><name>ap_rxplus_pmatch</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fcgi_backend_regex</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>host</name><index>[<expr>0</expr>]</index></name> == '[' &amp;&amp; <name><name>host</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> == ']'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>host</name> += 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>host</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>port</name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>ap_rxplus_pmatch</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fcgi_backend_regex</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>port</name> &gt; 65535</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>dname</name></expr></argument>, <argument><expr>": backend-address '"</expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr></argument>,
<argument><expr>"' has invalid port"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>backend</name></name> = <name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ca</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name><name>conf</name>-&gt;<name>backend_addrs</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>host</name></name></expr></argument>,
<argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name>|<name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02530</expr></argument>)</argument_list></call> "Address %s could not be resolved"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>backend</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>dname</name></expr></argument>,
<argument><expr>": Error resolving backend address"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ca</name> != <name>argc</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>dname</name></expr></argument>,
<argument><expr>": Unexpected parameter "</expr></argument>,
<argument><expr><name><name>argv</name><index>[<expr><name>ca</name></expr>]</index></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>is_authn</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fcgi_authn_providers</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>fcgi_authn_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>is_authz</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>fcgi_authz_providers</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>fcgi_authz_provider</name></expr></argument>,
<argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>fcgi_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE_ARGV</name><argument_list>(<argument><expr>"AuthnzFcgiDefineProvider"</expr></argument>,
<argument><expr><name>fcgi_define_provider</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Define a FastCGI authn and/or authz provider"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE_ARGV</name><argument_list>(<argument><expr>"AuthnzFcgiCheckAuthnProvider"</expr></argument>,
<argument><expr><name>fcgi_check_authn_provider</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Enable/disable a FastCGI authorizer to handle "
"check_authn phase"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fcgi_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>fcgi_authn_providers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fcgi_authz_providers</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fcgi_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>auth_basic_runs_after_me</name><index>[]</index></name> <init>=
<expr><block>{<expr>"mod_auth_basic.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>fcgi_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>fcgi_check_authn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>auth_basic_runs_after_me</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_conf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcgi_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>fcgi_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>authoritative</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>dconf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_dir_conf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>fcgi_dir_conf</name> *</type><name>a</name> <init>= <expr>(<name>fcgi_dir_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>fcgi_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>fcgi_dir_conf</name> *)<name>basev</name></expr></init>,
*<name>over</name> <init>= <expr>(<name>fcgi_dir_conf</name> *)<name>overridesv</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>over</name>-&gt;<name>name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>over</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authnz_fcgi</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_dir_conf</name></expr>,
<expr><name>merge_dir_conf</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>fcgi_cmds</name></expr>,
<expr><name>fcgi_register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
