<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/aaa/mod_authn_dbm.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_auth.h"</cpp:file></cpp:include>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_authn_cache_store</name></expr></argument>)</argument_list></call> *<name>authn_cache_store</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_CACHE_STORE</name><parameter_list>(<param><type><name>r</name></type></param>,<param><type><name>user</name></type></param>,<param><type><name>realm</name></type></param>,<param><type><name>data</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (authn_cache_store != NULL) authn_cache_store((r), "dbm", (user), (realm), (data))</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pwfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbmtype</name></decl>;</decl_stmt>
}</block></struct></type> <name>authn_dbm_config_rec</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_authn_dbm_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_dbm_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>pwfile</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name> = "default"</expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>authn_dbm_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDBMUserFile"</expr></argument>, <argument><expr><name>ap_set_file_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_dbm_config_rec</name></expr></argument>, <argument><expr><name>pwfile</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_AUTHCFG</name></expr></argument>, <argument><expr>"dbm database file containing user IDs and passwords"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"AuthDBMType"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
<argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>authn_dbm_config_rec</name></expr></argument>, <argument><expr><name>dbmtype</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>OR_AUTHCFG</name></expr></argument>, <argument><expr>"what type of DBM file the user file is"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>authn_dbm_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>fetch_dbm_value</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbmtype</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dbmfile</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>, <param><decl><type><name>char</name> **</type><name>value</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>key</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_open_ex</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>dbmtype</name></expr></argument>, <argument><expr><name>dbmfile</name></expr></argument>, <argument><expr><name>APR_DBM_READONLY</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>key</name>.<name>dptr</name></name> = (<name>char</name>*)<name>user</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NETSCAPE_DBM_COMPAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>key</name>.<name>dsize</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>key</name>.<name>dptr</name></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>*<name>value</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_dbm_fetch</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>val</name>.<name>dptr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>value</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>val</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>val</name>.<name>dsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>check_dbm_pw</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_dbm_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_dbm_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dbm_password</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>colon_pw</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>fetch_dbm_value</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pwfile</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>&amp;<name>dbm_password</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01754</expr></argument>)</argument_list></call>
"could not open dbm (type %s) auth file: %s"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pwfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>dbm_password</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>colon_pw</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>dbm_password</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>colon_pw</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>colon_pw</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>AUTHN_CACHE_STORE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dbm_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_password_validate</name><argument_list>(<argument><expr><name>password</name></expr></argument>, <argument><expr><name>dbm_password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_DENIED</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>AUTH_GRANTED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>authn_status</name></type> <name>get_dbm_realm_hash</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>char</name> **</type><name>rethash</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>authn_dbm_config_rec</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>authn_dbm_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dbm_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>colon_hash</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>fetch_dbm_value</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pwfile</name></name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr>":"</expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;<name>dbm_hash</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01755</expr></argument>)</argument_list></call>
"Could not open dbm (type %s) hash file: %s"</expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>dbmtype</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pwfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_GENERAL_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>dbm_hash</name></expr>)</condition><then> <block>{
<return>return <expr><name>AUTH_USER_NOT_FOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>colon_hash</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>dbm_hash</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>colon_hash</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>colon_hash</name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>rethash</name> = <name>dbm_hash</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AUTHN_CACHE_STORE</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>realm</name></expr></argument>, <argument><expr><name>dbm_hash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>AUTH_USER_FOUND</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>authn_provider</name></type> <name>authn_dbm_provider</name> <init>= <expr><block>{
<expr>&amp;<name>check_dbm_pw</name></expr>,
<expr>&amp;<name>get_dbm_realm_hash</name></expr>,
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>opt_retr</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>authn_cache_store</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_authn_cache_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHN_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"dbm"</expr></argument>,
<argument><expr><name>AUTHN_PROVIDER_VERSION</name></expr></argument>,
<argument><expr>&amp;<name>authn_dbm_provider</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_optional_fn_retrieve</name><argument_list>(<argument><expr><name>opt_retr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>authn_dbm</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_authn_dbm_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>authn_dbm_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
