<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/slotmem/mod_slotmem_shm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_slotmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_IS_PREGRAB</name><parameter_list>(<param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(t-&gt;desc.type &amp; AP_SLOTMEM_TYPE_PREGRAB)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_IS_PERSIST</name><parameter_list>(<param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(t-&gt;desc.type &amp; AP_SLOTMEM_TYPE_PERSIST)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_IS_CLEARINUSE</name><parameter_list>(<param><type><name>t</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(t-&gt;desc.type &amp; AP_SLOTMEM_TYPE_CLEARINUSE)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl>;</decl_stmt>
}</block></struct></type> <name>sharedslotdesc_t</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SLOTMEM_OFFSET</name></cpp:macro> <cpp:value>(APR_ALIGN_DEFAULT(sizeof(sharedslotdesc_t)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_UNSIGNEDINT_OFFSET</name></cpp:macro> <cpp:value>(APR_ALIGN_DEFAULT(sizeof(unsigned int)))</cpp:value></cpp:define>
<struct>struct <name>ap_slotmem_instance_t</name> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>pname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fbased</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>gpool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name> *</type><name>num_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>persist</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sharedslotdesc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_slotmem_instance_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>ap_slotmem_instance_t</name> *</type><name>globallistmem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>gpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SLOTMEM_PREFIX</name></cpp:macro> <cpp:value>"slotmem-shm-"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SLOTMEM_SUFFIX</name></cpp:macro> <cpp:value>".shm"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_SLOTMEM_PERSIST_SUFFIX</name></cpp:macro> <cpp:value>".persist"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SLOTMEM_UNLINK_SEMANTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOTMEM_UNLINK_SEMANTIC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOTMEM_UNLINK_SEMANTIC</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>slotmem_filenames</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>slotname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>filename</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>persistname</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name> <init>= <expr><name>NULL</name></expr></init>, *<name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>slotname</name> &amp;&amp; *<name>slotname</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>slotname</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>slotname</name><index>[<expr>0</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>SLOTMEM_UNLINK_SEMANTIC</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>generation</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_GENERATION</name></expr></argument>, <argument><expr>&amp;<name>generation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fname</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"%s%s_%x%s"</expr></argument>, <argument><expr><name>DEFAULT_SLOTMEM_PREFIX</name></expr></argument>,
<argument><expr><name>slotname</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>DEFAULT_SLOTMEM_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>fname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>DEFAULT_SLOTMEM_PREFIX</name></expr></argument>,
<argument><expr><name>slotname</name></expr></argument>, <argument><expr><name>DEFAULT_SLOTMEM_SUFFIX</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>fname</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>fname</name> = <name>slotname</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>persistname</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>SLOTMEM_UNLINK_SEMANTIC</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>slotname</name><index>[<expr>0</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>DEFAULT_SLOTMEM_PREFIX</name></expr></argument>,
<argument><expr><name>slotname</name></expr></argument>, <argument><expr><name>DEFAULT_SLOTMEM_SUFFIX</name></expr></argument>,
<argument><expr><name>DEFAULT_SLOTMEM_PERSIST_SUFFIX</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pname</name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>pname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>DEFAULT_SLOTMEM_PERSIST_SUFFIX</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>filename</name> = <name>fname</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>persistname</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>persistname</name> = <name>pname</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>fname</name> != <name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>slotmem_clearinuse</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*<name>inuse</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>inuse</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>(*<name><name>slot</name>-&gt;<name>num_free</name></name>)++</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>store_slotmem</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slotmem</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>storename</name> <init>= <expr><name><name>slotmem</name>-&gt;<name>pname</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02334</expr></argument>)</argument_list></call>
"storing %s"</expr></argument>, <argument><expr><name>storename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>storename</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>storename</name></expr></argument>, <argument><expr><name>APR_CREATE</name> | <name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>slotmem</name>-&gt;<name>gpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name>storename</name></expr></argument>, <argument><expr><name><name>slotmem</name>-&gt;<name>gpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>storename</name></expr></argument>, <argument><expr><name>APR_CREATE</name> | <name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>slotmem</name>-&gt;<name>gpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_CLEARINUSE</name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>slotmem_clearinuse</name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nbytes</name> = (<name><name>slotmem</name>-&gt;<name>desc</name>.<name>size</name></name> * <name><name>slotmem</name>-&gt;<name>desc</name>.<name>num</name></name>) +
(<name><name>slotmem</name>-&gt;<name>desc</name>.<name>num</name></name> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof>) + <name>AP_UNSIGNEDINT_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>slotmem</name>-&gt;<name>persist</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>slotmem</name>-&gt;<name>persist</name></name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name>storename</name></expr></argument>, <argument><expr><name><name>slotmem</name>-&gt;<name>gpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>restore_slotmem</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>storename</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbytes</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest2</name><index>[<expr><name>APR_MD5_DIGESTSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02335</expr></argument>)</argument_list></call>
"restoring %s"</expr></argument>, <argument><expr><name>storename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>storename</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>storename</name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_WRITE</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> == <name>APR_SUCCESS</name> || <name>rv</name> == <name>APR_EOF</name>) &amp;&amp; <name>nbytes</name> == <name>size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_eof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>ds</name> <init>= <expr><name>APR_MD5_DIGESTSIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>ds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> == <name>APR_SUCCESS</name> || <name>rv</name> == <name>APR_EOF</name>) &amp;&amp;
<name>ds</name> == <name>APR_MD5_DIGESTSIZE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_md5</name><argument_list>(<argument><expr><name>digest2</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>digest2</name></expr></argument>, <argument><expr><name>APR_MD5_DIGESTSIZE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02551</expr></argument>)</argument_list></call> "bad md5 match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02552</expr></argument>)</argument_list></call> "at EOF... bypassing md5 match check (old persist file?)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>nbytes</name> != <name>size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02553</expr></argument>)</argument_list></call> "Expected %" <name>APR_SIZE_T_FMT</name> ": Read %" <name>APR_SIZE_T_FMT</name></expr></argument>,
<argument><expr><name>size</name></expr></argument>, <argument><expr><name>nbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_slotmem</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> **</type><name>mem</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>mem</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>next</name> <init>= <expr>*<name>mem</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>next</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_PERSIST</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>store_slotmem</name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_shm_destroy</name><argument_list>(<argument><expr>(<name>apr_shm_t</name> *)<name><name>next</name>-&gt;<name>shm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>next</name>-&gt;<name>fbased</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name><name>next</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>next</name>-&gt;<name>gpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>next</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>next</name>-&gt;<name>gpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name>globallistmem</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_doall</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>mem</name></decl></param>,
<param><decl><type><name>ap_slotmem_callback_fn_t</name> *</type><name>func</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>retval</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>mem</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<name><name>mem</name>-&gt;<name>base</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>inuse</name> = <name><name>mem</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>mem</name>-&gt;<name>desc</name>.<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call> ||
(<call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>mem</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>inuse</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>retval</name> = <call><name>func</name><argument_list>(<argument><expr>(<name>void</name> *) <name>ptr</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retval</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> += <name><name>mem</name>-&gt;<name>desc</name>.<name>size</name></name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>retval</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_create</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>new</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>item_size</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>item_num</name></decl></param>,
<param><decl><type><name>ap_slotmem_type_t</name></type> <name>type</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>fbased</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>restored</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sharedslotdesc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>next</name> <init>= <expr><name>globallistmem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>, *<decl><type ref="prev"/><name>pname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_shm_t</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>basesize</name> <init>= <expr>(<name>item_size</name> * <name>item_num</name>)</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name> <init>= <expr><name>AP_SLOTMEM_OFFSET</name> + <name>AP_UNSIGNEDINT_OFFSET</name> +
(<name>item_num</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof>) + <name>basesize</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>persist</name> <init>= <expr>(<name>type</name> &amp; <name>AP_SLOTMEM_TYPE_PERSIST</name>) != 0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>gpool</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>slotmem_filenames</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>fname</name></expr></argument>, <argument><expr><name>persist</name> ? &amp;<name>pname</name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>next</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>new</name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02603</expr></argument>)</argument_list></call>
"create found %s in global list"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>next</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02602</expr></argument>)</argument_list></call>
"create didn't find %s in global list"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>fbased</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>fname</name> = "none"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02300</expr></argument>)</argument_list></call>
"create %s: %"<name>APR_SIZE_T_FMT</name>"/%u"</expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>item_size</name></expr></argument>,
<argument><expr><name>item_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fbased</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_attach</name><argument_list>(<argument><expr>&amp;<name>shm</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>gpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02598</expr></argument>)</argument_list></call>
"apr_shm_attach() succeeded"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_shm_size_get</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call> != <name>size</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_detach</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02599</expr></argument>)</argument_list></call>
"existing shared memory for %s could not be used (failed size check)"</expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>desc</name>.<name>size</name></name> != <name>item_size</name> || <name><name>desc</name>.<name>num</name></name> != <name>item_num</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_detach</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02600</expr></argument>)</argument_list></call>
"existing shared memory for %s could not be used (failed contents check)"</expr></argument>,
<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> += <name>AP_SLOTMEM_OFFSET</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>dsize</name> <init>= <expr><name>size</name> - <name>AP_SLOTMEM_OFFSET</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>fbased</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_shm_remove</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>gpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>shm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>gpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_create</name><argument_list>(<argument><expr>&amp;<name>shm</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>rv</name> == <name>APR_SUCCESS</name> ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr></argument>,
<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02611</expr></argument>)</argument_list></call>
"create: apr_shm_create(%s) %s"</expr></argument>,
<argument><expr><name>fname</name> ? <name>fname</name> : ""</expr></argument>,
<argument><expr><name>rv</name> == <name>APR_SUCCESS</name> ? "succeeded" : "failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name>.<name>size</name></name> = <name>item_size</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name>.<name>num</name></name> = <name>item_num</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>desc</name>.<name>type</name></name> = <name>type</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>&amp;<name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <name>AP_SLOTMEM_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>persist</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>restore_slotmem</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>dsize</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>restored</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02554</expr></argument>)</argument_list></call> "could not restore %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>res</name> = (<name>ap_slotmem_instance_t</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_slotmem_instance_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>pname</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>fbased</name></name> = <name>fbased</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>shm</name></name> = <name>shm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>num_free</name></name> = (<name>unsigned</name> <name>int</name> *)<name>ptr</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>restored</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>res</name>-&gt;<name>num_free</name></name> = <name>item_num</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>res</name>-&gt;<name>persist</name></name> = (<name>void</name> *)<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <name>AP_UNSIGNEDINT_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>base</name></name> = (<name>void</name> *)<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>desc</name></name> = <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>gpool</name></name> = <name>gpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>inuse</name></name> = <name>ptr</name> + <name>basesize</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>globallistmem</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>globallistmem</name> = <name>res</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>next</name>-&gt;<name>next</name></name> = <name>res</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>new</name> = <name>res</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_attach</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> **</type><name>new</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>item_size</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name> *</type><name>item_num</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_slotmem_instance_t</name> *</type><name>next</name> <init>= <expr><name>globallistmem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>sharedslotdesc_t</name></type> <name>desc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_shm_t</name> *</type><name>shm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>gpool</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>slotmem_filenames</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02301</expr></argument>)</argument_list></call>
"attach looking for %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>next</name></expr>)</condition><then> <block>{
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>next</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>new</name> = <name>next</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>item_size</name> = <name><name>next</name>-&gt;<name>desc</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>item_num</name> = <name><name>next</name>-&gt;<name>desc</name>.<name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02302</expr></argument>)</argument_list></call>
"attach found %s: %"<name>APR_SIZE_T_FMT</name>"/%u"</expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr>*<name>item_size</name></expr></argument>, <argument><expr>*<name>item_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>next</name>-&gt;<name>next</name></name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>next</name> = <name><name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_shm_attach</name><argument_list>(<argument><expr>&amp;<name>shm</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>gpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<call><name>apr_shm_baseaddr_get</name><argument_list>(<argument><expr><name>shm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>desc</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <name>AP_SLOTMEM_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name>res</name> = (<name>ap_slotmem_instance_t</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_slotmem_instance_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>gpool</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>fbased</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>shm</name></name> = <name>shm</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>num_free</name></name> = (<name>unsigned</name> <name>int</name> *)<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>persist</name></name> = (<name>void</name> *)<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ptr</name> += <name>AP_UNSIGNEDINT_OFFSET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>base</name></name> = (<name>void</name> *)<name>ptr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>desc</name></name> = <name>desc</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>gpool</name></name> = <name>gpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>inuse</name></name> = <name>ptr</name> + (<name><name>desc</name>.<name>size</name></name> * <name><name>desc</name>.<name>num</name></name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>globallistmem</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>globallistmem</name> = <name>res</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>next</name>-&gt;<name>next</name></name> = <name>res</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>*<name>new</name> = <name>res</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>item_size</name> = <name><name>desc</name>.<name>size</name></name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>item_num</name> = <name><name>desc</name>.<name>num</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02303</expr></argument>)</argument_list></call>
"attach found %s: %"<name>APR_SIZE_T_FMT</name>"/%u"</expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr>*<name>item_size</name></expr></argument>, <argument><expr>*<name>item_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_dptr</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>void</name> **</type><name>mem</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = (<name>char</name> *)<name><name>slot</name>-&gt;<name>base</name></name> + <name><name>slot</name>-&gt;<name>desc</name>.<name>size</name></name> * <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ptr</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>mem</name> = (<name>void</name> *)<name>ptr</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_get</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>dest</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>dest_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name> + <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> &amp;&amp; !*<name>inuse</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>slotmem_dptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inuse</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dest_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_put</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>src</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>src_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name> + <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call> &amp;&amp; !*<name>inuse</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>slotmem_dptr</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inuse</name>=1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>slotmem_num_slots</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>slotmem_num_free_slots</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>AP_SLOTMEM_IS_PREGRAB</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr>*<name><name>slot</name>-&gt;<name>num_free</name></name></expr>;</return></then>
<else>else <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>counter</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name> <init>= <expr><name><name>slot</name>-&gt;<name>inuse</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!*<name>inuse</name></expr>)</condition><then>
<expr_stmt><expr><name>counter</name>++</expr>;</expr_stmt></then></if>
}</block></for>
<return>return <expr><name>counter</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_size_t</name></type> <name>slotmem_slot_size</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>slot</name>-&gt;<name>desc</name>.<name>size</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_grab</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name> *</type><name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>inuse</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!*<name>inuse</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name>i</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02293</expr></argument>)</argument_list></call>
"slotmem(%s) grab failed. Num %u/num_free %u"</expr></argument>,
<argument><expr><name><name>slot</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>slotmem_num_slots</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>slotmem_num_free_slots</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>inuse</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>id</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr>(*<name><name>slot</name>-&gt;<name>num_free</name></name>)--</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_fgrab</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02397</expr></argument>)</argument_list></call>
"slotmem(%s) fgrab failed. Num %u/num_free %u"</expr></argument>,
<argument><expr><name><name>slot</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>slotmem_num_slots</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>slotmem_num_free_slots</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name> + <name>id</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>inuse</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>inuse</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr>(*<name><name>slot</name>-&gt;<name>num_free</name></name>)--</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slotmem_release</name><parameter_list>(<param><decl><type><name>ap_slotmem_instance_t</name> *</type><name>slot</name></decl></param>,
<param><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>inuse</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>slot</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOSHMAVAIL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>inuse</name> = <name><name>slot</name>-&gt;<name>inuse</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name> || !<name><name>inuse</name><index>[<expr><name>id</name></expr>]</index></name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02294</expr></argument>)</argument_list></call>
"slotmem(%s) release failed. Num %u/inuse[%u] %d"</expr></argument>,
<argument><expr><name><name>slot</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><call><name>slotmem_num_slots</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>id</name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>inuse</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>id</name> &gt;= <name><name>slot</name>-&gt;<name>desc</name>.<name>num</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_NOTFOUND</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>inuse</name><index>[<expr><name>id</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr>(*<name><name>slot</name>-&gt;<name>num_free</name></name>)++</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_slotmem_provider_t</name></type> <name>storage</name> <init>= <expr><block>{
<expr>"sharedmem"</expr>,
<expr>&amp;<name>slotmem_doall</name></expr>,
<expr>&amp;<name>slotmem_create</name></expr>,
<expr>&amp;<name>slotmem_attach</name></expr>,
<expr>&amp;<name>slotmem_dptr</name></expr>,
<expr>&amp;<name>slotmem_get</name></expr>,
<expr>&amp;<name>slotmem_put</name></expr>,
<expr>&amp;<name>slotmem_num_slots</name></expr>,
<expr>&amp;<name>slotmem_num_free_slots</name></expr>,
<expr>&amp;<name>slotmem_slot_size</name></expr>,
<expr>&amp;<name>slotmem_grab</name></expr>,
<expr>&amp;<name>slotmem_release</name></expr>,
<expr>&amp;<name>slotmem_fgrab</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_slotmem_provider_t</name> *</type><name>slotmem_shm_getstorage</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr>(&amp;<name>storage</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>slotmem_shm_initgpool</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>gpool</name> = <name>p</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>slotmem_shm_initialize_cleanup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>globallistmem</name></expr></argument>, <argument><expr><name>cleanup_slotmem</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>slotmem_shm_initialize_cleanup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>slotmem_shm_initgpool</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_slotmem_shm_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_slotmem_provider_t</name> *</type><name>storage</name> <init>= <expr><call><name>slotmem_shm_getstorage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"shm"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_VERSION</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>slotmem_shm</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>ap_slotmem_shm_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
