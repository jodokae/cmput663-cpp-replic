<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/ldap/util_ldap.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ldap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ldap_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_LDAP</name></expr></cpp:if>
<cpp:error>#<cpp:directive>error</cpp:directive> mod_ldap requires APR-util to have LDAP support built in</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APR_LDAP_SIZELIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_LDAP_SIZELIMIT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_DEBUG_LEVEL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_OPT_DEBUG</name></cpp:macro> <cpp:value>LDAP_OPT_DEBUG_LEVEL</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_OPT_DEBUG</name></cpp:macro> <cpp:value>LDAP_OPT_DEBUG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_HOPLIMIT_UNSET</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_CHASEREFERRALS_SDKDEFAULT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_CHASEREFERRALS_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_CHASEREFERRALS_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_CONNPOOL_DEFAULT</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LDAP_CONNPOOL_INFINITE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_NETWORK_TIMEOUT</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_CONNECT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_OPT_NETWORK_TIMEOUT</name></cpp:macro> <cpp:value>LDAP_OPT_CONNECT_TIMEOUT</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>ldap_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ldap_cache_mutex_type</name> <init>= <expr>"ldap-cache"</expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>uldap_connection_unbind</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_CACHE_LOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (st-&gt;util_ldap_cache_lock) apr_global_mutex_lock(st-&gt;util_ldap_cache_lock); } while (0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDAP_CACHE_UNLOCK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { if (st-&gt;util_ldap_cache_lock) apr_global_mutex_unlock(st-&gt;util_ldap_cache_lock); } while (0)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>util_ldap_strdup</name> <parameter_list>(<param><decl><type><name>char</name> **</type><name>str</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newstr</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>*<name>str</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr>*<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>str</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>newstr</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>str</name> = <call><name>strdup</name><argument_list>(<argument><expr><name>newstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>util_ldap_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= (1 &lt;&lt; <name>M_GET</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"ldap-status"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>st</name> = (<name>util_ldap_state_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then>
<return>return <expr><name>OK</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>DOCTYPE_HTML_3_2</name>
"&lt;html&gt;&lt;head&gt;&lt;title&gt;LDAP Cache Information&lt;/title&gt;&lt;/head&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;body bgcolor='#ffffff'&gt;&lt;h1 align=center&gt;LDAP Cache Information"
"&lt;/h1&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_cache_display</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>uldap_connection_close</name><parameter_list>(<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>ldc</name>-&gt;<name>keep</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>r</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>freed</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>r</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>uldap_connection_unbind</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>param</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name> <init>= <expr><name>param</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ldc</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>"LDC %pp unbind"</expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ldap_unbind_s</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>ldap</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>bound</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_ldap_rebind_remove</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>rebind_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
static apr_status_t util_ldap_connection_remove (void *param) {
util_ldap_connection_t *ldc = param, *l = NULL, *prev = NULL;
util_ldap_state_t *st;
if (!ldc) return APR_SUCCESS;
st = ldc-&gt;st;
uldap_connection_unbind(ldc);
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
apr_thread_mutex_lock(st-&gt;mutex);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
for (l=st-&gt;connections; l; l=l-&gt;next) {
if (l == ldc) {
if (prev) {
prev-&gt;next = l-&gt;next;
} else {
st-&gt;connections = l-&gt;next;
}
break;
}
prev = l;
}
if (ldc-&gt;bindpw) {
free((void*)ldc-&gt;bindpw);
}
if (ldc-&gt;binddn) {
free((void*)ldc-&gt;binddn);
}
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
apr_thread_mutex_unlock(ldc-&gt;lock);
apr_thread_mutex_unlock(st-&gt;mutex);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
apr_pool_destroy(ldc-&gt;pool);
return APR_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_connection_init</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr>0</expr></init>, <name>ldap_option</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><name>LDAP_VERSION3</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ldap_err_t</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_NETWORK_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type>struct <name>timeval</name></type> <name>connectionTimeout</name> <init>= <expr><block>{<expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>have_client_certs</name> <init>= <expr>!<call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>client_certs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_SOLARIS_LDAPSDK</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>secure</name> <init>= <expr><name>APR_LDAP_NONE</name></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>int</name></type> <name>secure</name> <init>= <expr><name>have_client_certs</name> ? <name>APR_LDAP_NONE</name> : <name><name>ldc</name>-&gt;<name>secure</name></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_ldap_init</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;(<name><name>ldc</name>-&gt;<name>ldap</name></name>)</expr></argument>,
<argument><expr><name><name>ldc</name>-&gt;<name>host</name></name></expr></argument>,
<argument><expr><name>APR_LDAP_SSL</name> == <name><name>ldc</name>-&gt;<name>secure</name></name> ? <name>LDAPS_PORT</name> : <name>LDAP_PORT</name></expr></argument>,
<argument><expr><name>secure</name></expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>NULL</name> == <name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>bound</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>NULL</name> == <name><name>ldc</name>-&gt;<name>reason</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap initialization failed"</expr>;</expr_stmt>
}</block></then></if>
<return>return<expr>(<name>APR_EGENERAL</name>)</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>result</name>-&gt;<name>rc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <name><name>result</name>-&gt;<name>reason</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>bound</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name><name>result</name>-&gt;<name>rc</name></name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>NULL</name> == <name><name>ldc</name>-&gt;<name>ldap</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>bound</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>NULL</name> == <name><name>ldc</name>-&gt;<name>reason</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap initialization failed"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <name><name>result</name>-&gt;<name>reason</name></name></expr>;</expr_stmt>
}</block></else></if>
<return>return<expr>(<name><name>result</name>-&gt;<name>rc</name></name>)</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"LDC %pp init"</expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_ldap_rebind_add</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>rebind_pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>binddn</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>bindpw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01277</expr></argument>)</argument_list></call>
"LDAP: Unable to add rebind cross reference entry. Out of memory?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: Unable to add rebind cross reference entry."</expr>;</expr_stmt>
<return>return<expr>(<name>rc</name>)</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ldap_set_option</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_PROTOCOL_VERSION</name></expr></argument>, <argument><expr>&amp;<name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>have_client_certs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>APR_LDAP_OPT_TLS_CERT</name></expr></argument>,
<argument><expr><name><name>ldc</name>-&gt;<name>client_certs</name></name></expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != <name><name>result</name>-&gt;<name>rc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>( <argument><expr><name>ldc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <name><name>result</name>-&gt;<name>reason</name></name></expr>;</expr_stmt>
<return>return<expr>(<name><name>result</name>-&gt;<name>rc</name></name>)</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>APR_LDAP_NONE</name> != <name><name>ldc</name>-&gt;<name>secure</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SOLARIS_LDAPSDK</name></expr></cpp:if>
&amp;&amp; <name>have_client_certs</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>,
<argument><expr><name>APR_LDAP_OPT_TLS</name></expr></argument>, <argument><expr>&amp;<name><name>ldc</name>-&gt;<name>secure</name></name></expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != <name><name>result</name>-&gt;<name>rc</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>( <argument><expr><name>ldc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <name><name>result</name>-&gt;<name>reason</name></name></expr>;</expr_stmt>
<return>return<expr>(<name><name>result</name>-&gt;<name>rc</name></name>)</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>ldap_option</name> = <name><name>ldc</name>-&gt;<name>deref</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldap_set_option</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_DEREF</name></expr></argument>, <argument><expr>&amp;<name>ldap_option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> != <name>AP_LDAP_CHASEREFERRALS_SDKDEFAULT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01278</expr></argument>)</argument_list></call>
"LDAP: Setting referrals to %s."</expr></argument>,
<argument><expr>((<name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name>) ? "On" : "Off")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>,
<argument><expr><name>APR_LDAP_OPT_REFERRALS</name></expr></argument>,
<argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>(<name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name>) ?
<name>LDAP_OPT_ON</name> : <name>LDAP_OPT_OFF</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>result</name>-&gt;<name>rc</name></name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01279</expr></argument>)</argument_list></call>
"Unable to set LDAP_OPT_REFERRALS option to %s: %d."</expr></argument>,
<argument><expr>((<name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name>) ? "On" : "Off")</expr></argument>,
<argument><expr><name><name>result</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>reason</name></name> = "Unable to set LDAP_OPT_REFERRALS."</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <name><name>result</name>-&gt;<name>reason</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<name><name>result</name>-&gt;<name>rc</name></name>)</expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>ldc</name>-&gt;<name>ReferralHopLimit</name></name> != <name>AP_LDAP_HOPLIMIT_UNSET</name>) &amp;&amp; <name><name>ldc</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01280</expr></argument>)</argument_list></call>
"Setting referral hop limit to %d."</expr></argument>,
<argument><expr><name><name>ldc</name>-&gt;<name>ReferralHopLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>,
<argument><expr><name>APR_LDAP_OPT_REFHOPLIMIT</name></expr></argument>,
<argument><expr>(<name>void</name> *)&amp;<name><name>ldc</name>-&gt;<name>ReferralHopLimit</name></name></expr></argument>,
<argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>result</name>-&gt;<name>rc</name></name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01281</expr></argument>)</argument_list></call>
"Unable to set LDAP_OPT_REFHOPLIMIT option to %d: %d."</expr></argument>,
<argument><expr><name><name>ldc</name>-&gt;<name>ReferralHopLimit</name></name></expr></argument>,
<argument><expr><name><name>result</name>-&gt;<name>rc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>reason</name></name> = "Unable to set LDAP_OPT_REFHOPLIMIT."</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <name><name>result</name>-&gt;<name>reason</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return<expr>(<name><name>result</name>-&gt;<name>rc</name></name>)</expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_LDAP_OPT_VERIFY_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>APR_LDAP_OPT_VERIFY_CERT</name></expr></argument>,
<argument><expr>&amp;(<name><name>st</name>-&gt;<name>verify_svr_cert</name></name>)</expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAPSSL_VERIFY_SERVER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>verify_svr_cert</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>rc</name></name> = <call><name>ldapssl_set_verify_mode</name><argument_list>(<argument><expr><name>LDAPSSL_VERIFY_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>result</name>-&gt;<name>rc</name></name> = <call><name>ldapssl_set_verify_mode</name><argument_list>(<argument><expr><name>LDAPSSL_VERIFY_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_X_TLS_REQUIRE_CERT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>verify_svr_cert</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>LDAP_OPT_X_TLS_DEMAND</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>rc</name></name> = <call><name>ldap_set_option</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LDAP_OPT_X_TLS_REQUIRE_CERT</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>LDAP_OPT_X_TLS_NEVER</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>result</name>-&gt;<name>rc</name></name> = <call><name>ldap_set_option</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LDAP_OPT_X_TLS_REQUIRE_CERT</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_NETWORK_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>connectionTimeout</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>connectionTimeout</name>.<name>tv_sec</name></name> = <name><name>st</name>-&gt;<name>connectionTimeout</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>connectionTimeout</name>.<name>tv_sec</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_NETWORK_TIMEOUT</name></expr></argument>,
<argument><expr>(<name>void</name> *)&amp;<name>connectionTimeout</name></expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01282</expr></argument>)</argument_list></call>
"LDAP: Could not set the connection timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_TIMEOUT</name></expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> != <name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01283</expr></argument>)</argument_list></call>
"LDAP: Could not set LDAP_OPT_TIMEOUT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return<expr>(<name>rc</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_ld_errno</name><parameter_list>(<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ldaprc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_ERROR_NUMBER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> == <call><name>ldap_get_option</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_ERROR_NUMBER</name></expr></argument>, <argument><expr>&amp;<name>ldaprc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>ldaprc</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_RESULT_CODE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> == <call><name>ldap_get_option</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>LDAP_OPT_RESULT_CODE</name></expr></argument>, <argument><expr>&amp;<name>ldaprc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>ldaprc</name></expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>LDAP_OTHER</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_simple_bind</name><parameter_list>(<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>, <param><decl><type><name>char</name> *</type><name>binddn</name></decl></param>,
<param><decl><type><name>char</name>*</type> <name>bindpw</name></decl></param>, <param><decl><type>struct <name>timeval</name> *</type><name>timeout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>LDAPMessage</name> *</type><name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>msgid</name> <init>= <expr><call><name>ldap_simple_bind</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>binddn</name></expr></argument>, <argument><expr><name>bindpw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>msgid</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap_simple_bind() failed"</expr>;</expr_stmt>
<return>return <expr><call><name>uldap_ld_errno</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>ldap_result</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>msgid</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr>&amp;<name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap_simple_bind() result retrieval failed"</expr>;</expr_stmt>
<return>return <expr><call><name>uldap_ld_errno</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap_simple_bind() timed out"</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <name>LDAP_TIMEOUT</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ldap_parse_result</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr>&amp;<name>rc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap_simple_bind() parse result failed"</expr>;</expr_stmt>
<return>return <expr><call><name>uldap_ld_errno</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>last_backend_conn</name></name> = <name><name>ldc</name>-&gt;<name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>"LDC %pp bind"</expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_connection_open</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>new_connection</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>ldc</name></expr>)</condition><then> <block>{
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>ldc</name>-&gt;<name>bound</name></name> &amp;&amp; !<name><name>ldc</name>-&gt;<name>must_rebind</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: connection open successful (already bound)"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_SUCCESS</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>NULL</name> == <name><name>ldc</name>-&gt;<name>ldap</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_connection</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>uldap_connection_init</name><argument_list>( <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != <name>rc</name></expr>)</condition><then> <block>{
<return>return <expr><name>rc</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>st</name> = (<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>failures</name> &lt;= <name><name>st</name>-&gt;<name>retries</name></name></expr>)</condition> <block>{
<if>if <condition>(<expr><name>failures</name> &gt; 0 &amp;&amp; <name><name>st</name>-&gt;<name>retry_delay</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>retry_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>uldap_simple_bind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>, <argument><expr>(<name>char</name> *)<name><name>ldc</name>-&gt;<name>binddn</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name><name>ldc</name>-&gt;<name>bindpw</name></name></expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> == <name>LDAP_SUCCESS</name></expr>)</condition><then> <break>break;</break></then></if>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ldap_simple_bind() failed with server down "
"(try %d)"</expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rc</name> == <name>LDAP_TIMEOUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01284</expr></argument>)</argument_list></call>
"ldap_simple_bind() timed out on %s "
"connection, dropped by firewall?"</expr></argument>,
<argument><expr><name>new_connection</name> ? "new" : "reused"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if></else></if>
<if>if <condition>(<expr>!(<name>failures</name> % 2)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"attempt to re-init the connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != <call><name>uldap_connection_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != <name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: ldap_simple_bind() failed"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>bound</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>must_rebind</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "LDAP: connection open successful"</expr>;</expr_stmt>
}</block></else></if>
<return>return<expr>(<name>rc</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>compare_client_certs</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>srcs</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>dests</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_ldap_opt_tls_cert_t</name> *</type><name>src</name></decl>, *<decl><type ref="prev"/><name>dest</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>srcs</name> == <name>NULL</name> &amp;&amp; <name>dests</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>srcs</name> == <name>NULL</name> || <name>dests</name> == <name>NULL</name> || <name><name>srcs</name>-&gt;<name>nelts</name></name> != <name><name>dests</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>src</name> = (struct <name>apr_ldap_opt_tls_cert_t</name> *)<name><name>srcs</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dest</name> = (struct <name>apr_ldap_opt_tls_cert_t</name> *)<name><name>dests</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>srcs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<call><name>strcmp</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name>.<name>path</name></expr></argument>)</argument_list></call>) ||
(<name><name>src</name><index>[<expr><name>i</name></expr>]</index></name>.<name>type</name> != <name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name>.<name>type</name>) ||
((<name><name>src</name><index>[<expr><name>i</name></expr>]</index></name>.<name>password</name> == <name>NULL</name>) ^ (<name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name>.<name>password</name> == <name>NULL</name>)) ||
(<name><name>src</name><index>[<expr><name>i</name></expr>]</index></name>.<name>password</name> != <name>NULL</name> &amp;&amp; <name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name>.<name>password</name> != <name>NULL</name> &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name>.<name>password</name></expr></argument>, <argument><expr><name><name>dest</name><index>[<expr><name>i</name></expr>]</index></name>.<name>password</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>util_ldap_connection_t</name> *</type>
<name>uldap_connection_find</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name></decl></param>, <param><decl><type><name>int</name></type> <name>port</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>binddn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bindpw</name></decl></param>,
<param><decl><type><name>deref_options</name></type> <name>deref</name></decl></param>, <param><decl><type><name>int</name></type> <name>secure</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>util_ldap_connection_t</name> *</type><name>l</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secureflag</name> <init>= <expr><name>secure</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_config_t</name> *</type><name>dc</name> <init>=
<expr>(<name>util_ldap_config_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>secure</name> &lt; <name>APR_LDAP_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>secureflag</name> = <name><name>st</name>-&gt;<name>secure</name></name></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>l</name>=<name><name>st</name>-&gt;<name>connections</name></name></expr>,<expr><name>p</name>=<name>NULL</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name>=<name><name>l</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <call><name>apr_thread_mutex_trylock</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>( <expr>(<name><name>l</name>-&gt;<name>port</name></name> == <name>port</name>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>host</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call> == 0)
&amp;&amp; ((!<name><name>l</name>-&gt;<name>binddn</name></name> &amp;&amp; !<name>binddn</name>) || (<name><name>l</name>-&gt;<name>binddn</name></name> &amp;&amp; <name>binddn</name>
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>binddn</name></name></expr></argument>, <argument><expr><name>binddn</name></expr></argument>)</argument_list></call>))
&amp;&amp; ((!<name><name>l</name>-&gt;<name>bindpw</name></name> &amp;&amp; !<name>bindpw</name>) || (<name><name>l</name>-&gt;<name>bindpw</name></name> &amp;&amp; <name>bindpw</name>
&amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>bindpw</name></name></expr></argument>, <argument><expr><name>bindpw</name></expr></argument>)</argument_list></call>))
&amp;&amp; (<name><name>l</name>-&gt;<name>deref</name></name> == <name>deref</name>) &amp;&amp; (<name><name>l</name>-&gt;<name>secure</name></name> == <name>secureflag</name>)
&amp;&amp; !<call><name>compare_client_certs</name><argument_list>(<argument><expr><name><name>dc</name>-&gt;<name>client_certs</name></name></expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>client_certs</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>connection_pool_ttl</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>l</name>-&gt;<name>bound</name></name> &amp;&amp; (<name>now</name> - <name><name>l</name>-&gt;<name>last_backend_conn</name></name>) &gt; <name><name>st</name>-&gt;<name>connection_pool_ttl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Removing LDAP connection last used %" <name>APR_TIME_T_FMT</name> " seconds ago"</expr></argument>,
<argument><expr>(<name>now</name> - <name><name>l</name>-&gt;<name>last_backend_conn</name></name>) / <name>APR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Reuse %s LDC %pp"</expr></argument>,
<argument><expr><name><name>l</name>-&gt;<name>bound</name></name> ? "bound" : "unbound"</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> = <name>l</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>l</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>l</name>=<name><name>st</name>-&gt;<name>connections</name></name></expr>,<expr><name>p</name>=<name>NULL</name></expr>;</init> <condition><expr><name>l</name></expr>;</condition> <incr><expr><name>l</name>=<name><name>l</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <call><name>apr_thread_mutex_trylock</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name><name>l</name>-&gt;<name>port</name></name> == <name>port</name>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>host</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call> == 0) &amp;&amp;
(<name><name>l</name>-&gt;<name>deref</name></name> == <name>deref</name>) &amp;&amp; (<name><name>l</name>-&gt;<name>secure</name></name> == <name>secureflag</name>) &amp;&amp;
!<call><name>compare_client_certs</name><argument_list>(<argument><expr><name><name>dc</name>-&gt;<name>client_certs</name></name></expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>client_certs</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>connection_pool_ttl</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>l</name>-&gt;<name>bound</name></name> &amp;&amp; (<name>now</name> - <name><name>l</name>-&gt;<name>last_backend_conn</name></name>) &gt; <name><name>st</name>-&gt;<name>connection_pool_ttl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Removing LDAP connection last used %" <name>APR_TIME_T_FMT</name> " seconds ago"</expr></argument>,
<argument><expr>(<name>now</name> - <name><name>l</name>-&gt;<name>last_backend_conn</name></name>) / <name>APR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Reuse %s LDC %pp (will rebind)"</expr></argument>,
<argument><expr><name><name>l</name>-&gt;<name>bound</name></name> ? "bound" : "unbound"</expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>l</name>-&gt;<name>must_rebind</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ldap_strdup</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;(<name><name>l</name>-&gt;<name>binddn</name></name>)</expr></argument>, <argument><expr><name>binddn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ldap_strdup</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;(<name><name>l</name>-&gt;<name>bindpw</name></name>)</expr></argument>, <argument><expr><name>bindpw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>p</name> = <name>l</name></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<if>if <condition>(<expr>!<name>l</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>newpool</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>newpool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01285</expr></argument>)</argument_list></call>
"util_ldap: Failed to create memory pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>l</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>newpool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>util_ldap_connection_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>pool</name></name> = <name>newpool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>st</name></name> = <name>st</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>l</name>-&gt;<name>lock</name></name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>l</name>-&gt;<name>bound</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>host</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>deref</name></name> = <name>deref</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ldap_strdup</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;(<name><name>l</name>-&gt;<name>binddn</name></name>)</expr></argument>, <argument><expr><name>binddn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ldap_strdup</name><argument_list>(<argument><expr>(<name>char</name>**)&amp;(<name><name>l</name>-&gt;<name>bindpw</name></name>)</expr></argument>, <argument><expr><name>bindpw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>ChaseReferrals</name></name> = <name><name>dc</name>-&gt;<name>ChaseReferrals</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>ReferralHopLimit</name></name> = <name><name>dc</name>-&gt;<name>ReferralHopLimit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>secure</name></name> = <name>secureflag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>client_certs</name></name> = <call><name>apr_array_copy_hdr</name><argument_list>(<argument><expr><name><name>l</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dc</name>-&gt;<name>client_certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>l</name>-&gt;<name>keep</name></name> = (<name><name>st</name>-&gt;<name>connection_pool_ttl</name></name> == 0) ? 0 : 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>l</name>-&gt;<name>ChaseReferrals</name></name> == <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;(<name><name>l</name>-&gt;<name>rebind_pool</name></name>)</expr></argument>, <argument><expr><name><name>l</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01286</expr></argument>)</argument_list></call>
"util_ldap: Failed to create memory pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name>l</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>connections</name></name> = <name>l</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>l</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<return>return <expr><name>l</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_cache_comparedn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reqdn</name></decl></param>, <param><decl><type><name>int</name></type> <name>compare_dn_on_server</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name></type> <name>curnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_dn_compare_node_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_dn_compare_node_t</name></type> <name>newnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LDAPMessage</name> *</type><name>res</name></decl>, *<decl><type ref="prev"/><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>searchdn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curnode</name>.<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr></argument>, <argument><expr>&amp;<name>curnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_create_caches</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>compare_dn_on_server</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><name>reqdn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison FALSE (direct strcmp())"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_COMPARE_FALSE</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison TRUE (direct strcmp())"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_COMPARE_TRUE</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newnode</name>.<name>reqdn</name></name> = (<name>char</name> *)<name>reqdn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>dn_compare_cache</name></name></expr></argument>, <argument><expr>&amp;<name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>node</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison TRUE (cached)"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_COMPARE_TRUE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<label><name>start_over</name>:</label>
<if>if <condition>(<expr><name>failures</name> &gt; <name><name>st</name>-&gt;<name>retries</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>failures</name> &gt; 0 &amp;&amp; <name><name>st</name>-&gt;<name>retry_delay</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>retry_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != (<name>result</name> = <call><name>uldap_connection_open</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ldap_search_ext_s</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>reqdn</name></expr></argument>, <argument><expr><name>LDAP_SCOPE_BASE</name></expr></argument>,
<argument><expr>"(objectclass=*)"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr></argument>, <argument><expr><name>APR_LDAP_SIZELIMIT</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison ldap_search_ext_s() "
"failed with server down"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>LDAP_TIMEOUT</name> &amp;&amp; <name>failures</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison ldap_search_ext_s() "
"failed with timeout"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison ldap_search_ext_s() failed"</expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>last_backend_conn</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>ldap_first_entry</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>searchdn</name> = <call><name>ldap_get_dn</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><name>searchdn</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison FALSE (checked on server)"</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>LDAP_COMPARE_FALSE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newnode</name>.<name>reqdn</name></name> = (<name>char</name> *)<name>reqdn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newnode</name>.<name>dn</name></name> = (<name>char</name> *)<name>dn</name></expr>;</expr_stmt>
<expr_stmt><expr><name>node</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>dn_compare_cache</name></name></expr></argument>, <argument><expr>&amp;<name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr>(<name>node</name> == <name>NULL</name>)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name>reqdn</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>reqdn</name></name></expr></argument>)</argument_list></call> != 0)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name>dn</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_insert</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>dn_compare_cache</name></name></expr></argument>, <argument><expr>&amp;<name>newnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN Comparison TRUE (checked on server)"</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>LDAP_COMPARE_TRUE</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>searchdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_cache_compare</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attrib</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name></type> <name>curnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>compare_nodep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_node_t</name></type> <name>the_compare_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>curtime</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curnode</name>.<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr></argument>, <argument><expr>&amp;<name>curnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_create_caches</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>curtime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>dn</name></name> = (<name>char</name> *)<name>dn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>attrib</name></name> = (<name>char</name> *)<name>attrib</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>value</name></name> = (<name>char</name> *)<name>value</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>result</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>sgl_processed</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>subgroupList</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compare_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>compare_nodep</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>curtime</name> - <name><name>compare_nodep</name>-&gt;<name>lastcompare</name></name> &gt; <name><name>st</name>-&gt;<name>compare_cache_ttl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_remove</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>, <argument><expr><name>compare_nodep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>LDAP_COMPARE_TRUE</name> == <name><name>compare_nodep</name>-&gt;<name>result</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison true (cached)"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>LDAP_COMPARE_FALSE</name> == <name><name>compare_nodep</name>-&gt;<name>result</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison false (cached)"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>LDAP_NO_SUCH_ATTRIBUTE</name> == <name><name>compare_nodep</name>-&gt;<name>result</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison no such attribute (cached)"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Comparison undefined: (%d): %s (adding to cache)"</expr></argument>,
<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name>result</name> = <name><name>compare_nodep</name>-&gt;<name>result</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ldap_compare_s(%pp, %s, %s, %s) = %s (cached)"</expr></argument>,
<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<label><name>start_over</name>:</label>
<if>if <condition>(<expr><name>failures</name> &gt; <name><name>st</name>-&gt;<name>retries</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>failures</name> &gt; 0 &amp;&amp; <name><name>st</name>-&gt;<name>retry_delay</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>retry_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != (<name>result</name> = <call><name>uldap_connection_open</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ldap_compare_s</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>dn</name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>attrib</name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_compare_s() failed with server down"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>LDAP_TIMEOUT</name> &amp;&amp; <name>failures</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_compare_s() failed with timeout"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>last_backend_conn</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison complete"</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>LDAP_COMPARE_TRUE</name> == <name>result</name>) ||
(<name>LDAP_COMPARE_FALSE</name> == <name>result</name>) ||
(<name>LDAP_NO_SUCH_ATTRIBUTE</name> == <name>result</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>lastcompare</name></name> = <name>curtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>result</name></name> = <name>result</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>sgl_processed</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>subgroupList</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compare_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr>(<name>compare_nodep</name> == <name>NULL</name>)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>the_compare_node</name>.<name>dn</name></name></expr></argument>, <argument><expr><name><name>compare_nodep</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> != 0)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>the_compare_node</name>.<name>attrib</name></name></expr></argument>,<argument><expr><name><name>compare_nodep</name>-&gt;<name>attrib</name></name></expr></argument>)</argument_list></call> != 0)
|| (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>the_compare_node</name>.<name>value</name></name></expr></argument>, <argument><expr><name><name>compare_nodep</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>junk</name></decl>;</decl_stmt>
<expr_stmt><expr><name>junk</name> = <call><name>util_ald_cache_insert</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>junk</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01287</expr></argument>)</argument_list></call>
"cache_compare: Cache insertion failure."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>compare_nodep</name>-&gt;<name>lastcompare</name></name> = <name>curtime</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>compare_nodep</name>-&gt;<name>result</name></name> = <name>result</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>LDAP_COMPARE_TRUE</name> == <name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison true (adding to cache)"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>LDAP_COMPARE_FALSE</name> == <name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison false (adding to cache)"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>LDAP_NO_SUCH_ATTRIBUTE</name> == <name>result</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Comparison no such attribute (adding to cache)"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Comparison undefined: (%d): %s (adding to cache)"</expr></argument>,
<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"ldap_compare_s(%pp, %s, %s, %s) = %s"</expr></argument>,
<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>util_compare_subgroup_t</name>*</type> <name>uldap_get_subgroups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>subgroupAttrs</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>subgroupclasses</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>LDAP_COMPARE_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_subgroup_t</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LDAPMessage</name> *</type><name>sga_res</name></decl>, *<decl><type ref="prev"/><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>sgc_ents</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>subgroups</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>sgc_ents</name> = (struct <name>mod_auth_ldap_groupattr_entry_t</name> *) <name><name>subgroupclasses</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>subgroupAttrs</name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<label><name>start_over</name>:</label>
<if>if <condition>(<expr><name>failures</name> &gt; <name><name>st</name>-&gt;<name>retries</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>failures</name> &gt; 0 &amp;&amp; <name><name>st</name>-&gt;<name>retry_delay</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>retry_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != (<name>result</name> = <call><name>uldap_connection_open</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ldap_search_ext_s</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>dn</name></expr></argument>, <argument><expr><name>LDAP_SCOPE_BASE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>subgroupAttrs</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_LDAP_SIZELIMIT</name></expr></argument>, <argument><expr>&amp;<name>sga_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for subgroups failed with server"
" down"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>LDAP_TIMEOUT</name> &amp;&amp; <name>failures</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for subgroups failed with timeout"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for subgroups failed"</expr>;</expr_stmt>
<return>return <expr><name>res</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>last_backend_conn</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry</name> = <call><name>ldap_first_entry</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>sga_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>subgroupAttrs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>indx</name> <init>= <expr>0</expr></init>, <name>tmp_sgcIndex</name></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>subgroupAttrs</name><index>[<expr><name>indx</name></expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val_index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>values</name> = <call><name>ldap_get_values</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>subgroupAttrs</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>values</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>val_index</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>values</name><index>[<expr><name>val_index</name></expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name>tmp_sgcIndex</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <name>LDAP_COMPARE_FALSE</name></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>tmp_sgcIndex</name> &lt; <name><name>subgroupclasses</name>-&gt;<name>nelts</name></name>)
&amp;&amp; (<name>result</name> != <name>LDAP_COMPARE_TRUE</name>)</expr>)</condition> <block>{
<expr_stmt><expr><name>result</name> = <call><name>uldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name><name>values</name><index>[<expr><name>val_index</name></expr>]</index></name></expr></argument>,
<argument><expr>"objectClass"</expr></argument>,
<argument><expr><name><name>sgc_ents</name><index>[<expr><name>tmp_sgcIndex</name></expr>]</index></name>.<name>name</name></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tmp_sgcIndex</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>result</name> == <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>newgrp</name> <init>= <expr>(<name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>subgroups</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>newgrp</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>val_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>val_index</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ldap_value_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>indx</name>++</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>sga_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>subgroups</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>sgindex</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> **</type><name>group</name></decl>;</decl_stmt>
<expr_stmt><expr><name>res</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>util_compare_subgroup_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>res</name>-&gt;<name>subgroupDNs</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * (<name><name>subgroups</name>-&gt;<name>nelts</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>sgindex</name> = 0</expr>;</init> <condition><expr>(<name>group</name> = <call><name>apr_array_pop</name><argument_list>(<argument><expr><name>subgroups</name></expr></argument>)</argument_list></call>)</expr>;</condition> <incr><expr><name>sgindex</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>res</name>-&gt;<name>subgroupDNs</name><index>[<expr><name>sgindex</name></expr>]</index></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>res</name>-&gt;<name>len</name></name> = <name>sgindex</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_cache_check_subgroups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>attrib</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
<param><decl><type><name>char</name> **</type><name>subgroupAttrs</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>subgroupclasses</name></decl></param>,
<param><decl><type><name>int</name></type> <name>cur_subgroup_depth</name></decl></param>,
<param><decl><type><name>int</name></type> <name>max_subgroup_depth</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name>LDAP_COMPARE_FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name></type> <name>curnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_node_t</name> *</type><name>compare_nodep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_node_t</name></type> <name>the_compare_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_compare_subgroup_t</name> *</type><name>tmp_local_sgl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sgl_cached_empty</name> <init>= <expr>0</expr></init>, <name>sgindex</name> <init>= <expr>0</expr></init>, <name>base_sgcIndex</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>mod_auth_ldap_groupattr_entry_t</name> *</type><name>sgc_ents</name> <init>=
<expr>(struct <name>mod_auth_ldap_groupattr_entry_t</name> *) <name><name>subgroupclasses</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>cur_subgroup_depth</name> &gt;= <name>max_subgroup_depth</name></expr>)</condition><then> <block>{
<return>return <expr><name>LDAP_COMPARE_FALSE</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<name>base_sgcIndex</name> &lt; <name><name>subgroupclasses</name>-&gt;<name>nelts</name></name>)
&amp;&amp; (<name>result</name> != <name>LDAP_COMPARE_TRUE</name>)</expr>)</condition> <block>{
<expr_stmt><expr><name>result</name> = <call><name>uldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dn</name></expr></argument>, <argument><expr>"objectClass"</expr></argument>,
<argument><expr><name><name>sgc_ents</name><index>[<expr><name>base_sgcIndex</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>base_sgcIndex</name>++</expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "DN failed group verification."</expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curnode</name>.<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr></argument>, <argument><expr>&amp;<name>curnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name> &amp;&amp; <name><name>curl</name>-&gt;<name>compare_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>dn</name></name> = (<name>char</name> *)<name>dn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>attrib</name></name> = (<name>char</name> *)"objectClass"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>value</name></name> = (<name>char</name> *)<name><name>sgc_ents</name><index>[<expr><name>base_sgcIndex</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>result</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>sgl_processed</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>subgroupList</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compare_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>compare_nodep</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>compare_nodep</name>-&gt;<name>sgl_processed</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>compare_nodep</name>-&gt;<name>subgroupList</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01288</expr></argument>)</argument_list></call>
"Making local copy of SGL for "
"group (%s)(objectClass=%s) "</expr></argument>,
<argument><expr><name>dn</name></expr></argument>, <argument><expr>(<name>char</name> *)<name><name>sgc_ents</name><index>[<expr><name>base_sgcIndex</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_local_sgl</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>util_compare_subgroup_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_local_sgl</name>-&gt;<name>len</name></name> = <name><name>compare_nodep</name>-&gt;<name>subgroupList</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>tmp_local_sgl</name>-&gt;<name>subgroupDNs</name></name> =
<call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * <name><name>compare_nodep</name>-&gt;<name>subgroupList</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>compare_nodep</name>-&gt;<name>subgroupList</name>-&gt;<name>len</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name><name>tmp_local_sgl</name>-&gt;<name>subgroupDNs</name><index>[<expr><name>i</name></expr>]</index></name> =
<call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>compare_nodep</name>-&gt;<name>subgroupList</name>-&gt;<name>subgroupDNs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>sgl_cached_empty</name> = 1</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>tmp_local_sgl</name> &amp;&amp; !<name>sgl_cached_empty</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01289</expr></argument>)</argument_list></call>
"no cached SGL for %s, retrieving from LDAP"</expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp_local_sgl</name> = <call><name>uldap_get_subgroups</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>dn</name></expr></argument>, <argument><expr><name>subgroupAttrs</name></expr></argument>,
<argument><expr><name>subgroupclasses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tmp_local_sgl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01290</expr></argument>)</argument_list></call> "no subgroups for %s"</expr></argument>,
<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>curl</name> &amp;&amp; <name><name>curl</name>-&gt;<name>compare_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>dn</name></name> = (<name>char</name> *)<name>dn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>attrib</name></name> = (<name>char</name> *)"objectClass"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>value</name></name> = (<name>char</name> *)<name><name>sgc_ents</name><index>[<expr><name>base_sgcIndex</name></expr>]</index></name>.<name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>result</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>sgl_processed</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>subgroupList</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>compare_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>compare_nodep</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01291</expr></argument>)</argument_list></call>
"Cache entry for %s doesn't exist"</expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_compare_node</name>.<name>result</name></name> = <name>LDAP_COMPARE_TRUE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_cache_insert</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>, <argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>compare_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_compare_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>compare_nodep</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01292</expr></argument>)</argument_list></call>
"util_ldap: Couldn't retrieve group entry "
"for %s from cache"</expr></argument>,
<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>compare_nodep</name> &amp;&amp; !<name><name>compare_nodep</name>-&gt;<name>sgl_processed</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>tmp_local_sgl</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>compare_nodep</name>-&gt;<name>subgroupList</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>compare_nodep</name>-&gt;<name>sgl_processed</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>util_compare_subgroup_t</name> *</type><name>sgl_copy</name> <init>=
<expr><call><name>util_ald_sgl_dup</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>, <argument><expr><name>tmp_local_sgl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01293</expr></argument>)</argument_list></call>
"Copying local SGL of len %d for group %s into cache"</expr></argument>,
<argument><expr><name><name>tmp_local_sgl</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sgl_copy</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>compare_nodep</name>-&gt;<name>subgroupList</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_sgl_free</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>compare_cache</name></name></expr></argument>,
<argument><expr>&amp;(<name><name>compare_nodep</name>-&gt;<name>subgroupList</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>compare_nodep</name>-&gt;<name>subgroupList</name></name> = <name>sgl_copy</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>compare_nodep</name>-&gt;<name>sgl_processed</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01294</expr></argument>)</argument_list></call>
"Copy of SGL failed to obtain shared memory, "
"couldn't update cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <name>LDAP_COMPARE_FALSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>tmp_local_sgl</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<name>result</name> != <name>LDAP_COMPARE_TRUE</name>) &amp;&amp; (<name>sgindex</name> &lt; <name><name>tmp_local_sgl</name>-&gt;<name>len</name></name>)</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>group</name> = <name><name>tmp_local_sgl</name>-&gt;<name>subgroupDNs</name><index>[<expr><name>sgindex</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>uldap_cache_compare</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> == <name>LDAP_COMPARE_TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01295</expr></argument>)</argument_list></call>
"Found user %s in a subgroup (%s) at level %d of %d."</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>cur_subgroup_depth</name>+1</expr></argument>,
<argument><expr><name>max_subgroup_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01296</expr></argument>)</argument_list></call>
"User %s not found in subgroup (%s) at level %d of "
"%d."</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>cur_subgroup_depth</name>+1</expr></argument>,
<argument><expr><name>max_subgroup_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>result</name> = <call><name>uldap_cache_check_subgroups</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name>attrib</name></expr></argument>,
<argument><expr><name>value</name></expr></argument>, <argument><expr><name>subgroupAttrs</name></expr></argument>,
<argument><expr><name>subgroupclasses</name></expr></argument>,
<argument><expr><name>cur_subgroup_depth</name>+1</expr></argument>,
<argument><expr><name>max_subgroup_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>sgindex</name>++</expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_cache_checkuserid</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>basedn</name></decl></param>,
<param><decl><type><name>int</name></type> <name>scope</name></decl></param>, <param><decl><type><name>char</name> **</type><name>attrs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filter</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bindpw</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>binddn</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> ***</type><name>retvals</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numvals</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LDAPMessage</name> *</type><name>res</name></decl>, *<decl><type ref="prev"/><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name></type> <name>curnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>search_nodep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name></type> <name>the_search_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>curtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curnode</name>.<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl</name> = (<name>util_url_node_t</name> *)<call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>curnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_create_caches</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>username</name></name> = <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>search_nodep</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curtime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>curtime</name> - <name><name>search_nodep</name>-&gt;<name>lastbind</name></name>) &gt; <name><name>st</name>-&gt;<name>search_cache_ttl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_remove</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>, <argument><expr><name>search_nodep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>( <expr>(<name><name>search_nodep</name>-&gt;<name>bindpw</name></name>)
&amp;&amp; (<name><name>search_nodep</name>-&gt;<name>bindpw</name><index>[<expr>0</expr>]</index></name> != '\0')
&amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>search_nodep</name>-&gt;<name>bindpw</name></name></expr></argument>, <argument><expr><name>bindpw</name></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>binddn</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>attrs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>retvals</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * <name><name>search_nodep</name>-&gt;<name>numvals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>search_nodep</name>-&gt;<name>numvals</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr>(*<name>retvals</name>)<index>[<expr><name>i</name></expr>]</index> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Authentication successful (cached)"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_SUCCESS</name></expr>;</return>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<label><name>start_over</name>:</label>
<if>if <condition>(<expr><name>failures</name> &gt; <name><name>st</name>-&gt;<name>retries</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>failures</name> &gt; 0 &amp;&amp; <name><name>st</name>-&gt;<name>retry_delay</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>retry_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != (<name>result</name> = <call><name>uldap_connection_open</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ldap_search_ext_s</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>basedn</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>filter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr></argument>, <argument><expr><name>APR_LDAP_SIZELIMIT</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for user failed with server down"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> == <name>LDAP_TIMEOUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for user failed with timeout"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for user failed"</expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>last_backend_conn</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = <call><name>ldap_count_entries</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> != 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>count</name> == 0</expr> )</condition><then>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "User not found"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "User is not unique (search found two "
"or more matches)"</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDAP_NO_SUCH_OBJECT</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>entry</name> = <call><name>ldap_first_entry</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dn</name> = <call><name>ldap_get_dn</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>binddn</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>bindpw</name> || <call><name>strlen</name><argument_list>(<argument><expr><name>bindpw</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Empty password not allowed"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_INVALID_CREDENTIALS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>uldap_simple_bind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>, <argument><expr>(<name>char</name> *)*<name>binddn</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>bindpw</name></expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> ||
(<name>result</name> == <name>LDAP_TIMEOUT</name> &amp;&amp; <name>failures</name> == 0)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_simple_bind() to check user credentials "
"failed with server down"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_simple_bind() to check user credentials "
"timed out"</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_simple_bind() to check user credentials failed"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>must_rebind</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"LDC %pp used for authn, must be rebound"</expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>attrs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>attrs</name><index>[<expr><name>k</name>++</expr>]</index></name></expr>)</condition><empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><name>vals</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * (<name>k</name>+1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numvals</name> = <name>k</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>values</name> = <call><name>ldap_get_values</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>values</name> &amp;&amp; <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name>str</name> = <name>str</name> ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>"; "</expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ldap_value_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> = <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>retvals</name> = <name>vals</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>username</name></name> = <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>dn</name></name> = *<name>binddn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>bindpw</name></name> = <name>bindpw</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>lastbind</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>vals</name></name> = <name>vals</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>numvals</name></name> = <name>numvals</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>search_nodep</name> == <name>NULL</name>) ||
(<call><name>strcmp</name><argument_list>(<argument><expr>*<name>binddn</name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_insert</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>, <argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(!<name><name>search_nodep</name>-&gt;<name>bindpw</name></name>) ||
(<call><name>strcmp</name><argument_list>(<argument><expr><name>bindpw</name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>bindpw</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_remove</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>, <argument><expr><name>search_nodep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>util_ald_cache_insert</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>, <argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>search_nodep</name>-&gt;<name>lastbind</name></name> = <name><name>the_search_node</name>.<name>lastbind</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Authentication successful"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_cache_getuserdn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>util_ldap_connection_t</name> *</type><name>ldc</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>basedn</name></decl></param>,
<param><decl><type><name>int</name></type> <name>scope</name></decl></param>, <param><decl><type><name>char</name> **</type><name>attrs</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filter</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>binddn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> ***</type><name>retvals</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>vals</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>numvals</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LDAPMessage</name> *</type><name>res</name></decl>, *<decl><type ref="prev"/><name>entry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>failures</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name> *</type><name>curl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_url_node_t</name></type> <name>curnode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name> *</type><name>search_nodep</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_search_node_t</name></type> <name>the_search_node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>curtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>curnode</name>.<name>url</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name>curl</name> = (<name>util_url_node_t</name> *)<call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>curnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curl</name> = <call><name>util_ald_create_caches</name><argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>username</name></name> = <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>search_nodep</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>curtime</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>curtime</name> - <name><name>search_nodep</name>-&gt;<name>lastbind</name></name>) &gt; <name><name>st</name>-&gt;<name>search_cache_ttl</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_remove</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>, <argument><expr><name>search_nodep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>binddn</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>attrs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr>*<name>retvals</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * <name><name>search_nodep</name>-&gt;<name>numvals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>search_nodep</name>-&gt;<name>numvals</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr>(*<name>retvals</name>)<index>[<expr><name>i</name></expr>]</index> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>vals</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Search successful (cached)"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_SUCCESS</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<label><name>start_over</name>:</label>
<if>if <condition>(<expr><name>failures</name> &gt; <name><name>st</name>-&gt;<name>retries</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>failures</name> &gt; 0 &amp;&amp; <name><name>st</name>-&gt;<name>retry_delay</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>retry_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>LDAP_SUCCESS</name> != (<name>result</name> = <call><name>uldap_connection_open</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>ldc</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ldap_search_ext_s</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>basedn</name></expr></argument>, <argument><expr><name>scope</name></expr></argument>,
<argument><expr>(<name>char</name> *)<name>filter</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>opTimeout</name></name></expr></argument>, <argument><expr><name>APR_LDAP_SIZELIMIT</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_LDAP_IS_SERVER_DOWN</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for user failed with server down"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>uldap_connection_unbind</name><argument_list>(<argument><expr><name>ldc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>failures</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE5</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s (attempt %d)"</expr></argument>, <argument><expr><name><name>ldc</name>-&gt;<name>reason</name></name></expr></argument>, <argument><expr><name>failures</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>start_over</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "ldap_search_ext_s() for user failed"</expr>;</expr_stmt>
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>last_backend_conn</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> = <call><name>ldap_count_entries</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>count</name> != 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>count</name> == 0</expr> )</condition><then>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "User not found"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "User is not unique (search found two "
"or more matches)"</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>LDAP_NO_SUCH_OBJECT</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>entry</name> = <call><name>ldap_first_entry</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>dn</name> = <call><name>ldap_get_dn</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>binddn</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ldap_memfree</name><argument_list>(<argument><expr><name>dn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>attrs</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>attrs</name><index>[<expr><name>k</name>++</expr>]</index></name></expr>)</condition><empty_stmt>;</empty_stmt></while>
<expr_stmt><expr><name>vals</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * (<name>k</name>+1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>numvals</name> = <name>k</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>values</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>values</name> = <call><name>ldap_get_values</name><argument_list>(<argument><expr><name><name>ldc</name>-&gt;<name>ldap</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name><name>attrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>values</name> &amp;&amp; <name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{
<expr_stmt><expr><name>str</name> = <name>str</name> ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>"; "</expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ldap_value_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vals</name><index>[<expr><name>i</name></expr>]</index></name> = <name>str</name></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>retvals</name> = <name>vals</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>curl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>LDAP_CACHE_LOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>username</name></name> = <name>filter</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>dn</name></name> = *<name>binddn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>bindpw</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>lastbind</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>vals</name></name> = <name>vals</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>the_search_node</name>.<name>numvals</name></name> = <name>numvals</name></expr>;</expr_stmt>
<expr_stmt><expr><name>search_nodep</name> = <call><name>util_ald_cache_fetch</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>,
<argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>search_nodep</name> == <name>NULL</name>) ||
(<call><name>strcmp</name><argument_list>(<argument><expr>*<name>binddn</name></expr></argument>, <argument><expr><name><name>search_nodep</name>-&gt;<name>dn</name></name></expr></argument>)</argument_list></call> != 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>util_ald_cache_insert</name><argument_list>(<argument><expr><name><name>curl</name>-&gt;<name>search_cache</name></name></expr></argument>, <argument><expr>&amp;<name>the_search_node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>search_nodep</name>-&gt;<name>bindpw</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>search_nodep</name>-&gt;<name>lastbind</name></name> = <name><name>the_search_node</name>.<name>lastbind</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>LDAP_CACHE_UNLOCK</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ldap_msgfree</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ldc</name>-&gt;<name>reason</name></name> = "Search successful"</expr>;</expr_stmt>
<return>return <expr><name>LDAP_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>uldap_ssl_supported</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(
<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return<expr>(<name><name>st</name>-&gt;<name>ssl_supported</name></name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_cache_bytes</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>bytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_bytes</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01297</expr></argument>)</argument_list></call>
"ldap cache: Setting shared memory cache size to "
"%" <name>APR_SIZE_T_FMT</name> " bytes."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>cache_bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_cache_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_file</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_file</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01298</expr></argument>)</argument_list></call>
"LDAP cache: Setting shared memory cache file to %s."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>cache_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_cache_ttl</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ttl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_ttl</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call> * 1000000</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01299</expr></argument>)</argument_list></call>
"ldap cache: Setting cache TTL to %ld microseconds."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>search_cache_ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_cache_entries</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_size</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>search_cache_size</name></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_size</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01300</expr></argument>)</argument_list></call>
"ldap cache: Setting search cache size to %ld entries."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>search_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_opcache_ttl</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ttl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_ttl</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call> * 1000000</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01301</expr></argument>)</argument_list></call>
"ldap cache: Setting operation cache TTL to %ld microseconds."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>compare_cache_ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_opcache_entries</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>size</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_size</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>compare_cache_size</name></name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_size</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01302</expr></argument>)</argument_list></call>
"ldap cache: Setting operation cache size to %ld entries."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>compare_cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>util_ldap_parse_cert_type</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CA_DER"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CA_TYPE_DER</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CA_BASE64"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CA_TYPE_BASE64</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CA_CERT7_DB"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CA_TYPE_CERT7_DB</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CA_SECMOD"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CA_TYPE_SECMOD</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CERT_DER"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CERT_TYPE_DER</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CERT_BASE64"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CERT_TYPE_BASE64</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CERT_PFX"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CERT_TYPE_PFX</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CERT_KEY3_DB"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CERT_TYPE_KEY3_DB</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"CERT_NICKNAME"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_CERT_TYPE_NICKNAME</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"KEY_DER"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_KEY_TYPE_DER</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"KEY_BASE64"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_KEY_TYPE_BASE64</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"KEY_PFX"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_LDAP_KEY_TYPE_PFX</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>APR_LDAP_CA_TYPE_UNKNOWN</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_trusted_global_cert</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cert_type</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ldap_opt_tls_cert_t</name> *</type><name>cert</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cert_type</name> = <call><name>util_ldap_parse_cert_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_LDAP_CA_TYPE_UNKNOWN</name> == <name>cert_type</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"The certificate type %s is "
"not recognised. It should be one "
"of CA_DER, CA_BASE64, CA_CERT7_DB, "
"CA_SECMOD, CERT_DER, CERT_BASE64, "
"CERT_KEY3_DB, CERT_NICKNAME, "
"KEY_DER, KEY_BASE64"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr>"Certificate type was not specified."</expr>;</return>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01303</expr></argument>)</argument_list></call>
"LDAP: SSL trusted global cert - %s (type %s)"</expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert</name> = (<name>apr_ldap_opt_tls_cert_t</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>global_certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert</name>-&gt;<name>type</name></name> = <name>cert_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert</name>-&gt;<name>path</name></name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert</name>-&gt;<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cert_type</name> != <name>APR_LDAP_CA_TYPE_UNKNOWN</name> &amp;&amp;
<name>cert_type</name> != <name>APR_LDAP_CERT_TYPE_NICKNAME</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cert</name>-&gt;<name>path</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cert</name>-&gt;<name>path</name></name> &amp;&amp;
((<name>rv</name> = <call><name>apr_stat</name> <argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name><name>cert</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01304</expr></argument>)</argument_list></call>
"LDAP: Could not open SSL trusted certificate "
"authority file - %s"</expr></argument>,
<argument><expr><name><name>cert</name>-&gt;<name>path</name></name> == <name>NULL</name> ? <name>file</name> : <name><name>cert</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>"Invalid global certificate file path"</expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_trusted_client_cert</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_config_t</name> *</type><name>dc</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cert_type</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ldap_opt_tls_cert_t</name> *</type><name>cert</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>type</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cert_type</name> = <call><name>util_ldap_parse_cert_type</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_LDAP_CA_TYPE_UNKNOWN</name> == <name>cert_type</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"The certificate type \"%s\" is "
"not recognised. It should be one "
"of CA_DER, CA_BASE64, "
"CERT_DER, CERT_BASE64, "
"CERT_NICKNAME, CERT_PFX, "
"KEY_DER, KEY_BASE64, KEY_PFX"</expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>( <expr><name>APR_LDAP_CA_TYPE_CERT7_DB</name> == <name>cert_type</name> ||
<name>APR_LDAP_CA_TYPE_SECMOD</name> == <name>cert_type</name> ||
<name>APR_LDAP_CERT_TYPE_PFX</name> == <name>cert_type</name> ||
<name>APR_LDAP_CERT_TYPE_KEY3_DB</name> == <name>cert_type</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"The certificate type \"%s\" is "
"only valid within a "
"LDAPTrustedGlobalCert directive. "
"Only CA_DER, CA_BASE64, "
"CERT_DER, CERT_BASE64, "
"CERT_NICKNAME, KEY_DER, and "
"KEY_BASE64 may be used."</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
}</block></then> <else>else <block>{
<return>return <expr>"Certificate type was not specified."</expr>;</return>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01305</expr></argument>)</argument_list></call>
"LDAP: SSL trusted client cert - %s (type %s)"</expr></argument>,
<argument><expr><name>file</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert</name> = (<name>apr_ldap_opt_tls_cert_t</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dc</name>-&gt;<name>client_certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert</name>-&gt;<name>type</name></name> = <name>cert_type</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert</name>-&gt;<name>path</name></name> = <name>file</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cert</name>-&gt;<name>password</name></name> = <name>password</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cert_type</name> != <name>APR_LDAP_CA_TYPE_UNKNOWN</name> &amp;&amp;
<name>cert_type</name> != <name>APR_LDAP_CERT_TYPE_NICKNAME</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cert</name>-&gt;<name>path</name></name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cert</name>-&gt;<name>path</name></name> &amp;&amp;
((<name>rv</name> = <call><name>apr_stat</name> <argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name><name>cert</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01306</expr></argument>)</argument_list></call>
"LDAP: Could not open SSL client certificate "
"file - %s"</expr></argument>,
<argument><expr><name><name>cert</name>-&gt;<name>path</name></name> == <name>NULL</name> ? <name>file</name> : <name><name>cert</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>"Invalid client certificate file path"</expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_trusted_mode</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mode</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01307</expr></argument>)</argument_list></call>
"LDAP: SSL trusted mode - %s"</expr></argument>,
<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"NONE"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_NONE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"SSL"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_SSL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>( <expr>(0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"TLS"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call>)
|| (0 == <call><name>strcasecmp</name><argument_list>(<argument><expr>"STARTTLS"</expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_STARTTLS</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"Invalid LDAPTrustedMode setting: must be one of NONE, "
"SSL, or TLS/STARTTLS"</expr>;</return>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure_set</name></name> = 1</expr>;</expr_stmt>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_verify_srv_cert</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><name>int</name></type> <name>mode</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01308</expr></argument>)</argument_list></call>
"LDAP: SSL verify server certificate - %s"</expr></argument>,
<argument><expr><name>mode</name>?"TRUE":"FALSE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>verify_svr_cert</name></name> = <name>mode</name></expr>;</expr_stmt>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_connection_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ttl</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_NETWORK_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_NETWORK_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connectionTimeout</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>ttl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01309</expr></argument>)</argument_list></call>
"ldap connection: Setting connection timeout to %ld seconds."</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>connectionTimeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01310</expr></argument>)</argument_list></call>
"LDAP: Connection timeout option not supported by the "
"LDAP SDK in use."</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_chase_referrals</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_config_t</name> *</type><name>dc</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01311</expr></argument>)</argument_list></call>
"LDAP: Setting referral chasing %s"</expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ChaseReferrals</name></name> = <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ChaseReferrals</name></name> = <name>AP_LDAP_CHASEREFERRALS_OFF</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ChaseReferrals</name></name> = <name>AP_LDAP_CHASEREFERRALS_SDKDEFAULT</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"LDAPReferrals must be 'on', 'off', or 'default'"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return<expr>(<name>NULL</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_debug_level</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_LDAP_OPT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_LDAP_OPT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr>"This directive is not supported with the currently linked LDAP library"</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>st</name>-&gt;<name>debug_level</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_referral_hop_limit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hop_limit</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_config_t</name> *</type><name>dc</name> <init>= <expr><name>config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ReferralHopLimit</name></name> = <call><name>atol</name><argument_list>(<argument><expr><name>hop_limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dc</name>-&gt;<name>ReferralHopLimit</name></name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"LDAPReferralHopLimit must be greater than zero (Use 'LDAPReferrals Off' to disable referral chasing)"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01312</expr></argument>)</argument_list></call>
"LDAP: Limit chased referrals to maximum of %d hops."</expr></argument>,
<argument><expr><name><name>dc</name>-&gt;<name>ReferralHopLimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>util_ldap_create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_config_t</name> *</type><name>dc</name> <init>=
<expr>(<name>util_ldap_config_t</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>util_ldap_config_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>client_certs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_ldap_opt_tls_cert_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ChaseReferrals</name></name> = <name>AP_LDAP_CHASEREFERRALS_ON</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dc</name>-&gt;<name>ReferralHopLimit</name></name> = <name>AP_LDAP_HOPLIMIT_UNSET</name></expr>;</expr_stmt>
<return>return <expr><name>dc</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_op_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>timeout</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> == <name>endptr</name>) || (*<name>endptr</name> != '\0')</expr>)</condition><then> <block>{
<return>return <expr>"Timeout not numerical"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>timeout</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"Timeout must be non-negative"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>timeout</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>st</name>-&gt;<name>opTimeout</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>opTimeout</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>opTimeout</name>-&gt;<name>tv_sec</name></name> = <name>timeout</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>opTimeout</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01313</expr></argument>)</argument_list></call>
"ldap connection: Setting op timeout to %ld seconds."</expr></argument>,
<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>LDAP_OPT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01314</expr></argument>)</argument_list></call>
"LDAP: LDAP_OPT_TIMEOUT option not supported by the "
"LDAP library in use. Using LDAPTimeout value as search "
"timeout only."</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_conn_ttl</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>"LDAPConnectionPoolTTL has wrong format"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>timeout</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>timeout</name> = <name>AP_LDAP_CONNPOOL_INFINITE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connection_pool_ttl</name></name> = <name>timeout</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_retry_delay</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>"LDAPRetryDelay has wrong format"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>timeout</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"LDAPRetryDelay must be &gt;= 0"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>retry_delay</name></name> = <name>timeout</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>util_ldap_set_retries</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>retries</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>retries</name></name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"LDAPRetries must be &gt;= 0"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>util_ldap_create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>=
<expr>(<name>util_ldap_state_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>util_ldap_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>st</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>st</name>-&gt;<name>mutex</name></name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_bytes</name></name> = 500000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_ttl</name></name> = 600000000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_size</name></name> = 1024</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_ttl</name></name> = 600000000</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_size</name></name> = 1024</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connections</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>ssl_supported</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>global_certs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_ldap_opt_tls_cert_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure</name></name> = <name>APR_LDAP_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connectionTimeout</name></name> = 10</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>opTimeout</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>timeval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>opTimeout</name>-&gt;<name>tv_sec</name></name> = 60</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>verify_svr_cert</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connection_pool_ttl</name></name> = <name>AP_LDAP_CONNPOOL_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>retries</name></name> = 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>retry_delay</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>st</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>util_ldap_merge_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>util_ldap_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>base</name> <init>= <expr>(<name>util_ldap_state_t</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>overrides</name> <init>= <expr>(<name>util_ldap_state_t</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>pool</name></name> = <name><name>overrides</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<expr_stmt><expr><name><name>st</name>-&gt;<name>mutex</name></name> = <name><name>overrides</name>-&gt;<name>mutex</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>st</name>-&gt;<name>cache_bytes</name></name> = <name><name>base</name>-&gt;<name>cache_bytes</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_ttl</name></name> = <name><name>base</name>-&gt;<name>search_cache_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>search_cache_size</name></name> = <name><name>base</name>-&gt;<name>search_cache_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_ttl</name></name> = <name><name>base</name>-&gt;<name>compare_cache_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>compare_cache_size</name></name> = <name><name>base</name>-&gt;<name>compare_cache_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>util_ldap_cache_lock</name></name> = <name><name>base</name>-&gt;<name>util_ldap_cache_lock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connections</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>ssl_supported</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>global_certs</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>global_certs</name></name></expr></argument>,
<argument><expr><name><name>overrides</name>-&gt;<name>global_certs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>secure</name></name> = (<name><name>overrides</name>-&gt;<name>secure_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>secure</name></name>
: <name><name>overrides</name>-&gt;<name>secure</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connectionTimeout</name></name> = <name><name>base</name>-&gt;<name>connectionTimeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>opTimeout</name></name> = <name><name>base</name>-&gt;<name>opTimeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>verify_svr_cert</name></name> = <name><name>base</name>-&gt;<name>verify_svr_cert</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>debug_level</name></name> = <name><name>base</name>-&gt;<name>debug_level</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>connection_pool_ttl</name></name> = (<name><name>overrides</name>-&gt;<name>connection_pool_ttl</name></name> == <name>AP_LDAP_CONNPOOL_DEFAULT</name>) ?
<name><name>base</name>-&gt;<name>connection_pool_ttl</name></name> : <name><name>overrides</name>-&gt;<name>connection_pool_ttl</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>retries</name></name> = <name><name>base</name>-&gt;<name>retries</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st</name>-&gt;<name>retry_delay</name></name> = <name><name>base</name>-&gt;<name>retry_delay</name></name></expr>;</expr_stmt>
<return>return <expr><name>st</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>util_ldap_cleanup_module</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)<call><name>ap_get_module_config</name><argument_list>(
<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>ssl_supported</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_ldap_ssl_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>util_ldap_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>ldap_cache_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>util_ldap_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s_vhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st_vhost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr>(<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ldap_err_t</name> *</type><name>result_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>cache_file</name></name> &amp;&amp; <name><name>st</name>-&gt;<name>cache_bytes</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>lck_file</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>cache_file</name></name></expr></argument>, <argument><expr>".lck"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name>lck_file</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<if>if <condition>(<expr>!<name><name>st</name>-&gt;<name>cache_shm</name></name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>result</name> = <call><name>util_ldap_cache_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01315</expr></argument>)</argument_list></call>
"LDAP cache: could not create shared memory segment"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>result</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>st</name>-&gt;<name>util_ldap_cache_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>ldap_cache_mutex_type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>result</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>s_vhost</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s_vhost</name></expr>)</condition> <block>{
<expr_stmt><expr><name>st_vhost</name> = (<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s_vhost</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
<expr_stmt><expr><name><name>st_vhost</name>-&gt;<name>cache_shm</name></name> = <name><name>st</name>-&gt;<name>cache_shm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st_vhost</name>-&gt;<name>cache_rmm</name></name> = <name><name>st</name>-&gt;<name>cache_rmm</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st_vhost</name>-&gt;<name>cache_file</name></name> = <name><name>st</name>-&gt;<name>cache_file</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st_vhost</name>-&gt;<name>util_ldap_cache</name></name> = <name><name>st</name>-&gt;<name>util_ldap_cache</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01316</expr></argument>)</argument_list></call>
"LDAP merging Shared Cache conf: shm=0x%pp rmm=0x%pp "
"for VHOST: %s"</expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>cache_shm</name></name></expr></argument>, <argument><expr><name><name>st</name>-&gt;<name>cache_rmm</name></name></expr></argument>,
<argument><expr><name><name>s_vhost</name>-&gt;<name>server_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>s_vhost</name> = <name><name>s_vhost</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SHARED_MEMORY</name></expr></cpp:if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01317</expr></argument>)</argument_list></call>
"LDAP cache: LDAPSharedCacheSize is zero, disabling "
"shared memory cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<block>{
<decl_stmt><decl><type><name>apr_ldap_err_t</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_ldap_info</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;(<name>result</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01318</expr></argument>)</argument_list></call> "%s"</expr></argument>, <argument><expr><name><name>result</name>-&gt;<name>reason</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>util_ldap_cleanup_module</name></expr></argument>,
<argument><expr><name>util_ldap_cleanup_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_ldap_ssl_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr>&amp;(<name>result_err</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_ldap_set_option</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_LDAP_OPT_TLS_CERT</name></expr></argument>,
<argument><expr>(<name>void</name> *)<name><name>st</name>-&gt;<name>global_certs</name></name></expr></argument>, <argument><expr>&amp;(<name>result_err</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>ssl_supported</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01319</expr></argument>)</argument_list></call>
"LDAP: SSL support available"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>st</name>-&gt;<name>ssl_supported</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01320</expr></argument>)</argument_list></call>
"LDAP: SSL support unavailable%s%s"</expr></argument>,
<argument><expr><name>result_err</name> ? ": " : ""</expr></argument>,
<argument><expr><name>result_err</name> ? <name><name>result_err</name>-&gt;<name>reason</name></name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>s_vhost</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>s_vhost</name></expr>)</condition> <block>{
<expr_stmt><expr><name>st_vhost</name> = (<name>util_ldap_state_t</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s_vhost</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>st_vhost</name>-&gt;<name>ssl_supported</name></name> = <name><name>st</name>-&gt;<name>ssl_supported</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>s_vhost</name> = <name><name>s_vhost</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_ldap_rebind_init</name> <argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_LDAP_OPT_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>st</name>-&gt;<name>debug_level</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>result</name> = <call><name>ldap_set_option</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_LDAP_OPT_DEBUG</name></expr></argument>, <argument><expr>&amp;<name><name>st</name>-&gt;<name>debug_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>LDAP_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01321</expr></argument>)</argument_list></call>
"LDAP: Could not set the LDAP library debug level to %d:(%d) %s"</expr></argument>,
<argument><expr><name><name>st</name>-&gt;<name>debug_level</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>ldap_err2string</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return<expr>(<name>OK</name>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>util_ldap_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>sts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>util_ldap_state_t</name> *</type><name>st</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>ldap_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>st</name>-&gt;<name>util_ldap_cache_lock</name></name></expr>)</condition><then> <return>return;</return></then></if>
<expr_stmt><expr><name>sts</name> = <call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr>&amp;<name><name>st</name>-&gt;<name>util_ldap_cache_lock</name></name></expr></argument>,
<argument><expr><call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr><name><name>st</name>-&gt;<name>util_ldap_cache_lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sts</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>sts</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01322</expr></argument>)</argument_list></call>
"Failed to initialise global mutex %s in child process"</expr></argument>,
<argument><expr><name>ldap_cache_mutex_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>util_ldap_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPSharedCacheSize"</expr></argument>, <argument><expr><name>util_ldap_set_cache_bytes</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the size of the shared memory cache (in bytes). Use "
"0 to disable the shared memory cache. (default: 500000)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPSharedCacheFile"</expr></argument>, <argument><expr><name>util_ldap_set_cache_file</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the file name for the shared memory cache."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPCacheEntries"</expr></argument>, <argument><expr><name>util_ldap_set_cache_entries</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the maximum number of entries that are possible in the "
"LDAP search cache. Use 0 or -1 to disable the search cache "
"(default: 1024)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPCacheTTL"</expr></argument>, <argument><expr><name>util_ldap_set_cache_ttl</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the maximum time (in seconds) that an item can be "
"cached in the LDAP search cache. Use 0 for no limit. "
"(default 600)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPOpCacheEntries"</expr></argument>, <argument><expr><name>util_ldap_set_opcache_entries</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the maximum number of entries that are possible "
"in the LDAP compare cache. Use 0 or -1 to disable the compare cache "
"(default: 1024)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPOpCacheTTL"</expr></argument>, <argument><expr><name>util_ldap_set_opcache_ttl</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the maximum time (in seconds) that an item is cached "
"in the LDAP operation cache. Use 0 for no limit. "
"(default: 600)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LDAPTrustedGlobalCert"</expr></argument>, <argument><expr><name>util_ldap_set_trusted_global_cert</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Takes three arguments; the first argument is the cert "
"type of the second argument, one of CA_DER, CA_BASE64, "
"CA_CERT7_DB, CA_SECMOD, CERT_DER, CERT_BASE64, CERT_KEY3_DB, "
"CERT_NICKNAME, KEY_DER, or KEY_BASE64. The second argument "
"specifes the file and/or directory containing the trusted CA "
"certificates (and global client certs for Netware) used to "
"validate the LDAP server. The third argument is an optional "
"passphrase if applicable."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"LDAPTrustedClientCert"</expr></argument>, <argument><expr><name>util_ldap_set_trusted_client_cert</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Takes three arguments: the first argument is the certificate "
"type of the second argument, one of CA_DER, CA_BASE64, "
"CA_CERT7_DB, CA_SECMOD, CERT_DER, CERT_BASE64, CERT_KEY3_DB, "
"CERT_NICKNAME, KEY_DER, or KEY_BASE64. The second argument "
"specifies the file and/or directory containing the client "
"certificate, or certificate ID used to validate this LDAP "
"client. The third argument is an optional passphrase if "
"applicable."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPTrustedMode"</expr></argument>, <argument><expr><name>util_ldap_set_trusted_mode</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specify the type of security that should be applied to "
"an LDAP connection. One of; NONE, SSL or STARTTLS."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"LDAPVerifyServerCert"</expr></argument>, <argument><expr><name>util_ldap_set_verify_srv_cert</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set to 'ON' requires that the server certificate be verified"
" before a secure LDAP connection can be establish. Default"
" 'ON'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPConnectionTimeout"</expr></argument>, <argument><expr><name>util_ldap_set_connection_timeout</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specify the LDAP socket connection timeout in seconds "
"(default: 10)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPReferrals"</expr></argument>, <argument><expr><name>util_ldap_set_chase_referrals</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Choose whether referrals are chased ['ON'|'OFF'|'DEFAULT']. Default 'ON'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPReferralHopLimit"</expr></argument>, <argument><expr><name>util_ldap_set_referral_hop_limit</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Limit the number of referral hops that LDAP can follow. "
"(Integer value, Consult LDAP SDK documentation for applicability and defaults"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPLibraryDebug"</expr></argument>, <argument><expr><name>util_ldap_set_debug_level</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Enable debugging in LDAP SDK (Default: off, values: SDK specific"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPTimeout"</expr></argument>, <argument><expr><name>util_ldap_set_op_timeout</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specify the LDAP bind/search timeout in seconds "
"(0 = no limit). Default: 60"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPConnectionPoolTTL"</expr></argument>, <argument><expr><name>util_ldap_set_conn_ttl</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specify the maximum amount of time a bound connection can sit "
"idle and still be considered valid for reuse"
"(0 = no pool, -1 = no limit, n = time in seconds). Default: -1"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPRetries"</expr></argument>, <argument><expr><name>util_ldap_set_retries</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specify the number of times a failed LDAP operation should be retried "
"(0 = no retries). Default: 3"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"LDAPRetryDelay"</expr></argument>, <argument><expr><name>util_ldap_set_retry_delay</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Specify the delay between retries of a failed LDAP operation "
"(0 = no delay). Default: 0"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>util_ldap_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_connection_open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_connection_close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_connection_unbind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_connection_find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_comparedn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_checkuserid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_getuserdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_ssl_supported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>uldap_cache_check_subgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>util_ldap_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>util_ldap_post_config</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>util_ldap_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>util_ldap_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>ldap</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>util_ldap_create_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>util_ldap_create_config</name></expr>,
<expr><name>util_ldap_merge_config</name></expr>,
<expr><name>util_ldap_cmds</name></expr>,
<expr><name>util_ldap_register_hooks</name></expr>,
}</block></expr>;</expr_stmt>
</unit>
