<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/http2/h2_config.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__mod_h2__h2_config_h__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_config_h__</name></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_VERSION</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_TARNAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_STRING</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_NAME</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PACKAGE_BUGREPORT</name></cpp:undef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>H2_CONF_MAX_STREAMS</name></decl>,
<decl><name>H2_CONF_WIN_SIZE</name></decl>,
<decl><name>H2_CONF_MIN_WORKERS</name></decl>,
<decl><name>H2_CONF_MAX_WORKERS</name></decl>,
<decl><name>H2_CONF_MAX_WORKER_IDLE_SECS</name></decl>,
<decl><name>H2_CONF_STREAM_MAX_MEM</name></decl>,
<decl><name>H2_CONF_ALT_SVCS</name></decl>,
<decl><name>H2_CONF_ALT_SVC_MAX_AGE</name></decl>,
<decl><name>H2_CONF_SER_HEADERS</name></decl>,
<decl><name>H2_CONF_DIRECT</name></decl>,
<decl><name>H2_CONF_MODERN_TLS_ONLY</name></decl>,
<decl><name>H2_CONF_UPGRADE</name></decl>,
<decl><name>H2_CONF_TLS_WARMUP_SIZE</name></decl>,
<decl><name>H2_CONF_TLS_COOLDOWN_SECS</name></decl>,
<decl><name>H2_CONF_PUSH</name></decl>,
<decl><name>H2_CONF_PUSH_DIARY_SIZE</name></decl>,
<decl><name>H2_CONF_COPY_FILES</name></decl>,
<decl><name>H2_CONF_EARLY_HINTS</name></decl>,
}</block></enum></type> <name>h2_config_var_t</name>;</typedef>
<struct_decl>struct <name>apr_hash_t</name>;</struct_decl>
<struct_decl>struct <name>h2_priority</name>;</struct_decl>
<struct_decl>struct <name>h2_push_res</name>;</struct_decl>
<typedef>typedef <type><struct>struct <name>h2_push_res</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri_ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>critical</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_push_res</name>;</typedef>
<typedef>typedef <type><struct>struct <name>h2_config</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2_max_streams</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2_window_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>min_workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_workers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>max_worker_idle_secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_max_mem_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>alt_svcs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>alt_svc_max_age</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>serialize_headers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2_direct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modern_tls_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2_upgrade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>tls_warmup_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tls_cooldown_secs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>h2_push</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_hash_t</name> *</type><name>priorities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>push_diary_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>copy_files</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>push_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>early_hints</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_config</name>;</typedef>
<function_decl><type><name>void</name> *</type><name>h2_config_create_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>x</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>h2_config_merge_dir</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>h2_config_create_svr</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>h2_config_merge_svr</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>h2_cmds</name><index>[]</index></name></decl>;</decl_stmt>
<function_decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>h2_config_get</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>h2_config_sget</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>h2_config_rget</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_config_geti</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>h2_config_var_t</name></type> <name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_int64_t</name></type> <name>h2_config_geti64</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>h2_config_var_t</name></type> <name>var</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_config_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> struct <name>h2_priority</name> *</type><name>h2_config_get_priority</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
