<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/http2/h2_task.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>__mod_h2__h2_task__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_task__</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<struct_decl>struct <name>h2_bucket_beam</name>;</struct_decl>
<struct_decl>struct <name>h2_conn</name>;</struct_decl>
<struct_decl>struct <name>h2_mplx</name>;</struct_decl>
<struct_decl>struct <name>h2_task</name>;</struct_decl>
<struct_decl>struct <name>h2_req_engine</name>;</struct_decl>
<struct_decl>struct <name>h2_request</name>;</struct_decl>
<struct_decl>struct <name>h2_response_parser</name>;</struct_decl>
<struct_decl>struct <name>h2_stream</name>;</struct_decl>
<struct_decl>struct <name>h2_worker</name>;</struct_decl>
<typedef>typedef <type>struct <name>h2_task</name></type> <name>h2_task</name>;</typedef>
<struct>struct <name>h2_task</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>stream_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>h2_request</name> *</type><name>request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rst_error</name></decl>;</decl_stmt>
<struct>struct <block>{
<decl_stmt><decl><type>struct <name>h2_bucket_beam</name> *</type><name>beam</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>eos</name> : 1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bbchunk</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>chunked_total</name></decl>;</decl_stmt>
}</block> <decl><name>input</name></decl>;</struct>
<struct>struct <block>{
<decl_stmt><decl><type>struct <name>h2_bucket_beam</name> *</type><name>beam</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>opened</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>sent_response</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>copy_files</name> : 1</expr>;</expr_stmt>
<decl_stmt><decl><type>struct <name>h2_response_parser</name> *</type><name>rparser</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_buffer</name></decl>;</decl_stmt>
}</block> <decl><name>output</name></decl>;</struct>
<decl_stmt><decl><type>struct <name>h2_mplx</name> *</type><name>mplx</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>filters_set</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>frozen</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>thawed</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>worker_started</name> : 1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>worker_done</name> : 1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>started_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>done_at</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>eor</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_req_engine</name> *</type><name>engine</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>h2_req_engine</name> *</type><name>assigned</name></decl>;</decl_stmt>
}</block>;</struct>
<function_decl><type><name>h2_task</name> *</type><name>h2_task_create</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>h2_request</name> *</type><name>req</name></decl></param>, <param><decl><type>struct <name>h2_mplx</name> *</type><name>m</name></decl></param>,
<param><decl><type>struct <name>h2_bucket_beam</name> *</type><name>input</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>output_max_mem</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_task_destroy</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_task_do</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>apr_thread_t</name> *</type><name>thread</name></decl></param>, <param><decl><type><name>int</name></type> <name>worker_id</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_task_redo</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_task_can_redo</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_task_rst</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>int</name></type> <name>error</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_task_register_hooks</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_task_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<extern>extern APR_OPTIONAL_FN_TYPE(ap_logio_add_bytes_in</extern>) <expr_stmt><expr>*<name>h2_task_logio_add_bytes_in</name></expr>;</expr_stmt>
<extern>extern APR_OPTIONAL_FN_TYPE(ap_logio_add_bytes_out</extern>) <expr_stmt><expr>*<name>h2_task_logio_add_bytes_out</name></expr>;</expr_stmt>
<function_decl><type><name>apr_status_t</name></type> <name>h2_task_freeze</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_task_thaw</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_task_has_thawed</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
