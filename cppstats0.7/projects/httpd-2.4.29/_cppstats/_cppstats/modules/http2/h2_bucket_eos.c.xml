<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/http2/h2_bucket_eos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_eos.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_bucket_refcount</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_bucket_eos</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bucket_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_stream</name> **</type><name>pstream</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>pstream</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>pstream</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bucket_read</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>str</name></decl></param>,
<param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr>(<name>void</name>)<name>b</name></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>block</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>str</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>len</name> = 0</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_bucket</name> *</type><name>h2_bucket_eos_make</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_bucket_eos</name> *</type><name>h</name></decl>;</decl_stmt>
<expr_stmt><expr><name>h</name> = <call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>h</name>-&gt;<name>stream</name></name> = <name>stream</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_shared_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>type</name></name> = &amp;<name>h2_bucket_type_eos</name></expr>;</expr_stmt>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>apr_bucket</name> *</type><name>h2_bucket_eos_create</name><parameter_list>(<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>list</name></decl></param>,
<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_BUCKET_INIT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>free</name></name> = <name>apr_bucket_free</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>b</name>-&gt;<name>list</name></name> = <name>list</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>h2_bucket_eos_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_bucket_eos</name> *</type><name>h</name> <init>= <expr><name><name>b</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_pre_cleanup_register</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>h</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>bucket_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>bucket_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_bucket_eos</name> *</type><name>h</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_bucket_shared_destroy</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name> <init>= <expr><name><name>h</name>-&gt;<name>stream</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>stream</name> &amp;&amp; <name><name>stream</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>h</name>-&gt;<name>stream</name></name></expr></argument>, <argument><expr><name>bucket_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_stream_dispatch</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_SEV_EOS_SENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>h2_bucket_type_eos</name> <init>= <expr><block>{
<expr>"H2EOS"</expr>, <expr>5</expr>, <expr><name>APR_BUCKET_METADATA</name></expr>,
<expr><name>bucket_destroy</name></expr>,
<expr><name>bucket_read</name></expr>,
<expr><name>apr_bucket_setaside_noop</name></expr>,
<expr><name>apr_bucket_split_notimpl</name></expr>,
<expr><name>apr_bucket_shared_copy</name></expr>
}</block></expr></init></decl>;</decl_stmt>
</unit>
