<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/http2/h2_ctx.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>h2_ctx</name> *</type><name>h2_ctx_create</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>http2_module</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_ctx_server_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_ctx_clear</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>http2_module</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>h2_ctx</name> *</type><name>h2_ctx_create_for</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_create</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>task</name></name> = <name>task</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><name>h2_ctx</name> *</type><name>h2_ctx_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>create</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr>(<name>h2_ctx</name>*)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>http2_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ctx</name> == <name>NULL</name> &amp;&amp; <name>create</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ctx</name> = <call><name>h2_ctx_create</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><name>h2_ctx</name> *</type><name>h2_ctx_rget</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_ctx_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>h2_ctx_protocol_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = <name><name>c</name>-&gt;<name>master</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = (<name>h2_ctx</name>*)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>http2_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name>? <name><name>ctx</name>-&gt;<name>protocol</name></name> : <name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>h2_ctx</name> *</type><name>h2_ctx_protocol_set</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proto</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>protocol</name></name> = <name>proto</name></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><name>h2_session</name> *</type><name>h2_ctx_session_get</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>ctx</name>? <name><name>ctx</name>-&gt;<name>session</name></name> : <name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_ctx_session_set</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type>struct <name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name></name> = <name>session</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>server_rec</name> *</type><name>h2_ctx_server_get</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>ctx</name>? <name><name>ctx</name>-&gt;<name>server</name></name> : <name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>h2_ctx</name> *</type><name>h2_ctx_server_set</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>server</name></name> = <name>s</name></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_ctx_is_task</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>ctx</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>task</name></name></expr>;</return>
}</block></function>
<function><type><name>h2_task</name> *</type><name>h2_ctx_get_task</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name>ctx</name>? <name><name>ctx</name>-&gt;<name>task</name></name> : <name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>h2_task</name> *</type><name>h2_ctx_cget_task</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>h2_task</name> *</type><name>h2_ctx_rget_task</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
</unit>
