<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/http2/h2_alt_svc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_alt_svc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_alt_svc_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function><type><name>void</name></type> <name>h2_alt_svc_register_hooks</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>h2_alt_svc_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>h2_alt_svc</name> *</type><name>h2_alt_svc_parse</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep</name> <init>= <expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>sep</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alpn</name> <init>= <expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sep</name> - <name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <name>sep</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>sep</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>sep</name> != <name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>host</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sep</name> - <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>s</name> = <name>sep</name> + 1</expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>s</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = (<name>int</name>)<call><name>apr_atoi64</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>port</name> &gt; 0 &amp;&amp; <name>port</name> &lt; (0x1 &lt;&lt; 16)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>h2_alt_svc</name> *</type><name>as</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>as</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>as</name>-&gt;<name>alpn</name></name> = <name>alpn</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name>-&gt;<name>host</name></name> = <name>host</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>as</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<return>return <expr><name>as</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h2_alt_svc_IDX</name><parameter_list>(<param><type><name>list</name></type></param>, <param><type><name>i</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((h2_alt_svc**)(list)-&gt;elts)[i]</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_alt_svc_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>cfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalives</name></name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cfg</name> = <call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>hostname</name></name> &amp;&amp; <name>cfg</name> &amp;&amp; <name><name>cfg</name>-&gt;<name>alt_svcs</name></name> &amp;&amp; <name><name>cfg</name>-&gt;<name>alt_svcs</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alt_svc_used</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Alt-Svc-Used"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>alt_svc_used</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alt_svc</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>svc_ma</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>secure</name> <init>= <expr><call><name>h2_h2_is_tls</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ma</name> <init>= <expr><call><name>h2_config_geti</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_ALT_SVC_MAX_AGE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ma</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>svc_ma</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"; ma=%d"</expr></argument>, <argument><expr><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03043</expr></argument>)</argument_list></call>
"h2_alt_svc: announce %s for %s:%d"</expr></argument>,
<argument><expr>(<name>secure</name>? "secure" : "insecure")</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>r</name>-&gt;<name>server</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cfg</name>-&gt;<name>alt_svcs</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>h2_alt_svc</name> *</type><name>as</name> <init>= <expr><call><name>h2_alt_svc_IDX</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>alt_svcs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ahost</name> <init>= <expr><name><name>as</name>-&gt;<name>host</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>ahost</name> &amp;&amp; !<call><name>apr_strnatcasecmp</name><argument_list>(<argument><expr><name>ahost</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ahost</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>secure</name> || !<name>ahost</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>alt_svc</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%s%s%s=\"%s:%d\"%s"</expr></argument>,
<argument><expr><name>alt_svc</name></expr></argument>,
<argument><expr>(*<name>alt_svc</name>? ", " : "")</expr></argument>, <argument><expr><name><name>as</name>-&gt;<name>alpn</name></name></expr></argument>,
<argument><expr><name>ahost</name>? <name>ahost</name> : ""</expr></argument>, <argument><expr><name><name>as</name>-&gt;<name>port</name></name></expr></argument>,
<argument><expr><name>svc_ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>*<name>alt_svc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Alt-Svc"</expr></argument>, <argument><expr><name>alt_svc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
</unit>
