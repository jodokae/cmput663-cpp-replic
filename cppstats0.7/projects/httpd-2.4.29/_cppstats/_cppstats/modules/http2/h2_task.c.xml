<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/http2/h2_task.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_atomic.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_vhost.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;util_filter.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_mpm.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scoreboard.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_beam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_from_h1.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name></type> <name>H2_TASK_OUT_LOG</name><parameter_list>(<param><decl><type><name>int</name></type> <name>lvl</name></decl></param>, <param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>APLOG_C_IS_LEVEL</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>task</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>4 * 1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name> <init>= <expr>"(null)"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>bmax</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>h2_util_bb_print</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bmax</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>lvl</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"bb_dump(%s): %s"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>len</name>? <name>buffer</name> : <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>input_ser_header</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_printf</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"%s: %s\r\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>open_output</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03348</expr></argument>)</argument_list></call>
"h2_task(%s): open output to %s %s %s"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>authority</name></name></expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>output</name>.<name>opened</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call><name>h2_mplx_out_open</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>send_out</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name>*</type> <name>bb</name></decl></param>, <param><decl><type><name>int</name></type> <name>block</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>written</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>H2_TASK_OUT_LOG</name><argument_list>(<argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>"h2_task send_out"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_beam_log</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>"send_out(before)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>h2_beam_send</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>block</name>? <name>APR_BLOCK_READ</name> : <name>APR_NONBLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_beam_log</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>"send_out(after)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>written</name> -= <name>left</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>h2_task_logio_add_bytes_out</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_task_logio_add_bytes_out</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_task(%s): send_out done"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_task(%s): send_out (%ld bytes)"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>slave_out</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name>*</type> <name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>flush</name> <init>= <expr>0</expr></init>, <name>blocking</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>frozen</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_util_bb_log</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>,
<argument><expr>"frozen task output write, ignored"</expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>AP_BUCKET_IS_EOR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>eor</name></name> = <name>b</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<label><name>send</name>:</label>
<expr_stmt><expr><name>blocking</name> = (!<name><name>task</name>-&gt;<name>assigned</name></name> &amp;&amp; <name><name>task</name>-&gt;<name>output</name>.<name>opened</name></name>)</expr>;</expr_stmt>
<for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> || <call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> || <call><name>AP_BUCKET_IS_EOR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flush</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>output</name>.<name>bb</name></name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>&amp;<name><name>task</name>-&gt;<name>output</name>.<name>bb</name></name></expr></argument>, <argument><expr>&amp;<name>bb</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<goto>goto <name>out</name>;</goto>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>send_out</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>send_out</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>task</name>-&gt;<name>output</name>.<name>opened</name></name> &amp;&amp; <name>APR_SUCCESS</name> == (<name>rv</name> = <call><name>open_output</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<goto>goto <name>send</name>;</goto>
}</block></then> <else>else <if>if <condition>(<expr><name>blocking</name> &amp;&amp; <name>flush</name></expr>)</condition><then> <block>{
<goto>goto <name>send</name>;</goto>
}</block></then></if></else></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03405</expr></argument>)</argument_list></call>
"h2_slave_out(%s): saving brigade"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>&amp;<name><name>task</name>-&gt;<name>output</name>.<name>bb</name></name></expr></argument>, <argument><expr>&amp;<name>bb</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>flush</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name> &amp;&amp; !<name><name>task</name>-&gt;<name>output</name>.<name>opened</name></name> &amp;&amp; <name>flush</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>open_output</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<label><name>out</name>:</label>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_out(%s): slave_out leave"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>output_finish</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>task</name>-&gt;<name>output</name>.<name>opened</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>open_output</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_filter_slave_in</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name>*</type> <name>bb</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>, *<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bblen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>trace1</name> <init>= <expr><call><name>APLOGctrace1</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rmax</name> <init>= <expr>((<name>readbytes</name> &lt;= <name>APR_SIZE_MAX</name>)?
(<name>apr_size_t</name>)<name>readbytes</name> : <name>APR_SIZE_MAX</name>)</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>task</name> = <call><name>h2_ctx_cget_task</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_in(%s): read, mode=%d, block=%d, readbytes=%ld"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr>(<name>long</name>)<name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_INIT</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ECONNABORTED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>b</name> = <name>next</name></expr></incr>) <block>{
<expr_stmt><expr><name>next</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>b</name>-&gt;<name>length</name></name> == 0 &amp;&amp; !<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<while>while <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_in(%s): get more data from mplx, block=%d, "
"readbytes=%ld"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr>(<name>long</name>)<name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_beam_receive</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>,
<argument><expr>128*1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <name>APR_EOF</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_in(%s): read returned"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name>mode</name> == <name>AP_MODE_GETLINE</name> || <name>block</name> == <name>APR_BLOCK_READ</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_util_bb_log</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>,
<argument><expr>"input.beam recv raw"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>h2_task_logio_add_bytes_in</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_task_logio_add_bytes_in</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>status</name> == <name>APR_EOF</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>(<name>mode</name> == <name>AP_MODE_SPECULATIVE</name>)? <name>APR_EAGAIN</name> : <name>APR_EOF</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_util_bb_log</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>,
<argument><expr>"task_input.bb"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_in(%s): no data"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>block</name> == <name>APR_NONBLOCK_READ</name>)? <name>APR_EAGAIN</name> : <name>APR_EOF</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_EXHAUSTIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_brigade_concat_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>rmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_SPECULATIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_brigade_copy_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>rmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mode</name> == <name>AP_MODE_GETLINE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>apr_brigade_split_line</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>,
<argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APLOGctrace1</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>-1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_in(%s): getline: %s"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_ENOTIMPL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03472</expr></argument>)</argument_list></call>
"h2_slave_in(%s), unsupported READ mode %d"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>APR_ENOTIMPL</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>trace1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_slave_in(%s): %ld data bytes"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>long</name>)<name>bblen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_filter_slave_output</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>filter</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name>*</type> <name>brigade</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_cget_task</name><argument_list>(<argument><expr><name><name>filter</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>slave_out</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_task_rst</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>H2_ERR_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_filter_parse_h1</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name>*</type> <name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_cget_task</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>bb</name> &amp;&amp; !<name><name>task</name>-&gt;<name>output</name>.<name>sent_response</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>status</name> = <call><name>h2_from_h1_parse_response</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>,
<argument><expr>"h2_task(%s): parsed response"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> || <name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
}</block></while>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_task_can_redo</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name> &amp;&amp; <call><name>h2_beam_was_received</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>(!<call><name>strcmp</name><argument_list>(<argument><expr>"GET"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr>"HEAD"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call>
|| !<call><name>strcmp</name><argument_list>(<argument><expr>"OPTIONS"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_task_redo</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>task</name>-&gt;<name>rst_error</name></name> = 0</expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>h2_task_rst</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>int</name></type> <name>error</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name><name>task</name>-&gt;<name>rst_error</name></name> = <name>error</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_leave</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>task</name>-&gt;<name>worker_done</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_abort</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>c</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>task</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>mod_ssl</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_ssl.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_task_pre_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_task_process_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_logio_add_bytes_in</name></expr></argument>)</argument_list></call> *<name>h2_task_logio_add_bytes_in</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_logio_add_bytes_out</name></expr></argument>)</argument_list></call> *<name>h2_task_logio_add_bytes_out</name></expr>;</expr_stmt>
<function><type><name>void</name></type> <name>h2_task_register_hooks</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>h2_task_pre_conn</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mod_ssl</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>h2_task_process_conn</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"H2_SLAVE_IN"</expr></argument>, <argument><expr><name>h2_filter_slave_in</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"H2_SLAVE_OUT"</expr></argument>, <argument><expr><name>h2_filter_slave_output</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"H2_PARSE_H1"</expr></argument>, <argument><expr><name>h2_filter_parse_h1</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_NETWORK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"H2_REQUEST"</expr></argument>, <argument><expr><name>h2_filter_request_in</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"H2_RESPONSE"</expr></argument>, <argument><expr><name>h2_filter_headers_out</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"H2_TRAILERS_OUT"</expr></argument>, <argument><expr><name>h2_filter_trailers_out</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_PROTOCOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_task_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>h2_task_logio_add_bytes_in</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_logio_add_bytes_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>h2_task_logio_add_bytes_out</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_logio_add_bytes_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_task_pre_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = <call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>)<name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>h2_ctx_is_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_h2, pre_connection, found stream task"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"H2_SLAVE_IN"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"H2_PARSE_H1"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"H2_SLAVE_OUT"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><name>h2_task</name> *</type><name>h2_task_create</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>h2_request</name> *</type><name>req</name></decl></param>, <param><decl><type><name>h2_mplx</name> *</type><name>m</name></decl></param>,
<param><decl><type><name>h2_bucket_beam</name> *</type><name>input</name></decl></param>,
<param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>output_max_mem</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>slave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>slave</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>task</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_task</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>task</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>task</name>-&gt;<name>id</name></name> = "000"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>stream_id</name></name> = <name>stream_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>c</name></name> = <name>slave</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>mplx</name></name> = <name>m</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>request</name></name> = <name>req</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name> = <name>input</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>output</name>.<name>max_buffer</name></name> = <name>output_max_mem</name></expr>;</expr_stmt>
<return>return <expr><name>task</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>h2_task_destroy</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_log</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>"task_destroy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_beam_destroy</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>eor</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_destroy</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>eor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_task_do</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>apr_thread_t</name> *</type><name>thread</name></decl></param>, <param><decl><type><name>int</name></type> <name>worker_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <name><name>task</name>-&gt;<name>c</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>worker_started</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>started_at</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>slave_id</name></decl>, <decl><type ref="prev"/><name>free_bits</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>id</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%ld-%d"</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>master</name>-&gt;<name>id</name></name></expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>sizeof(<name>unsigned</name> <name>long</name>) &gt;= 8</expr>)</condition><then> <block>{
<expr_stmt><expr><name>free_bits</name> = 32</expr>;</expr_stmt>
<expr_stmt><expr><name>slave_id</name> = <name><name>task</name>-&gt;<name>stream_id</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>free_bits</name> = 8</expr>;</expr_stmt>
<expr_stmt><expr><name>slave_id</name> = <name>worker_id</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>task</name>-&gt;<name>c</name>-&gt;<name>id</name></name> = (<name><name>c</name>-&gt;<name>master</name>-&gt;<name>id</name></name> &lt;&lt; <name>free_bits</name>)^<name>slave_id</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_KEEPALIVE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>h2_beam_create</name><argument_list>(<argument><expr>&amp;<name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>stream_id</name></name></expr></argument>, <argument><expr>"output"</expr></argument>,
<argument><expr><name>H2_BEAM_OWNER_SEND</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOMEM</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>h2_beam_buffer_size_set</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>max_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_beam_send_from</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_ctx_create_for</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_TASK_ID_NOTE</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_slave_run_pre_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>serialize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): serialize request %s %s"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_printf</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"%s %s HTTP/1.1\r\n"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>input_ser_header</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>request</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_puts</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>bb</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"\r\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): process connection"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>task</name>-&gt;<name>c</name>-&gt;<name>current_thread</name></name> = <name>thread</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_process_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>frozen</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): process_conn returned frozen task"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EAGAIN</name></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): processing done"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>output_finish</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_task_process_request</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>h2_request</name> *</type><name>req</name> <init>= <expr><name><name>task</name>-&gt;<name>request</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_state_t</name> *</type><name>cs</name> <init>= <expr><name><name>c</name>-&gt;<name>cs</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): create request_rec"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>r</name> = <call><name>h2_request_create_rec</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name> &amp;&amp; (<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>timeout</name></name> != <name><name>r</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>task</name>-&gt;<name>timeout</name></name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_beam_timeout_set</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>h2_beam_timeout_set</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>input</name>.<name>beam</name></name></expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_WRITE</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cs</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_HANDLER</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): start process_request"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_request</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>frozen</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): process_request frozen"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): process_request done"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>cs</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cs</name>-&gt;<name>state</name></name> = <name>CONN_STATE_WRITE_COMPLETION</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>r</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): create request_rec failed, r=NULL"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s): create request_rec failed, r-&gt;status=%d"</expr></argument>,
<argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_task_process_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = <call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>h2_ctx_is_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>task</name>-&gt;<name>request</name>-&gt;<name>serialize</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_h2, processing request directly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>h2_task_process_request</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>task</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"h2_task(%s), serialized handling"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
<argument><expr>"slave_conn(%ld): has no task"</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_task_freeze</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>task</name>-&gt;<name>frozen</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>task</name>-&gt;<name>frozen</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03406</expr></argument>)</argument_list></call>
"h2_task(%s), frozen"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>h2_task_thaw</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>task</name>-&gt;<name>frozen</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>task</name>-&gt;<name>frozen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03407</expr></argument>)</argument_list></call>
"h2_task(%s), thawed"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>task</name>-&gt;<name>thawed</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>h2_task_has_thawed</name><parameter_list>(<param><decl><type><name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>task</name>-&gt;<name>thawed</name></name></expr>;</return>
}</block></function>
</unit>
