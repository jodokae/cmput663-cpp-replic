<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/dav/fs/repos.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dav.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"repos.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_GET_HANDLER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FS_COPY_BLOCKSIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<struct>struct <name>dav_resource_private</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_walk_resource</name></type> <name>wres</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource</name></type> <name>res1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name></type> <name>info1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>path1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>uri_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource</name></type> <name>res2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name></type> <name>info2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>path2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>locknull_buf</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_fs_walker_context</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_move</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>work_buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res_dst</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>root</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>dav_fs_copymove_walk_ctx</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_WALKTYPE_HIDDEN</name></cpp:macro> <cpp:value>0x4000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_WALKTYPE_POSTFIX</name></cpp:macro> <cpp:value>0x8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_CALLTYPE_POSTFIX</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>dav_hooks_locks</name></type> <name>dav_hooks_locks_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_repository</name></type> <name>dav_hooks_repository_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_liveprop</name></type> <name>dav_hooks_liveprop_fs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>dav_fs_namespace_uris</name><index>[]</index></name> <init>= <expr><block>{
<expr>"DAV:"</expr>,
<expr>"http://apache.org/dav/props/"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<enum>enum <block>{
<decl><name>DAV_FS_URI_DAV</name></decl>,
<decl><name>DAV_FS_URI_MYPROPS</name></decl>
}</block>;</enum>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FS_HAS_EXECUTABLE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FINFO_MASK</name></cpp:macro> <cpp:value>(APR_FINFO_LINK | APR_FINFO_TYPE | APR_FINFO_INODE | APR_FINFO_SIZE | APR_FINFO_CTIME | APR_FINFO_MTIME | APR_FINFO_PROT)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FINFO_MASK</name></cpp:macro> <cpp:value>(APR_FINFO_LINK | APR_FINFO_TYPE | APR_FINFO_INODE | APR_FINFO_SIZE | APR_FINFO_CTIME | APR_FINFO_MTIME)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_PROPID_FS_executable</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DAV_FS_TMP_PREFIX</name></cpp:macro> <cpp:value>".davfs.tmp"</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_liveprop_spec</name></type> <name><name>dav_fs_props</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{
<expr><name>DAV_FS_URI_DAV</name></expr>,
<expr>"creationdate"</expr>,
<expr><name>DAV_PROPID_creationdate</name></expr>,
<expr>0</expr>
}</block></expr>,
<expr><block>{
<expr><name>DAV_FS_URI_DAV</name></expr>,
<expr>"getcontentlength"</expr>,
<expr><name>DAV_PROPID_getcontentlength</name></expr>,
<expr>0</expr>
}</block></expr>,
<expr><block>{
<expr><name>DAV_FS_URI_DAV</name></expr>,
<expr>"getetag"</expr>,
<expr><name>DAV_PROPID_getetag</name></expr>,
<expr>0</expr>
}</block></expr>,
<expr><block>{
<expr><name>DAV_FS_URI_DAV</name></expr>,
<expr>"getlastmodified"</expr>,
<expr><name>DAV_PROPID_getlastmodified</name></expr>,
<expr>0</expr>
}</block></expr>,
<expr><block>{
<expr><name>DAV_FS_URI_MYPROPS</name></expr>,
<expr>"executable"</expr>,
<expr><name>DAV_PROPID_FS_executable</name></expr>,
<expr>0</expr>
}</block></expr>,
<expr><block>{ <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_liveprop_group</name></type> <name>dav_fs_liveprop_group</name> <init>= <expr><block>{
<expr><name>dav_fs_props</name></expr>,
<expr><name>dav_fs_namespace_uris</name></expr>,
<expr>&amp;<name>dav_hooks_liveprop_fs</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<struct>struct <name>dav_stream</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>temppath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unlink_on_error</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAP_IO2HTTP</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(APR_STATUS_IS_ENOSPC(e) ? HTTP_INSUFFICIENT_STORAGE : APR_STATUS_IS_ENOENT(e) ? HTTP_CONFLICT : HTTP_INTERNAL_SERVER_ERROR)</cpp:value></cpp:define>
<function_decl><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_walk</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name></decl></param>, <param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_internal_walk</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_move</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>root_dst</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>dav_fs_get_request_rec</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>r</name></name></expr>;</return>
}</block></function>
<function><type><name>apr_pool_t</name> *</type><name>dav_fs_pool</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>dav_fs_pathname</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<return>return <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr>;</return>
}</block></function>
<function><type><name>dav_error</name> *</type> <name>dav_fs_dir_file_name</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>dirpath_p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>fname_p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dirpath_p</name> = <name><name>ctx</name>-&gt;<name>pathname</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fname_p</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>fname_p</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>testpath</name></decl>, *<decl><type ref="prev"/><name>rootpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dirpath</name> <init>= <expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pathname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>dirlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>testpath</name> = <name>dirpath</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dirlen</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_root</name><argument_list>(<argument><expr>&amp;<name>rootpath</name></expr></argument>, <argument><expr>&amp;<name>testpath</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>testpath</name> &amp;&amp; *<name>testpath</name>)
|| <name>rv</name> == <name>APR_ERELATIVE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>dirpath</name><index>[<expr><name>dirlen</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dirpath</name><index>[<expr><name>dirlen</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> || <name>rv</name> == <name>APR_ERELATIVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>dirpath_p</name> = <name>dirpath</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>fname_p</name> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr>*<name>fname_p</name> = <name><name>ctx</name>-&gt;<name>pathname</name></name> + <name>dirlen</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"An incomplete/bad path was found in "
"dav_fs_dir_file_name."</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_format_time</name><parameter_list>(<param><decl><type><name>int</name></type> <name>style</name></decl></param>, <param><decl><type><name>apr_time_t</name></type> <name>sec</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>buflen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>tms</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>apr_time_exp_gmt</name><argument_list>(<argument><expr>&amp;<name>tms</name></expr></argument>, <argument><expr><name>sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>style</name> == <name>DAV_STYLE_ISO8601</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%.4d-%.2d-%.2dT%.2d:%.2d:%.2dZ"</expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_year</name></name> + 1900</expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_mon</name></name> + 1</expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_mday</name></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr>"%s, %.2d %s %d %.2d:%.2d:%.2d GMT"</expr></argument>,
<argument><expr><name><name>apr_day_snames</name><index>[<expr><name><name>tms</name>.<name>tm_wday</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>apr_month_snames</name><index>[<expr><name><name>tms</name>.<name>tm_mon</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_year</name></name> + 1900</expr></argument>,
<argument><expr><name><name>tms</name>.<name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tms</name>.<name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_copymove_file</name><parameter_list>(
<param><decl><type><name>int</name></type> <name>is_move</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_finfo_t</name> *</type><name>src_finfo</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_finfo_t</name> *</type><name>dst_finfo</name></decl></param>,
<param><decl><type><name>dav_buffer</name> *</type><name>pbuf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>work_buf</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>inf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>outf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>pbuf</name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>pbuf</name> = &amp;<name>work_buf</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>src_finfo</name> &amp;&amp; <name><name>src_finfo</name>-&gt;<name>valid</name></name> &amp; <name>APR_FINFO_PROT</name>
&amp;&amp; <name><name>src_finfo</name>-&gt;<name>protection</name></name> &amp; <name>APR_UEXECUTE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>perms</name> = <name><name>src_finfo</name>-&gt;<name>protection</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dst_finfo</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_perms_set</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not set permissions on destination"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>perms</name> = <name>APR_OS_DEFAULT</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>dav_set_bufsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>, <argument><expr><name>DAV_FS_COPY_BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>inf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BINARY</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not open file for reading"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>outf</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name>
| <name>APR_BINARY</name></expr></argument>, <argument><expr><name>perms</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>MAP_IO2HTTP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not open file for writing"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>DAV_FS_COPY_BLOCKSIZE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>inf</name></expr></argument>, <argument><expr><name><name>pbuf</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>status</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>lcl_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>lcl_status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>lcl_status</name></expr></argument>,
<argument><expr>"Could not delete output after read "
"failure. Server is now in an "
"inconsistent state."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not read input file"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>status</name> == <name>APR_EOF</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>outf</name></expr></argument>, <argument><expr><name><name>pbuf</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>lcl_status</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>lcl_status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>lcl_status</name></expr></argument>,
<argument><expr>"Could not delete output after write "
"failure. Server is now in an "
"inconsistent state."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>MAP_IO2HTTP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not write output file"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>outf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_move</name> &amp;&amp; (<name>status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>lcl_status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Could not remove source "
"file %s after move to %s. The "
"server may be in an "
"inconsistent state."</expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>(<name>lcl_status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>lcl_status</name></expr></argument>,
<argument><expr>"Could not remove source or destination "
"file. Server is now in an inconsistent "
"state."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not remove source file after move. "
"Destination was removed to ensure consistency."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_copymove_state</name><parameter_list>(
<param><decl><type><name>int</name></type> <name>is_move</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_file</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_dir</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_file</name></decl></param>,
<param><decl><type><name>dav_buffer</name> *</type><name>pbuf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>src_finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dst_state_finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst</name></decl>;</decl_stmt>
<expr_stmt><expr><name>src</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>src_dir</name></expr></argument>, <argument><expr>"/" <name>DAV_FS_STATE_DIR</name> "/"</expr></argument>, <argument><expr><name>src_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>src_finfo</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>APR_FINFO_NORM</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dst</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst_dir</name></expr></argument>, <argument><expr>"/" <name>DAV_FS_STATE_DIR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dir_make</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"Could not create internal state directory"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>dst_state_finfo</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>APR_FINFO_NORM</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"State directory disappeared"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dst_state_finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"State directory is actually a file"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dst</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>dst_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_move</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EXDEV</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_fs_copymove_file</name><argument_list>(<argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"Could not move state file."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>dav_fs_copymove_file</name><argument_list>(<argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_fs_copymoveset</name><parameter_list>(<param><decl><type><name>int</name></type> <name>is_move</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>dav_buffer</name> *</type><name>pbuf</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_state1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>src_state2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_state1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dst_state2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_dir_file_name</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr>&amp;<name>src_dir</name></expr></argument>, <argument><expr>&amp;<name>src_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_dir_file_name</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr>&amp;<name>dst_dir</name></expr></argument>, <argument><expr>&amp;<name>dst_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_dbm_get_statefiles</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>src_file</name></expr></argument>, <argument><expr>&amp;<name>src_state1</name></expr></argument>, <argument><expr>&amp;<name>src_state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_dbm_get_statefiles</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>dst_file</name></expr></argument>, <argument><expr>&amp;<name>dst_state1</name></expr></argument>, <argument><expr>&amp;<name>dst_state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr>(<name>src_state2</name> != <name>NULL</name> &amp;&amp; <name>dst_state2</name> == <name>NULL</name>) ||
(<name>src_state2</name> == <name>NULL</name> &amp;&amp; <name>dst_state2</name> != <name>NULL</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"DESIGN ERROR: dav_dbm_get_statefiles() "
"returned inconsistent results."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>err</name> = <call><name>dav_fs_copymove_state</name><argument_list>(<argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>src_dir</name></expr></argument>, <argument><expr><name>src_state1</name></expr></argument>,
<argument><expr><name>dst_dir</name></expr></argument>, <argument><expr><name>dst_state1</name></expr></argument>,
<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> == <name>NULL</name> &amp;&amp; <name>src_state2</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_fs_copymove_state</name><argument_list>(<argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,
<argument><expr><name>src_dir</name></expr></argument>, <argument><expr><name>src_state2</name></expr></argument>,
<argument><expr><name>dst_dir</name></expr></argument>, <argument><expr><name>dst_state2</name></expr></argument>,
<argument><expr><name>pbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>err</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>err</name>-&gt;<name>desc</name></name> =
"Could not fully copy/move the properties. "
"The server is now in an inconsistent state."</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_fs_deleteset</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>state1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>state2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pathname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_dir_file_name</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr>&amp;<name>dirpath</name></expr></argument>, <argument><expr>&amp;<name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_dbm_get_statefiles</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr>&amp;<name>state1</name></expr></argument>, <argument><expr>&amp;<name>state2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pathname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>dirpath</name></expr></argument>,
<argument><expr>"/" <name>DAV_FS_STATE_DIR</name> "/"</expr></argument>,
<argument><expr><name>state1</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>
&amp;&amp; !<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not remove properties."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>state2</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pathname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name>dirpath</name></expr></argument>,
<argument><expr>"/" <name>DAV_FS_STATE_DIR</name> "/"</expr></argument>,
<argument><expr><name>state2</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name>pathname</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name>
&amp;&amp; !<call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not fully remove properties. "
"The server is now in an inconsistent "
"state."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_get_resource</name><parameter_list>(
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root_dir</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>label</name></decl></param>,
<param><decl><type><name>int</name></type> <name>use_checked_in</name></decl></param>,
<param><decl><type><name>dav_resource</name> **</type><name>result_resource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource</name> *</type><name>resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>finfo</name></name> = <name><name>r</name>-&gt;<name>finfo</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
filename = r-&gt;case_preserved_filename;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>filename</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>s</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>s</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name><index>[<expr><name>len</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>pathname</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name>resource</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>resource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>type</name></name> = <name>DAV_RESOURCE_TYPE_REGULAR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>info</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>hooks</name></name> = &amp;<name>dav_hooks_repository_fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>pool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 1 &amp;&amp; <name><name>r</name>-&gt;<name>uri</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>len</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>uri</name></name> = <name>s</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>resource</name>-&gt;<name>uri</name></name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resource</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>collection</name></name> = <name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>path_info</name></name> != <name>NULL</name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name> != '\0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name><name>r</name>-&gt;<name>path_info</name></name> != '/' || <name><name>r</name>-&gt;<name>path_info</name><index>[<expr>1</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>resource</name>-&gt;<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>collection</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The URL contains extraneous path "
"components. The resource could not "
"be identified."</expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>finfo</name>.<name>filetype</name></name> = <name>APR_NOFILE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>result_resource</name> = <name>resource</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_get_parent_resource</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_resource</name> **</type><name>result_parent</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>parent_ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource</name> *</type><name>parent_resource</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>dirpath</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>testroot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>testpath</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result_parent</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>testpath</name> = <name><name>ctx</name>-&gt;<name>pathname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_filepath_root</name><argument_list>(<argument><expr>&amp;<name>testroot</name></expr></argument>, <argument><expr>&amp;<name>testpath</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_ERELATIVE</name>)
|| !<name>testpath</name> || !*<name>testpath</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>result_parent</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>parent_ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parent_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_ctx</name>-&gt;<name>pool</name></name> = <name><name>ctx</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>dirpath</name> = <call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>)</argument_list></call> &gt; 1 &amp;&amp; <name><name>dirpath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>dirpath</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>dirpath</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>parent_ctx</name>-&gt;<name>pathname</name></name> = <name>dirpath</name></expr>;</expr_stmt>
<expr_stmt><expr><name>parent_resource</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>parent_resource</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_resource</name>-&gt;<name>info</name></name> = <name>parent_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_resource</name>-&gt;<name>collection</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_resource</name>-&gt;<name>hooks</name></name> = &amp;<name>dav_hooks_repository_fs</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>parent_resource</name>-&gt;<name>pool</name></name> = <name><name>resource</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>uri</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>uri</name> <init>= <expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> &gt; 1 &amp;&amp; <name><name>uri</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
<expr_stmt><expr><name><name>uri</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>parent_resource</name>-&gt;<name>uri</name></name> = <name>uri</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>parent_ctx</name>-&gt;<name>finfo</name></name></expr></argument>, <argument><expr><name><name>parent_ctx</name>-&gt;<name>pathname</name></name></expr></argument>,
<argument><expr><name>APR_FINFO_NORM</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> || <name>rv</name> == <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>parent_resource</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>result_parent</name> = <name>parent_resource</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_fs_is_same_resource</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx1</name> <init>= <expr><name><name>res1</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx2</name> <init>= <expr><name><name>res2</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>res1</name>-&gt;<name>hooks</name></name> != <name><name>res2</name>-&gt;<name>hooks</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<if>if <condition>(<expr>(<name><name>ctx1</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name>) &amp;&amp; (<name><name>ctx2</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name>)
&amp;&amp; (<name><name>ctx1</name>-&gt;<name>finfo</name>.<name>valid</name></name> &amp; <name><name>ctx2</name>-&gt;<name>finfo</name>.<name>valid</name></name> &amp; <name>APR_FINFO_INODE</name>)</expr>)</condition><then> <block>{
<return>return <expr><name><name>ctx1</name>-&gt;<name>finfo</name>.<name>inode</name></name> == <name><name>ctx2</name>-&gt;<name>finfo</name>.<name>inode</name></name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx1</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>ctx2</name>-&gt;<name>pathname</name></name></expr></argument>)</argument_list></call> == 0</expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_fs_is_parent_resource</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res1</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>res2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx1</name> <init>= <expr><name><name>res1</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx2</name> <init>= <expr><name><name>res2</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len1</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx1</name>-&gt;<name>pathname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len2</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>res1</name>-&gt;<name>hooks</name></name> != <name><name>res2</name>-&gt;<name>hooks</name></name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><name>len2</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx2</name>-&gt;<name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>len2</name> &gt; <name>len1</name>
&amp;&amp; <call><name>memcmp</name><argument_list>(<argument><expr><name><name>ctx1</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>ctx2</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>len1</name></expr></argument>)</argument_list></call> == 0
&amp;&amp; <name><name>ctx2</name>-&gt;<name>pathname</name><index>[<expr><name>len1</name></expr>]</index></name> == '/')</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>tmpfile_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_stream</name> *</type><name>ds</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ds</name>-&gt;<name>temppath</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>ds</name>-&gt;<name>temppath</name></name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dav_fs_mktemp</name><parameter_list>(<param><decl><type><name>apr_file_t</name> **</type><name>fp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>templ</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr>((<call><name>getpid</name><argument_list>()</argument_list></call> &lt;&lt; 7) + (<name>apr_uintptr_t</name>)<name>templ</name> % (1 &lt;&lt; 16) ) %
( 1 &lt;&lt; 23 )</expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>numstr</name> <init>= <expr><name>templ</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>templ</name></expr></argument>)</argument_list></call> - 6</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>numstr</name> &gt;= <name>templ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>num</name> = (<name>num</name> + 1) % ( 1 &lt;&lt; 23 )</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>numstr</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>"%06x"</expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>templ</name></expr></argument>,
<argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_BINARY</name> | <name>APR_EXCL</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_open_stream</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_stream_mode</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>dav_stream</name> **</type><name>stream</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_stream</name> *</type><name>ds</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ds</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{
<default>default:
<expr_stmt><expr><name>flags</name> = <name>APR_READ</name> | <name>APR_BINARY</name></expr>;</expr_stmt>
<break>break;</break>
</default><case>case <expr><name>DAV_MODE_WRITE_TRUNC</name></expr>:
<expr_stmt><expr><name>flags</name> = <name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_TRUNCATE</name> | <name>APR_BINARY</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_MODE_WRITE_SEEKABLE</name></expr>:
<expr_stmt><expr><name>flags</name> = <name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_BINARY</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><name><name>ds</name>-&gt;<name>p</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name>-&gt;<name>pathname</name></name> = <name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name>-&gt;<name>temppath</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ds</name>-&gt;<name>unlink_on_error</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> == <name>DAV_MODE_WRITE_TRUNC</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ds</name>-&gt;<name>temppath</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>pathname</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DAV_FS_TMP_PREFIX</name> "XXXXXX"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>dav_fs_mktemp</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>f</name></name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>temppath</name></name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ds</name></expr></argument>, <argument><expr><name>tmpfile_cleanup</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>mode</name> == <name>DAV_MODE_WRITE_SEEKABLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>f</name></name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>flags</name> | <name>APR_FOPEN_EXCL</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ds</name>-&gt;<name>unlink_on_error</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EEXIST</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>f</name></name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name><name>ds</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>ds</name>-&gt;<name>f</name></name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>ds</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>MAP_IO2HTTP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"An error occurred while opening a resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>stream</name> = <name>ds</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_close_stream</name><parameter_list>(<param><decl><type><name>dav_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>int</name></type> <name>commit</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>commit</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>stream</name>-&gt;<name>temppath</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_run</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>tmpfile_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>unlink_on_error</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>rv</name></expr></argument>,
<argument><expr>"There was a problem removing (rolling "
"back) the resource "
"when it was being closed."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>temppath</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>temppath</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"There was a problem writing the file "
"atomically after writes."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>tmpfile_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_write_stream</name><parameter_list>(<param><decl><type><name>dav_stream</name> *</type><name>stream</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>f</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOSPC</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INSUFFICIENT_STORAGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"There is not enough storage to write to "
"this resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"An error occurred while writing to a "
"resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_seek_stream</name><parameter_list>(<param><decl><type><name>dav_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>abs_pos</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_seek</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>f</name></name></expr></argument>, <argument><expr><name>APR_SET</name></expr></argument>, <argument><expr>&amp;<name>abs_pos</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not seek to specified position in the "
"resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_GET_HANDLER</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_set_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_update_mtime</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_accept_ranges</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_deliver</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>output</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>resource</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bkt</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_REGULAR</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_VERSION</name>
&amp;&amp; <name><name>resource</name>-&gt;<name>type</name></name> != <name>DAV_RESOURCE_TYPE_WORKING</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Cannot GET this type of resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"There is no default response to GET for a "
"collection."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr></argument>,
<argument><expr><name>APR_READ</name> | <name>APR_BINARY</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>pool</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"File permissions deny server access."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bkt</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>output</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>bkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>AP_FILTER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not write contents to filter."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_create_collection</name><parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_dir_make</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOSPC</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INSUFFICIENT_STORAGE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"There is not enough storage to create "
"this collection."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Cannot create collection; intermediate "
"collection does not exist."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Unable to create collection."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>collection</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_copymove_walker</name><parameter_list>(<param><decl><type><name>dav_walk_resource</name> *</type><name>wres</name></decl></param>,
<param><decl><type><name>int</name></type> <name>calltype</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_fs_copymove_walk_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>wres</name>-&gt;<name>walk_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>srcinfo</name> <init>= <expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>dstinfo</name> <init>= <expr><name><name>ctx</name>-&gt;<name>res_dst</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>calltype</name> == <name>DAV_CALLTYPE_POSTFIX</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(<name>void</name>) <call><name>apr_dir_remove</name><argument_list>(<argument><expr><name><name>srcinfo</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_dir_make</name><argument_list>(<argument><expr><name><name>dstinfo</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_fs_copymove_file</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>is_move</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>srcinfo</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>dstinfo</name>-&gt;<name>pathname</name></name></expr></argument>,
<argument><expr>&amp;<name><name>srcinfo</name>-&gt;<name>finfo</name></name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>res_dst</name>-&gt;<name>exists</name></name> ? &amp;<name><name>dstinfo</name>-&gt;<name>finfo</name></name> : <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>work_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name>
&amp;&amp; !<call><name>ap_is_HTTP_SERVER_ERROR</name><argument_list>(<argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call>
&amp;&amp; (<name><name>ctx</name>-&gt;<name>is_move</name></name>
|| !<call><name>dav_fs_is_same_resource</name><argument_list>(<argument><expr><name><name>wres</name>-&gt;<name>resource</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>root</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_add_response</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name><name>err</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_fs_copymove_resource</name><parameter_list>(
<param><decl><type><name>int</name></type> <name>is_move</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>src</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_buffer</name></type> <name>work_buf</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>response</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_walk_params</name></type> <name>params</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>params</name>.<name>walk_type</name></name> = <name>DAV_WALKTYPE_NORMAL</name> | <name>DAV_WALKTYPE_HIDDEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name>.<name>func</name></name> = <name>dav_fs_copymove_walker</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name>.<name>pool</name></name> = <name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name>.<name>root</name></name> = <name>src</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_move</name></expr>)</condition><then>
<expr_stmt><expr><name><name>params</name>.<name>walk_type</name></name> |= <name>DAV_WALKTYPE_POSTFIX</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_internal_walk</name><argument_list>(<argument><expr>&amp;<name>params</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr><name>is_move</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,
<argument><expr>&amp;<name>multi_status</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(*<name>response</name> = <name>multi_status</name>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_MULTI_STATUS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Error(s) occurred on some resources during "
"the COPY/MOVE process."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_copymove_file</name><argument_list>(<argument><expr><name>is_move</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>dst</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr></argument>,
<argument><expr>&amp;<name><name>src</name>-&gt;<name>info</name>-&gt;<name>finfo</name></name></expr></argument>,
<argument><expr><name><name>dst</name>-&gt;<name>exists</name></name> ? &amp;<name><name>dst</name>-&gt;<name>info</name>-&gt;<name>finfo</name></name> : <name>NULL</name></expr></argument>,
<argument><expr>&amp;<name>work_buf</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>dav_fs_copymoveset</name><argument_list>(<argument><expr><name>is_move</name></expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr>&amp;<name>work_buf</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_copy_resource</name><parameter_list>(
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>dav_resource</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>hooks</name></name> != <name><name>dst</name>-&gt;<name>hooks</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"DESIGN ERROR: a mix of repositories "
"was passed to copy_resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_copymove_resource</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>,
<argument><expr><name>response</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>collection</name></name> = <name><name>src</name>-&gt;<name>collection</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_move_resource</name><parameter_list>(
<param><decl><type><name>dav_resource</name> *</type><name>src</name></decl></param>,
<param><decl><type><name>dav_resource</name> *</type><name>dst</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>srcinfo</name> <init>= <expr><name><name>src</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>dstinfo</name> <init>= <expr><name><name>dst</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>src</name>-&gt;<name>hooks</name></name> != <name><name>dst</name>-&gt;<name>hooks</name></name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"DESIGN ERROR: a mix of repositories "
"was passed to move_resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name><name>srcinfo</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>dstinfo</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>srcinfo</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EXDEV</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_copymove_resource</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>,
<argument><expr><name>response</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dst</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>collection</name></name> = <name><name>src</name>-&gt;<name>collection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>collection</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>response</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>srcinfo</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>rv</name></expr></argument>,
<argument><expr>"Could not rename resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>collection</name></name> = <name><name>src</name>-&gt;<name>collection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>collection</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_copymoveset</name><argument_list>(<argument><expr>1</expr></argument>, <argument><expr><name><name>src</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_file_rename</name><argument_list>(<argument><expr><name><name>dstinfo</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>srcinfo</name>-&gt;<name>pathname</name></name></expr></argument>,
<argument><expr><name><name>srcinfo</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>srcinfo</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The resource was moved, but a failure "
"occurred during the move of its "
"properties. The resource could not be "
"restored to its original location. The "
"server is now in an inconsistent state."</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>src</name>-&gt;<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>src</name>-&gt;<name>collection</name></name> = <name><name>dst</name>-&gt;<name>collection</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>dst</name>-&gt;<name>collection</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>dav_push_error</name><argument_list>(<argument><expr><name><name>srcinfo</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The resource was moved, but a failure "
"occurred during the move of its properties. "
"The resource was moved back to its original "
"location, but its properties may have been "
"partially moved. The server may be in an "
"inconsistent state."</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_delete_walker</name><parameter_list>(<param><decl><type><name>dav_walk_resource</name> *</type><name>wres</name></decl></param>, <param><decl><type><name>int</name></type> <name>calltype</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>info</name> <init>= <expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>exists</name></name> &amp;&amp;
(!<name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>collection</name></name> || <name>calltype</name> == <name>DAV_CALLTYPE_POSTFIX</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>result</name></decl>;</decl_stmt>
<expr_stmt><expr><name>result</name> = <name><name>wres</name>-&gt;<name>resource</name>-&gt;<name>collection</name></name>
? <call><name>apr_dir_remove</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>wres</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>
: <call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>wres</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>result</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_add_response</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_remove_resource</name><parameter_list>(<param><decl><type><name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>info</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>response</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>dav_walk_params</name></type> <name>params</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_response</name> *</type><name>multi_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>params</name>.<name>walk_type</name></name> = (<name>DAV_WALKTYPE_NORMAL</name>
| <name>DAV_WALKTYPE_HIDDEN</name>
| <name>DAV_WALKTYPE_POSTFIX</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name>.<name>func</name></name> = <name>dav_fs_delete_walker</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name>.<name>pool</name></name> = <name><name>info</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>params</name>.<name>root</name></name> = <name>resource</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_walk</name><argument_list>(<argument><expr>&amp;<name>params</name></expr></argument>, <argument><expr><name>DAV_INFINITY</name></expr></argument>,
<argument><expr>&amp;<name>multi_status</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(*<name>response</name> = <name>multi_status</name>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_MULTI_STATUS</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"Error(s) occurred on some resources during "
"the deletion process."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>collection</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_FORBIDDEN</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>collection</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><call><name>dav_fs_deleteset</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_walker</name><parameter_list>(<param><decl><type><name>dav_fs_walker_context</name> *</type><name>fsctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>depth</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name> <init>= <expr><name><name>fsctx</name>-&gt;<name>params</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>params</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>isdir</name> <init>= <expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dirp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call>(*<name><name>params</name>-&gt;<name>func</name></name>)<argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>wres</name></name></expr></argument>,
<argument><expr><name>isdir</name>
? <name>DAV_CALLTYPE_COLLECTION</name>
: <name>DAV_CALLTYPE_MEMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>depth</name> == 0 || !<name>isdir</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>dav_check_bufsize</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name>DAV_BUFFER_PAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_check_bufsize</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name>DAV_BUFFER_PAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>cur_len</name></name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>exists</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res2</name>.<name>collection</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dirp</name></expr></argument>, <argument><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_DIRENT</name></expr></argument>, <argument><expr><name>dirp</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dirent</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == '.'
&amp;&amp; (<name>len</name> == 1 || (<name><name>dirent</name>.<name>name</name><index>[<expr>1</expr>]</index></name> == '.' &amp;&amp; <name>len</name> == 2))</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>params</name>-&gt;<name>walk_type</name></name> &amp; <name>DAV_WALKTYPE_AUTH</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>DAV_FS_STATE_DIR</name></expr></argument>)</argument_list></call> ||
!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>DAV_FS_TMP_PREFIX</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>DAV_FS_TMP_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!(<name><name>params</name>-&gt;<name>walk_type</name></name> &amp; <name>DAV_WALKTYPE_HIDDEN</name>)
&amp;&amp; (!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>DAV_FS_STATE_DIR</name></expr></argument>)</argument_list></call> ||
!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>DAV_FS_TMP_PREFIX</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>DAV_FS_TMP_PREFIX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>dav_buffer_place_mem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>path1</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>info1</name>.<name>finfo</name></name></expr></argument>, <argument><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name></name></expr></argument>,
<argument><expr><name>DAV_FINFO_MASK</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>status</name> != <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>dav_new_error</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>HTTP_NOT_FOUND</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>dav_buffer_place_mem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>uri_buf</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_buffer_place_mem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>path2</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>info1</name>.<name>pathname</name></name> = <name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>info2</name>.<name>pathname</name></name> = <name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>uri</name></name> = <name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>buf</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fsctx</name>-&gt;<name>info1</name>.<name>finfo</name>.<name>filetype</name></name> == <name>APR_REG</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>err</name> = <call>(*<name><name>params</name>-&gt;<name>func</name></name>)<argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>wres</name></name></expr></argument>,
<argument><expr><name>DAV_CALLTYPE_MEMBER</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>fsctx</name>-&gt;<name>info1</name>.<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>save_path_len</name> <init>= <expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>save_uri_len</name> <init>= <expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>cur_len</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>save_path2_len</name> <init>= <expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>cur_len</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>cur_len</name></name> += <name>len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>cur_len</name></name> += <name>len</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>cur_len</name></name> - 1</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res2</name>.<name>collection</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_walker</name><argument_list>(<argument><expr><name>fsctx</name></expr></argument>, <argument><expr><name>depth</name> - 1</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name> = <name>save_path_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>cur_len</name></name> = <name>save_path2_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>cur_len</name></name> = <name>save_uri_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res2</name>.<name>collection</name></name> = 0</expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></while>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dirp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>params</name>-&gt;<name>walk_type</name></name> &amp; <name>DAV_WALKTYPE_LOCKNULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>offset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_fs_get_locknull_members</name><argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>res1</name></name></expr></argument>,
<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>locknull_buf</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name> - 1</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>info1</name>.<name>finfo</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fsctx</name>-&gt;<name>info1</name>.<name>finfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>offset</name> &lt; <name><name>fsctx</name>-&gt;<name>locknull_buf</name>.<name>cur_len</name></name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>fsctx</name>-&gt;<name>locknull_buf</name>.<name>buf</name></name> + <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_lock</name> *</type><name>locks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>dav_buffer_place_mem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>path1</name></name></expr></argument>,
<argument><expr><name><name>fsctx</name>-&gt;<name>locknull_buf</name>.<name>buf</name></name> + <name>offset</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_buffer_place_mem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>uri_buf</name></name></expr></argument>,
<argument><expr><name><name>fsctx</name>-&gt;<name>locknull_buf</name>.<name>buf</name></name> + <name>offset</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dav_buffer_place_mem</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>path2</name></name></expr></argument>,
<argument><expr><name><name>fsctx</name>-&gt;<name>locknull_buf</name>.<name>buf</name></name> + <name>offset</name></expr></argument>,
<argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>info1</name>.<name>pathname</name></name> = <name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>info2</name>.<name>pathname</name></name> = <name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>uri</name></name> = <name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>buf</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>dav_lock_query</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>lockdb</name></name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>res1</name></name></expr></argument>,
<argument><expr>&amp;<name>locks</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>locks</name> != <name>NULL</name> &amp;&amp;
(<name>err</name> = <call>(*<name><name>params</name>-&gt;<name>func</name></name>)<argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>wres</name></name></expr></argument>,
<argument><expr><name>DAV_CALLTYPE_LOCKNULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>offset</name> += <name>len</name> + 1</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>exists</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>params</name>-&gt;<name>walk_type</name></name> &amp; <name>DAV_WALKTYPE_POSTFIX</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path1</name>.<name>buf</name><index>[<expr>--<name><name>fsctx</name>-&gt;<name>path1</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>buf</name><index>[<expr>--<name><name>fsctx</name>-&gt;<name>uri_buf</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>path2</name>.<name>buf</name><index>[<expr>--<name><name>fsctx</name>-&gt;<name>path2</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>-&gt;<name>res1</name>.<name>collection</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><call>(*<name><name>params</name>-&gt;<name>func</name></name>)<argument_list>(<argument><expr>&amp;<name><name>fsctx</name>-&gt;<name>wres</name></name></expr></argument>, <argument><expr><name>DAV_CALLTYPE_POSTFIX</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_internal_walk</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name></decl></param>,
<param><decl><type><name>int</name></type> <name>depth</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_move</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>root_dst</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_fs_walker_context</name></type> <name>fsctx</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_error</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_fs_copymove_walk_ctx</name></type> <name>cm_ctx</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DAV_DEBUG</name></expr></cpp:if>
<if>if <condition>(<expr>(<name><name>params</name>-&gt;<name>walk_type</name></name> &amp; <name>DAV_WALKTYPE_LOCKNULL</name>) != 0
&amp;&amp; <name><name>params</name>-&gt;<name>lockdb</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"DESIGN ERROR: walker called to walk locknull "
"resources, but a lockdb was not provided."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name><name>fsctx</name>.<name>params</name></name> = <name>params</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>wres</name>.<name>walk_ctx</name></name> = <name><name>params</name>-&gt;<name>walk_ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>wres</name>.<name>pool</name></name> = <name><name>params</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res1</name></name> = *<name><name>params</name>-&gt;<name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res1</name>.<name>pool</name></name> = <name><name>params</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res1</name>.<name>info</name></name> = &amp;<name><name>fsctx</name>.<name>info1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>info1</name></name> = *<name><name>params</name>-&gt;<name>root</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_buffer_init</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>.<name>path1</name></name></expr></argument>, <argument><expr><name><name>fsctx</name>.<name>info1</name>.<name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>info1</name>.<name>pathname</name></name> = <name><name>fsctx</name>.<name>path1</name>.<name>buf</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>root_dst</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>fsctx</name>.<name>wres</name>.<name>walk_ctx</name></name> = &amp;<name>cm_ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cm_ctx</name>.<name>is_move</name></name> = <name>is_move</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cm_ctx</name>.<name>res_dst</name></name> = &amp;<name><name>fsctx</name>.<name>res2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cm_ctx</name>.<name>root</name></name> = <name><name>params</name>-&gt;<name>root</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cm_ctx</name>.<name>pool</name></name> = <name><name>params</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res2</name></name> = *<name>root_dst</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res2</name>.<name>exists</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res2</name>.<name>collection</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res2</name>.<name>uri</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res2</name>.<name>pool</name></name> = <name><name>params</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>res2</name>.<name>info</name></name> = &amp;<name><name>fsctx</name>.<name>info2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>info2</name></name> = *<name><name>root_dst</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>fsctx</name>.<name>info2</name>.<name>finfo</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>fsctx</name>.<name>info2</name>.<name>finfo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_buffer_init</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>.<name>path2</name></name></expr></argument>, <argument><expr><name><name>fsctx</name>.<name>info2</name>.<name>pathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>info2</name>.<name>pathname</name></name> = <name><name>fsctx</name>.<name>path2</name>.<name>buf</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>dav_buffer_init</name><argument_list>(<argument><expr><name><name>params</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>fsctx</name>.<name>uri_buf</name></name></expr></argument>, <argument><expr><name><name>params</name>-&gt;<name>root</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>fsctx</name>.<name>res1</name>.<name>collection</name></name>
&amp;&amp; <name><name>fsctx</name>.<name>uri_buf</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>.<name>uri_buf</name>.<name>cur_len</name></name> - 1</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>fsctx</name>.<name>uri_buf</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>.<name>uri_buf</name>.<name>cur_len</name></name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>uri_buf</name>.<name>buf</name><index>[<expr><name><name>fsctx</name>.<name>uri_buf</name>.<name>cur_len</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>fsctx</name>.<name>res1</name>.<name>uri</name></name> = <name><name>fsctx</name>.<name>uri_buf</name>.<name>buf</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fsctx</name>.<name>wres</name>.<name>resource</name></name> = &amp;<name><name>fsctx</name>.<name>res1</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>dav_fs_walker</name><argument_list>(<argument><expr>&amp;<name>fsctx</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>response</name> = <name><name>fsctx</name>.<name>wres</name>.<name>response</name></name></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type> <name>dav_fs_walk</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_walk_params</name> *</type><name>params</name></decl></param>, <param><decl><type><name>int</name></type> <name>depth</name></decl></param>,
<param><decl><type><name>dav_response</name> **</type><name>response</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>dav_fs_internal_walk</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>depth</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dav_fs_getetag</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>dav_resource_private</name> *</type><name>ctx</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"\"%" <name>APR_UINT64_T_HEX_FMT</name> "-%"
<name>APR_UINT64_T_HEX_FMT</name> "\""</expr></argument>,
<argument><expr>(<name>apr_uint64_t</name>) <name><name>ctx</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>,
<argument><expr>(<name>apr_uint64_t</name>) <name><name>ctx</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"\"%" <name>APR_UINT64_T_HEX_FMT</name> "\""</expr></argument>,
<argument><expr>(<name>apr_uint64_t</name>) <name><name>ctx</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_repository</name></type> <name>dav_hooks_repository_fs</name> <init>= <expr><block>{
<expr><name>DEBUG_GET_HANDLER</name></expr>,
<expr><name>dav_fs_get_resource</name></expr>,
<expr><name>dav_fs_get_parent_resource</name></expr>,
<expr><name>dav_fs_is_same_resource</name></expr>,
<expr><name>dav_fs_is_parent_resource</name></expr>,
<expr><name>dav_fs_open_stream</name></expr>,
<expr><name>dav_fs_close_stream</name></expr>,
<expr><name>dav_fs_write_stream</name></expr>,
<expr><name>dav_fs_seek_stream</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG_GET_HANDLER</name></expr></cpp:if>
<expr><name>dav_fs_set_headers</name></expr>,
<expr><name>dav_fs_deliver</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><name>dav_fs_create_collection</name></expr>,
<expr><name>dav_fs_copy_resource</name></expr>,
<expr><name>dav_fs_move_resource</name></expr>,
<expr><name>dav_fs_remove_resource</name></expr>,
<expr><name>dav_fs_walk</name></expr>,
<expr><name>dav_fs_getetag</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>dav_fs_get_request_rec</name></expr>,
<expr><name>dav_fs_pathname</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>dav_prop_insert</name></type> <name>dav_fs_insert_prop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>propid</name></decl></param>, <param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>,
<param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>global_ns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>DAV_TIMEBUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return></then></if>
<switch>switch <condition>(<expr><name>propid</name></expr>)</condition> <block>{
<case>case <expr><name>DAV_PROPID_creationdate</name></expr>:
<expr_stmt><expr><call><name>dav_format_time</name><argument_list>(<argument><expr><name>DAV_STYLE_ISO8601</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>ctime</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>buf</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_getcontentlength</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return></then></if>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>buf</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_getetag</name></expr>:
<expr_stmt><expr><name>value</name> = <call><name>dav_fs_getetag</name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_getlastmodified</name></expr>:
<expr_stmt><expr><call><name>dav_format_time</name><argument_list>(<argument><expr><name>DAV_STYLE_RFC822</name></expr></argument>,
<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr></argument>,
<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>buf</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>DAV_PROPID_FS_executable</name></expr>:
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return></then></if>
<if>if <condition>(<expr>!(<name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>valid</name></name> &amp; <name>APR_FINFO_UPROT</name>)</expr>)</condition><then>
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UEXECUTE</name></expr>)</condition><then>
<expr_stmt><expr><name>value</name> = "T"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>value</name> = "F"</expr>;</expr_stmt></else></if>
<break>break;</break>
</case><default>default:
<return>return <expr><name>DAV_PROP_INSERT_NOTDEF</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>global_ns</name> = <call><name>dav_get_liveprop_info</name><argument_list>(<argument><expr><name>propid</name></expr></argument>, <argument><expr>&amp;<name>dav_fs_liveprop_group</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;lp%d:%s&gt;%s&lt;/lp%d:%s&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>what</name> == <name>DAV_PROP_INSERT_NAME</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"&lt;lp%d:%s/&gt;" <name>DEBUG_CR</name></expr></argument>, <argument><expr><name>global_ns</name></expr></argument>, <argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"&lt;D:supported-live-property D:name=\"%s\" "
"D:namespace=\"%s\"/&gt;" <name>DEBUG_CR</name></expr></argument>,
<argument><expr><name><name>info</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>dav_fs_namespace_uris</name><index>[<expr><name><name>info</name>-&gt;<name>ns</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>apr_text_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>what</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>dav_fs_is_writable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>, <param><decl><type><name>int</name></type> <name>propid</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>dav_liveprop_spec</name> *</type><name>info</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DAV_FS_HAS_EXECUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>propid</name> == <name>DAV_PROPID_FS_executable</name> &amp;&amp; !<name><name>resource</name>-&gt;<name>collection</name></name></expr>)</condition><then>
<return>return <expr>1</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_get_liveprop_info</name><argument_list>(<argument><expr><name>propid</name></expr></argument>, <argument><expr>&amp;<name>dav_fs_liveprop_group</name></expr></argument>, <argument><expr>&amp;<name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name><name>info</name>-&gt;<name>is_writable</name></name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_fs_patch_validate</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> **</type><name>context</name></decl></param>,
<param><decl><type><name>int</name> *</type><name>defer_to_dead</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_text</name> *</type><name>cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_text</name> *</type><name>f_cdata</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>dav_elem_private</name> *</type><name>priv</name> <init>= <expr><name><name>elem</name>-&gt;<name>priv</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>priv</name>-&gt;<name>propid</name></name> != <name>DAV_PROPID_FS_executable</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>defer_to_dead</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>operation</name> == <name>DAV_PROP_OP_DELETE</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The 'executable' property cannot be removed."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cdata</name> = <name><name>elem</name>-&gt;<name>first_cdata</name>.<name>first</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>f_cdata</name> = <name><name>elem</name>-&gt;<name>first_child</name></name> == <name>NULL</name>
? <name>NULL</name>
: <name><name>elem</name>-&gt;<name>first_child</name>-&gt;<name>following_cdata</name>.<name>first</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cdata</name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>f_cdata</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The 'executable' property expects a single "
"character, valued 'T' or 'F'. There was no "
"value submitted."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cdata</name> = <name>f_cdata</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>f_cdata</name> != <name>NULL</name></expr>)</condition><then>
<goto>goto <name>too_long</name>;</goto></then></if></else></if>
<if>if <condition>(<expr><name><name>cdata</name>-&gt;<name>next</name></name> != <name>NULL</name> || <call><name>strlen</name><argument_list>(<argument><expr><name><name>cdata</name>-&gt;<name>text</name></name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then>
<goto>goto <name>too_long</name>;</goto></then></if>
<expr_stmt><expr><name>value</name> = <name><name>cdata</name>-&gt;<name>text</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> != 'T' &amp;&amp; <name>value</name> != 'F'</expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The 'executable' property expects a single "
"character, valued 'T' or 'F'. The value "
"submitted is invalid."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>context</name> = <call>(<name>void</name> *)<argument_list>(<argument><expr><call>(<name>long</name>)<argument_list>(<argument><expr><name>value</name> == 'T'</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
<label><name>too_long</name>:</label>
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>HTTP_CONFLICT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr>"The 'executable' property expects a single "
"character, valued 'T' or 'F'. The value submitted "
"has too many characters."</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_fs_patch_exec</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>apr_xml_elem</name> *</type><name>elem</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> **</type><name>rollback_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>value</name> <init>= <expr><name>context</name> != <name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>protection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>old_value</name> <init>= <expr>(<name>perms</name> &amp; <name>APR_UEXECUTE</name>) != 0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name> == <name>old_value</name></expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>perms</name> &amp;= ~<name>APR_UEXECUTE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then>
<expr_stmt><expr><name>perms</name> |= <name>APR_UEXECUTE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_perms_set</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"Could not set the executable flag of the "
"target resource."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>protection</name></name> = <name>perms</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>rollback_ctx</name> = (<name>dav_liveprop_rollback</name> *)<name>old_value</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dav_fs_patch_commit</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> *</type><name>rollback_ctx</name></decl></param>)</parameter_list> <block>{
}</block></function>
<function><type><specifier>static</specifier> <name>dav_error</name> *</type><name>dav_fs_patch_rollback</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>int</name></type> <name>operation</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>context</name></decl></param>,
<param><decl><type><name>dav_liveprop_rollback</name> *</type><name>rollback_ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_fileperms_t</name></type> <name>perms</name> <init>= <expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; ~<name>APR_UEXECUTE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name>rollback_ctx</name> != <name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then>
<expr_stmt><expr><name>perms</name> |= <name>APR_UEXECUTE</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>apr_file_perms_set</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pathname</name></name></expr></argument>, <argument><expr><name>perms</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>dav_new_error</name><argument_list>(<argument><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>status</name></expr></argument>,
<argument><expr>"After a failure occurred, the resource's "
"executable flag could not be restored."</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>resource</name>-&gt;<name>info</name>-&gt;<name>finfo</name>.<name>protection</name></name> = <name>perms</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_hooks_liveprop</name></type> <name>dav_hooks_liveprop_fs</name> <init>= <expr><block>{
<expr><name>dav_fs_insert_prop</name></expr>,
<expr><name>dav_fs_is_writable</name></expr>,
<expr><name>dav_fs_namespace_uris</name></expr>,
<expr><name>dav_fs_patch_validate</name></expr>,
<expr><name>dav_fs_patch_exec</name></expr>,
<expr><name>dav_fs_patch_commit</name></expr>,
<expr><name>dav_fs_patch_rollback</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>dav_provider</name></type> <name>dav_fs_provider</name> <init>= <expr><block>{
<expr>&amp;<name>dav_hooks_repository_fs</name></expr>,
<expr>&amp;<name>dav_hooks_db_dbm</name></expr>,
<expr>&amp;<name>dav_hooks_locks_fs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dav_fs_gather_propsets</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>uris</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DAV_FS_HAS_EXECUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>uris</name></expr></argument>)</argument_list></call> =
"&lt;http://apache.org/dav/propset/fs/1&gt;"</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>int</name></type> <name>dav_fs_find_liveprop</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_uri</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>dav_hooks_liveprop</name> **</type><name>hooks</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>hooks</name></name> != &amp;<name>dav_hooks_repository_fs</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><call><name>dav_do_find_liveprop</name><argument_list>(<argument><expr><name>ns_uri</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>dav_fs_liveprop_group</name></expr></argument>, <argument><expr><name>hooks</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>dav_fs_insert_all_liveprops</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>dav_resource</name> *</type><name>resource</name></decl></param>,
<param><decl><type><name>dav_prop_insert</name></type> <name>what</name></decl></param>, <param><decl><type><name>apr_text_header</name> *</type><name>phdr</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>resource</name>-&gt;<name>hooks</name></name> != &amp;<name>dav_hooks_repository_fs</name></expr>)</condition><then>
<return>return;</return></then></if>
<if>if <condition>(<expr>!<name><name>resource</name>-&gt;<name>exists</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>DAV_PROPID_creationdate</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>DAV_PROPID_getcontentlength</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>DAV_PROPID_getlastmodified</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>DAV_PROPID_getetag</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DAV_FS_HAS_EXECUTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr>(<name>void</name>) <call><name>dav_fs_insert_prop</name><argument_list>(<argument><expr><name>resource</name></expr></argument>, <argument><expr><name>DAV_PROPID_FS_executable</name></expr></argument>,
<argument><expr><name>what</name></expr></argument>, <argument><expr><name>phdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type> <name>dav_fs_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>dav_register_liveprop_group</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>dav_fs_liveprop_group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>dav_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"filesystem"</expr></argument>, <argument><expr>&amp;<name>dav_fs_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
