<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/metadata/mod_cern_meta.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_SYS_TYPES_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_CMD_PERMS</name></cpp:macro> <cpp:value>OR_INDEXES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_METADIR</name></cpp:macro> <cpp:value>".web"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_METASUFFIX</name></cpp:macro> <cpp:value>".meta"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_METAFILES</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>cern_meta_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>metadir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>metasuffix</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>metafiles</name></decl>;</decl_stmt>
}</block></struct></type> <name>cern_meta_dir_config</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_cern_meta_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>new</name> <init>=
<expr>(<name>cern_meta_dir_config</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cern_meta_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>metadir</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>metasuffix</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>metafiles</name></name> = <name>DEFAULT_METAFILES</name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_cern_meta_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>cern_meta_dir_config</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>cern_meta_dir_config</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>new</name> <init>=
<expr>(<name>cern_meta_dir_config</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cern_meta_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>metadir</name></name> = <name><name>add</name>-&gt;<name>metadir</name></name> ? <name><name>add</name>-&gt;<name>metadir</name></name> : <name><name>base</name>-&gt;<name>metadir</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>metasuffix</name></name> = <name><name>add</name>-&gt;<name>metasuffix</name></name> ? <name><name>add</name>-&gt;<name>metasuffix</name></name> : <name><name>base</name>-&gt;<name>metasuffix</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>metafiles</name></name> = <name><name>add</name>-&gt;<name>metafiles</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_metadir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>dconf</name> <init>= <expr><name>in_dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>metadir</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_metasuffix</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>dconf</name> <init>= <expr><name>in_dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>metasuffix</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_metafiles</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>dconf</name> <init>= <expr><name>in_dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>metafiles</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cern_meta_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"MetaFiles"</expr></argument>, <argument><expr><name>set_metafiles</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"Limited to 'on' or 'off'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MetaDir"</expr></argument>, <argument><expr><name>set_metadir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"the name of the directory containing meta files"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"MetaSuffix"</expr></argument>, <argument><expr><name>set_metasuffix</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"the filename suffix for meta files"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scan_meta_file</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>w</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>l</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>tmp_headers</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tmp_headers</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name> - 1</expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<expr_stmt><expr><name>p</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> &gt; 0 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>p</name> &gt; 1 &amp;&amp; <name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> == '\015'</expr>)</condition><then>
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 2</expr>]</index></name> = '\0'</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>w</name><index>[<expr><name>p</name> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>w</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!(<name>l</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01560</expr></argument>)</argument_list></call>
"malformed header in meta file: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>l</name>++ = '\0'</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>l</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>l</name></expr>;</expr_stmt></while>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Content-type"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>endp</name> <init>= <expr><name>l</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>endp</name> &gt; <name>l</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>endp</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>*<name>endp</name>-- = '\0'</expr>;</expr_stmt></while>
<expr_stmt><expr><name>tmp</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_content_type_tolower</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr>"Status"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name>tmp_headers</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<expr_stmt><expr><call><name>apr_table_overlap</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>tmp_headers</name></expr></argument>, <argument><expr><name>APR_OVERLAP_TABLES_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_cern_meta_data</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>metafilename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>leading_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>last_slash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>real_file</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scrap_book</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>retcode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>cern_meta_dir_config</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cern_meta_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>metafiles</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name> || <name><name>r</name>-&gt;<name>uri</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>scrap_book</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>leading_slash</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>scrap_book</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>last_slash</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>scrap_book</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>last_slash</name> != <name>NULL</name>) &amp;&amp; (<name>last_slash</name> != <name>leading_slash</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>real_file</name> = <name>last_slash</name></expr>;</expr_stmt>
<expr_stmt><expr><name>real_file</name>++</expr>;</expr_stmt>
<expr_stmt><expr>*<name>last_slash</name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01561</expr></argument>)</argument_list></call>
"internal error in mod_cern_meta: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>metafilename</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>scrap_book</name></expr></argument>, <argument><expr>"/"</expr></argument>,
<argument><expr><name><name>dconf</name>-&gt;<name>metadir</name></name> ? <name><name>dconf</name>-&gt;<name>metadir</name></name> : <name>DEFAULT_METADIR</name></expr></argument>,
<argument><expr>"/"</expr></argument>, <argument><expr><name>real_file</name></expr></argument>,
<argument><expr><name><name>dconf</name>-&gt;<name>metasuffix</name></name> ? <name><name>dconf</name>-&gt;<name>metasuffix</name></name> : <name>DEFAULT_METASUFFIX</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rr</name> = <call><name>ap_sub_req_lookup_file</name><argument_list>(<argument><expr><name>metafilename</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>rr</name>-&gt;<name>status</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retcode</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>f</name></expr></argument>, <argument><expr><name>metafilename</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>retcode</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOENT</name><argument_list>(<argument><expr><name>retcode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01562</expr></argument>)</argument_list></call>
"meta file permissions deny server access: %s"</expr></argument>, <argument><expr><name>metafilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>scan_meta_file</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>add_cern_meta_data</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>cern_meta</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_cern_meta_dir_config</name></expr>,
<expr><name>merge_cern_meta_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>cern_meta_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
