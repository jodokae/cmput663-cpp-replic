<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/metadata/mod_expires.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>wildcards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>expiresdefault</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>expiresbytype</name></decl>;</decl_stmt>
}</block></struct></type> <name>expires_dir_config</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_CMD_PERMS</name></cpp:macro> <cpp:value>OR_INDEXES</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_ON</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_OFF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_DONTCARE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>expires_module</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_expires_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>new</name> <init>=
<expr>(<name>expires_dir_config</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expires_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>active</name></name> = <name>ACTIVE_DONTCARE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>wildcards</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>expiresdefault</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>expiresbytype</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_expiresactive</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dir_config</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>dir_config</name> <init>= <expr><name>in_dir_config</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>dir_config</name>-&gt;<name>active</name></name> = <name>ACTIVE_ON</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>arg</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dir_config</name>-&gt;<name>active</name></name> = <name>ACTIVE_OFF</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>check_code</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>, <param><decl><type><name>char</name> **</type><name>real_code</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>base</name> <init>= <expr>'X'</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>modifier</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>factor</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>code</name><index>[<expr>0</expr>]</index></name> == 'A') || (<name><name>code</name><index>[<expr>0</expr>]</index></name> == 'M')</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>real_code</name> = (<name>char</name> *)<name>code</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"now"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> ||
!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"access"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>base</name> = 'A'</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"modification"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>base</name> = 'M'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, unrecognised &lt;base&gt; '"</expr></argument>,
<argument><expr><name>word</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"plus"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name><name>word</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr><name><name>word</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>num</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, numeric value expected &lt;num&gt; '"</expr></argument>,
<argument><expr><name>word</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>word</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, missing &lt;type&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"years"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 365</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"months"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 30</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"weeks"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24 * 7</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"days"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 60 * 60 * 24</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"hours"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 60 * 60</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"minutes"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 60</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"seconds"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>factor</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"bad expires code, unrecognised &lt;type&gt;"</expr></argument>,
<argument><expr>"'"</expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr>"'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name>modifier</name> = <name>modifier</name> + <name>factor</name> * <name>num</name></expr>;</expr_stmt>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>real_code</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%c%d"</expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>modifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_expiresbytype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dir_config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mime</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>dir_config</name> <init>= <expr><name>in_dir_config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>response</name></decl>, *<decl><type ref="prev"/><name>real_code</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>check</name></decl>;</decl_stmt>
<expr_stmt><expr><name>check</name> = <call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>mime</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>check</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid mimetype: should contain a slash"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<call><name>strlen</name><argument_list>(<argument><expr>++<name>check</name></expr></argument>)</argument_list></call> == 1) &amp;&amp; (*<name>check</name> == '*')</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dir_config</name>-&gt;<name>wildcards</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>response</name> = <call><name>check_code</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>&amp;<name>real_code</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>dir_config</name>-&gt;<name>expiresbytype</name></name></expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr><name>real_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"'ExpiresByType "</expr></argument>, <argument><expr><name>mime</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>"': "</expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_expiresdefault</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_dir_config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>expires_dir_config</name> *</type> <name>dir_config</name> <init>= <expr><name>in_dir_config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>response</name></decl>, *<decl><type ref="prev"/><name>real_code</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>response</name> = <call><name>check_code</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>&amp;<name>real_code</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dir_config</name>-&gt;<name>expiresdefault</name></name> = <name>real_code</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"'ExpiresDefault "</expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr>"': "</expr></argument>, <argument><expr><name>response</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>expires_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ExpiresActive"</expr></argument>, <argument><expr><name>set_expiresactive</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"Limited to 'on' or 'off'"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"ExpiresByType"</expr></argument>, <argument><expr><name>set_expiresbytype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"a MIME type followed by an expiry date code"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ExpiresDefault"</expr></argument>, <argument><expr><name>set_expiresdefault</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>DIR_CMD_PERMS</name></expr></argument>,
<argument><expr>"an expiry date code"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_expires_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>expires_dir_config</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expires_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>expires_dir_config</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>expires_dir_config</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>active</name></name> == <name>ACTIVE_DONTCARE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>active</name></name> = <name><name>base</name>-&gt;<name>active</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>active</name></name> = <name><name>add</name>-&gt;<name>active</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>add</name>-&gt;<name>expiresdefault</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>expiresdefault</name></name> = <name><name>add</name>-&gt;<name>expiresdefault</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>expiresdefault</name></name> = <name><name>base</name>-&gt;<name>expiresdefault</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>wildcards</name></name> = <name><name>add</name>-&gt;<name>wildcards</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>expiresbytype</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>expiresbytype</name></name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>expiresbytype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>set_expiration_fields</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>code</name></decl></param>,
<param><decl><type><name>apr_table_t</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>additional</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>expires</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>additional_sec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>timestr</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>code</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'M'</expr>:
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>base</name> = <name><name>r</name>-&gt;<name>finfo</name>.<name>mtime</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>additional_sec</name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>code</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>additional</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>additional_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'A'</expr>:
<expr_stmt><expr><name>base</name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>additional_sec</name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>code</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>additional</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>additional_sec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01500</expr></argument>)</argument_list></call>
"internal error: bad expires code: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
</default>}</block></switch>
<expr_stmt><expr><name>expires</name> = <name>base</name> + <name>additional</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expires</name> &lt; <name><name>r</name>-&gt;<name>request_time</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>expires</name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"max-age=%" <name>APR_TIME_T_FMT</name></expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name>expires</name> - <name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>timestr</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><name>expires</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr>"Expires"</expr></argument>, <argument><expr><name>timestr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>expires_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expiry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>r</name> = <name><name>f</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>conf</name> = (<name>expires_dir_config</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>expires_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expiry</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>t</name> = <name><name>r</name>-&gt;<name>err_headers_out</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Expires"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <name><name>r</name>-&gt;<name>headers_out</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>expiry</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>expiresbytype</name></name></expr></argument>,
<argument><expr><call><name>ap_field_noparam</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expiry</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>usedefault</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>wildcards</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>checkmime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>spos</name></decl>;</decl_stmt>
<expr_stmt><expr><name>checkmime</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>spos</name> = <name>checkmime</name> ? <call><name>ap_strchr</name><argument_list>(<argument><expr><name>checkmime</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>spos</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr>++<name>spos</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>spos</name>++ = '*'</expr>;</expr_stmt>
<expr_stmt><expr>*<name>spos</name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>checkmime</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>checkmime</name></expr></argument>, <argument><expr>"*"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>expiry</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>expiresbytype</name></name></expr></argument>, <argument><expr><name>checkmime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>usedefault</name> = (<name>expiry</name> == <name>NULL</name>)</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>usedefault</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>expiry</name> = <name><name>conf</name>-&gt;<name>expiresdefault</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>expiry</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>set_expiration_fields</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>expiry</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>expires_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>expires_dir_config</name> *</type><name>conf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main != <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = (<name>expires_dir_config</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>expires_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>active</name></name> != <name>ACTIVE_ON</name> ||
(<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>expiresbytype</name></name></expr></argument>)</argument_list></call> &amp;&amp; !<name><name>conf</name>-&gt;<name>expiresdefault</name></name>)</expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"MOD_EXPIRES"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"MOD_EXPIRES"</expr></argument>, <argument><expr><name>expires_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name>-2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_error_filter</name><argument_list>(<argument><expr><name>expires_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>expires_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>expires</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_dir_expires_config</name></expr>,
<expr><name>merge_expires_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>expires_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
