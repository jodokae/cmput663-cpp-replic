<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/filters/mod_filter.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>filter_module</name></decl>;</decl_stmt>
<struct>struct <name>ap_filter_provider_t</name> <block>{
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>expr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>frec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>provider_ctx</name></type> <name>provider_ctx</name>;</typedef>
<struct>struct <name>provider_ctx</name> <block>{
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_ctx</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>ap_out_filter_func</name></type> <name>func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>fctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_ctx</name> *</type><name>init_ctx</name></decl>;</decl_stmt>
}</block></struct></type> <name>harness_ctx</name>;</typedef>
<typedef>typedef <type><struct>struct <name>mod_filter_chain</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>mod_filter_chain</name> *</type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>mod_filter_chain</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>live_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>chain</name></decl>;</decl_stmt>
}</block></struct></type> <name>mod_filter_cfg</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>range</name></decl> ;</decl_stmt>
}</block></struct></type> <name>mod_filter_ctx</name> ;</typedef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_trace</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>debug</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name>debug</name></expr>)</condition> <block>{
<case>case <expr>0</expr>:
<return>return;</return>
</case><case>case <expr>1</expr>:
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01375</expr></argument>)</argument_list></call> "%s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01376</expr></argument>)</argument_list></call>
"%s: type: %s, length: %" <name>APR_SIZE_T_FMT</name></expr></argument>,
<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>type</name>-&gt;<name>name</name></name> ? <name><name>b</name>-&gt;<name>type</name>-&gt;<name>name</name></name> : "(unknown)"</expr></argument>,
<argument><expr><name><name>b</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<break>break;</break>
</case>}</block></switch>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_init</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_ctx</name> *</type><name>pctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name> <init>= <expr><name><name>f</name>-&gt;<name>frec</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>harness_ctx</name> *</type><name>fctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harness_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>p</name> = <name><name>filter</name>-&gt;<name>providers</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>frec</name>-&gt;<name>filter_init_func</name></name> == <name>filter_init</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01377</expr></argument>)</argument_list></call>
"Chaining of FilterProviders not supported"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>p</name>-&gt;<name>frec</name>-&gt;<name>filter_init_func</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name><name>p</name>-&gt;<name>frec</name>-&gt;<name>filter_init_func</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01378</expr></argument>)</argument_list></call>
"filter_init for %s failed"</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>ctx</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>provider_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name>-&gt;<name>provider</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name>-&gt;<name>ctx</name></name> = <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pctx</name>-&gt;<name>next</name></name> = <name><name>fctx</name>-&gt;<name>init_ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>fctx</name>-&gt;<name>init_ctx</name></name> = <name>pctx</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></for>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>fctx</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_lookup</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>harness_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>provider_ctx</name> *</type><name>pctx</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>proto_flags</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_ctx</name> *</type><name>rctx</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
<argument><expr>&amp;<name>filter_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>provider</name> = <name><name>filter</name>-&gt;<name>providers</name></name></expr>;</init> <condition><expr><name>provider</name></expr>;</condition> <incr><expr><name>provider</name> = <name><name>provider</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>provider</name>-&gt;<name>expr</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>match</name> = <call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>provider</name>-&gt;<name>expr</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01379</expr></argument>)</argument_list></call>
"Error evaluating filter dispatch condition: %s"</expr></argument>,
<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Expression condition for '%s' %s"</expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>match</name> ? "matched" : "did not match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_type</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>type</name> <init>= <expr><name><name>provider</name>-&gt;<name>types</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strcspn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr>"; \t"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>type</name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Content-Type '%s' ..."</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>type</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>*<name>type</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>content_type</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> == 0
&amp;&amp; (*<name>type</name>)<index>[<expr><name>len</name></expr>]</index> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"... matched '%s'"</expr></argument>, <argument><expr>*<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>match</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"... did not match '%s'"</expr></argument>, <argument><expr>*<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>type</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Content-Type condition for '%s' %s"</expr></argument>,
<argument><expr><name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr><name>match</name> ? "matched" : "did not match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Content-Type condition for '%s' did not match: "
"no Content-Type"</expr></argument>, <argument><expr><name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<if>if <condition>(<expr><name>match</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>proto_flags</name> = <name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>proto_flags</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>proto_flags</name> &amp; <name>AP_FILTER_PROTO_NO_PROXY</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name>proto_flags</name> &amp; <name>AP_FILTER_PROTO_TRANSFORM</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Cache-Control"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>str</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_strcasestr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"no-transform"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Warning"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"214 %s Transformation applied"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>proto_flags</name> &amp; <name>AP_FILTER_PROTO_CHANGE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>proto_flags</name> &amp; <name>AP_FILTER_PROTO_CHANGE_LENGTH</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>proto_flags</name> &amp; <name>AP_FILTER_PROTO_NO_CACHE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Last-Modified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>proto_flags</name> &amp; <name>AP_FILTER_PROTO_NO_BYTERANGE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Accept-Ranges"</expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>rctx</name> &amp;&amp; <name><name>rctx</name>-&gt;<name>range</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>, <argument><expr><name><name>rctx</name>-&gt;<name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rctx</name>-&gt;<name>range</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>pctx</name> = <name><name>ctx</name>-&gt;<name>init_ctx</name></name></expr>;</init> <condition><expr><name>pctx</name></expr>;</condition> <incr><expr><name>pctx</name> = <name><name>pctx</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>pctx</name>-&gt;<name>provider</name></name> == <name>provider</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>fctx</name></name> = <name><name>pctx</name>-&gt;<name>ctx</name></name></expr> ;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>func</name></name> = <name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>filter_func</name>.<name>out_func</name></name></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>filter_harness</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cachecontrol</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>harness_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name> <init>= <expr><name><name>f</name>-&gt;<name>frec</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>status</name></name> != 200
&amp;&amp; !<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"filter-errordocs"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>filter_trace</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><name><name>filter</name>-&gt;<name>debug</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>func</name></name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>filter</name>-&gt;<name>proto_flags</name></name> &amp; <name>AP_FILTER_PROTO_NO_PROXY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>filter</name>-&gt;<name>proto_flags</name></name> &amp; <name>AP_FILTER_PROTO_TRANSFORM</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cachecontrol</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Cache-Control"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cachecontrol</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_strcasestr</name><argument_list>(<argument><expr><name>cachecontrol</name></expr></argument>, <argument><expr>"no-transform"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>filter_lookup</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>func</name></name> != <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name><name>ctx</name>-&gt;<name>fctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <call><name><name>ctx</name>-&gt;<name>func</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>fctx</name></name> = <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_protocol</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proto</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>sep</name> <init>= <expr>";, \t"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>provider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>filter</name></expr>)</condition><then> <block>{
<return>return <expr>"FilterProtocol: No such filter"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>proto</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>proto</name> = <name>pname</name></expr>;</expr_stmt>
<expr_stmt><expr><name>pname</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<for>for (<init><expr><name>provider</name> = <name><name>filter</name>-&gt;<name>providers</name></name></expr>;</init> <condition><expr><name>provider</name></expr>;</condition> <incr><expr><name>provider</name> = <name><name>provider</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>provider</name></expr>)</condition><then> <block>{
<return>return <expr>"FilterProtocol: No such provider for this filter"</expr>;</return>
}</block></then></if>
}</block></else></if>
<for>for (<init><expr><name>arg</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>arg</name></expr>;</condition> <incr><expr><name>arg</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr>&amp;<name>tok</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"change=yes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>AP_FILTER_PROTO_CHANGE</name> | <name>AP_FILTER_PROTO_CHANGE_LENGTH</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"change=no"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> &amp;= ~(<name>AP_FILTER_PROTO_CHANGE</name> | <name>AP_FILTER_PROTO_CHANGE_LENGTH</name>)</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"change=1:1"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>AP_FILTER_PROTO_CHANGE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"byteranges=no"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>AP_FILTER_PROTO_NO_BYTERANGE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"proxy=no"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>AP_FILTER_PROTO_NO_PROXY</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"proxy=transform"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>AP_FILTER_PROTO_TRANSFORM</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"cache=no"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>AP_FILTER_PROTO_NO_CACHE</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if></else></if></else></if>
}</block></for>
<if>if <condition>(<expr><name>pname</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>provider</name>-&gt;<name>frec</name>-&gt;<name>proto_flags</name></name> = <name>flags</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>filter</name>-&gt;<name>proto_flags</name></name> = <name>flags</name></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_declare</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>place</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr>(<name>mod_filter_cfg</name> *)<name>CFG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name></decl>;</decl_stmt>
<expr_stmt><expr><name>filter</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_filter_rec_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name>-&gt;<name>name</name></name> = <name>fname</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name>-&gt;<name>filter_init_func</name></name> = <name>filter_init</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name>-&gt;<name>filter_func</name>.<name>out_func</name></name> = <name>filter_harness</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name>-&gt;<name>ftype</name></name> = <name>AP_FTYPE_RESOURCE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>filter</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>place</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr>"CONTENT_SET"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>filter</name>-&gt;<name>ftype</name></name> = <name>AP_FTYPE_CONTENT_SET</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr>"PROTOCOL"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>filter</name>-&gt;<name>ftype</name></name> = <name>AP_FTYPE_PROTOCOL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr>"CONNECTION"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>filter</name>-&gt;<name>ftype</name></name> = <name>AP_FTYPE_CONNECTION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>place</name></expr></argument>, <argument><expr>"NETWORK"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>filter</name>-&gt;<name>ftype</name></name> = <name>AP_FTYPE_NETWORK</name></expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_filter</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>types</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name>*</type> <name>frec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name>*</type> <name>provider_frec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>provider_frec</name> = <call><name>ap_get_output_filter_handle</name><argument_list>(<argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>provider_frec</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unknown filter provider %s"</expr></argument>, <argument><expr><name>pname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>frec</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>frec</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>c</name> = <call><name>filter_declare</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>CFG</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>c</name></expr> )</condition><then> <block>{
<return>return <expr><name>c</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>frec</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>ftype</name></name> = <name><name>provider_frec</name>-&gt;<name>ftype</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>frec</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Undeclared smart filter %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>provider</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_filter_provider_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>node</name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Error parsing FilterProvider expression:"</expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>provider</name>-&gt;<name>expr</name></name> = <name>node</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>provider</name>-&gt;<name>types</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>provider</name>-&gt;<name>types</name></name> = <name>types</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>provider</name>-&gt;<name>expr</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>provider</name>-&gt;<name>frec</name></name> = <name>provider_frec</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>provider</name>-&gt;<name>next</name></name> = <name><name>frec</name>-&gt;<name>providers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>providers</name></name> = <name>provider</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_provider</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_filter</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>CFG</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_chain</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<switch>switch <condition>(<expr><name><name>arg</name><index>[<expr>0</expr>]</index></name></expr>)</condition> <block>{
<case>case <expr>'+'</expr>:
<expr_stmt><expr><name>p</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>fname</name></name> = <name>arg</name>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>chain</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>q</name> = <name><name>cfg</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name><name>q</name>-&gt;<name>next</name></name></expr>;</condition> <incr><expr><name>q</name> = <name><name>q</name>-&gt;<name>next</name></name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>q</name>-&gt;<name>next</name></name> = <name>p</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name>p</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr>'@'</expr>:
<expr_stmt><expr><name>p</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>fname</name></name> = <name>arg</name>+1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name><name>cfg</name>-&gt;<name>chain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'-'</expr>:
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>chain</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>chain</name>-&gt;<name>fname</name></name></expr></argument>, <argument><expr><name>arg</name>+1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<for>for (<init><expr><name>p</name> = <name><name>cfg</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name><name>p</name>-&gt;<name>next</name></name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>p</name>-&gt;<name>next</name>-&gt;<name>fname</name></name></expr></argument>, <argument><expr><name>arg</name>+1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <name><name>p</name>-&gt;<name>next</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name><name>cfg</name>-&gt;<name>chain</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<break>break;</break>
</case><case>case <expr>'!'</expr>:
<expr_stmt><expr><name>p</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>fname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'='</expr>:
<expr_stmt><expr><name>p</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>fname</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>next</name>-&gt;<name>fname</name></name> = <name>arg</name>+1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name>p</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>p</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p</name>-&gt;<name>fname</name></name> = <name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>chain</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>q</name> = <name><name>cfg</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name><name>q</name>-&gt;<name>next</name></name></expr>;</condition> <incr><expr><name>q</name> = <name><name>q</name>-&gt;<name>next</name></name></expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr><name><name>q</name>-&gt;<name>next</name></name> = <name>p</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name>p</name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</default>}</block></switch>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_bytype1</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>types</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>seen_name</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>fname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"BYTYPE:"</expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_name</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>add_filter</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>CFG</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>NULL</name> &amp;&amp; !<name>seen_name</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>filter_chain</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>CFG</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_bytype</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>,
<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>strtok_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>types</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>argc</name> &lt; 2</expr>)</condition><then>
<return>return <expr>"AddOutputFilterByType requires at least two arguments"</expr>;</return></then></if>
<expr_stmt><expr><name>name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>types</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>argc</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>types</name></expr></argument>, <argument><expr>&amp;<name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>(<name>argc</name> - 1) * <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>types</name><index>[<expr><name>argc</name>-1</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<for>for (<init><expr><name>pname</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>pname</name> != <name>NULL</name> &amp;&amp; <name>rv</name> == <name>NULL</name></expr>;</condition>
<incr><expr><name>pname</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><name>rv</name> = <call><name>filter_bytype1</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>CFG</name></expr></argument>, <argument><expr><name>pname</name></expr></argument>, <argument><expr><name>types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>filter_debug</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>CFG</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>level</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><name>CFG</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>frec</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>frec</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Undeclared smart filter %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>frec</name>-&gt;<name>debug</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_insert</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>filter_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>ranges</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>filter_module</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>p</name> = <name><name>cfg</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>p</name>-&gt;<name>fname</name></name> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name><name>p</name>-&gt;<name>next</name></name></expr>;</expr_stmt></then></if>
}</block></for>
<for>for (<init><expr><name>p</name> = <name><name>cfg</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>filter</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name></expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>fname</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>filter</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01380</expr></argument>)</argument_list></call>
"Unknown filter %s not added"</expr></argument>, <argument><expr><name><name>p</name>-&gt;<name>fname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>ranges</name> &amp;&amp; (<name><name>filter</name>-&gt;<name>proto_flags</name></name>
&amp; (<name>AP_FILTER_PROTO_NO_BYTERANGE</name>
| <name>AP_FILTER_PROTO_CHANGE_LENGTH</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>range</name></name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Range"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ranges</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>filter_insert</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>filter_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> *</type><name>x</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>live_filters</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cfg</name>-&gt;<name>chain</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>cfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>filter_merge</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>void</name> *</type><name>BASE</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ADD</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>base</name> <init>= <expr><name>BASE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>add</name> <init>= <expr><name>ADD</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>savelink</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>newlink</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_chain</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mod_filter_cfg</name> *</type><name>conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>live_filters</name></name> = <call><name>apr_hash_overlay</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>live_filters</name></name></expr></argument>,
<argument><expr><name><name>base</name>-&gt;<name>live_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>base</name>-&gt;<name>chain</name></name> &amp;&amp; <name><name>add</name>-&gt;<name>chain</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>p</name> = <name><name>base</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>newlink</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>newlink</name>-&gt;<name>fname</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>chain</name></name> = <name>savelink</name> = <name>newlink</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>savelink</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>savelink</name>-&gt;<name>next</name></name> = <name>newlink</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savelink</name> = <name>newlink</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>chain</name></name> = <name>savelink</name> = <name>newlink</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
<for>for (<init><expr><name>p</name> = <name><name>add</name>-&gt;<name>chain</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name> = <name><name>p</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>newlink</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mod_filter_chain</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>newlink</name>-&gt;<name>fname</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>chain</name></name> = <name>savelink</name> = <name>newlink</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>savelink</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>savelink</name>-&gt;<name>next</name></name> = <name>newlink</name></expr>;</expr_stmt>
<expr_stmt><expr><name>savelink</name> = <name>newlink</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>chain</name></name> = <name>savelink</name> = <name>newlink</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr><name><name>add</name>-&gt;<name>chain</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>chain</name></name> = <name><name>add</name>-&gt;<name>chain</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>chain</name></name> = <name><name>base</name>-&gt;<name>chain</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>filter_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"FilterDeclare"</expr></argument>, <argument><expr><name>filter_declare</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"filter-name [filter-type]"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE3</name><argument_list>(<argument><expr>"FilterProvider"</expr></argument>, <argument><expr><name>filter_provider</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"filter-name provider-name match-expression"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"FilterChain"</expr></argument>, <argument><expr><name>filter_chain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"list of filter names with optional [+-=!@]"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"FilterTrace"</expr></argument>, <argument><expr><name>filter_debug</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"filter-name debug-level"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE_ARGV</name><argument_list>(<argument><expr>"AddOutputFilterByType"</expr></argument>, <argument><expr><name>filter_bytype</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"output filter name followed by one or more content-types"</expr></argument>)</argument_list></call></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>NO_PROTOCOL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"FilterProtocol"</expr></argument>, <argument><expr><name>filter_protocol</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
<argument><expr>"filter-name [provider-name] protocol-args"</expr></argument>)</argument_list></call></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>filter_config</name></expr>,
<expr><name>filter_merge</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>filter_cmds</name></expr>,
<expr><name>filter_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
