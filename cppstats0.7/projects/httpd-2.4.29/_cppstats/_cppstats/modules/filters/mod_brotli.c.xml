<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/filters/mod_brotli.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;brotli/encode.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>brotli_module</name></decl>;</decl_stmt>
<typedef>typedef <type><enum>enum <block>{
<decl><name>ETAG_MODE_ADDSUFFIX</name> <init>= <expr>0</expr></init></decl>,
<decl><name>ETAG_MODE_NOCHANGE</name> <init>= <expr>1</expr></init></decl>,
<decl><name>ETAG_MODE_REMOVE</name> <init>= <expr>2</expr></init></decl>
}</block></enum></type> <name>etag_mode_e</name>;</typedef>
<typedef>typedef <type><struct>struct <name>brotli_server_config_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lgwin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>lgblock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>etag_mode_e</name></type> <name>etag_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note_ratio_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note_input_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note_output_name</name></decl>;</decl_stmt>
}</block></struct></type> <name>brotli_server_config_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>quality</name></name> = 5</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lgwin</name></name> = 18</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lgblock</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_mode</name></name> = <name>ETAG_MODE_ADDSUFFIX</name></expr>;</expr_stmt>
<return>return <expr><name>conf</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_filter_note</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>brotli_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>arg2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>note_ratio_name</name></name> = <name>arg1</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"Ratio"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>note_ratio_name</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"Input"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>note_input_name</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"Output"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>note_output_name</name></name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unknown BrotliFilterNote type '%s'"</expr></argument>,
<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_compression_quality</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>brotli_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> &lt; 0 || <name>val</name> &gt; 11</expr>)</condition><then> <block>{
<return>return <expr>"BrotliCompressionQuality must be between 0 and 11"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>quality</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_compression_lgwin</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>brotli_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> &lt; 10 || <name>val</name> &gt; 24</expr>)</condition><then> <block>{
<return>return <expr>"BrotliCompressionWindow must be between 10 and 24"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lgwin</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_compression_lgblock</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>brotli_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>val</name> &lt; 16 || <name>val</name> &gt; 24</expr>)</condition><then> <block>{
<return>return <expr>"BrotliCompressionMaxInputBlock must be between 16 and 24"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>lgblock</name></name> = <name>val</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_etag_mode</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>brotli_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"AddSuffix"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_mode</name></name> = <name>ETAG_MODE_ADDSUFFIX</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"NoChange"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_mode</name></name> = <name>ETAG_MODE_NOCHANGE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Remove"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>etag_mode</name></name> = <name>ETAG_MODE_REMOVE</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"BrotliAlterETag accepts only 'AddSuffix', 'NoChange' and 'Remove'"</expr>;</return>
}</block></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>brotli_ctx_t</name> <block>{
<decl_stmt><decl><type><name>BrotliEncoderState</name> *</type><name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>total_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>total_out</name></decl>;</decl_stmt>
}</block></struct></type> <name>brotli_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>alloc_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>opaque</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>opaque</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>free_func</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>opaque</name></decl></param>, <param><decl><type><name>void</name> *</type><name>block</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>block</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_bucket_free</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_ctx</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>BrotliEncoderDestroyInstance</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>brotli_ctx_t</name> *</type><name>create_ctx</name><parameter_list>(<param><decl><type><name>int</name></type> <name>quality</name></decl></param>,
<param><decl><type><name>int</name></type> <name>lgwin</name></decl></param>,
<param><decl><type><name>int</name></type> <name>lgblock</name></decl></param>,
<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>alloc</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>brotli_ctx_t</name> *</type><name>ctx</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>state</name></name> = <call><name>BrotliEncoderCreateInstance</name><argument_list>(<argument><expr><name>alloc_func</name></expr></argument>, <argument><expr><name>free_func</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BrotliEncoderSetParameter</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>BROTLI_PARAM_QUALITY</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BrotliEncoderSetParameter</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>BROTLI_PARAM_LGWIN</name></expr></argument>, <argument><expr><name>lgwin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BrotliEncoderSetParameter</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>BROTLI_PARAM_LGBLOCK</name></expr></argument>, <argument><expr><name>lgblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cleanup_ctx</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>total_in</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>total_out</name></name> = 0</expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>process_chunk</name><parameter_list>(<param><decl><type><name>brotli_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>next_in</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail_in</name> <init>= <expr><name>len</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>avail_in</name> &gt; 0</expr>)</condition> <block>{
<decl_stmt><decl><type><name>uint8_t</name> *</type><name>next_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail_out</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>BrotliEncoderCompressStream</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>,
<argument><expr><name>BROTLI_OPERATION_PROCESS</name></expr></argument>,
<argument><expr>&amp;<name>avail_in</name></expr></argument>, <argument><expr>&amp;<name>next_in</name></expr></argument>,
<argument><expr>&amp;<name>avail_out</name></expr></argument>, <argument><expr>&amp;<name>next_out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03459</expr></argument>)</argument_list></call>
"Error while compressing data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>BrotliEncoderHasMoreOutput</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>output_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<expr_stmt><expr><name>output</name> = <call><name>BrotliEncoderTakeOutput</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr>&amp;<name>output_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>total_out</name></name> += <name>output_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>output</name></expr></argument>, <argument><expr><name>output_len</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></while>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>total_in</name></name> += <name>len</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>flush</name><parameter_list>(<param><decl><type><name>brotli_ctx_t</name> *</type><name>ctx</name></decl></param>,
<param><decl><type><name>BrotliEncoderOperation</name></type> <name>op</name></decl></param>,
<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>)</parameter_list> <block>{
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>next_in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail_in</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>uint8_t</name> *</type><name>next_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>avail_out</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>output_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>BrotliEncoderCompressStream</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>,
<argument><expr>&amp;<name>avail_in</name></expr></argument>, <argument><expr>&amp;<name>next_in</name></expr></argument>,
<argument><expr>&amp;<name>avail_out</name></expr></argument>, <argument><expr>&amp;<name>next_out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03460</expr></argument>)</argument_list></call>
"Error while compressing data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>BrotliEncoderHasMoreOutput</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>output_len</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> = <call><name>BrotliEncoderTakeOutput</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>state</name></name></expr></argument>, <argument><expr>&amp;<name>output_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>total_out</name></name> += <name>output_len</name></expr>;</expr_stmt>
<expr_stmt><expr><name>b</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr>(const <name>char</name> *)<name>output</name></expr></argument>, <argument><expr><name>output_len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>bb</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_content_encoding</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<expr_stmt><expr><name>encoding</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>encoding</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err_enc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err_enc</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_enc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>encoding</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>","</expr></argument>, <argument><expr><name>err_enc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>encoding</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>encoding</name> = <name>encoding</name> ? <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>encoding</name></expr></argument>, <argument><expr>","</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>
: <name><name>r</name>-&gt;<name>content_encoding</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>encoding</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>compress_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>brotli_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>brotli_server_config_t</name> *</type><name>conf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>brotli_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>token</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>accepts</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main || <name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NO_CONTENT</name>
|| <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"no-brotli"</expr></argument>)</argument_list></call>
|| <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Range"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>encoding</name> = <call><name>get_content_encoding</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>encoding</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name> <init>= <expr><name>encoding</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>token</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>token</name> &amp;&amp; *<name>token</name></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"identity"</expr></argument>)</argument_list></call> != 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"7bit"</expr></argument>)</argument_list></call> != 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"8bit"</expr></argument>)</argument_list></call> != 0 &amp;&amp;
<call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"binary"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*<name>tmp</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>tmp</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>token</name> = (*<name>tmp</name>) ? <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>accepts</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Accept-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>accepts</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>token</name> = <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accepts</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>token</name> &amp;&amp; <name><name>token</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr>"br"</expr></argument>)</argument_list></call> != 0</expr>)</condition> <block>{
<while>while <condition>(<expr>*<name>accepts</name> == ';'</expr>)</condition> <block>{
<expr_stmt><expr>++<name>accepts</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accepts</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>*<name>accepts</name> == ','</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>accepts</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>token</name> = (*<name>accepts</name>) ? <call><name>ap_get_token</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>accepts</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> : <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>token</name> || <name><name>token</name><index>[<expr>0</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>encoding</name> || <call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr><name>encoding</name></expr></argument>, <argument><expr>"identity"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>, <argument><expr>"br"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Encoding"</expr></argument>, <argument><expr>"br"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>content_encoding</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>content_encoding</name></name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Content-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-MD5"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>etag_mode</name></name> == <name>ETAG_MODE_REMOVE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>etag_mode</name></name> == <name>ETAG_MODE_ADDSUFFIX</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>etag</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>etag</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>len</name> &gt; 2 &amp;&amp; <name><name>etag</name><index>[<expr><name>len</name> - 1</expr>]</index></name> == '"'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>etag</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>etag</name></expr></argument>, <argument><expr><name>len</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>etag</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>etag</name></expr></argument>, <argument><expr>"-br\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if></else></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ctx</name> = <call><name>create_ctx</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>quality</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>lgwin</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>lgblock</name></name></expr></argument>,
<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name> <init>= <expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>bytes_sent</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>flush</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BROTLI_OPERATION_FINISH</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>note_input_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>note_input_name</name></name></expr></argument>,
<argument><expr><call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>total_in</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>note_output_name</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>note_output_name</name></name></expr></argument>,
<argument><expr><call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>total_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>note_ratio_name</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>total_in</name></name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ratio</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>total_out</name></name> * 100 / <name><name>ctx</name>-&gt;<name>total_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>note_ratio_name</name></name></expr></argument>,
<argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>note_ratio_name</name></name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_run</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cleanup_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>flush</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>BROTLI_OPERATION_FLUSH</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>process_chunk</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
}</block></while>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"BROTLI_COMPRESS"</expr></argument>, <argument><expr><name>compress_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>AP_FTYPE_CONTENT_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"BrotliFilterNote"</expr></argument>, <argument><expr><name>set_filter_note</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set a note to report on compression ratio"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"BrotliCompressionQuality"</expr></argument>, <argument><expr><name>set_compression_quality</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Compression quality between 0 and 11 (higher quality means "
"slower compression)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"BrotliCompressionWindow"</expr></argument>, <argument><expr><name>set_compression_lgwin</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Sliding window size between 10 and 24 (larger windows can "
"improve compression, but require more memory)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"BrotliCompressionMaxInputBlock"</expr></argument>, <argument><expr><name>set_compression_lgblock</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Maximum input block size between 16 and 24 (larger block "
"sizes require more memory)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"BrotliAlterETag"</expr></argument>, <argument><expr><name>set_etag_mode</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set how mod_brotli should modify ETag response headers: "
"'AddSuffix' (default), 'NoChange', 'Remove'"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>brotli</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>create_server_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
