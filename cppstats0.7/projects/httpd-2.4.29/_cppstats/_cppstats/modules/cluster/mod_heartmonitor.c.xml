<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/cluster/mod_heartmonitor.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_watchdog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_slotmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"heartbeat.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HM_UPDATE_SEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HM_UPDATE_SEC</name></cpp:macro> <cpp:value>(5)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HM_WATHCHDOG_NAME</name></cpp:macro> <cpp:value>("_heartmonitor_")</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ap_slotmem_provider_t</name> *</type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_slotmem_instance_t</name> *</type><name>slotmem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>maxworkers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>heartmonitor_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <name>hm_server_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ready</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
}</block></struct></type> <name>hm_server_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>hm_ctx_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>storage_path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_watchdog_t</name> *</type><name>watchdog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>interval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>mcast_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>keep_running</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>servers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
}</block></struct></type> <name>hm_ctx_t</name>;</typedef>
<typedef>typedef <type><struct>struct <name>hm_slot_server_ctx_t</name> <block>{
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>item_id</name></decl>;</decl_stmt>
}</block></struct></type> <name>hm_slot_server_ctx_t</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_listen</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>mcast_addr</name>-&gt;<name>family</name></name></expr></argument>,
<argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>APR_PROTO_UDP</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02068</expr></argument>)</argument_list></call>
"Failed to create listening socket."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>APR_SO_REUSEADDR</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02069</expr></argument>)</argument_list></call>
"Failed to set APR_SO_REUSEADDR to 1 on socket."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>APR_SO_NONBLOCK</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02070</expr></argument>)</argument_list></call>
"Failed to set APR_SO_NONBLOCK to 1 on socket."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_bind</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>mcast_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02071</expr></argument>)</argument_list></call>
"Failed to bind on socket."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_mcast_join</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>mcast_addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02072</expr></argument>)</argument_list></call>
"Failed to join multicast group"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_mcast_loopback</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02073</expr></argument>)</argument_list></call>
"Failed to accept localhost mulitcast on socket."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>qs_to_table</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>input</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>parms</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>query_string</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>strtok_state</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>input</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>query_string</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>query_string</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>key</name></expr>)</condition> <block>{
<expr_stmt><expr><name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>value</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name>++</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>value</name> = "1"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name>parms</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>"&amp;"</expr></argument>, <argument><expr>&amp;<name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEN_TIMEOUT</name></cpp:macro> <cpp:value>(30)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_update</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>mem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_slot_server_t</name> *</type><name>old</name> <init>= <expr>(<name>hm_slot_server_t</name> *) <name>mem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_slot_server_ctx_t</name> *</type><name>s</name> <init>= <expr>(<name>hm_slot_server_ctx_t</name> *) <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>new</name> <init>= <expr><name><name>s</name>-&gt;<name>s</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>old</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>MAXIPSIZE</name></expr></argument>)</argument_list></call>==0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>found</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>old</name>-&gt;<name>busy</name></name> = <name><name>new</name>-&gt;<name>busy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old</name>-&gt;<name>ready</name></name> = <name><name>new</name>-&gt;<name>ready</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>old</name>-&gt;<name>seen</name></name> = <name><name>new</name>-&gt;<name>seen</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_readid</name><parameter_list>(<param><decl><type><name>void</name>*</type> <name>mem</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_slot_server_t</name> *</type><name>old</name> <init>= <expr>(<name>hm_slot_server_t</name> *) <name>mem</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_slot_server_ctx_t</name> *</type><name>s</name> <init>= <expr>(<name>hm_slot_server_ctx_t</name> *) <name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>new</name> <init>= <expr><name><name>s</name>-&gt;<name>s</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>old</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>MAXIPSIZE</name></expr></argument>)</argument_list></call>==0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>s</name>-&gt;<name>found</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>item_id</name></name> = <name><name>old</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_slotmem_update_stat</name><parameter_list>(<param><decl><type><name>hm_server_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_slot_server_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>found</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>doall</name></name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>, <argument><expr><name>hm_update</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>.<name>found</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_slot_server_t</name></type> <name>hmserver</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>hmserver</name>.<name>ip</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>MAXIPSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>busy</name></name> = <name><name>s</name>-&gt;<name>busy</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>ready</name></name> = <name><name>s</name>-&gt;<name>ready</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>seen</name></name> = <name><name>s</name>-&gt;<name>seen</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>grab</name></name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>id</name></name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>put</name></name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name>hmserver</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hmserver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_slotmem_remove_stat</name><parameter_list>(<param><decl><type><name>hm_server_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_slot_server_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>.<name>found</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>doall</name></name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>, <argument><expr><name>hm_readid</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>.<name>found</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>release</name></name><argument_list>(<argument><expr><name>slotmem</name></expr></argument>, <argument><expr><name><name>ctx</name>.<name>item_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_file_update_stat</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>hm_server_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fpin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>fage</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>fi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>updated</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>, <argument><expr>".tmp.XXXXXX"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_mktemp</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_CREATE</name> | <name>APR_WRITE</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02074</expr></argument>)</argument_list></call>
"Unable to open tmp file: %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fpin</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>, <argument><expr><name>APR_READ</name>|<name>APR_BINARY</name>|<name>APR_BUFFERED</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>hbt</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>ba</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmpbb</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name> | <name>APR_FINFO_MTIME</name></expr></argument>, <argument><expr><name>fpin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02075</expr></argument>)</argument_list></call>
"Unable to read file: %s"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ba</name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>fpin</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>fi</name>.<name>size</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmpbb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>ba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fage</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name> - <name><name>fi</name>.<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>4096</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_split_line</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02076</expr></argument>)</argument_list></call>
"Unable to read from file: %s"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>tmpbb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bsize</name> == 0</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>bsize</name> - 1</expr>]</index></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>t</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ip</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name> - <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>ip</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>ip</name> || <name><name>buf</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ip</name></name></expr></argument>)</argument_list></call> != 0</expr> )</condition><then> <block>{
<decl_stmt><decl><type><name>hm_server_t</name></type> <name>node</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qs_to_table</name><argument_list>(<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hbt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"busy"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>node</name>.<name>busy</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>node</name>.<name>busy</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"ready"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>node</name>.<name>ready</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>node</name>.<name>ready</name></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"lastseen"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>node</name>.<name>seen</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>node</name>.<name>seen</name></name> = <name>SEEN_TIMEOUT</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>seen</name> = <name>fage</name> + <name><name>node</name>.<name>seen</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>hbt</name></expr></argument>, <argument><expr>"port"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>node</name>.<name>port</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>node</name>.<name>port</name></name> = 80</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s &amp;ready=%u&amp;busy=%u&amp;lastseen=%u&amp;port=%u\n"</expr></argument>,
<argument><expr><name>ip</name></expr></argument>, <argument><expr><name><name>node</name>.<name>ready</name></name></expr></argument>, <argument><expr><name><name>node</name>.<name>busy</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>) <name>seen</name></expr></argument>, <argument><expr><name><name>node</name>.<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>seen</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name> - <name><name>s</name>-&gt;<name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s &amp;ready=%u&amp;busy=%u&amp;lastseen=%u&amp;port=%u\n"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ready</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>busy</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>) <name>seen</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>updated</name> = 1</expr>;</expr_stmt>
}</block></else></if></else></if>
}</block> while <condition>(<expr>1</expr>)</condition>;</do>
}</block></then></if>
<if>if <condition>(<expr>!<name>updated</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
<expr_stmt><expr><name>seen</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name> - <name><name>s</name>-&gt;<name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s &amp;ready=%u&amp;busy=%u&amp;lastseen=%u&amp;port=%u\n"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ready</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>busy</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>) <name>seen</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_flush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02077</expr></argument>)</argument_list></call>
"Unable to flush file: %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02078</expr></argument>)</argument_list></call>
"Unable to close file: %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_perms_set</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>APR_FPROT_UREAD</name> | <name>APR_FPROT_GREAD</name> |
<name>APR_FPROT_WREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> &amp;&amp; <name>rv</name> != <name>APR_INCOMPLETE</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02079</expr></argument>)</argument_list></call>
"Unable to set file permissions on %s"</expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02080</expr></argument>)</argument_list></call>
"Unable to move file: %s -&gt; %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_update_stat</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>hm_server_t</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>slotmem</name></expr>)</condition><then>
<return>return <expr><call><name>hm_slotmem_update_stat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>hm_file_update_stat</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_file_update_stats</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>, <argument><expr>".tmp.XXXXXX"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_mktemp</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_CREATE</name> | <name>APR_WRITE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02081</expr></argument>)</argument_list></call>
"Unable to open tmp file: %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>servers</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> **) &amp;<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name> - <name><name>s</name>-&gt;<name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>seen</name> &gt; <name>SEEN_TIMEOUT</name></expr>)</condition><then> <block>{
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>"%s &amp;ready=%u&amp;busy=%u&amp;lastseen=%u&amp;port=%u\n"</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ready</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>busy</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>) <name>seen</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_flush</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02082</expr></argument>)</argument_list></call>
"Unable to flush file: %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02083</expr></argument>)</argument_list></call>
"Unable to close file: %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_perms_set</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
<argument><expr><name>APR_FPROT_UREAD</name> | <name>APR_FPROT_GREAD</name> |
<name>APR_FPROT_WREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> &amp;&amp; <name>rv</name> != <name>APR_INCOMPLETE</name> &amp;&amp; <name>rv</name> != <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02084</expr></argument>)</argument_list></call>
"Unable to set file permissions on %s"</expr></argument>,
<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_rename</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02085</expr></argument>)</argument_list></call>
"Unable to move file: %s -&gt; %s"</expr></argument>, <argument><expr><name>path</name></expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_slotmem_update_stats</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>hi</name></decl>;</decl_stmt>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>hi</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>servers</name></name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>hi</name> != <name>NULL</name></expr>;</condition> <incr><expr><name>hi</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>hi</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>seen</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>hi</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>void</name> **) &amp;<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>seen</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><name>now</name> - <name><name>s</name>-&gt;<name>seen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>seen</name> &gt; <name>SEEN_TIMEOUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>hm_slotmem_remove_stat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>hm_slotmem_update_stat</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> !=<name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then></if>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_update_stats</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>slotmem</name></expr>)</condition><then>
<return>return <expr><call><name>hm_slotmem_update_stats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else
<return>return <expr><call><name>hm_file_update_stats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>hm_server_t</name> *</type><name>hm_get_server</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ip</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>int</name></type> <name>port</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><name>s</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>servers</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>s</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hm_server_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>ip</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>ready</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>busy</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>seen</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>servers</name></name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>ip</name></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>s</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hm_processmsg</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_sockaddr_t</name> *</type><name>from</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>tbl</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qs_to_table</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"v"</expr></argument>)</argument_list></call> != <name>NULL</name> &amp;&amp;
<call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"busy"</expr></argument>)</argument_list></call> != <name>NULL</name> &amp;&amp;
<call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"ready"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr>80</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_server_t</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02086</expr></argument>)</argument_list></call>
"%pI busy=%s ready=%s"</expr></argument>, <argument><expr><name>from</name></expr></argument>,
<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"busy"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"ready"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name>ip</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"port"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name>port</name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"port"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>s</name> = <call><name>hm_get_server</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>busy</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"busy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>ready</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"ready"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>s</name>-&gt;<name>seen</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02087</expr></argument>)</argument_list></call>
"malformed message from %pI"</expr></argument>,
<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MSG_LEN</name></cpp:macro> <cpp:value>(1000)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_recv</name><parameter_list>(<param><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_MSG_LEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name></type> <name>from</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name>MAX_MSG_LEN</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>from</name>.<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recvfrom</name><argument_list>(<argument><expr>&amp;<name>from</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02088</expr></argument>)</argument_list></call> "would block"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02089</expr></argument>)</argument_list></call> "recvfrom failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if></else></if>
<expr_stmt><expr><call><name>hm_processmsg</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>from</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>hm_watchdog_callback</name><parameter_list>(<param><decl><type><name>int</name></type> <name>state</name></decl></param>, <param><decl><type><name>void</name> *</type><name>data</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>now</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>hm_ctx_t</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>active</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
<case>case <expr><name>AP_WATCHDOG_STATE_STARTING</name></expr>:
<expr_stmt><expr><name>rv</name> = <call><name>hm_listen</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>status</name></name> = <name>rv</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02090</expr></argument>)</argument_list></call>
"Unable to listen for connections!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>keep_running</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02091</expr></argument>)</argument_list></call>
"%s listener started."</expr></argument>,
<argument><expr><name>HM_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>AP_WATCHDOG_STATE_RUNNING</name></expr>:
<expr_stmt><expr><call><name>hm_update_stats</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cur</name> = <name>now</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>now</name> - <name>cur</name>) &lt; <call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>interval</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pfd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>desc</name>.<name>s</name></name> = <name><name>ctx</name>-&gt;<name>sock</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>p</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>timeout</name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name>pfd</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>keep_running</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name> &amp;&amp; (<name><name>pfd</name>.<name>rtnevents</name></name> &amp; <name>APR_POLLIN</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>hm_recv</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>now</name> = <call><name>apr_time_sec</name><argument_list>(<argument><expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<break>break;</break>
</case><case>case <expr><name>AP_WATCHDOG_STATE_STOPPING</name></expr>:
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02092</expr></argument>)</argument_list></call>
"stopping %s listener."</expr></argument>,
<argument><expr><name>HM_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>keep_running</name></name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>sock</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case>}</block></switch>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hm_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>heartmonitor_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_watchdog_get_instance</name></expr></argument>)</argument_list></call> *<name>hm_watchdog_get_instance</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ap_watchdog_register_callback</name></expr></argument>)</argument_list></call> *<name>hm_watchdog_register_callback</name></expr>;</expr_stmt>
<expr_stmt><expr><name>hm_watchdog_get_instance</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_watchdog_get_instance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hm_watchdog_register_callback</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_watchdog_register_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>hm_watchdog_get_instance</name> || !<name>hm_watchdog_register_callback</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02093</expr></argument>)</argument_list></call>
"mod_watchdog is required"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_CONFIG</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>maxworkers</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>storage</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"shm"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>storage</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02284</expr></argument>)</argument_list></call>
"failed to lookup provider 'shm' for '%s', "
"maybe you need to load mod_slotmem_shm?"</expr></argument>,
<argument><expr><name>AP_SLOTMEM_PROVIDER_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name><name>storage</name>-&gt;<name>create</name></name><argument_list>(<argument><expr>&amp;<name>slotmem</name></expr></argument>, <argument><expr>"mod_heartmonitor"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hm_slot_server_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>maxworkers</name></expr></argument>, <argument><expr><name>AP_SLOTMEM_TYPE_PREGRAB</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>slotmem</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02285</expr></argument>)</argument_list></call>
"slotmem_create for status failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>active</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>hm_watchdog_get_instance</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>watchdog</name></name></expr></argument>,
<argument><expr><name>HM_WATHCHDOG_NAME</name></expr></argument>,
<argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02094</expr></argument>)</argument_list></call>
"Failed to create watchdog instance (%s)"</expr></argument>,
<argument><expr><name>HM_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>hm_watchdog_register_callback</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>watchdog</name></name></expr></argument>,
<argument><expr>0</expr></argument>,
<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name>hm_watchdog_callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02095</expr></argument>)</argument_list></call>
"Failed to register watchdog callback (%s)"</expr></argument>,
<argument><expr><name>HM_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02096</expr></argument>)</argument_list></call>
"wd callback %s"</expr></argument>, <argument><expr><name>HM_WATHCHDOG_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hm_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>input_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>tbl</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_server_t</name></type> <name>hmserver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"heartbeat"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_POST</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>len</name> = <name>MAX_MSG_LEN</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ctx</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>heartmonitor_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>MAX_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>input_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr><name>MAX_MSG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>tbl</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>qs_to_table</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tbl</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name>ip</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>client_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>ip</name></name> = <name>ip</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>port</name></name> = 80</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"port"</expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><name><name>hmserver</name>.<name>port</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"port"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name><name>hmserver</name>.<name>busy</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"busy"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>ready</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>tbl</name></expr></argument>, <argument><expr>"ready"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hmserver</name>.<name>seen</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>hm_update_stat</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>&amp;<name>hmserver</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/plain"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_set_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"OK"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rflush</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hm_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszSucc</name><index>[]</index></name><init>= <expr><block>{ <expr>"mod_proxy.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>hm_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>hm_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>hm_create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name> <init>= <expr>(<name>hm_ctx_t</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hm_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>active</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DEFAULT_HEARTBEAT_STORAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>interval</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>HM_UPDATE_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>s</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>servers</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ctx</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_hm_storage</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name> <init>=
<expr>(<name>hm_ctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>heartmonitor_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>storage_path</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_hm_listen</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mcast_addr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>host_str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scope_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>hm_ctx_t</name> *</type><name>ctx</name> <init>=
<expr>(<name>hm_ctx_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>heartmonitor_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>active</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>active</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"HeartbeatListen: May only be specified once."</expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_parse_addr_port</name><argument_list>(<argument><expr>&amp;<name>host_str</name></expr></argument>, <argument><expr>&amp;<name>scope_id</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>, <argument><expr><name>mcast_addr</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return <expr>"HeartbeatListen: Unable to parse multicast address."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>host_str</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"HeartbeatListen: No host provided in multicast address"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>port</name> == 0</expr>)</condition><then> <block>{
<return>return <expr>"HeartbeatListen: No port provided in multicast address"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>mcast_addr</name></name></expr></argument>, <argument><expr><name>host_str</name></expr></argument>, <argument><expr><name>APR_INET</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<return>return
<expr>"HeartbeatListen: apr_sockaddr_info_get failed on multicast address"</expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_hm_maxworkers</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>maxworkers</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>maxworkers</name> &lt;= 10</expr>)</condition><then>
<return>return <expr>"HeartbeatMaxServers: Should be bigger than 10"</expr>;</return></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>hm_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"HeartbeatListen"</expr></argument>, <argument><expr><name>cmd_hm_listen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Address to listen for heartbeat requests"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"HeartbeatStorage"</expr></argument>, <argument><expr><name>cmd_hm_storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Path to store heartbeat data."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"HeartbeatMaxServers"</expr></argument>, <argument><expr><name>cmd_hm_maxworkers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Max number of servers when using slotmem (instead file) to store heartbeat data."</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>heartmonitor</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>hm_create_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>hm_cmds</name></expr>,
<expr><name>hm_register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
