<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/mappers/mod_alias.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regexp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redir_status</name></decl>;</decl_stmt>
}</block></struct></type> <name>alias_entry</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>aliases</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>redirects</name></decl>;</decl_stmt>
}</block></struct></type> <name>alias_server_conf</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>alias_set</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>redirect_set</name>:1</expr>;</expr_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>redirects</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>alias</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ap_expr_info_t</name> *</type><name>redirect</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>redirect_status</name></decl>;</decl_stmt>
}</block></struct></type> <name>alias_dir_conf</name>;</typedef>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>alias_module</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>magic_error_value</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREGSUB_ERROR</name></cpp:macro> <cpp:value>(&amp;magic_error_value)</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_alias_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>a</name> <init>=
<expr>(<name>alias_server_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>aliases</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirects</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_alias_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>a</name> <init>=
<expr>(<name>alias_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirects</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_alias_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>a</name> <init>=
<expr>(<name>alias_server_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>base</name> <init>= <expr>(<name>alias_server_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>alias_server_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>aliases</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>aliases</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>aliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirects</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>redirects</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>redirects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_alias_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>a</name> <init>=
<expr>(<name>alias_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alias_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>alias_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>alias_dir_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirects</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>redirects</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>redirects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>alias</name></name> = (<name><name>overrides</name>-&gt;<name>alias_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>alias</name></name> : <name><name>overrides</name>-&gt;<name>alias</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>handler</name></name> = (<name><name>overrides</name>-&gt;<name>alias_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>handler</name></name> : <name><name>overrides</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>alias_set</name></name> = <name><name>overrides</name>-&gt;<name>alias_set</name></name> || <name><name>base</name>-&gt;<name>alias_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirect</name></name> = (<name><name>overrides</name>-&gt;<name>redirect_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>redirect</name></name> : <name><name>overrides</name>-&gt;<name>redirect</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirect_status</name></name> = (<name><name>overrides</name>-&gt;<name>redirect_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>redirect_status</name></name> : <name><name>overrides</name>-&gt;<name>redirect_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>a</name>-&gt;<name>redirect_set</name></name> = <name><name>overrides</name>-&gt;<name>redirect_set</name></name> || <name><name>base</name>-&gt;<name>redirect_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>alias_matches</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alias_fakename</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_alias_internal</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl></param>,
<param><decl><type><name>int</name></type> <name>use_regex</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>alias_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_entry</name> *</type><name>new</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>aliases</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_entry</name> *</type><name>entries</name> <init>= <expr>(<name>alias_entry</name> *)<name><name>conf</name>-&gt;<name>aliases</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>use_regex</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>regexp</name></name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>regexp</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>"Regular expression could not be compiled."</expr>;</return></then></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <name>real</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <name>real</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fake</name></name> = <name>fake</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>handler</name></name> = <name><name>cmd</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>use_regex</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>aliases</name>-&gt;<name>nelts</name></name> - 1</expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>alias_entry</name> *</type><name>alias</name> <init>= <expr>&amp;<name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<if>if <condition>( <expr>(!<name><name>alias</name>-&gt;<name>regexp</name></name> &amp;&amp; <call><name>alias_matches</name><argument_list>(<argument><expr><name>fake</name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>fake</name></name></expr></argument>)</argument_list></call> &gt; 0)
|| (<name><name>alias</name>-&gt;<name>regexp</name></name> &amp;&amp; !<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>alias</name>-&gt;<name>regexp</name></name></expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00671</expr></argument>)</argument_list></call>
"The %s directive in %s at line %d will probably "
"never match because it overlaps an earlier "
"%sAlias%s."</expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>filename</name></name></expr></argument>,
<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>line_num</name></name></expr></argument>,
<argument><expr><name><name>alias</name>-&gt;<name>handler</name></name> ? "Script" : ""</expr></argument>,
<argument><expr><name><name>alias</name>-&gt;<name>regexp</name></name> ? "Match" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_alias</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>real</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>add_alias_internal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>dirconf</name> <init>= <expr>(<name>alias_dir_conf</name> *) <name>dummy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<return>return <expr>"Alias must have two arguments when used globally"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>alias</name></name> =
<call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"Cannot parse alias expression '"</expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr>"': "</expr></argument>, <argument><expr><name>err</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>handler</name></name> = <name><name>cmd</name>-&gt;<name>info</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>alias_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_alias_regex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_alias_internal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_redirect_internal</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
<param><decl><type><name>alias_dir_conf</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>, <param><decl><type><name>int</name></type> <name>use_regex</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_entry</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>serverconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>alias_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr>(<name>int</name>) (<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>grokarg1</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>regex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name> <init>= <expr><name>arg2</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name> <init>= <expr><name>arg3</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"permanent"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <name>HTTP_MOVED_PERMANENTLY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"temp"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <name>HTTP_MOVED_TEMPORARILY</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"seeother"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name>status</name> = <name>HTTP_SEE_OTHER</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>, <argument><expr>"gone"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>HTTP_GONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>grokarg1</name> = -1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>arg1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>grokarg1</name> = -1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>grokarg1</name> = 0</expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>arg3</name> &amp;&amp; !<name>grokarg1</name></expr>)</condition><then>
<return>return <expr>"Redirect: invalid first argument (of three)"</expr>;</return></then></if>
<if>if <condition>(<expr>!<name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<empty_stmt>;</empty_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>grokarg1</name> &gt; 0 &amp;&amp; <name>arg2</name> &amp;&amp; !<name>arg3</name>) || (!<name>grokarg1</name> &amp;&amp; !<name>arg2</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr_err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>url</name> = <name>grokarg1</name> ? <name>arg2</name> : <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>redirect</name></name> =
<call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name></expr></argument>,
<argument><expr>&amp;<name>expr_err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>expr_err</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
<argument><expr>"Cannot parse redirect expression '"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>"': "</expr></argument>, <argument><expr><name>expr_err</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>redirect_status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>redirect_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>grokarg1</name> &lt; 0 &amp;&amp; !<name>arg2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>redirect_status</name></name> = <name>status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dirconf</name>-&gt;<name>redirect_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if></else></if></else></if>
<if>if <condition>(<expr>!<name>arg3</name> &amp;&amp; !<name>grokarg1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fake</name> = <name>arg1</name></expr>;</expr_stmt>
<expr_stmt><expr><name>url</name> = <name>arg2</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>use_regex</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>regex</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>fake</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>regex</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>"Regular expression could not be compiled."</expr>;</return></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>url</name></expr>)</condition><then>
<return>return <expr>"URL to redirect to is missing"</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>use_regex</name> &amp;&amp; !<call><name>ap_is_url</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call> &amp;&amp; (<name><name>url</name><index>[<expr>0</expr>]</index></name> != '/')</expr>)</condition><then>
<return>return <expr>"Redirect to non-URL"</expr>;</return></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>url</name></expr>)</condition><then>
<return>return <expr>"Redirect URL not valid for this status"</expr>;</return></then></if>
}</block></else></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>dirconf</name>-&gt;<name>redirects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>serverconf</name>-&gt;<name>redirects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fake</name></name> = <name>fake</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <name>url</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>regexp</name></name> = <name>regex</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>redir_status</name></name> = <name>status</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_redirect</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_redirect_internal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dirconf</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_redirect2</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_redirect_internal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dirconf</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_redirect_regex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dirconf</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_redirect_internal</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dirconf</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>alias_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"Alias"</expr></argument>, <argument><expr><name>add_alias</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"a fakename and a realname, or a realname in a Location"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE12</name><argument_list>(<argument><expr>"ScriptAlias"</expr></argument>, <argument><expr><name>add_alias</name></expr></argument>, <argument><expr>"cgi-script"</expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"a fakename and a realname, or a realname in a Location"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE123</name><argument_list>(<argument><expr>"Redirect"</expr></argument>, <argument><expr><name>add_redirect</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>HTTP_MOVED_TEMPORARILY</name></expr></argument>,
<argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"an optional status, then document to be redirected and "
"destination URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"AliasMatch"</expr></argument>, <argument><expr><name>add_alias_regex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a regular expression and a filename"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"ScriptAliasMatch"</expr></argument>, <argument><expr><name>add_alias_regex</name></expr></argument>, <argument><expr>"cgi-script"</expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a regular expression and a filename"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"RedirectMatch"</expr></argument>, <argument><expr><name>add_redirect_regex</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>HTTP_MOVED_TEMPORARILY</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"an optional status, then a regular expression and "
"destination URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"RedirectTemp"</expr></argument>, <argument><expr><name>add_redirect2</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>HTTP_MOVED_TEMPORARILY</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a document to be redirected, then the destination URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"RedirectPermanent"</expr></argument>, <argument><expr><name>add_redirect2</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>HTTP_MOVED_PERMANENTLY</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"a document to be redirected, then the destination URL"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>alias_matches</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alias_fakename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aliasp</name> <init>= <expr><name>alias_fakename</name></expr></init>, *<name>urip</name> <init>= <expr><name>uri</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr>*<name>aliasp</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>aliasp</name> == '/'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>urip</name> != '/'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<do>do <block>{
<expr_stmt><expr>++<name>aliasp</name></expr>;</expr_stmt>
}</block> while <condition>(<expr>*<name>aliasp</name> == '/'</expr>)</condition>;</do>
<do>do <block>{
<expr_stmt><expr>++<name>urip</name></expr>;</expr_stmt>
}</block> while <condition>(<expr>*<name>urip</name> == '/'</expr>)</condition>;</do>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name>urip</name>++ != *<name>aliasp</name>++</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr><name><name>aliasp</name><index>[<expr>-1</expr>]</index></name> != '/' &amp;&amp; *<name>urip</name> != '\0' &amp;&amp; *<name>urip</name> != '/'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><name>urip</name> - <name>uri</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>try_alias</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>dirconf</name> <init>=
<expr>(<name>alias_dir_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>alias_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>alias</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>found</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>alias</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02825</expr></argument>)</argument_list></call>
"Can't evaluate alias expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PREGSUB_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>handler</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name><name>dirconf</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"alias-forced-type"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>found</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>try_redirect</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>dirconf</name> <init>=
<expr>(<name>alias_dir_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>alias_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>redirect_set</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>found</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirconf</name>-&gt;<name>redirect</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>redirect</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02826</expr></argument>)</argument_list></call>
"Can't evaluate redirect expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PREGSUB_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>, <argument><expr><name>APR_URI_UNP_OMITQUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>uri</name>.<name>query</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>uri</name>.<name>query</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>uri</name>.<name>fragment</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr>"#"</expr></argument>, <argument><expr><name><name>uri</name>.<name>fragment</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>status</name> = <name><name>dirconf</name>-&gt;<name>redirect_status</name></name></expr>;</expr_stmt>
<return>return <expr><name>found</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>try_alias_list</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>aliases</name></decl></param>,
<param><decl><type><name>int</name></type> <name>is_redir</name></decl></param>, <param><decl><type><name>int</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>alias_entry</name> *</type><name>entries</name> <init>= <expr>(<name>alias_entry</name> *) <name><name>aliases</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>regm</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>aliases</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>alias_entry</name> *</type><name>alias</name> <init>= <expr>&amp;<name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>alias</name>-&gt;<name>regexp</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>alias</name>-&gt;<name>regexp</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>alias</name>-&gt;<name>real</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>real</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>,
<argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_redir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_uri_parse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITQUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>uri</name>.<name>query</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr>"?"</expr></argument>,
<argument><expr><name><name>uri</name>.<name>query</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>uri</name>.<name>fragment</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr>"#"</expr></argument>,
<argument><expr><name><name>uri</name>.<name>fragment</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00672</expr></argument>)</argument_list></call>
"Regex substitution in '%s' failed. "
"Replacement too long?"</expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>PREGSUB_ERROR</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>found</name> = ""</expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>l</name> = <call><name>alias_matches</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>fake</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>l</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_context_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>fake</name></name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>is_redir</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>escurl</name></decl>;</decl_stmt>
<expr_stmt><expr><name>escurl</name> = <call><name>ap_os_escape_path</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name> + <name>l</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>real</name></name></expr></argument>, <argument><expr><name>escurl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>alias</name>-&gt;<name>real</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name> + <name>l</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>alias</name>-&gt;<name>handler</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = <name><name>alias</name>-&gt;<name>handler</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"alias-forced-type"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>is_redir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>status</name> = <name><name>alias</name>-&gt;<name>redir_status</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>found</name></expr>;</return>
}</block></then></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>translate_alias_redir</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>sconf</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_server_conf</name> *</type><name>serverconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>alias_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> != '/' &amp;&amp; <name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>ret</name> = <call><name>try_redirect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call>) != <name>NULL</name>
|| (<name>ret</name> = <call><name>try_alias_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>serverconf</name>-&gt;<name>redirects</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call>)
!= <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ret</name> == <name>PREGSUB_ERROR</name></expr>)</condition><then>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ret</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>orig_target</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00673</expr></argument>)</argument_list></call>
"incomplete redirection target of '%s' for "
"URI '%s' modified to '%s'"</expr></argument>,
<argument><expr><name>orig_target</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_is_url</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00674</expr></argument>)</argument_list></call>
"cannot redirect '%s' to '%s'; "
"target is not a valid absoluteURI or abs_path"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; !<call><name>ap_strchr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr>'?'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>ret</name> = <call><name>try_alias</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>) != <name>NULL</name>
|| (<name>ret</name> = <call><name>try_alias_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>serverconf</name>-&gt;<name>aliases</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call>)
!= <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name>ret</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fixup_redir</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>dconf</name> <init>= <expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alias_dir_conf</name> *</type><name>dirconf</name> <init>=
<expr>(<name>alias_dir_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>dconf</name></expr></argument>, <argument><expr>&amp;<name>alias_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ret</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ret</name> = <call><name>try_redirect</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call>) != <name>NULL</name>
|| (<name>ret</name> = <call><name>try_alias_list</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dirconf</name>-&gt;<name>redirects</name></name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call>)
!= <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>ret</name> == <name>PREGSUB_ERROR</name></expr>)</condition><then>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>ret</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>orig_target</name> <init>= <expr><name>ret</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> = <call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00675</expr></argument>)</argument_list></call>
"incomplete redirection target of '%s' for "
"URI '%s' modified to '%s'"</expr></argument>,
<argument><expr><name>orig_target</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_is_url</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>status</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00676</expr></argument>)</argument_list></call>
"cannot redirect '%s' to '%s'; "
"target is not a valid absoluteURI or abs_path"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; !<call><name>ap_strchr</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr>'?'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ret</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszSucc</name><index>[]</index></name><init>= <expr><block>{ <expr>"mod_userdir.c"</expr>,
<expr>"mod_vhost_alias.c"</expr>,<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>translate_alias_redir</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>aszSucc</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>fixup_redir</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>alias</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_alias_dir_config</name></expr>,
<expr><name>merge_alias_dir_config</name></expr>,
<expr><name>create_alias_config</name></expr>,
<expr><name>merge_alias_config</name></expr>,
<expr><name>alias_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
