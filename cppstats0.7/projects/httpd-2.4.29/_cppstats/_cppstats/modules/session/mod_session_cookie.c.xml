<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/session/mod_session_cookie.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_cookies.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_COOKIE</name></cpp:macro> <cpp:value>"mod_session_cookie"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>session_cookie_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name_attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>name2_set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name2_attrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remove</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>remove_set</name></decl>;</decl_stmt>
}</block></struct></type> <name>session_cookie_dir_conf</name>;</typedef>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_cookie_save</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>session_rec</name> *</type> <name>z</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>session_cookie_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>z</name>-&gt;<name>encoded</name></name> &amp;&amp; <name><name>z</name>-&gt;<name>encoded</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cookie_write</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name_attrs</name></name></expr></argument>,
<argument><expr><name><name>z</name>-&gt;<name>maxage</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_cookie_remove</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name_attrs</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>z</name>-&gt;<name>encoded</name></name> &amp;&amp; <name><name>z</name>-&gt;<name>encoded</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_cookie_write2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name2</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name2_attrs</name></name></expr></argument>,
<argument><expr><name><name>z</name>-&gt;<name>maxage</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_cookie_remove2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name2</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name2_attrs</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name> || <name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_cookie_load</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>session_rec</name> **</type> <name>z</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>session_cookie_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_rec</name> *</type><name>zz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>m</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name><name>m</name>-&gt;<name>prev</name></name></expr>)</condition> <block>{
<expr_stmt><expr><name>m</name> = <name><name>m</name>-&gt;<name>prev</name></name></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr><name><name>m</name>-&gt;<name/></name>main</expr>)</condition> <block>{
<expr_stmt><expr><name>m</name> = <name><name>m</name>-&gt;<name/></name>main</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <name><name>conf</name>-&gt;<name>name2</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = <name><name>conf</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>MOD_SESSION_COOKIE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zz</name> = (<name>session_rec</name> *)<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>zz</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>z</name> = <name>zz</name></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_cookie_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>zz</name> = (<name>session_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zz</name>-&gt;<name>pool</name></name> = <name><name>m</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zz</name>-&gt;<name>entries</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>zz</name>-&gt;<name>encoded</name></name> = <name>val</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>z</name> = <name>zz</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_session_cookie_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>new</name> <init>=
<expr>(<name>session_cookie_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_cookie_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_session_cookie_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>session_cookie_dir_conf</name> *)
<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_cookie_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>session_cookie_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>session_cookie_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = (<name><name>add</name>-&gt;<name>name_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name</name></name> : <name><name>add</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_attrs</name></name> = (<name><name>add</name>-&gt;<name>name_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name_attrs</name></name> : <name><name>add</name>-&gt;<name>name_attrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name_set</name></name> = <name><name>add</name>-&gt;<name>name_set</name></name> || <name><name>base</name>-&gt;<name>name_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name2</name></name> = (<name><name>add</name>-&gt;<name>name2_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name2</name></name> : <name><name>add</name>-&gt;<name>name2</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name2_attrs</name></name> = (<name><name>add</name>-&gt;<name>name2_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name2_attrs</name></name> : <name><name>add</name>-&gt;<name>name2_attrs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name2_set</name></name> = <name><name>add</name>-&gt;<name>name2_set</name></name> || <name><name>base</name>-&gt;<name>name2_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>remove</name></name> = (<name><name>add</name>-&gt;<name>remove_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>remove</name></name> : <name><name>add</name>-&gt;<name>remove</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>remove_set</name></name> = <name><name>add</name>-&gt;<name>remove_set</name></name> || <name><name>base</name>-&gt;<name>remove_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>check_string</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr>!<name>string</name> || !*<name>string</name> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>'&amp;'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>directive</name></name></expr></argument>,
<argument><expr>" cannot be empty, or contain '=' or '&amp;'."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_name</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>line</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>session_cookie_dir_conf</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cookie</name> <init>= <expr><call><name>apr_strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>" \t"</expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name</name></name> = <name>cookie</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name_set</name></name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>last</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name_attrs</name></name> = <name>last</name></expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_name2</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>last</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>line</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>session_cookie_dir_conf</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cookie</name> <init>= <expr><call><name>apr_strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>" \t"</expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name2</name></name> = <name>cookie</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name2_set</name></name> = 1</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>last</name>++</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>name2_attrs</name></name> = <name>last</name></expr>;</expr_stmt>
<return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_remove</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>session_cookie_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>remove</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>remove_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>session_cookie_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SessionCookieName"</expr></argument>, <argument><expr><name>set_cookie_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The name of the RFC2109 cookie carrying the session"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SessionCookieName2"</expr></argument>, <argument><expr><name>set_cookie_name2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"The name of the RFC2965 cookie carrying the session"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SessionCookieRemove"</expr></argument>, <argument><expr><name>set_remove</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
<argument><expr>"Set to 'On' to remove the session cookie from the headers "
"and hide the cookie from a backend server or process"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_session_load</name><argument_list>(<argument><expr><name>session_cookie_load</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_session_save</name><argument_list>(<argument><expr><name>session_cookie_save</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>session_cookie</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_session_cookie_dir_config</name></expr>,
<expr><name>merge_session_cookie_dir_config</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>session_cookie_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
