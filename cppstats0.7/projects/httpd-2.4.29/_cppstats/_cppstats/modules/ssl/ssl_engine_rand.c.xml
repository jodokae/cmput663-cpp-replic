<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/ssl/ssl_engine_rand.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_rand_choosenum</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ssl_rand_feedfp</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type></decl></param>, <param><decl><type><name>apr_file_t</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>int</name></type> <name>ssl_rand_seed</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>ssl_rsctx_t</name></type> <name>nCtx</name></decl></param>, <param><decl><type><name>char</name> *</type><name>prefix</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>apRandSeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_randseed_t</name> *</type><name>pRandSeeds</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ssl_randseed_t</name> *</type><name>pRandSeed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>stackdata</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nDone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
<expr_stmt><expr><name>mc</name> = <call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nDone</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>apRandSeed</name> = <name><name>mc</name>-&gt;<name>aRandSeed</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pRandSeeds</name> = (<name>ssl_randseed_t</name> *)<name><name>apRandSeed</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>apRandSeed</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>pRandSeed</name> = &amp;<name><name>pRandSeeds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pRandSeed</name>-&gt;<name>nCtx</name></name> == <name>nCtx</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>pRandSeed</name>-&gt;<name>nSrc</name></name> == <name>SSL_RSSRC_FILE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name><name>pRandSeed</name>-&gt;<name>cpPath</name></name></expr></argument>,
<argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>nDone</name> += <call><name>ssl_rand_feedfp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>pRandSeed</name>-&gt;<name>nBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>pRandSeed</name>-&gt;<name>nSrc</name></name> == <name>SSL_RSSRC_EXEC</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name> <init>= <expr><name><name>pRandSeed</name>-&gt;<name>cpPath</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * 3</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name>cmd</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <call><name>apr_itoa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pRandSeed</name>-&gt;<name>nBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>fp</name> = <call><name>ssl_util_ppopen</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>nDone</name> += <call><name>ssl_rand_feedfp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>, <argument><expr><name><name>pRandSeed</name>-&gt;<name>nBytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_util_ppclose</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_RAND_EGD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name><name>pRandSeed</name>-&gt;<name>nSrc</name></name> == <name>SSL_RSSRC_EGD</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>n</name> = <call><name>RAND_egd</name><argument_list>(<argument><expr><name><name>pRandSeed</name>-&gt;<name>cpPath</name></name></expr></argument>)</argument_list></call>) == -1</expr>)</condition><then>
<continue>continue;</continue></then></if>
<expr_stmt><expr><name>nDone</name> += <name>n</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <if>if <condition>(<expr><name><name>pRandSeed</name>-&gt;<name>nSrc</name></name> == <name>SSL_RSSRC_BUILTIN</name></expr>)</condition><then> <block>{
<struct>struct <block>{
<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
}</block> <decl><name>my_seed</name></decl>;</struct>
<expr_stmt><expr><name><name>my_seed</name>.<name>t</name></name> = <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>my_seed</name>.<name>pid</name></name> = <name><name>mc</name>-&gt;<name>pid</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>l</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>my_seed</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name> *)&amp;<name>my_seed</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nDone</name> += <name>l</name></expr>;</expr_stmt>
<expr_stmt><expr><name>n</name> = <call><name>ssl_rand_choosenum</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stackdata</name></expr></argument>)</argument_list></sizeof>-128-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr><name>stackdata</name>+<name>n</name></expr></argument>, <argument><expr>128</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nDone</name> += 128</expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"%sSeeding PRNG with %d bytes of entropy"</expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>nDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>RAND_status</name><argument_list>()</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01990</expr></argument>)</argument_list></call>
"%sPRNG still contains insufficient entropy!"</expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<return>return <expr><name>nDone</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_rand_feedfp</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>int</name></type> <name>nReq</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nDone</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>caBuf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nBuf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nTodo</name></decl>;</decl_stmt>
<expr_stmt><expr><name>nDone</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>nRead</name> = <name>BUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>nTodo</name> = <name>nReq</name></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr><name>nReq</name> &gt; 0</expr>)</condition><then>
<expr_stmt><expr><name>nRead</name> = (<name>nTodo</name> &lt; <name>BUFSIZE</name> ? <name>nTodo</name> : <name>BUFSIZE</name>)</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>nBuf</name> = <name>nRead</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_read</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><name>caBuf</name></expr></argument>, <argument><expr>&amp;<name>nBuf</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>RAND_seed</name><argument_list>(<argument><expr><name>caBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nDone</name> += <name>nBuf</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nReq</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>nTodo</name> -= <name>nBuf</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nTodo</name> &lt;= 0</expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
}</block></while>
<return>return <expr><name>nDone</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_rand_choosenum</name><parameter_list>(<param><decl><type><name>int</name></type> <name>l</name></decl></param>, <param><decl><type><name>int</name></type> <name>h</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%.0f"</expr></argument>,
<argument><expr>((<call>(<name>double</name>)<argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call>%<name>RAND_MAX</name></expr></argument>)</argument_list></call>/<name>RAND_MAX</name>)*(<name>h</name>-<name>l</name>))</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call>+1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &lt; <name>l</name></expr>)</condition><then> <expr_stmt><expr><name>i</name> = <name>l</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>i</name> &gt; <name>h</name></expr>)</condition><then> <expr_stmt><expr><name>i</name> = <name>h</name></expr>;</expr_stmt></then></if>
<return>return <expr><name>i</name></expr>;</return>
}</block></function>
</unit>
