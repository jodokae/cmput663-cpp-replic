<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/ssl/ssl_engine_init.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl_openssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>ssl</argument>, <argument>SSL</argument>, <argument>int</argument>, <argument>init_server</argument>,
<argument>(server_rec *s,apr_pool_t *p,int is_proxy,SSL_CTX *ctx)</argument>,
<argument>(s,p,is_proxy,ctx)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYTYPES</name></cpp:macro> <cpp:value>"RSA, DSA or ECC"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEYTYPES</name></cpp:macro> <cpp:value>"RSA or DSA"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>DH_set0_pqg</name><parameter_list>(<param><decl><type><name>DH</name> *</type><name>dh</name></decl></param>, <param><decl><type><name>BIGNUM</name> *</type><name>p</name></decl></param>, <param><decl><type><name>BIGNUM</name> *</type><name>q</name></decl></param>, <param><decl><type><name>BIGNUM</name> *</type><name>g</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>p</name> == <name>NULL</name> || <name>g</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name><name>dh</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name><name>dh</name>-&gt;<name>q</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name><name>dh</name>-&gt;<name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name>-&gt;<name>p</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name>-&gt;<name>q</name></name> = <name>q</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dh</name>-&gt;<name>g</name></name> = <name>g</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>q</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dh</name>-&gt;<name>length</name></name> = <call><name>BN_num_bits</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>DH</name> *</type><name>make_dh_params</name><parameter_list>(<param><function_decl><type><name>BIGNUM</name> *</type>(*<name>prime</name>)<parameter_list>(<param><decl><type><name>BIGNUM</name> *</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>DH</name> *</type><name>dh</name> <init>= <expr><call><name>DH_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BIGNUM</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>dh</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>prime</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>g</name> = <call><name>BN_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>g</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BN_set_word</name><argument_list>(<argument><expr><name>g</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>p</name> || !<name>g</name> || !<call><name>DH_set0_pqg</name><argument_list>(<argument><expr><name>dh</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BN_free</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>dh</name></expr>;</return>
}</block></function>
<struct><specifier>static</specifier> struct <name>dhparam</name> <block>{
<expr_stmt><expr><call><call><name>BIGNUM</name> *<argument_list>(<argument><expr>*const <name>prime</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>BIGNUM</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>DH</name> *</type><name>dh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>min</name></decl>;</decl_stmt>
}</block> <decl><name><name>dhparams</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr><name>BN_get_rfc3526_prime_8192</name></expr>, <expr><name>NULL</name></expr>, <expr>6145</expr> }</block></expr>,
<expr><block>{ <expr><name>BN_get_rfc3526_prime_6144</name></expr>, <expr><name>NULL</name></expr>, <expr>4097</expr> }</block></expr>,
<expr><block>{ <expr><name>BN_get_rfc3526_prime_4096</name></expr>, <expr><name>NULL</name></expr>, <expr>3073</expr> }</block></expr>,
<expr><block>{ <expr><name>BN_get_rfc3526_prime_3072</name></expr>, <expr><name>NULL</name></expr>, <expr>2049</expr> }</block></expr>,
<expr><block>{ <expr><name>BN_get_rfc3526_prime_2048</name></expr>, <expr><name>NULL</name></expr>, <expr>1025</expr> }</block></expr>,
<expr><block>{ <expr><name>BN_get_rfc2409_prime_1024</name></expr>, <expr><name>NULL</name></expr>, <expr>0</expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dh_params</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>dhparams</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>dhparams</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<expr_stmt><expr><name><name>dhparams</name><index>[<expr><name>n</name></expr>]</index></name>.<name>dh</name> = <call><name>make_dh_params</name><argument_list>(<argument><expr><name><name>dhparams</name><index>[<expr><name>n</name></expr>]</index></name>.<name>prime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>free_dh_params</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>dhparams</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>dhparams</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name><name>dhparams</name><index>[<expr><name>n</name></expr>]</index></name>.<name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dhparams</name><index>[<expr><name>n</name></expr>]</index></name>.<name>dh</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></for>
}</block></function>
<function><type><name>DH</name> *</type><name>modssl_get_dh_params</name><parameter_list>(<param><decl><type><name>unsigned</name></type> <name>keylen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>n</name></decl>;</decl_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name>dhparams</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>dhparams</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>)
<if>if <condition>(<expr><name>keylen</name> &gt;= <name><name>dhparams</name><index>[<expr><name>n</name></expr>]</index></name>.<name>min</name></expr>)</condition><then>
<return>return <expr><name><name>dhparams</name><index>[<expr><name>n</name></expr>]</index></name>.<name>dh</name></expr>;</return></then></if></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_add_version_components</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>modver</name> <init>= <expr><call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"SSL_VERSION_INTERFACE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>libver</name> <init>= <expr><call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"SSL_VERSION_LIBRARY"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>incver</name> <init>= <expr><call><name>ssl_var_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr>"SSL_VERSION_LIBRARY_INTERFACE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>libver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01876</expr></argument>)</argument_list></call>
"%s compiled against Server: %s, Library: %s"</expr></argument>,
<argument><expr><name>modver</name></expr></argument>, <argument><expr><name>AP_SERVER_BASEVERSION</name></expr></argument>, <argument><expr><name>incver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ssl_init_Module</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>base_server</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>pphrases</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>SSLeay</name><argument_list>()</argument_list></call> &lt; <name>MODSSL_LIBRARY_VERSION</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01882</expr></argument>)</argument_list></call>
"Init: this version of mod_ssl was compiled against "
"a newer library (%s, version currently loaded is %s)"
" - may result in undefined or erroneous behavior"</expr></argument>,
<argument><expr><name>MODSSL_LIBRARY_TEXT</name></expr></argument>, <argument><expr><name>MODSSL_LIBRARY_DYNTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>pid</name></name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base_server</name></expr></argument>,
<argument><expr><name>ssl_init_ModuleKill</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_config_global_create</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_config_global_fix</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>sc</name></name> = <name>sc</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>proxy</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>sc</name></name> = <name>sc</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name> = <call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sc</name>-&gt;<name>vhost_id_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_get_server_protocol</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr>"https"</expr></argument>, <argument><expr><call><name>ap_get_server_protocol</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0
&amp;&amp; <name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>enabled</name></name> = <name>SSL_ENABLED_TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>enabled</name></name> = <name>SSL_ENABLED_FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>proxy_enabled</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>proxy_enabled</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>session_cache_timeout</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>session_cache_timeout</name></name> = <name>SSL_SESSION_CACHE_TIMEOUT</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name></name> &amp;&amp; <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> = <name>SSL_PPTYPE_BUILTIN</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>fips</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>sc</name>-&gt;<name>fips</name></name> = <name>FALSE</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name> &amp;&amp; <name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<expr_stmt><expr><call><name>ssl_util_thread_setup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_Engine</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01883</expr></argument>)</argument_list></call>
"Init: Initialized %s library"</expr></argument>, <argument><expr><name>MODSSL_LIBRARY_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_rand_seed</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>SSL_RSCTX_STARTUP</name></expr></argument>, <argument><expr>"Init: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FIPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if<condition>(<expr><name><name>sc</name>-&gt;<name>fips</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>FIPS_mode</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>FIPS_mode_set</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01884</expr></argument>)</argument_list></call>
"Operating in SSL FIPS mode"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01885</expr></argument>)</argument_list></call> "FIPS mode failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01886</expr></argument>)</argument_list></call>
"SSL FIPS mode disabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>ssl_mutex_init</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ssl_stapling_certinfo_hash_init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_scache_init</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>pphrases</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01887</expr></argument>)</argument_list></call>
"Init: Initializing (virtual) servers for SSL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ConfigureServer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>pphrases</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr><name><name>pphrases</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pphrases</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>pphrases</name>-&gt;<name>elt_size</name></name> * <name><name>pphrases</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pphrases</name>-&gt;<name>nelts</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02560</expr></argument>)</argument_list></call>
"Init: Wiped out the queried pass phrases from memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_CheckServers</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_TRUE</name> || <name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_OPTIONAL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_run_init_server</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>proxy_enabled</name></name> == <name>SSL_ENABLED_TRUE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_run_init_server</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>proxy</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if></else></if>
}</block></for>
<expr_stmt><expr><call><name>ssl_add_version_components</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>base_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>modssl_init_app_data2_idx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>init_dh_params</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<expr_stmt><expr><call><name>init_bio_methods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>apr_status_t</name></type> <name>ssl_init_Engine</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ENGINE</name> *</type><name>e</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name>e</name> = <call><name>ENGINE_by_id</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01888</expr></argument>)</argument_list></call>
"Init: Failed to load Crypto Device API `%s'"</expr></argument>,
<argument><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENGINE_CTRL_CHIL_SET_FORKCHECK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name></expr></argument>, <argument><expr>"chil"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ENGINE_ctrl</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ENGINE_CTRL_CHIL_SET_FORKCHECK</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!<call><name>ENGINE_set_default</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>ENGINE_METHOD_ALL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01889</expr></argument>)</argument_list></call>
"Init: Failed to enable Crypto Device API `%s'"</expr></argument>,
<argument><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01890</expr></argument>)</argument_list></call>
"Init: loaded Crypto Device API `%s'"</expr></argument>,
<argument><expr><name><name>mc</name>-&gt;<name>szCryptoDevice</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ENGINE_free</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx_tls_extensions</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01893</expr></argument>)</argument_list></call>
"Configuring TLS extension handling"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SSL_CTX_set_tlsext_servername_callback</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>ssl_callback_ServerNameIndication</name></expr></argument>)</argument_list></call> ||
!<call><name>SSL_CTX_set_tlsext_servername_arg</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01894</expr></argument>)</argument_list></call>
"Unable to initialize TLS servername extension "
"callback (incompatible OpenSSL version?)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name><name>mctx</name>-&gt;<name>pkp</name></name> == <name>FALSE</name>) &amp;&amp; (<name><name>mctx</name>-&gt;<name>stapling_enabled</name></name> == <name>TRUE</name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>modssl_init_stapling</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>srp_vfile</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02308</expr></argument>)</argument_list></call>
"Using SRP verifier file [%s]"</expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>srp_vfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>mctx</name>-&gt;<name>srp_vbase</name></name> = <call><name>SRP_VBASE_new</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>srp_unknown_user_seed</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02309</expr></argument>)</argument_list></call>
"Unable to initialize SRP verifier structure "
"[%s seed]"</expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>srp_unknown_user_seed</name></name> ? "with" : "without"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>err</name> = <call><name>SRP_VBASE_init</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>srp_vbase</name></name></expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>srp_vfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name> != <name>SRP_NO_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02310</expr></argument>)</argument_list></call>
"Unable to load SRP verifier file [error %d]"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SSL_CTX_set_srp_username_callback</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>ssl_callback_SRPServerParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_srp_cb_arg</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx_protocol</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>MODSSL_SSL_METHOD_CONST</name> <name>SSL_METHOD</name> *</type><name>method</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>protocol</name> <init>= <expr><name><name>mctx</name>-&gt;<name>protocol</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x10100000L</expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>prot</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>protocol</name> == <name>SSL_PROTOCOL_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02231</expr></argument>)</argument_list></call>
"No SSL protocols available [hint: SSLProtocol]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cp</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>(<name>protocol</name> &amp; <name>SSL_PROTOCOL_SSLV3</name> ? "SSLv3, " : "")</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr>(<name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1</name> ? "TLSv1, " : "")</expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<argument><expr>(<name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_1</name> ? "TLSv1.1, " : "")</expr></argument>,
<argument><expr>(<name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_2</name> ? "TLSv1.2, " : "")</expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cp</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call>-2</expr>]</index></name> = <name>NUL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Creating new SSL context (protocols: %s)"</expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>protocol</name> == <name>SSL_PROTOCOL_SSLV3</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>method</name> = <name><name>mctx</name>-&gt;<name>pkp</name></name> ?
<call><name>SSLv3_client_method</name><argument_list>()</argument_list></call> :
<call><name>SSLv3_server_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>protocol</name> == <name>SSL_PROTOCOL_TLSV1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>method</name> = <name><name>mctx</name>-&gt;<name>pkp</name></name> ?
<call><name>TLSv1_client_method</name><argument_list>()</argument_list></call> :
<call><name>TLSv1_server_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<else>else <if>if <condition>(<expr><name>protocol</name> == <name>SSL_PROTOCOL_TLSV1_1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>method</name> = <name><name>mctx</name>-&gt;<name>pkp</name></name> ?
<call><name>TLSv1_1_client_method</name><argument_list>()</argument_list></call> :
<call><name>TLSv1_1_server_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>protocol</name> == <name>SSL_PROTOCOL_TLSV1_2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>method</name> = <name><name>mctx</name>-&gt;<name>pkp</name></name> ?
<call><name>TLSv1_2_client_method</name><argument_list>()</argument_list></call> :
<call><name>TLSv1_2_server_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{
<expr_stmt><expr><name>method</name> = <name><name>mctx</name>-&gt;<name>pkp</name></name> ?
<call><name>SSLv23_client_method</name><argument_list>()</argument_list></call> :
<call><name>SSLv23_server_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>method</name> = <name><name>mctx</name>-&gt;<name>pkp</name></name> ?
<call><name>TLS_client_method</name><argument_list>()</argument_list></call> :
<call><name>TLS_server_method</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>ctx</name> = <call><name>SSL_CTX_new</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &lt; 0x10100000L</expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!(<name>protocol</name> &amp; <name>SSL_PROTOCOL_SSLV3</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SSLv3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr>!(<name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSV1_X</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!(<name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_1</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_2</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TLSv1_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_2</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>TLS1_2_VERSION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>TLS1_1_VERSION</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>TLS1_VERSION</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></then> <else>else <if>if <condition>(<expr><name>protocol</name> &amp; <name>SSL_PROTOCOL_SSLV3</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>SSL3_VERSION</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03378</expr></argument>)</argument_list></call>
"No SSL protocols available [hint: SSLProtocol]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<expr_stmt><expr><call><name>SSL_CTX_set_max_proto_version</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>prot</name> == <name>TLS1_2_VERSION</name> &amp;&amp; <name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1_1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>TLS1_1_VERSION</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>prot</name> == <name>TLS1_1_VERSION</name> &amp;&amp; <name>protocol</name> &amp; <name>SSL_PROTOCOL_TLSV1</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>TLS1_VERSION</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>prot</name> == <name>TLS1_VERSION</name> &amp;&amp; <name>protocol</name> &amp; <name>SSL_PROTOCOL_SSLV3</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>prot</name> = <name>SSL3_VERSION</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SSL_CTX_set_min_proto_version</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_CIPHER_SERVER_PREFERENCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>cipher_server_pref</name></name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_CIPHER_SERVER_PREFERENCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_COMP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>compression</name></name> != <name>TRUE</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>sk_SSL_COMP_zero</name><argument_list>(<argument><expr><call><name>SSL_COMP_get_compression_methods</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>session_tickets</name></name> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>insecure_reneg</name></name> == <name>TRUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SSL_CTX_set_app_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_ECDH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>ap_max_mem_free</name> != <name>APR_ALLOCATOR_MAX_FREE_UNLIMITED</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SSL_CTX_set_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SSL_MODE_RELEASE_BUFFERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_init_ctx_session_cache</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ctx</name> <init>= <expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>mc</name>-&gt;<name>sesscache_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_sess_set_new_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_callback_NewSessionCacheEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_sess_set_get_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_callback_GetSessionCacheEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_sess_set_remove_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_callback_DelSessionCacheEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_init_ctx_callbacks</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ctx</name> <init>= <expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_tmp_dh_callback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_callback_TmpDH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_info_callback</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_callback_Info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_ALPN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_alpn_select_cb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ssl_callback_alpn_select</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx_verify</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ctx</name> <init>= <expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verify</name> <init>= <expr><name>SSL_VERIFY_NONE</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> *<name>ca_list</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> = <name>SSL_CVERIFY_NONE</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_depth</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_depth</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_REQUIRE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>verify</name> |= <name>SSL_VERIFY_PEER_STRICT</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_OPTIONAL</name>) ||
(<name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_OPTIONAL_NO_CA</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>verify</name> |= <name>SSL_VERIFY_PEER</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>verify</name></expr></argument>, <argument><expr><name>ssl_callback_SSLVerify</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_file</name></name> || <name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Configuring client authentication"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_file</name></name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01895</expr></argument>)</argument_list></call>
"Unable to configure verify locations "
"for client authentication"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>pks</name></name> &amp;&amp; (<name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>ca_name_file</name></name> || <name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>ca_name_path</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>ca_list</name> = <call><name>ssl_init_FindCAList</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>ca_name_file</name></name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>ca_name_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>ca_list</name> = <call><name>ssl_init_FindCAList</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_file</name></name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>ca_cert_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>sk_X509_NAME_num</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01896</expr></argument>)</argument_list></call>
"Unable to determine list of acceptable "
"CA certificates for client authentication"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>SSL_CTX_set_client_CA_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ca_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>auth</name>.<name>verify_mode</name></name> == <name>SSL_CVERIFY_REQUIRE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ca_list</name> = <call><name>SSL_CTX_get_client_CA_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sk_X509_NAME_num</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01897</expr></argument>)</argument_list></call>
"Init: Oops, you want to request client "
"authentication, but no CAs are known for "
"verification!? [Hint: SSLCACertificate*]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx_cipher_suite</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSL_CTX</name> *</type><name>ctx</name> <init>= <expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>suite</name></decl>;</decl_stmt>
<expr_stmt><expr><name>suite</name> = <name><name>mctx</name>-&gt;<name>auth</name>.<name>cipher_suite</name></name> ? <name><name>mctx</name>-&gt;<name>auth</name>.<name>cipher_suite</name></name> :
<call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>SSL_DEFAULT_CIPHER_LIST</name></expr></argument>, <argument><expr>":!aNULL:!eNULL:!EXP"</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"Configuring permitted SSL ciphers [%s]"</expr></argument>,
<argument><expr><name>suite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SSL_CTX_set_cipher_list</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>suite</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01898</expr></argument>)</argument_list></call>
"Unable to configure permitted SSL ciphers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx_crl</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>X509_STORE</name> *</type><name>store</name> <init>= <expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>crlflags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cfgp</name> <init>= <expr><name><name>mctx</name>-&gt;<name>pkp</name></name> ? "SSLProxy" : "SSL"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>crl_check_mode</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>crl_check_mask</name></name> == <name>UNSET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>crl_check_mask</name></name> = <name>SSL_CRLCHECK_NONE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>crl_check_mode</name> = <name><name>mctx</name>-&gt;<name>crl_check_mask</name></name> &amp; ~<name>SSL_CRLCHECK_FLAGS</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>mctx</name>-&gt;<name>crl_file</name></name> || <name><name>mctx</name>-&gt;<name>crl_path</name></name>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>crl_check_mode</name> == <name>SSL_CRLCHECK_LEAF</name> ||
<name>crl_check_mode</name> == <name>SSL_CRLCHECK_CHAIN</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01899</expr></argument>)</argument_list></call>
"Host %s: CRL checking has been enabled, but "
"neither %sCARevocationFile nor %sCARevocationPath "
"is configured"</expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>, <argument><expr><name>cfgp</name></expr></argument>, <argument><expr><name>cfgp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01900</expr></argument>)</argument_list></call>
"Configuring certificate revocation facility"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>store</name> || !<call><name>X509_STORE_load_locations</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>crl_file</name></name></expr></argument>,
<argument><expr><name><name>mctx</name>-&gt;<name>crl_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01901</expr></argument>)</argument_list></call>
"Host %s: unable to configure X.509 CRL storage "
"for certificate revocation"</expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name>crl_check_mode</name></expr>)</condition> <block>{
<case>case <expr><name>SSL_CRLCHECK_LEAF</name></expr>:
<expr_stmt><expr><name>crlflags</name> = <name>X509_V_FLAG_CRL_CHECK</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>SSL_CRLCHECK_CHAIN</name></expr>:
<expr_stmt><expr><name>crlflags</name> = <name>X509_V_FLAG_CRL_CHECK</name>|<name>X509_V_FLAG_CRL_CHECK_ALL</name></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>crlflags</name> = 0</expr>;</expr_stmt>
</default>}</block></switch>
<if>if <condition>(<expr><name>crlflags</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_STORE_set_flags</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>crlflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01902</expr></argument>)</argument_list></call>
"Host %s: X.509 CRL storage locations configured, "
"but CRL checking (%sCARevocationCheck) is not "
"enabled"</expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>, <argument><expr><name>cfgp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>use_certificate_chain</name><parameter_list>(
<param><decl><type><name>SSL_CTX</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>char</name> *</type><name>file</name></decl></param>, <param><decl><type><name>int</name></type> <name>skipfirst</name></decl></param>, <param><decl><type><name>pem_password_cb</name> *</type><name>cb</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>bio</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>x509</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>bio</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then>
<return>return <expr>-1</expr>;</return></then></if>
<if>if <condition>(<expr><call><name>BIO_read_filename</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>skipfirst</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>x509</name> = <call><name>PEM_read_bio_X509</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_SSL_INTERN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_clear_extra_chain_certs</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>extra_certs</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr>(<call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *)<name><name>ctx</name>-&gt;<name>extra_certs</name></name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>extra_certs</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>x509</name> = <call><name>PEM_read_bio_X509</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<call><name>SSL_CTX_add_extra_chain_cert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>x509</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ERR_peek_error</name><argument_list>()</argument_list></call>) &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!( <call><name>ERR_GET_LIB</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> == <name>ERR_LIB_PEM</name>
&amp;&amp; <call><name>ERR_GET_REASON</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> == <name>PEM_R_NO_START_LINE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>-1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition> <empty_stmt>;</empty_stmt></while>
}</block></then></if>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>n</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx_cert_chain</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>BOOL</name></type> <name>skip_first</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>chain</name> <init>= <expr><name><name>mctx</name>-&gt;<name>cert_chain</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>chain</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>(<name>i</name> &lt; <name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name>-&gt;<name>nelts</name></name>) &amp;&amp;
<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strEQ</name><argument_list>(<argument><expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>skip_first</name> = <name>TRUE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name>n</name> = <call><name>use_certificate_chain</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>chain</name></expr></argument>, <argument><expr><name>skip_first</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01903</expr></argument>)</argument_list></call>
"Failed to configure CA certificate chain!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01904</expr></argument>)</argument_list></call>
"Configuring server certificate chain "
"(%d CA certificate%s)"</expr></argument>,
<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name> == 1 ? "" : "s"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ctx</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx_protocol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ssl_init_ctx_session_cache</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_init_ctx_callbacks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx_verify</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx_cipher_suite</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx_crl</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>pks</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx_cert_chain</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx_tls_extensions</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>)</argument_list></call>) !=
<name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_check_public_cert</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>is_ca</name></decl>, <decl><type ref="prev"/><name>pathlen</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>modssl_X509_getBC</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr>&amp;<name>is_ca</name></expr></argument>, <argument><expr>&amp;<name>pathlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_ca</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01906</expr></argument>)</argument_list></call>
"%s server certificate is a CA certificate "
"(BasicConstraints: CA == TRUE !?)"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>pathlen</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01907</expr></argument>)</argument_list></call>
"%s server certificate is not a leaf certificate "
"(BasicConstraints: pathlen == %d &gt; 0 !?)"</expr></argument>,
<argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>pathlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>modssl_X509_match_name</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr>(const <name>char</name> *)<name><name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>,
<argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> == <name>FALSE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01909</expr></argument>)</argument_list></call>
"%s server certificate does NOT include an ID "
"which matches the server name"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_no_passwd_prompt_cb</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>, <param><decl><type><name>int</name></type> <name>rwflag</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>userdata</name></decl></param>)</parameter_list> <block>{
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_server_certs</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>pphrases</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vhost_id</name> <init>= <expr><name><name>mctx</name>-&gt;<name>sc</name>-&gt;<name>vhost_id</name></name></expr></init>, *<name>key_id</name></decl>, *<decl><type ref="prev"/><name>certfile</name></decl>, *<decl><type ref="prev"/><name>keyfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509</name> *</type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DH</name> *</type><name>dhparams</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>EC_GROUP</name> *</type><name>ecparams</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EC_KEY</name> *</type><name>eckey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>ssl_no_passwd_prompt_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr>(<name>i</name> &lt; <name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name>-&gt;<name>nelts</name></name>) &amp;&amp;
(<name>certfile</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>)</expr>;</condition>
<incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>key_id</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr>"%s:%d"</expr></argument>, <argument><expr><name>vhost_id</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>cert_chain</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<call><name>SSL_CTX_use_certificate_file</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>,
<argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> &lt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02561</expr></argument>)</argument_list></call>
"Failed to configure certificate %s, check %s"</expr></argument>,
<argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>(<call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>certfile</name></expr></argument>)</argument_list></call> &lt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02562</expr></argument>)</argument_list></call>
"Failed to configure certificate %s (with chain),"
" check %s"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>i</name> &lt; <name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>key_files</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>keyfile</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>key_files</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>keyfile</name> = <name>certfile</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>,
<argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> &lt; 1) &amp;&amp;
(<call><name>ERR_GET_FUNC</name><argument_list>(<argument><expr><call><name>ERR_peek_last_error</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
!= <name>X509_F_X509_CHECK_PRIVATE_KEY</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>ssl_asn1_t</name> *</type><name>asn1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>EVP_PKEY</name> *</type><name>pkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_load_encrypted_pkey</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>, <argument><expr>&amp;<name>pphrases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>asn1</name> = <call><name>ssl_asn1_table_get</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>tPrivateKey</name></name></expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call>) ||
!(<name>ptr</name> = <name><name>asn1</name>-&gt;<name>cpData</name></name>) ||
!(<name>pkey</name> = <call><name>d2i_AutoPrivateKey</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr><name><name>asn1</name>-&gt;<name>nData</name></name></expr></argument>)</argument_list></call>) ||
(<call><name>SSL_CTX_use_PrivateKey</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>pkey</name></expr></argument>)</argument_list></call> &lt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02564</expr></argument>)</argument_list></call>
"Failed to configure encrypted (?) private key %s,"
" check %s"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call> &lt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02565</expr></argument>)</argument_list></call>
"Certificate and private key %s from %s and %s "
"do not match"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>!(<name>cert</name> = <call><name>SSL_CTX_get0_certificate</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>ssl</name> = <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ssl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_set_connect_state</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cert</name> = <call><name>SSL_get_certificate</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>ssl</name> || !<name>cert</name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02566</expr></argument>)</argument_list></call>
"Unable to retrieve certificate %s"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name>ssl</name></expr>)</condition><then>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ssl_check_public_cert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_CURRENT_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name><name>mctx</name>-&gt;<name>stapling_enabled</name></name> == <name>TRUE</name>) &amp;&amp;
!<call><name>ssl_stapling_init_cert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mctx</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02567</expr></argument>)</argument_list></call>
"Unable to configure certificate %s for stapling"</expr></argument>,
<argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02568</expr></argument>)</argument_list></call>
"Certificate and private key %s configured from %s and %s"</expr></argument>,
<argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>, <argument><expr><name>keyfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>certfile</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pks</name>-&gt;<name>cert_files</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call>) &amp;&amp;
(<name>dhparams</name> = <call><name>ssl_dh_GetParamFromFile</name><argument_list>(<argument><expr><name>certfile</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_tmp_dh</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>dhparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02540</expr></argument>)</argument_list></call>
"Custom DH parameters (%d bits) for %s loaded from %s"</expr></argument>,
<argument><expr><call><name>DH_bits</name><argument_list>(<argument><expr><name>dhparams</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vhost_id</name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dhparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ECC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>certfile</name> != <name>NULL</name>) &amp;&amp;
(<name>ecparams</name> = <call><name>ssl_ec_GetParamFromFile</name><argument_list>(<argument><expr><name>certfile</name></expr></argument>)</argument_list></call>) &amp;&amp;
(<name>nid</name> = <call><name>EC_GROUP_get_curve_name</name><argument_list>(<argument><expr><name>ecparams</name></expr></argument>)</argument_list></call>) &amp;&amp;
(<name>eckey</name> = <call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SSL_CTX_set_tmp_ecdh</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr><name>eckey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02541</expr></argument>)</argument_list></call>
"ECDH curve %s for %s specified in %s"</expr></argument>,
<argument><expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vhost_id</name></expr></argument>, <argument><expr><name>certfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTX_set_ecdh_auto</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CTX_set_ecdh_auto</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>SSL_CTX_set_tmp_ecdh</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>NID_X9_62_prime256v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>eckey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>EC_GROUP_free</name><argument_list>(<argument><expr><name>ecparams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_ticket_key</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TLSEXT_TICKET_KEY_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>modssl_ticket_key_t</name> *</type><name>ticket_key</name> <init>= <expr><name><name>mctx</name>-&gt;<name>ticket_key</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>ticket_key</name>-&gt;<name>file_path</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>path</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ticket_key</name>-&gt;<name>file_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fp</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>APR_READ</name>|<name>APR_BINARY</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02286</expr></argument>)</argument_list></call>
"Failed to open ticket key file %s: (%d) %pm"</expr></argument>,
<argument><expr><name>path</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read_full</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr>&amp;<name><name>buf</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>TLSEXT_TICKET_KEY_LEN</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02287</expr></argument>)</argument_list></call>
"Failed to read %d bytes from %s: (%d) %pm"</expr></argument>,
<argument><expr><name>TLSEXT_TICKET_KEY_LEN</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ticket_key</name>-&gt;<name>key_name</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ticket_key</name>-&gt;<name>hmac_secret</name></name></expr></argument>, <argument><expr><name>buf</name> + 16</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ticket_key</name>-&gt;<name>aes_key</name></name></expr></argument>, <argument><expr><name>buf</name> + 32</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>SSL_CTX_set_tlsext_ticket_key_cb</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>ssl_callback_SessionTicket</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01913</expr></argument>)</argument_list></call>
"Unable to initialize TLS session ticket key callback "
"(incompatible OpenSSL version?)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02288</expr></argument>)</argument_list></call>
"TLS session ticket key for %s successfully loaded from %s"</expr></argument>,
<argument><expr>(<call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>)-&gt;<name>vhost_id</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>BOOL</name></type> <name>load_x509_info</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>ptemp</name></expr></argument>,
<argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_INFO</name></expr></argument>)</argument_list></call> *<name>sk</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>filename</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>BIO</name> *</type><name>in</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>in</name> = <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_file</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>BIO_read_filename</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PEM_X509_INFO_read_bio</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>TRUE</name></expr>;</return>
}</block></decl></decl_stmt>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_proxy_certs</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>ncerts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_INFO</name></expr></argument>)</argument_list></call> *<name>sk</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>modssl_pk_proxy_t</name> *</type><name>pkp</name> <init>= <expr><name><name>mctx</name>-&gt;<name>pkp</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> *<name>chain</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>X509_STORE_CTX</name> *</type><name>sctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_STORE</name> *</type><name>store</name> <init>= <expr><call><name>SSL_CTX_get_cert_store</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>SSL_CTX_set_client_cert_cb</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>ssl_callback_proxy_cert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name><name>pkp</name>-&gt;<name>cert_file</name></name> || <name><name>pkp</name>-&gt;<name>cert_path</name></name>)</expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>sk</name> = <call><name>sk_X509_INFO_new_null</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pkp</name>-&gt;<name>cert_file</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>load_x509_info</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name><name>pkp</name>-&gt;<name>cert_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>pkp</name>-&gt;<name>cert_path</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>finfo_flags</name> <init>= <expr><name>APR_FINFO_TYPE</name>|<name>APR_FINFO_NAME</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name><name>pkp</name>-&gt;<name>cert_path</name></name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<while>while <condition>(<expr>(<call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>finfo_flags</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fullname</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dirent</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>fullname</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>,
<argument><expr><name><name>pkp</name>-&gt;<name>cert_path</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>load_x509_info</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>sk</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>ncerts</name> = <call><name>sk_X509_INFO_num</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call>) &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sk_X509_INFO_free</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02206</expr></argument>)</argument_list></call>
"no client certs found for SSL proxy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>ncerts</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>X509_INFO</name> *</type><name>inf</name> <init>= <expr><call><name>sk_X509_INFO_value</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>inf</name>-&gt;<name>x509</name></name> || !<name><name>inf</name>-&gt;<name>x_pkey</name></name> || !<name><name>inf</name>-&gt;<name>x_pkey</name>-&gt;<name>dec_pkey</name></name> ||
<name><name>inf</name>-&gt;<name>enc_data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sk_X509_INFO_free</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02252</expr></argument>)</argument_list></call>
"incomplete client cert configured for SSL proxy "
"(missing or encrypted private key?)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>X509_check_private_key</name><argument_list>(<argument><expr><name><name>inf</name>-&gt;<name>x509</name></name></expr></argument>, <argument><expr><name><name>inf</name>-&gt;<name>x_pkey</name>-&gt;<name>dec_pkey</name></name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>inf</name>-&gt;<name>x509</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02326</expr></argument>)</argument_list></call> "proxy client certificate and "
"private key do not match"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02207</expr></argument>)</argument_list></call>
"loaded %d client certs for SSL proxy"</expr></argument>,
<argument><expr><name>ncerts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkp</name>-&gt;<name>certs</name></name> = <name>sk</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>pkp</name>-&gt;<name>ca_cert_file</name></name> || !<name>store</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>pkp</name>-&gt;<name>ca_certs</name></name> = (<call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509</name></expr></argument>)</argument_list></call> **) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ncerts</name> * <sizeof>sizeof<argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sctx</name> = <call><name>X509_STORE_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sctx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02208</expr></argument>)</argument_list></call>
"SSL proxy client cert initialization failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>X509_STORE_load_locations</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>pkp</name>-&gt;<name>ca_cert_file</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name>ncerts</name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>X509_INFO</name> *</type><name>inf</name> <init>= <expr><call><name>sk_X509_INFO_value</name><argument_list>(<argument><expr><name><name>pkp</name>-&gt;<name>certs</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>X509_STORE_CTX_init</name><argument_list>(<argument><expr><name>sctx</name></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><name><name>inf</name>-&gt;<name>x509</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>X509_verify_cert</name><argument_list>(<argument><expr><name>sctx</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>X509_STORE_CTX_get_error</name><argument_list>(<argument><expr><name>sctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>inf</name>-&gt;<name>x509</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02270</expr></argument>)</argument_list></call> "SSL proxy client cert chain "
"verification failed: %s :"</expr></argument>,
<argument><expr><call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>chain</name> = <call><name>X509_STORE_CTX_get1_chain</name><argument_list>(<argument><expr><name>sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>chain</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><call><name>sk_X509_shift</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>i</name> = <call><name>sk_X509_num</name><argument_list>(<argument><expr><name>chain</name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pkp</name>-&gt;<name>ca_certs</name><index>[<expr><name>n</name></expr>]</index></name> = <name>chain</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pkp</name>-&gt;<name>ca_certs</name><index>[<expr><name>n</name></expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>inf</name>-&gt;<name>x509</name></name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02271</expr></argument>)</argument_list></call>
"loaded %i intermediate CA%s for cert %i: "</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> == 1 ? "" : "s"</expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>i</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>i</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ssl_log_xerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr><call><name>sk_X509_value</name><argument_list>(<argument><expr><name>chain</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03039</expr></argument>)</argument_list></call>
"%i:"</expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>X509_STORE_CTX_cleanup</name><argument_list>(<argument><expr><name>sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>X509_STORE_CTX_free</name><argument_list>(<argument><expr><name>sctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_proxy_ctx</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>proxy</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_proxy_certs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>proxy</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_init_server_ctx</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>pphrases</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ssl_ctx_param_t</name> *</type><name>param</name> <init>= <expr>(<name>ssl_ctx_param_t</name> *)<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx_param</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSL_CONF_CTX</name> *</type><name>cctx</name> <init>= <expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02569</expr></argument>)</argument_list></call>
"Illegal attempt to re-initialise SSL for server "
"(SSLEngine On should go in the VirtualHost, not in global scope.)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_server_certs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>pphrases</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSL_CONF_CMD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>SSL_CONF_CTX_set_ssl_ctx</name><argument_list>(<argument><expr><name>cctx</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx_param</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>param</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>SSL_CONF_cmd</name><argument_list>(<argument><expr><name>cctx</name></expr></argument>, <argument><expr><name><name>param</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>param</name>-&gt;<name>value</name></name></expr></argument>)</argument_list></call> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02407</expr></argument>)</argument_list></call>
"\"SSLOpenSSLConfCmd %s %s\" failed for %s"</expr></argument>,
<argument><expr><name><name>param</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>param</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02556</expr></argument>)</argument_list></call>
"\"SSLOpenSSLConfCmd %s %s\" applied to %s"</expr></argument>,
<argument><expr><name><name>param</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>param</name>-&gt;<name>value</name></name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<if>if <condition>(<expr><call><name>SSL_CONF_CTX_finish</name><argument_list>(<argument><expr><name>cctx</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02547</expr></argument>)</argument_list></call>
"SSL_CONF_CTX_finish() failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SSL_CONF_CTX_free</name><argument_list>(<argument><expr><name>cctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02572</expr></argument>)</argument_list></call>
"Failed to configure at least one certificate and key "
"for %s"</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SSL_CTRL_SET_CURRENT_CERT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>stapling_enabled</name></name> == <name>TRUE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>X509</name> *</type><name>cert</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>SSL_CTX_set_current_cert</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>SSL_CERT_SET_FIRST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>ret</name></expr>)</condition> <block>{
<expr_stmt><expr><name>cert</name> = <call><name>SSL_CTX_get0_certificate</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>cert</name> || !<call><name>ssl_stapling_init_cert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name></name></expr></argument>,
<argument><expr><name>cert</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02604</expr></argument>)</argument_list></call>
"Unable to configure certificate %s:%d "
"for stapling"</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ret</name> = <call><name>SSL_CTX_set_current_cert</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name>SSL_CERT_SET_NEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name>++</expr>;</expr_stmt>
}</block></while>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLS_SESSION_TICKETS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_ticket_key</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>SSL_CTX_set_timeout</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ssl_ctx</name></name></expr></argument>,
<argument><expr><name><name>sc</name>-&gt;<name>session_cache_timeout</name></name> == <name>UNSET</name> ?
<name>SSL_SESSION_CACHE_TIMEOUT</name> : <name><name>sc</name>-&gt;<name>session_cache_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ssl_init_ConfigureServer</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
<param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>pphrases</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_TRUE</name>) || (<name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_OPTIONAL</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01914</expr></argument>)</argument_list></call>
"Configuring server %s for SSL protocol"</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_server_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>pphrases</name></expr></argument>)</argument_list></call>)
!= <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ssl_init_ocsp_certificates</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then></if>
<if>if <condition>(<expr><name><name>sc</name>-&gt;<name>proxy_enabled</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>rv</name> = <call><name>ssl_init_proxy_ctx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ssl_init_CheckServers</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>base_server</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>ps</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>klen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>BOOL</name></type> <name>conflict</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_TRUE</name>) &amp;&amp; (<name><name>s</name>-&gt;<name>port</name></name> == <name>DEFAULT_HTTP_PORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>base_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01915</expr></argument>)</argument_list></call>
"Init: (%s) You configured HTTPS(%d) "
"on the standard HTTP(%d) port!"</expr></argument>,
<argument><expr><call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DEFAULT_HTTPS_PORT</name></expr></argument>, <argument><expr><name>DEFAULT_HTTP_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_FALSE</name>) &amp;&amp; (<name><name>s</name>-&gt;<name>port</name></name> == <name>DEFAULT_HTTPS_PORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>base_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01916</expr></argument>)</argument_list></call>
"Init: (%s) You configured HTTP(%d) "
"on the standard HTTPS(%d) port!"</expr></argument>,
<argument><expr><call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>DEFAULT_HTTP_PORT</name></expr></argument>, <argument><expr><name>DEFAULT_HTTPS_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_TLSEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>table</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>addr</name></decl>;</decl_stmt>
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!((<name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_TRUE</name>) &amp;&amp; <name><name>s</name>-&gt;<name>addrs</name></name>)</expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sockaddr_ip_get</name><argument_list>(<argument><expr>&amp;<name>addr</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>key</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s:%u"</expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>addrs</name>-&gt;<name>host_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>klen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>ps</name> = (<name>server_rec</name> *)<call><name>apr_hash_get</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02662</expr></argument>)</argument_list></call>
"Init: SSL server IP/port conflict: "
"%s (%s:%d) vs. %s (%s:%d)"</expr></argument>,
<argument><expr><call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name><name>s</name>-&gt;<name>defn_name</name></name> ? <name><name>s</name>-&gt;<name>defn_name</name></name> : "unknown")</expr></argument>,
<argument><expr><name><name>s</name>-&gt;<name>defn_line_number</name></name></expr></argument>,
<argument><expr><call><name>ssl_util_vhostid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr>(<name><name>ps</name>-&gt;<name>defn_name</name></name> ? <name><name>ps</name>-&gt;<name>defn_name</name></name> : "unknown")</expr></argument>,
<argument><expr><name><name>ps</name>-&gt;<name>defn_line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>conflict</name> = <name>TRUE</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>klen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name>conflict</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>base_server</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01917</expr></argument>)</argument_list></call>
"Init: Name-based SSL virtual hosts require "
"an OpenSSL version with support for TLS extensions "
"(RFC 6066 - Server Name Indication / SNI), "
"but the currently used library version (%s) is "
"lacking this feature"</expr></argument>, <argument><expr><name>MODSSL_LIBRARY_DYNTEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_init_FindCAList_X509NameCmp</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>X509_NAME</name> * <specifier>const</specifier> *</type><name>a</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>X509_NAME</name> * <specifier>const</specifier> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<return>return<expr>(<call><name>X509_NAME_cmp</name><argument_list>(<argument><expr>*<name>a</name></expr></argument>, <argument><expr>*<name>b</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>ssl_init_PushCAList</name><argument_list>(<argument><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> *<name>ca_list</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>ptemp</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>file</name></expr></argument>)</argument_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> *<name>sk</name></expr>;</expr_stmt>
<expr_stmt><expr><name>sk</name> = (<call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> *)
<call><name>SSL_load_client_CA_file</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>sk</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <call><name>sk_X509_NAME_num</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>X509_NAME</name> *</type><name>name</name> <init>= <expr><call><name>sk_X509_NAME_value</name><argument_list>(<argument><expr><name>sk</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02209</expr></argument>)</argument_list></call>
"CA certificate: %s"</expr></argument>,
<argument><expr><call><name>modssl_X509_NAME_to_string</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sk_X509_NAME_find</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sk_X509_NAME_push</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>X509_NAME_free</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></for>
<expr_stmt><expr><call><name>sk_X509_NAME_free</name><argument_list>(<argument><expr><name>sk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></decl></decl_stmt>
<expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> *<macro><name>ssl_init_FindCAList</name><argument_list>(<argument>server_rec *s</argument>,
<argument>apr_pool_t *ptemp</argument>,
<argument>const char *ca_file</argument>,
<argument>const char *ca_path</argument>)</argument_list></macro> <block>{
<expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> *<name>ca_list</name></expr>;
<expr><name>ca_list</name> = <call><name>sk_X509_NAME_new</name><argument_list>(<argument><expr><name>ssl_init_FindCAList_X509NameCmp</name></expr></argument>)</argument_list></call></expr>;
<if>if <condition>(<expr><name>ca_file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_init_PushCAList</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>sk_X509_NAME_num</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02210</expr></argument>)</argument_list></call>
"Failed to load SSLCACertificateFile: %s"</expr></argument>, <argument><expr><name>ca_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt/></block></then></if></block></then></if>}</block></expr></expr_stmt>
}</block></function>
<if>if <condition>(<expr><name>ca_path</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_dir_t</name> *</type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>direntry</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>finfo_flags</name> <init>= <expr><name>APR_FINFO_TYPE</name>|<name>APR_FINFO_NAME</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>ca_path</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02211</expr></argument>)</argument_list></call>
"Failed to open Certificate Path `%s'"</expr></argument>,
<argument><expr><name>ca_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>sk_X509_NAME_pop_free</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>, <argument><expr><name>X509_NAME_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>direntry</name></expr></argument>, <argument><expr><name>finfo_flags</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>direntry</name>.<name>filetype</name></name> == <name>APR_DIR</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>ca_path</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name><name>direntry</name>.<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_init_PushCAList</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>(<name>void</name>) <call><name>sk_X509_NAME_set_cmp_func</name><argument_list>(<argument><expr><name>ca_list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ca_list</name></expr>;</return>
}
void <macro><name>ssl_init_Child</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>mc</name>-&gt;<name>pid</name></name> = <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>int</name>)<call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_mutex_reinit</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>ssl_stapling_mutex_reinit</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSSL_CFG_ITEM_FREE</name><parameter_list>(<param><type><name>func</name></type></param>, <param><type><name>item</name></type></param>)</parameter_list></cpp:macro> <cpp:value>if (item) { func(item); item = NULL; }</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_init_ctx_cleanup</name><parameter_list>(<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>MODSSL_CFG_ITEM_FREE</name><argument_list>(<argument><expr><name>SSL_CTX_free</name></expr></argument>, <argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SRP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>srp_vbase</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SRP_VBASE_free</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>srp_vbase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>srp_vbase</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_init_ctx_cleanup_proxy</name><parameter_list>(<param><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ssl_init_ctx_cleanup</name><argument_list>(<argument><expr><name>mctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>certs</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ncerts</name> <init>= <expr><call><name>sk_X509_INFO_num</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>certs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>ca_certs</name></name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>ncerts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>ca_certs</name><index>[<expr><name>i</name></expr>]</index></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>ca_certs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>sk_X509_INFO_pop_free</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>certs</name></name></expr></argument>, <argument><expr><name>X509_INFO_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mctx</name>-&gt;<name>pkp</name>-&gt;<name>certs</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ssl_init_ModuleKill</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>base_server</name> <init>= <expr>(<name>server_rec</name> *)<name>data</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ssl_scache_kill</name><argument_list>(<argument><expr><name>base_server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_init_ctx_cleanup_proxy</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>proxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ssl_init_ctx_cleanup</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_NO_OCSP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>sk_X509_pop_free</name><argument_list>(<argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_certs</name></name></expr></argument>, <argument><expr><name>X509_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<expr_stmt><expr><call><name>free_bio_methods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>free_dh_params</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
