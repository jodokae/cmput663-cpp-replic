<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/ssl/ssl_scache.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<function><type><name>apr_status_t</name></type> <name>ssl_scache_init</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_socache_hints</name></type> <name>hints</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>hints</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>sizeof <name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name>.<name>avg_obj_size</name></name> = 1500</expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name>.<name>avg_id_len</name></name> = 20</expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name>.<name>expiry_interval</name></name> = 300</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>init</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>stapling_cache_context</name></name></expr></argument>,
<argument><expr>"mod_ssl-stapling"</expr></argument>, <argument><expr>&amp;<name>hints</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01872</expr></argument>)</argument_list></call>
"Could not initialize stapling cache. Exiting."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01873</expr></argument>)</argument_list></call>
"Init: Session Cache is not configured "
"[hint: SSLSessionCache]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>hints</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>sizeof <name>hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name>.<name>avg_obj_size</name></name> = 150</expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name>.<name>avg_id_len</name></name> = 30</expr>;</expr_stmt>
<expr_stmt><expr><name><name>hints</name>.<name>expiry_interval</name></name> = 30</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>init</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr>"mod_ssl-session"</expr></argument>, <argument><expr>&amp;<name>hints</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01874</expr></argument>)</argument_list></call>
"Could not initialize session cache. Exiting."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_scache_kill</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>destroy</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OCSP_STAPLING</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>stapling_cache</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name><name>mc</name>-&gt;<name>stapling_cache</name>-&gt;<name>destroy</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>stapling_cache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>BOOL</name></type> <name>ssl_scache_store</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>IDCONST</name> <name>UCHAR</name> *</type><name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl></param>, <param><decl><type><name>SSL_SESSION</name> *</type><name>sess</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>encoded</name><index>[<expr><name>MODSSL_SESSION_MAX_DER</name></expr>]</index></name></decl>, *<decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>len</name> = <call><name>i2d_SSL_SESSION</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt; sizeof <name>encoded</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01875</expr></argument>)</argument_list></call>
"session is too big (%u bytes)"</expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>FALSE</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = <name>encoded</name></expr>;</expr_stmt>
<expr_stmt><expr><name>len</name> = <call><name>i2d_SSL_SESSION</name><argument_list>(<argument><expr><name>sess</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>store</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>,
<argument><expr><name>expiry</name></expr></argument>, <argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name> == <name>APR_SUCCESS</name> ? <name>TRUE</name> : <name>FALSE</name></expr>;</return>
}</block></function>
<function><type><name>SSL_SESSION</name> *</type><name>ssl_scache_retrieve</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>IDCONST</name> <name>UCHAR</name> *</type><name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>dest</name><index>[<expr><name>MODSSL_SESSION_MAX_DER</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>destlen</name> <init>= <expr><name>MODSSL_SESSION_MAX_DER</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>retrieve</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>,
<argument><expr><name>dest</name></expr></argument>, <argument><expr>&amp;<name>destlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ptr</name> = <name>dest</name></expr>;</expr_stmt>
<return>return <expr><call><name>d2i_SSL_SESSION</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>ptr</name></expr></argument>, <argument><expr><name>destlen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_scache_remove</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>IDCONST</name> <name>UCHAR</name> *</type><name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>idlen</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_on</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>idlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_off</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_ext_status_hook</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mc</name> == <name>NULL</name> || <name><name>mc</name>-&gt;<name>sesscache</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>OK</name></expr>;</return></then></if>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;table cellspacing=0 cellpadding=0&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td bgcolor=\"#000000\"&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;b&gt;&lt;font color=\"#ffffff\" face=\"Arial,Helvetica\"&gt;SSL/TLS Session Cache Status:&lt;/font&gt;&lt;/b&gt;\r"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tr&gt;&lt;td bgcolor=\"#ffffff\"&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"TLSSessionCacheStatus\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_on</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>status</name></name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>sesscache_context</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>mc</name>-&gt;<name>sesscache</name>-&gt;<name>flags</name></name> &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ssl_mutex_off</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ssl_scache_status_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>status_hook</name></expr></argument>, <argument><expr><name>ssl_ext_status_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
