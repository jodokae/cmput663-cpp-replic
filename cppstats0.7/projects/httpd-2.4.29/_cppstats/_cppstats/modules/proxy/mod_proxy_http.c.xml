<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/proxy/mod_proxy_http.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_http_module</name></decl>;</decl_stmt>
<expr_stmt><expr>static <call><call><name>int</name> <argument_list>(<argument><expr>*<name>ap_proxy_clear_connection_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>apr_table_t</name> *<name>headers</name></expr></argument>)</argument_list></call> =
<name>NULL</name></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_proxy_http_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name></decl></param>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_http_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>search</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"http:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 5</expr>;</expr_stmt>
<expr_stmt><expr><name>scheme</name> = "http"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"https:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>url</name> += 6</expr>;</expr_stmt>
<expr_stmt><expr><name>scheme</name> = "https"</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if></else></if>
<expr_stmt><expr><name>port</name> = <name>def_port</name> = <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"HTTP: canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01083</expr></argument>)</argument_list></call>
"error parsing URL %s: %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition> <block>{
<default>default:
</default><case>case <expr><name>PROXYREQ_REVERSE</name></expr>:
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>search</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>PROXYREQ_PROXY</name></expr>:
<expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<if>if <condition>(<expr><name>port</name> != <name>def_port</name></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>sport</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr>"://"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>,
<argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>search</name>) ? "?" : ""</expr></argument>, <argument><expr>(<name>search</name>) ? <name>search</name> : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<typedef>typedef <type><struct>struct <name>header_dptr</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>time</name></decl>;</decl_stmt>
}</block></struct></type> <name>header_dptr</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_regex_t</name> *</type><name>warn_rx</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>int</name></type> <name>clean_warning_headers</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers</name> <init>= <expr>((<name>header_dptr</name>*)<name>data</name>)-&gt;<name>table</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr>((<name>header_dptr</name>*)<name>data</name>)-&gt;<name>pool</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>warning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>date</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>warn_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nmatch</name> <init>= <expr>3</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>pmatch</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>headers</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr>((<name>header_dptr</name>*)<name>data</name>)-&gt;<name>table</name> = <name>headers</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name>warn_rx</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>warning</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>val</name>+<name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_time</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>pmatch</name><index>[<expr>2</expr>]</index></name>.<name>rm_eo</name> &gt; <name><name>pmatch</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>date</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>val</name>+<name><name>pmatch</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr>2</expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr>2</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_time</name> = <call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>warn_time</name> || (<name>warn_time</name> == ((<name>header_dptr</name>*)<name>data</name>)-&gt;<name>time</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>warning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>val</name> += <name><name>pmatch</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
}</block></while>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_table_t</name> *</type><name>ap_proxy_clean_warnings</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>header_dptr</name></type> <name>x</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>x</name>.<name>pool</name></name> = <name>p</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>table</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>x</name>.<name>time</name></name> = <call><name>apr_date_parse_http</name><argument_list>(<argument><expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Date"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>clean_warning_headers</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr>"Warning"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>x</name>.<name>table</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr>"Warning"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>x</name>.<name>table</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>headers</name></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_te_chunked</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>te_hdr</name><index>[]</index></name> <init>= <expr>"Transfer-Encoding: chunked" <name>CRLF</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>te_hdr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>te_hdr</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>te_hdr</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>te_hdr</name></expr></argument>)</argument_list></sizeof>-1</expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>add_cl</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cl_val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Content-Length: "</expr></argument>,
<argument><expr><name>cl_val</name></expr></argument>,
<argument><expr><name>CRLF</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_CRLF</name></cpp:macro> <cpp:value>"\015\012"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCII_ZERO</name></cpp:macro> <cpp:value>"\060"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>terminate_headers</name><parameter_list>(<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>ASCII_CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MEM_SPOOL</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_reqbody_chunked</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>origin</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>input_brigade</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init>, <name>rv</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>hdr_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_te_chunked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>terminate_headers</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>chunk_hdr</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>hdr_len</name> = <macro><name>apr_snprintf</name><argument_list>(<argument>chunk_hdr</argument>, <argument>sizeof(chunk_hdr)</argument>,
<argument>"%" APR_UINT64_T_HEX_FMT CRLF</argument>,
<argument>(apr_uint64_t)bytes</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>chunk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>chunk_hdr</name></expr></argument>, <argument><expr><name>hdr_len</name></expr></argument>,
<argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_HEAD</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>ASCII_CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>header_brigade</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bb</name> = <name>header_brigade</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bb</name></expr></argument>, <argument><expr>&amp;<name>input_brigade</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>header_brigade</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>bb</name> = <name>input_brigade</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_pass_brigade</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>seen_eos</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>input_brigade</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02608</expr></argument>)</argument_list></call>
"read request body failed to %pI (%s)"
" from %s (%s)"</expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name> ? <name><name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>header_brigade</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bb</name> = <name>header_brigade</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>bb</name> = <name>input_brigade</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>e</name> = <macro><name>apr_bucket_immortal_create</name><argument_list>(<argument>ASCII_ZERO ASCII_CRLF
ASCII_CRLF</argument>,
<argument>5</argument>, <argument>bucket_alloc</argument>)</argument_list></macro></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendextracrlf"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>ASCII_CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_pass_brigade</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_reqbody_cl</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>origin</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>input_brigade</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>old_cl_val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init>, <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>cl_val</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes_streamed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>old_cl_val</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endstr</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>add_cl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>old_cl_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>cl_val</name></expr></argument>, <argument><expr><name>old_cl_val</name></expr></argument>, <argument><expr>&amp;<name>endstr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> || *<name>endstr</name> || <name>endstr</name> == <name>old_cl_val</name> || <name>cl_val</name> &lt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01085</expr></argument>)</argument_list></call>
"could not parse request Content-Length (%s)"</expr></argument>,
<argument><expr><name>old_cl_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>terminate_headers</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_streamed</name> += <name>bytes</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendextracrlf"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>ASCII_CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>bytes_streamed</name> &gt; <name>cl_val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01086</expr></argument>)</argument_list></call>
"read more bytes of request body than expected "
"(got %" <name>APR_OFF_T_FMT</name> ", expected %" <name>APR_OFF_T_FMT</name> ")"</expr></argument>,
<argument><expr><name>bytes_streamed</name></expr></argument>, <argument><expr><name>cl_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>header_brigade</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bb</name> = <name>header_brigade</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>bb</name></expr></argument>, <argument><expr>&amp;<name>input_brigade</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>header_brigade</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>bb</name> = <name>input_brigade</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_pass_brigade</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>seen_eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr> ;</return>
}</block></then></if>
<if>if <condition>(<expr><name>seen_eos</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>input_brigade</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02609</expr></argument>)</argument_list></call>
"read request body failed to %pI (%s)"
" from %s (%s)"</expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name> ? <name><name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>bytes_streamed</name> != <name>cl_val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01087</expr></argument>)</argument_list></call>
"client %s given Content-Length did not match"
" number of body bytes read"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>client_ip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>header_brigade</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>bb</name> = <name>header_brigade</name></expr>;</expr_stmt>
<return>return<expr>(<call><name>ap_proxy_pass_brigade</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)</expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>spool_reqbody_cl</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>origin</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>input_brigade</name></decl></param>,
<param><decl><type><name>int</name></type> <name>force_cl</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>body_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>, <decl><type ref="prev"/><name>bytes_spooled</name> <init>= <expr>0</expr></init>, <name>fsize</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tmpfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>limit</name></decl>;</decl_stmt>
<expr_stmt><expr><name>body_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>limit</name> = <call><name>ap_get_limit_req_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>bytes_spooled</name> + <name>bytes</name> &gt; <name>MAX_MEM_SPOOL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>limit</name> &amp;&amp; (<name>bytes_spooled</name> + <name>bytes</name> &gt; <name>limit</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01088</expr></argument>)</argument_list></call>
"Request body is larger than the configured "
"limit of %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>tmpfile</name> == <name>NULL</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>temp_dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>template</name></decl>;</decl_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_temp_dir_get</name><argument_list>(<argument><expr>&amp;<name>temp_dir</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01089</expr></argument>)</argument_list></call>
"search for temporary directory failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>template</name></expr></argument>, <argument><expr><name>temp_dir</name></expr></argument>,
<argument><expr>"modproxy.tmp.XXXXXX"</expr></argument>,
<argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_mktemp</name><argument_list>(<argument><expr>&amp;<name>tmpfile</name></expr></argument>, <argument><expr><name>template</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01090</expr></argument>)</argument_list></call>
"creation of temporary file in directory "
"%s failed"</expr></argument>, <argument><expr><name>temp_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</init>
<condition><expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</condition>
<incr><expr><name>e</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes_read</name></decl>, <decl><type ref="prev"/><name>bytes_written</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr>&amp;<name>bytes_read</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>tmpfile</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>, <argument><expr>&amp;<name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmpfile_name</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_name_get</name><argument_list>(<argument><expr>&amp;<name>tmpfile_name</name></expr></argument>, <argument><expr><name>tmpfile</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tmpfile_name</name> = "(unknown)"</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01091</expr></argument>)</argument_list></call>
"write to temporary file %s failed"</expr></argument>,
<argument><expr><name>tmpfile_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>AP_DEBUG_ASSERT</name><argument_list>(<argument><expr><name>bytes_read</name> == <name>bytes_written</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>fsize</name> += <name>bytes_written</name></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>body_brigade</name></expr></argument>, <argument><expr>&amp;<name>input_brigade</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>bytes_spooled</name> += <name>bytes</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>seen_eos</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>input_brigade</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02610</expr></argument>)</argument_list></call>
"read request body failed to %pI (%s)"
" from %s (%s)"</expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name> ? <name><name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></while>
<if>if <condition>(<expr><name>bytes_spooled</name> || <name>force_cl</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>add_cl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bytes_spooled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>terminate_headers</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>body_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tmpfile</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>tmpfile</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>fsize</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendextracrlf"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>ASCII_CRLF</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return<expr>(<call><name>ap_proxy_pass_brigade</name><argument_list>(<argument><expr><name>bucket_alloc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>int</name></type> <name>ap_proxy_http_request</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>char</name> *</type><name>server_portstr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name> <init>= <expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>header_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>input_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>temp_brigade</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<enum>enum <name>rb_methods</name> <block>{<decl><name>RB_INIT</name></decl>, <decl><name>RB_STREAM_CL</name></decl>, <decl><name>RB_STREAM_CHUNKED</name></decl>, <decl><name>RB_SPOOL_CL</name></decl>}</block>;</enum>
<enum>enum <name>rb_methods</name> <name>rb_method</name> <expr_stmt><expr>= <name>RB_INIT</name></expr>;</expr_stmt></enum>
<decl_stmt><decl><type><name>char</name> *</type><name>old_cl_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_te_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes_read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force10</name></decl>, <decl><type ref="prev"/><name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>origin</name> <init>= <expr><name><name>p_conn</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-proxy-request-1.0"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>expecting_100</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>HTTP_EXPECTATION_FAILED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>force10</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>force10</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>header_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_create_hdrbrgd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>,
<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr>&amp;<name>old_cl_val</name></expr></argument>, <argument><expr>&amp;<name>old_te_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>input_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>kept_body</name></name> &amp;&amp; <name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>old_cl_val</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>old_te_val</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rb_method</name> = <name>RB_STREAM_CL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>input_brigade</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>skip_body</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>old_te_val</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>old_te_val</name></expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01093</expr></argument>)</argument_list></call>
"%s Transfer-Encoding is not supported"</expr></argument>, <argument><expr><name>old_te_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>old_cl_val</name> &amp;&amp; <name>old_te_val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01094</expr></argument>)</argument_list></call>
"client %s (%s) requested Transfer-Encoding "
"chunked body with Content-Length (C-L ignored)"</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>old_cl_val</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>origin</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>temp_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bucket_alloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>temp_brigade</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
<argument><expr><name>MAX_MEM_SPOOL</name> - <name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01095</expr></argument>)</argument_list></call>
"prefetch request body failed to %pI (%s)"
" from %s (%s)"</expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name> ? <name><name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>temp_brigade</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bytes_read</name> += <name>bytes</name></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>input_brigade</name></expr></argument>, <argument><expr>&amp;<name>temp_brigade</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01096</expr></argument>)</argument_list></call>
"processing prefetched request body failed"
" to %pI (%s) from %s (%s)"</expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name> ? <name><name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
}</block> while <condition>(<expr>(<name>bytes_read</name> &lt; <name>MAX_MEM_SPOOL</name> - 80)
&amp;&amp; !<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>old_cl_val</name> || <name>old_te_val</name> || <name>bytes_read</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>old_cl_val</name> = <call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bytes_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rb_method</name> = <name>RB_STREAM_CL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>old_te_val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>force10</name>
|| (<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendcl"</expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendchunks"</expr></argument>)</argument_list></call>
&amp;&amp; !<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendchunked"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rb_method</name> = <name>RB_SPOOL_CL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rb_method</name> = <name>RB_STREAM_CHUNKED</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>old_cl_val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>input_filters</name></name> == <name><name>r</name>-&gt;<name>proto_input_filters</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rb_method</name> = <name>RB_STREAM_CL</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>force10</name>
&amp;&amp; (<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendchunks"</expr></argument>)</argument_list></call>
|| <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendchunked"</expr></argument>)</argument_list></call>)
&amp;&amp; !<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-sendcl"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rb_method</name> = <name>RB_STREAM_CHUNKED</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rb_method</name> = <name>RB_SPOOL_CL</name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rb_method</name> = <name>RB_SPOOL_CL</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<label><name>skip_body</name>:</label>
<if>if <condition>(<expr>!<name>force10</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_proxy_connection_reusable</name><argument_list>(<argument><expr><name>p_conn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Connection: close" <name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Connection: Keep-Alive" <name>CRLF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>header_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<switch>switch<condition>(<expr><name>rb_method</name></expr>)</condition> <block>{
<case>case <expr><name>RB_STREAM_CHUNKED</name></expr>:
<expr_stmt><expr><name>rv</name> = <call><name>stream_reqbody_chunked</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>,
<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>RB_STREAM_CL</name></expr>:
<expr_stmt><expr><name>rv</name> = <call><name>stream_reqbody_cl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>,
<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>old_cl_val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>RB_SPOOL_CL</name></expr>:
<expr_stmt><expr><name>rv</name> = <call><name>spool_reqbody_cl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>p_conn</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>header_brigade</name></expr></argument>,
<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr>(<name>old_cl_val</name> != <name>NULL</name>)
|| (<name>old_te_val</name> != <name>NULL</name>)
|| (<name>bytes_read</name> &gt; 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><default>default:
<expr_stmt><expr><name>rv</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<break>break;</break>
</default>}</block></switch>
<if>if <condition>(<expr><name>rv</name> != <name>OK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01097</expr></argument>)</argument_list></call>
"pass request body failed to %pI (%s) from %s (%s)"</expr></argument>,
<argument><expr><name><name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>p_conn</name>-&gt;<name>hostname</name></name> ? <name><name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>,
<argument><expr><name><name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>date_canon</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>date</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>*</type> <name>ndate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>time</name> <init>= <expr><call><name>apr_date_parse_http</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>time</name></expr>)</condition><then> <block>{
<return>return <expr><name>date</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ndate</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>APR_RFC822_DATE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_rfc822_date</name><argument_list>(<argument><expr><name>ndate</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>date</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>ndate</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>request_rec</name> *</type><name>make_fake_req</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>rp</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rp</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>trailers_in</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>subprocess_env</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>50</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>trailers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>err_headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>notes</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>server</name></name> = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>log</name></name> = <name><name>r</name>-&gt;<name>log</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>proxyreq</name></name> = <name><name>r</name>-&gt;<name>proxyreq</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>request_time</name></name> = <name><name>r</name>-&gt;<name>request_time</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>connection</name></name> = <name>c</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>output_filters</name></name> = <name><name>c</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>input_filters</name></name> = <name><name>c</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>proto_output_filters</name></name> = <name><name>c</name>-&gt;<name>output_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>proto_input_filters</name></name> = <name><name>c</name>-&gt;<name>input_filters</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>useragent_ip</name></name> = <name><name>c</name>-&gt;<name>client_ip</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>useragent_addr</name></name> = <name><name>c</name>-&gt;<name>client_addr</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rp</name>-&gt;<name>request_config</name></name> = <call><name>ap_create_request_config</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_run_create_req</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rp</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>process_proxy_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_dir_conf</name> *</type><name>c</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>date_hdrs</name><index>[]</index></name>
<init>= <expr><block>{ <expr>"Date"</expr>, <expr>"Expires"</expr>, <expr>"Last-Modified"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_proxy_header_reverse_map_fn</name></type> <name>func</name></decl>;</decl_stmt>
}</block> <decl><name><name>transform_hdrs</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{ <expr>"Location"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"Content-Location"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"URI"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"Destination"</expr>, <expr><name>ap_proxy_location_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr>"Set-Cookie"</expr>, <expr><name>ap_proxy_cookie_reverse_map</name></expr> }</block></expr>,
<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>date_hdrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>date_hdrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr><call><name>date_canon</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></for>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>transform_hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>transform_hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
<argument><expr>(*<name><name>transform_hdrs</name><index>[<expr><name>i</name></expr>]</index></name>.<name>func</name>)(<name>r</name>, <name>c</name>, <name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_read_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>rr</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>,
<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pread_len</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>field</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saw_headers</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>psc</name> = (<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>trailers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pread_len</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Headers received from backend:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>len</name> = <call><name>ap_getline</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!(<name>value</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>apr_date_checkmask</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"HTTP/#.####*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>psc</name>-&gt;<name>badopt</name></name> == <name>bad_error</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <name>NULL</name></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <if>if <condition>(<expr><name><name>psc</name>-&gt;<name>badopt</name></name> == <name>bad_body</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>saw_headers</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01098</expr></argument>)</argument_list></call>
"Starting body due to bogus non-header "
"in headers returned by %s (%s)"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>pread_len</name> = <name>len</name></expr>;</expr_stmt>
<return>return;</return>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01099</expr></argument>)</argument_list></call>
"No HTTP headers returned by %s (%s)"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></else></if>
}</block></then></if></else></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01100</expr></argument>)</argument_list></call>
"Ignoring bogus HTTP header returned by %s (%s)"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr>*<name>value</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr>++<name>value</name></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
<expr_stmt><expr>++<name>value</name></expr>;</expr_stmt></while>
<for>for (<init><expr><name>end</name> = &amp;<name><name>value</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>-1</expr>]</index></name></expr>;</init> <condition><expr><name>end</name> &gt; <name>value</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>end</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr>--<name>end</name></expr></incr>)
<expr_stmt><expr>*<name>end</name> = '\0'</expr>;</expr_stmt></for>
<expr_stmt><expr><call><name>process_proxy_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>saw_headers</name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> &gt;= <name>size</name> - 1</expr>)</condition><then> <block>{
<while>while <condition>(<expr>(<name>len</name> = <call><name>ap_getline</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>MAX_STRING_LEN</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>)
&gt;= <name>MAX_STRING_LEN</name> - 1</expr>)</condition> <block>{
}</block></while>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then>
<break>break;</break></then></if>
}</block></then></if>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>addit_dammit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>v</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>apr_status_t</name></type> <name>ap_proxygetline</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>int</name></type> <name>n</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>int</name></type> <name>fold</name></decl></param>, <param><decl><type><name>int</name> *</type><name>writen</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp_s</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_rgetline</name><argument_list>(<argument><expr>&amp;<name>tmp_s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>fold</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>writen</name> = (<name>int</name>) <name>len</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOSPC</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>writen</name> = <name>n</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>writen</name> = -1</expr>;</expr_stmt>
}</block></else></if></else></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MAX_INTERIM_RESPONSES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_INTERIM_RESPONSES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>int</name></type> <name>add_trailers</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>val</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr>(<name>apr_table_t</name>*)<name>data</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>apr_status_t</name></type> <name>ap_proxy_http_process_response</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> **</type><name>backend_ptr</name></decl></param>,
<param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>server_portstr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>keepchar</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>pass_bb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>backasswards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>interim_response</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pread_len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>save_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>backend_broke</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>hop_by_hop_hdrs</name><index>[]</index></name> <init>=
<expr><block>{<expr>"Keep-Alive"</expr>, <expr>"Proxy-Authenticate"</expr>, <expr>"TE"</expr>, <expr>"Trailer"</expr>, <expr>"Upgrade"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>te</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>original_status</name> <init>= <expr><name><name>r</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proxy_status</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_status_line</name> <init>= <expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_status_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr>*<name>backend_ptr</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>origin</name> <init>= <expr><name><name>backend</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>old_timeout</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>do_100_continue</name></decl>;</decl_stmt>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>do_100_continue</name> = (<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name>
&amp;&amp; <call><name>ap_request_has_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>
&amp;&amp; (<name>PROXYREQ_REVERSE</name> == <name><name>r</name>-&gt;<name>proxyreq</name></name>)
&amp;&amp; !(<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"force-proxy-request-1.0"</expr></argument>)</argument_list></call>))</expr>;</expr_stmt>
<expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>pass_bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>do_100_continue</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>&amp;<name>old_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout</name></name> != <name>old_timeout</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01101</expr></argument>)</argument_list></call>
"could not set 100-Continue timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>r</name></name> = <call><name>make_fake_req</name><argument_list>(<argument><expr><name>origin</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_RESPONSE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-source-port"</expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%hu"</expr></argument>,
<argument><expr><name><name>origin</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<do>do <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>ap_proxygetline</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>tmp_bb</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>ap_proxygetline</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>tmp_bb</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>len</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01102</expr></argument>)</argument_list></call>
"error reading status line from remote "
"server %s:%d"</expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy_timedout"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01103</expr></argument>)</argument_list></call> "read timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>do_100_continue</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr></argument>, <argument><expr>"Timeout on 100-Continue"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_REVERSE</name> &amp;&amp; <name><name>c</name>-&gt;<name>keepalives</name></name> &amp;&amp;
!<call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>eos</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01104</expr></argument>)</argument_list></call>
"Closing connection to client because"
" reading from backend server %s:%d failed."
" Number of keepalives %i"</expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>port</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>keepalives</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_backend_broke</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>ap_bucket_eoc_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eos</name> = <call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call> != <name>eos</name>)
&amp;&amp; !<call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>eos</name> = <call><name>APR_BUCKET_PREV</name><argument_list>(<argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>eos</name> == <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>eos</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<name><name>c</name>-&gt;<name>keepalives</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01105</expr></argument>)</argument_list></call>
"NOT Closing connection to client"
" although reading from backend server %s:%d"
" failed."</expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr>"Error reading from remote server"</expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name> += <name>len</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_date_checkmask</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"HTTP/#.####*"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>, <decl><type ref="prev"/><name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>toclose</name></decl>;</decl_stmt>
<expr_stmt><expr><name>major</name> = <name><name>buffer</name><index>[<expr>5</expr>]</index></name> - '0'</expr>;</expr_stmt>
<expr_stmt><expr><name>minor</name> = <name><name>buffer</name><index>[<expr>7</expr>]</index></name> - '0'</expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>major</name> != 1) || (<name>len</name> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>-1)</expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Corrupt status line returned by remote "
"server: "</expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>backasswards</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>keepchar</name> = <name><name>buffer</name><index>[<expr>12</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr>12</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_status</name> = <call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>buffer</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-status"</expr></argument>,
<argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>buffer</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>keepchar</name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buffer</name><index>[<expr>12</expr>]</index></name> = <name>keepchar</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>buffer</name><index>[<expr>12</expr>]</index></name> = ' '</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buffer</name><index>[<expr>13</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>proxy_status_line</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name><name>buffer</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>proxy_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>proxy_status_line</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"Status from backend: %d"</expr></argument>, <argument><expr><name>proxy_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>save_table</name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>addit_dammit</name></expr></argument>, <argument><expr><name>save_table</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_read_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>origin</name></expr></argument>,
<argument><expr>&amp;<name>pread_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_out</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01106</expr></argument>)</argument_list></call>
"bad HTTP/%d.%d header returned by %s (%s)"</expr></argument>,
<argument><expr><name>major</name></expr></argument>, <argument><expr><name>minor</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_BAD_GATEWAY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = "bad gateway"</expr>;</expr_stmt>
<return>return <expr><name><name>r</name>-&gt;<name>status</name></name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>addit_dammit</name></expr></argument>, <argument><expr><name>save_table</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr>"Set-Cookie"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name>save_table</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Set-Cookie"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,
<argument><expr><name>save_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call>
&amp;&amp; <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01107</expr></argument>)</argument_list></call>
"server %s:%d returned Transfer-Encoding"
" and Content-Length"</expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>te</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>toclose</name> = <call><name>ap_proxy_clear_connection_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>toclose</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>buf</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Type"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>ap_is_HTTP_INFO</name><argument_list>(<argument><expr><name>proxy_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_pre_http_request</name><argument_list>(<argument><expr><name>origin</name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name><name>hop_by_hop_hdrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>hop_by_hop_hdrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_out</name></name> = <call><name>ap_proxy_clean_warnings</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>viaopt</name></name> != <name>via_off</name> &amp;&amp; <name><name>conf</name>-&gt;<name>viaopt</name></name> != <name>via_block</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_name</name> <init>= <expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>server_name</name> == <name><name>r</name>-&gt;<name>hostname</name></name></expr>)</condition><then>
<expr_stmt><expr><name>server_name</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>server_hostname</name></name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Via"</expr></argument>,
<argument><expr>(<name><name>conf</name>-&gt;<name>viaopt</name></name> == <name>via_full</name>)
? <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d %s%s (%s)"</expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>server_name</name></expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr><name>AP_SERVER_BASEVERSION</name></expr></argument>)</argument_list></call>
: <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%d.%d %s%s"</expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MAJOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><call><name>HTTP_VERSION_MINOR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>proto_num</name></name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>server_name</name></expr></argument>,
<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>major</name> &lt; 1) || (<name>minor</name> &lt; 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>origin</name>-&gt;<name>keepalive</name></name> = <name>AP_CONN_CLOSE</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>backasswards</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = 200</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = "200 OK"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_is_HTTP_INFO</name><argument_list>(<argument><expr><name>proxy_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>interim_response</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>do_100_continue</name>
&amp;&amp; (<name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_CONTINUE</name>)
&amp;&amp; (<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout</name></name> != <name>old_timeout</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>old_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>interim_response</name> = 0</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>interim_response</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>policy</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>"proxy-interim-response"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>"HTTP: received interim %d response"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>policy</name>
|| (!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>policy</name></expr></argument>, <argument><expr>"RFC"</expr></argument>)</argument_list></call> &amp;&amp; ((<name><name>r</name>-&gt;<name>expecting_100</name></name> = 1)))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_send_interim_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>policy</name></expr></argument>, <argument><expr>"Suppress"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01108</expr></argument>)</argument_list></call>
"undefined proxy interim response policy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>proxy_status</name> == 401) &amp;&amp; (<name><name>dconf</name>-&gt;<name>error_override</name></name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wa</name> <init>= <expr>"WWW-Authenticate"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>buf</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>wa</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01109</expr></argument>)</argument_list></call>
"origin server sent 401 without "
"WWW-Authenticate header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>r</name>-&gt;<name>sent_bodyct</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>backasswards</name> || <name>pread_len</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>cntr</name> <init>= <expr>(<name>apr_ssize_t</name>)<name>pread_len</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>backasswards</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cntr</name> = (<name>apr_ssize_t</name>)<name>len</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_heap_create</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>cntr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>dconf</name>-&gt;<name>error_override</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>header_only</name></name> &amp;&amp;
(<name>proxy_status</name> != <name>HTTP_NO_CONTENT</name>) &amp;&amp;
(<name>proxy_status</name> != <name>HTTP_NOT_MODIFIED</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>tmp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>tmp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name>te</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>, <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-error-override"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>proxy_status</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(!<name><name>r</name>-&gt;<name>header_only</name></name>) &amp;&amp;
!<name>interim_response</name> &amp;&amp;
(<name>proxy_status</name> != <name>HTTP_NO_CONTENT</name>) &amp;&amp;
(<name>proxy_status</name> != <name>HTTP_NOT_MODIFIED</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_clone</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>te</name> &amp;&amp; !<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_add</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>, <argument><expr><name>te</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>,<argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"start body send"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>error_override</name></name> || !<call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name>proxy_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_read_type_e</name></type> <name>mode</name> <init>= <expr><name>APR_NONBLOCK_READ</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>finish</name> <init>= <expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>error_override</name></name> &amp;&amp; !<call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name>proxy_status</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name>original_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>original_status</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>original_status_line</name></expr>;</expr_stmt>
}</block></then></if>
<do>do <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>,
<argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>,
<argument><expr><name><name>conf</name>-&gt;<name>io_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mode</name> == <name>APR_NONBLOCK_READ</name>
&amp;&amp; (<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>
|| (<name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>))</expr>)</condition><then> <block>{
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call>
|| <name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mode</name> = <name>APR_BLOCK_READ</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_EOF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01110</expr></argument>)</argument_list></call>
"error reading response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_backend_broke</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>backend_broke</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name>mode</name> = <name>APR_NONBLOCK_READ</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>apr_is_empty_table</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>add_trailers</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>trailers_out</name></name></expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_clear</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>r</name>-&gt;<name>trailers_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name> += <name>readbytes</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01111</expr></argument>)</argument_list></call>
"readbytes: %#x"</expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>ap_proxy_buckets_lifetime_transform</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>pass_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>pass_bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>finish</name> = <name>TRUE</name></expr>;</expr_stmt>
<for>for (<init><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>pass_bb</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>e</name>
!= <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>pass_bb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>e</name>
= <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_bucket_setaside</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>,
<argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>backend_ptr</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>pass_bb</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
|| <name><name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>backend_ptr</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>finish</name> = <name>TRUE</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>pass_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr>!<name>finish</name></expr>)</condition>;</do>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"end body send"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>interim_response</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"header only"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>,
<argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>backend_ptr</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block> while <condition>(<expr><name>interim_response</name> &amp;&amp; (<name>interim_response</name> &lt; <name>AP_MAX_INTERIM_RESPONSES</name>)</expr>)</condition>;</do>
<expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>interim_response</name> &gt;= <name>AP_MAX_INTERIM_RESPONSES</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_GATEWAY</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"Too many (%d) interim responses from origin server"</expr></argument>,
<argument><expr><name>interim_response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>c</name>-&gt;<name>aborted</name></name> || <name>backend_broke</name></expr>)</condition><then> <block>{
<return>return <expr><name>DONE</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier>
<name>apr_status_t</name></type> <name>ap_proxy_http_cleanup</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_http_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>,
<param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>server_portstr</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>u</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>is_ssl</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>retry</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>uri</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>u</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>u</name> == <name>NULL</name> || <name><name>u</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>u</name><index>[<expr>2</expr>]</index></name> != '/' || <name><name>u</name><index>[<expr>3</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>u</name> - <name>url</name>) &gt; 14</expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<expr_stmt><expr><name>scheme</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>u</name> - <name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr>"https"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_proxy_ssl_enable</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01112</expr></argument>)</argument_list></call>
"HTTPS: declining URL %s (mod_ssl not configured?)"</expr></argument>,
<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>is_ssl</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_function</name> = "HTTPS"</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!(<call><name>strcmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr>"http"</expr></argument>)</argument_list></call> == 0 || (<call><name>strcmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr>"ftp"</expr></argument>)</argument_list></call> == 0 &amp;&amp; <name>proxyname</name>))</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01113</expr></argument>)</argument_list></call> "HTTP: declining URL %s"</expr></argument>,
<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name>scheme</name> == 'h'</expr>)</condition><then>
<expr_stmt><expr><name>proxy_function</name> = "HTTP"</expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>proxy_function</name> = "FTP"</expr>;</expr_stmt></else></if>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"HTTP: serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>,
<argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
<goto>goto <name>cleanup</name>;</goto></then></if>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>is_ssl</name></name> = <name>is_ssl</name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_REVERSE</name>) &amp;&amp; (!<name><name>c</name>-&gt;<name>keepalives</name></name>)
&amp;&amp; (<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-initial-not-pooled"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>retry</name> &lt; 2</expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>locurl</name> <init>= <expr><name>url</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_determine_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
<argument><expr><name>uri</name></expr></argument>, <argument><expr>&amp;<name>locurl</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>,
<argument><expr><name>proxyport</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><call><name>ap_proxy_check_connection</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>1</expr></argument>,
<argument><expr><name>PROXY_CHECK_CONN_EMPTY</name></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01114</expr></argument>)</argument_list></call>
"HTTP: failed to make connection to backend: %s"</expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>backend</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_connection_create</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name><name>backend</name>-&gt;<name>ssl_hostname</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>connection</name>-&gt;<name>notes</name></name></expr></argument>,
<argument><expr>"proxy-request-hostname"</expr></argument>,
<argument><expr><name><name>backend</name>-&gt;<name>ssl_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_http_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>locurl</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>status</name> == <name>HTTP_SERVICE_UNAVAILABLE</name>) &amp;&amp; <name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01115</expr></argument>)</argument_list></call>
"HTTP: 100-Continue failed to %pI (%s)"</expr></argument>,
<argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>retry</name>++</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if>
}</block></then></if>
<expr_stmt><expr><name>status</name> = <call><name>ap_proxy_http_process_response</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></while>
<label><name>cleanup</name>:</label>
<if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then>
<expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>ap_proxy_http_cleanup</name><argument_list>(<argument><expr><name>proxy_function</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_http_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><call><name>ap_state_query</name><argument_list>(<argument><expr><name>AP_SQ_MAIN_STATE</name></expr></argument>)</argument_list></call> == <name>AP_SQ_MS_CREATE_PRE_CONFIG</name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>ap_proxy_clear_connection_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ap_proxy_clear_connection_fn</name> =
<call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_clear_connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ap_proxy_clear_connection_fn</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02477</expr></argument>)</argument_list></call>
"mod_proxy must be loaded for mod_proxy_http"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>!<name>OK</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_http_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>proxy_http_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_http_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_http_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>warn_rx</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"[0-9]{3}[ \t]+[^ \t]+[ \t]+\"[^\"]*\"([ \t]+\"([^\"]+)\")?"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_http</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>ap_proxy_http_register_hook</name></expr>
}</block></expr>;</expr_stmt>
</unit>
