<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/proxy/mod_proxy.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"proxy_util.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>MODULE_MAGIC_NUMBER_MAJOR</name> &gt; 20020903)</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ssl_proxy_enable</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ssl_engine_disable</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ssl_is_https</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, <argument><expr><name>ssl_var_lookup</name></expr></argument>,
<argument><expr>(<name>apr_pool_t</name> *, <name>server_rec</name> *,
<name>conn_rec</name> *, <name>request_rec</name> *, <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>MAX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;= (y) ? (x) : (y))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>set_worker_hc_param</name></expr></argument>)</argument_list></call> *<name>set_worker_hc_param_f</name> = <name>NULL</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>proxy_hcmethods_t</name> <name>PROXY_DECLARE_DATA</name></type> <name><name>proxy_hcmethods</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NONE</name></expr>, <expr>"NONE"</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr><name>TCP</name></expr>, <expr>"TCP"</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr><name>OPTIONS</name></expr>, <expr>"OPTIONS"</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr><name>HEAD</name></expr>, <expr>"HEAD"</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr><name>GET</name></expr>, <expr>"GET"</expr>, <expr>1</expr>}</block></expr>,
<expr><block>{<expr><name>CPING</name></expr>, <expr>"CPING"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr><name>PROVIDER</name></expr>, <expr>"PROVIDER"</expr>, <expr>0</expr>}</block></expr>,
<expr><block>{<expr><name>EOT</name></expr>, <expr><name>NULL</name></expr>, <expr>1</expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_wstat_t</name> <name>PROXY_DECLARE_DATA</name></type> <name><name>proxy_wstat_tbl</name><index>[]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>PROXY_WORKER_INITIALIZED</name></expr>, <expr><name>PROXY_WORKER_INITIALIZED_FLAG</name></expr>, <expr>"Init "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_IGNORE_ERRORS</name></expr>, <expr><name>PROXY_WORKER_IGNORE_ERRORS_FLAG</name></expr>, <expr>"Ign "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_DRAIN</name></expr>, <expr><name>PROXY_WORKER_DRAIN_FLAG</name></expr>, <expr>"Drn "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_GENERIC</name></expr>, <expr><name>PROXY_WORKER_GENERIC_FLAG</name></expr>, <expr>"Gen "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_IN_SHUTDOWN</name></expr>, <expr><name>PROXY_WORKER_IN_SHUTDOWN_FLAG</name></expr>, <expr>"Shut "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_DISABLED</name></expr>, <expr><name>PROXY_WORKER_DISABLED_FLAG</name></expr>, <expr>"Dis "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_STOPPED</name></expr>, <expr><name>PROXY_WORKER_STOPPED_FLAG</name></expr>, <expr>"Stop "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_IN_ERROR</name></expr>, <expr><name>PROXY_WORKER_IN_ERROR_FLAG</name></expr>, <expr>"Err "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_HOT_STANDBY</name></expr>, <expr><name>PROXY_WORKER_HOT_STANDBY_FLAG</name></expr>, <expr>"Stby "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_FREE</name></expr>, <expr><name>PROXY_WORKER_FREE_FLAG</name></expr>, <expr>"Free "</expr>}</block></expr>,
<expr><block>{<expr><name>PROXY_WORKER_HC_FAIL</name></expr>, <expr><name>PROXY_WORKER_HC_FAIL_FLAG</name></expr>, <expr>"HcFl "</expr>}</block></expr>,
<expr><block>{<expr>0x0</expr>, <expr>'\0'</expr>, <expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>proxy_id</name> <init>= <expr>"proxy"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_global_mutex_t</name> *</type><name>proxy_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_worker_param</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
<param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"loadfactor"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>double</name></type> <name>fval</name> <init>= <expr><call><name>atof</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>ival</name> = <name>fval</name> * 100.0</expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 100 || <name>ival</name> &gt; 10000</expr>)</condition><then>
<return>return <expr>"LoadFactor must be a number between 1..100"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbfactor</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"retry"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Retry must be a positive value"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>retry_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"ttl"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 1</expr>)</condition><then>
<return>return <expr>"TTL must be at least one second"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ttl</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"min"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Min must be a positive number"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>min</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"max"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Max must be a positive number"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hmax</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"smax"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"Smax must be a positive number"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>smax</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"acquire"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>"ms"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>"Acquire timeout has wrong format"</expr>;</return></then></if>
<if>if <condition>(<expr><name>timeout</name> &lt; 1000</expr>)</condition><then>
<return>return <expr>"Acquire must be at least one millisecond"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>acquire</name></name> = <name>timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>acquire_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"timeout"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 1</expr>)</condition><then>
<return>return <expr>"Timeout must be at least one second"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>timeout_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"iobuffersize"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name> &lt; 512 &amp;&amp; <name>s</name></expr>)</condition><then> <block>{
<return>return <expr>"IOBufferSize must be &gt;= 512 bytes, or 0 for system default."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>io_buffer_size</name></name> = (<name>s</name> ? <name>s</name> : <name>AP_IOBUFSIZE</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>io_buffer_size_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"receivebuffersize"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 512 &amp;&amp; <name>ival</name> != 0</expr>)</condition><then> <block>{
<return>return <expr>"ReceiveBufferSize must be &gt;= 512 bytes, or 0 for system default."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>recv_buffer_size</name></name> = <name>ival</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>recv_buffer_size_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"keepalive"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>keepalive</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>keepalive</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"KeepAlive must be On|Off"</expr>;</return></else></if></else></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>keepalive_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"disablereuse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"DisableReuse must be On|Off"</expr>;</return></else></if></else></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"enablereuse"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> = 0</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse</name></name> = 1</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"EnableReuse must be On|Off"</expr>;</return></else></if></else></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>disablereuse_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"route"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Route length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>route</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"redirect"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Redirect length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>redirect</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"status"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mode</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<for>for (<init><expr><name>v</name> = <name>val</name></expr>;</init> <condition><expr>*<name>v</name></expr>;</condition> <incr><expr><name>v</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>*<name>v</name> == '+'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>v</name>++</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>*<name>v</name> == '-'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>mode</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>v</name>++</expr>;</expr_stmt>
}</block></then></if></else></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_proxy_set_wstatus</name><argument_list>(<argument><expr>*<name>v</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>"Unknown status parameter option"</expr>;</return></then></if>
}</block></for>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"flushpackets"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name> = <name>flush_on</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name> = <name>flush_off</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"auto"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name> = <name>flush_auto</name></expr>;</expr_stmt></then>
<else>else
<return>return <expr>"flushpackets must be on|off|auto"</expr>;</return></else></if></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"flushwait"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &gt; 1000 || <name>ival</name> &lt; 0</expr>)</condition><then> <block>{
<return>return <expr>"flushwait must be &lt;= 1000, or 0 for system default of 10 millseconds."</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>ival</name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_wait</name></name> = <name>PROXY_FLUSH_WAIT</name></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_wait</name></name> = <name>ival</name> * 1000</expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"ping"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>"Ping/Pong timeout has wrong format"</expr>;</return></then></if>
<if>if <condition>(<expr><name>timeout</name> &lt; 1000</expr>)</condition><then>
<return>return <expr>"Ping/Pong timeout must be at least one millisecond"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"lbset"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0 || <name>ival</name> &gt; 99</expr>)</condition><then>
<return>return <expr>"lbset must be between 0 and 99"</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>lbset</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"connectiontimeout"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>ap_timeout_parameter_parse</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>, <argument><expr>"s"</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr>"Connectiontimeout has wrong format"</expr>;</return></then></if>
<if>if <condition>(<expr><name>timeout</name> &lt; 1000</expr>)</condition><then>
<return>return <expr>"Connectiontimeout must be at least one millisecond."</expr>;</return></then></if>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>conn_timeout</name></name> = <name>timeout</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>conn_timeout_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"flusher"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flusher</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"flusher name length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flusher</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>flusher</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"upgrade"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>upgrade</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"upgrade protocol length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>upgrade</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>set_worker_hc_param_f</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>set_worker_hc_param_f</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>"unknown Worker parameter"</expr>;</return>
}</block></else></if>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_balancer_param</name><parameter_list>(<param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>ival</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"stickysession"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><then>
<expr_stmt><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"stickysession length must be &lt; %d characters"</expr></argument>,
<argument><expr>(<name>int</name>)<sizeof>sizeof<argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>path</name> = <call><name>strchr</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr>'|'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>path</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"stickysessionsep"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_separator</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"stickysessionsep must be a single character or Off"</expr>;</return></else></if>
}</block></then> <else>else
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_separator</name></name> = *<name>val</name></expr>;</expr_stmt></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"nofailover"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_force</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_force</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"failover must be On|Off"</expr>;</return></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"timeout"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 1</expr>)</condition><then>
<return>return <expr>"timeout must be at least one second"</expr>;</return></then></if>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"maxattempts"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 0</expr>)</condition><then>
<return>return <expr>"maximum number of attempts must be a positive number"</expr>;</return></then></if>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name> = <name>ival</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"lbmethod"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_balancer_method</name> *</type><name>provider</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> &gt; (<sizeof>sizeof<argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>)</argument_list></sizeof>-1)</expr>)</condition><then>
<return>return <expr>"unknown lbmethod"</expr>;</return></then></if>
<expr_stmt><expr><name>provider</name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>provider</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>lbmethod</name></name> = <name>provider</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>lbpname</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>"lbmethod name too large"</expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr>"unknown lbmethod"</expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"scolonpathdelim"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>scolonsep</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>scolonsep</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"scolonpathdelim must be On|Off"</expr>;</return></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"failonstatus"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>val_split</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tok_state</name></decl>;</decl_stmt>
<expr_stmt><expr><name>val_split</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>errstatuses</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>status</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>val_split</name></expr></argument>, <argument><expr>", "</expr></argument>, <argument><expr>&amp;<name>tok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>status</name> != <name>NULL</name></expr>)</condition> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_VALID_RESPONSE</name><argument_list>(<argument><expr><name>ival</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>int</name> *)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>errstatuses</name></name></expr></argument>)</argument_list></call> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"failonstatus must be one or more HTTP response codes"</expr>;</return>
}</block></else></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>", "</expr></argument>, <argument><expr>&amp;<name>tok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"failontimeout"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>failontimeout</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>failontimeout</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"failontimeout must be On|Off"</expr>;</return></else></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"nonce"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"None"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>nonce</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr>"Provided nonce is too large"</expr>;</return>
}</block></then></if>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"growth"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ival</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ival</name> &lt; 1 || <name>ival</name> &gt; 100</expr>)</condition><then>
<return>return <expr>"growth must be between 1 and 100"</expr>;</return></then></if>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>growth</name></name> = <name>ival</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr>"forcerecovery"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>forcerecovery</name></name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"off"</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>forcerecovery</name></name> = 0</expr>;</expr_stmt></then>
<else>else
<return>return <expr>"forcerecovery must be On|Off"</expr>;</return></else></if></else></if>
}</block></then> <else>else <block>{
<return>return <expr>"unknown Balancer parameter"</expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>alias_match</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>alias_fakename</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end_fakename</name> <init>= <expr><name>alias_fakename</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>alias_fakename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>aliasp</name> <init>= <expr><name>alias_fakename</name></expr></init>, *<name>urip</name> <init>= <expr><name>uri</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end_uri</name> <init>= <expr><name>uri</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><name>aliasp</name> &lt; <name>end_fakename</name> &amp;&amp; <name>urip</name> &lt; <name>end_uri</name></expr>)</condition> <block>{
<if>if <condition>(<expr>*<name>aliasp</name> == '/'</expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>urip</name> != '/'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<while>while <condition>(<expr>*<name>aliasp</name> == '/'</expr>)</condition>
<expr_stmt><expr>++<name>aliasp</name></expr>;</expr_stmt></while>
<while>while <condition>(<expr>*<name>urip</name> == '/'</expr>)</condition>
<expr_stmt><expr>++<name>urip</name></expr>;</expr_stmt></while>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name>urip</name>++ != *<name>aliasp</name>++</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr><name>aliasp</name> &gt; <name>end_fakename</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>aliasp</name> = <name>end_fakename</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>urip</name> &gt; <name>end_uri</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>urip</name> = <name>end_uri</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>urip</name> == <name>end_uri</name> &amp;&amp; <name>aliasp</name> != <name>end_fakename</name></expr>)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>aliasp</name><index>[<expr>-1</expr>]</index></name> != '/' &amp;&amp; *<name>urip</name> != '\0' &amp;&amp; *<name>urip</name> != '/'</expr>)</condition><then>
<return>return <expr>0</expr>;</return></then></if>
<return>return <expr><name>urip</name> - <name>uri</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_detect</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>req</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>scheme</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name>
&amp;&amp; !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>scheme</name></name></expr></argument>, <argument><expr><call><name>ap_http_scheme</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
&amp;&amp; <call><name>ap_matches_request_vhost</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><call>(<name>apr_port_t</name>)<argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name> ? <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port</name></name>
: <call><name>ap_default_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_PROXY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>uri</name></name> = <name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = "proxy-server"</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>req</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_CONNECT</name>
&amp;&amp; <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name>
&amp;&amp; <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>port_str</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_PROXY</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>uri</name></name> = <name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = "proxy-server"</expr>;</expr_stmt>
}</block></then></if></else></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>proxy_interpolate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>var</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>firstpart</name></decl>;</decl_stmt>
<expr_stmt><expr><name>start</name> = <call><name>ap_strstr_c</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>"${"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>start</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>str</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>end</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>start</name>+2</expr></argument>, <argument><expr>'}'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>end</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>str</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>var</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>start</name>+2</expr></argument>, <argument><expr><name>end</name>-(<name>start</name>+2)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>firstpart</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>start</name>-<name>str</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>firstpart</name></expr></argument>,
<argument><expr><call><name>proxy_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>end</name>+1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>firstpart</name></expr></argument>, <argument><expr><name>val</name></expr></argument>,
<argument><expr><call><name>proxy_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>end</name>+1</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></else></if>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>proxy_vars</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><name>apr_array_header_t</name> *</type><name>hdr</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>ret</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>hdr</name>-&gt;<name>nelts</name></name></expr></argument>,
<argument><expr><sizeof>sizeof <argument_list>(<argument>struct <expr><name>proxy_alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>old</name> <init>= <expr>(struct <name>proxy_alias</name> *) <name><name>hdr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hdr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>newcopy</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>newcopy</name>-&gt;<name>fake</name></name> = (<name><name>old</name><index>[<expr><name>i</name></expr>]</index></name>.<name>flags</name> &amp; <name>PROXYPASS_INTERPOLATE</name>)
? <call><name>proxy_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>old</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr></argument>)</argument_list></call> : <name><name>old</name><index>[<expr><name>i</name></expr>]</index></name>.<name>fake</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>newcopy</name>-&gt;<name>real</name></name> = (<name><name>old</name><index>[<expr><name>i</name></expr>]</index></name>.<name>flags</name> &amp; <name>PROXYPASS_INTERPOLATE</name>)
? <call><name>proxy_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>old</name><index>[<expr><name>i</name></expr>]</index></name>.<name>real</name></expr></argument>)</argument_list></call> : <name><name>old</name><index>[<expr><name>i</name></expr>]</index></name>.<name>real</name></expr>;</expr_stmt>
}</block></for>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_trans_match</name><argument_list>(<argument>request_rec *r</argument>, <argument>struct proxy_alias *ent</argument>,
<argument>proxy_dir_conf *dconf</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>regm</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>reg1</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>found</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mismatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nocanon</name> <init>= <expr><name><name>ent</name>-&gt;<name>flags</name></name> &amp; <name>PROXYPASS_NOCANON</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>use_uri</name> <init>= <expr><name>nocanon</name> ? <name><name>r</name>-&gt;<name>unparsed_uri</name></name> : <name><name>r</name>-&gt;<name>uri</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>dconf</name> &amp;&amp; (<name><name>dconf</name>-&gt;<name>interpolate_env</name></name> == 1) &amp;&amp; (<name><name>ent</name>-&gt;<name>flags</name></name> &amp; <name>PROXYPASS_INTERPOLATE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>fake</name> = <call><name>proxy_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>fake</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>real</name> = <call><name>proxy_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>fake</name> = <name><name>ent</name>-&gt;<name>fake</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>real</name> = <name><name>ent</name>-&gt;<name>real</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03461</expr></argument>)</argument_list></call>
"attempting to match URI path '%s' against %s '%s' for "
"proxying"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>(<name><name>ent</name>-&gt;<name>regex</name></name> ? "pattern" : "prefix")</expr></argument>,
<argument><expr><name>fake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ent</name>-&gt;<name>regex</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>regex</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>real</name><index>[<expr>0</expr>]</index></name> == '!') &amp;&amp; (<name><name>real</name><index>[<expr>1</expr>]</index></name> == '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03462</expr></argument>)</argument_list></call>
"proxying is explicitly disabled for URI path "
"'%s'; declining"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>nocanon</name> &amp;&amp; <call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>ent</name>-&gt;<name>regex</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>,
<argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>reg1</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mismatch</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>use_uri</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>found</name> = <call><name>ap_pregsub</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>use_uri</name></expr></argument>, <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>,
<argument><expr>(<name>use_uri</name> == <name><name>r</name>-&gt;<name>uri</name></name>) ? <name>regm</name> : <name>reg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01135</expr></argument>)</argument_list></call>
"Substitution in regular expression failed. "
"Replacement too long?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>found</name></expr></argument>, <argument><expr><name>real</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name>found</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>use_uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>len</name> = <call><name>alias_match</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>fake</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>len</name> != 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>real</name><index>[<expr>0</expr>]</index></name> == '!') &amp;&amp; (<name><name>real</name><index>[<expr>1</expr>]</index></name> == '\0')</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03463</expr></argument>)</argument_list></call>
"proxying is explicitly disabled for URI path "
"'%s'; declining"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>nocanon</name> &amp;&amp; <name>len</name> != <call><name>alias_match</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>unparsed_uri</name></name></expr></argument>, <argument><expr><name><name>ent</name>-&gt;<name>fake</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mismatch</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>use_uri</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>found</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name>real</name></expr></argument>, <argument><expr><name>use_uri</name> + <name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>mismatch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01136</expr></argument>)</argument_list></call>
"Unescaped URL path matched ProxyPass; ignoring unsafe nocanon"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name>found</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = "proxy-server"</expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_REVERSE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nocanon</name> &amp;&amp; !<name>mismatch</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ent</name>-&gt;<name>flags</name></name> &amp; <name>PROXYPASS_NOQUERY</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-noquery"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03464</expr></argument>)</argument_list></call>
"URI path '%s' matches proxy handler '%s'"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>,
<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>DONE</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_trans</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>ent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>OK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>unparsed_uri</name><index>[<expr>0</expr>]</index></name> == '*' &amp;&amp; <name><name>r</name>-&gt;<name>unparsed_uri</name><index>[<expr>1</expr>]</index></name> == '\0')
|| !<name><name>r</name>-&gt;<name>uri</name></name> || <name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> != '/'</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"no-proxy"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>alias</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>ap_proxy_trans_match</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>alias</name></name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>DONE</name> != <name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = (<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>aliases</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ent</name> = (struct <name>proxy_alias</name> *) <name><name>conf</name>-&gt;<name>aliases</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>aliases</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>ap_proxy_trans_match</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name><name>ent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>DONE</name> != <name>rv</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
}</block></for>
}</block></then></if>
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_walk</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>per_dir_defaults</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>lookup_defaults</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> **</type><name>sec_proxy</name> <init>= <expr>(<name>ap_conf_vector_t</name> **) <name><name>sconf</name>-&gt;<name>sec_proxy</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>entry_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>entry_proxy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_sec</name> <init>= <expr><name><name>sconf</name>-&gt;<name>sec_proxy</name>-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name> <init>= <expr><name><name>r</name>-&gt;<name>filename</name></name> + 6</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>rxpool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>num_sec</name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nmatch</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regmatch_t</name> *</type><name>pmatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>entry_config</name> = <name><name>sec_proxy</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>entry_proxy</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>entry_config</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>entry_proxy</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>entry_proxy</name>-&gt;<name>refs</name></name> &amp;&amp; <name><name>entry_proxy</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>rxpool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nmatch</name> = <name><name>entry_proxy</name>-&gt;<name>refs</name>-&gt;<name>nelts</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>pmatch</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>, <argument><expr><name>nmatch</name>*<sizeof>sizeof<argument_list>(<argument><expr><name>ap_regmatch_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>entry_proxy</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>nmatch</name></expr></argument>, <argument><expr><name>pmatch</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nmatch</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name> &gt;= 0 &amp;&amp; <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> &gt;= 0 &amp;&amp;
((const <name>char</name> **)<name><name>entry_proxy</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>,
<argument><expr>((const <name>char</name> **)<name><name>entry_proxy</name>-&gt;<name>refs</name>-&gt;<name>elts</name></name>)<index>[<expr><name>i</name></expr>]</index></expr></argument>,
<argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr><name>proxyname</name> + <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>,
<argument><expr><name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_eo</name> - <name><name>pmatch</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then> <else>else <if>if <condition>(
<expr><name><name>entry_proxy</name>-&gt;<name>p_is_fnmatch</name></name> ? <call><name>apr_fnmatch</name><argument_list>(<argument><expr><name><name>entry_proxy</name>-&gt;<name>p</name></name></expr></argument>,
<argument><expr><name>proxyname</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> :
<call><name>strncmp</name><argument_list>(<argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name><name>entry_proxy</name>-&gt;<name>p</name></name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>entry_proxy</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if></else></if>
<expr_stmt><expr><name>per_dir_defaults</name> = <call><name>ap_merge_per_dir_configs</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>per_dir_defaults</name></expr></argument>,
<argument><expr><name>entry_config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name> = <name>per_dir_defaults</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rxpool</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>rxpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_map_location</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>proxyreq</name></name> || !<name><name>r</name>-&gt;<name>filename</name></name> || <call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>proxy_walk</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_fixup</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>url</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>proxyreq</name></name> || !<name><name>r</name>-&gt;<name>filename</name></name> || <call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><name>url</name> = &amp;<name><name>r</name>-&gt;<name>filename</name><index>[<expr>6</expr>]</index></name></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name><name>dconf</name>-&gt;<name>interpolate_env</name></name> == 1) &amp;&amp; (<name><name>r</name>-&gt;<name>proxyreq</name></name> == <name>PROXYREQ_REVERSE</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_req_conf</name> *</type><name>rconf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_req_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>, <argument><expr><name>rconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rconf</name>-&gt;<name>raliases</name></name> = <call><name>proxy_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>raliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rconf</name>-&gt;<name>cookie_paths</name></name> = <call><name>proxy_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>cookie_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>rconf</name>-&gt;<name>cookie_domains</name></name> = <call><name>proxy_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>cookie_domains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>access_status</name> = <call><name>proxy_run_canon_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><name>access_status</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name> || <name>p</name> == <name>url</name></expr>)</condition><then>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_needsdomain</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>domain</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>nuri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ref</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>proxyreq</name></name> || <name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name> || !<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call> != <name>NULL</name>
|| <call><name>strchr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> != <name>NULL</name>
|| <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>, <argument><expr>"localhost"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<return>return <expr><name>DECLINED</name></expr>;</return></then></if>
<expr_stmt><expr><name>ref</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>hostname</name></name></expr></argument>,
<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>nuri</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_REVEALPASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>nuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01138</expr></argument>)</argument_list></call>
"Domain missing: %s sent to %s%s%s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>,
<argument><expr><call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>,
<argument><expr><name>APR_URI_UNP_OMITUSERINFO</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>ref</name> ? " from " : ""</expr></argument>, <argument><expr><name>ref</name> ? <name>ref</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_MOVED_PERMANENTLY</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>uri</name></decl>, *<decl><type ref="prev"/><name>scheme</name></decl>, *<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>= <expr>(<name>proxy_server_conf</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>proxies</name> <init>= <expr><name><name>conf</name>-&gt;<name>proxies</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_remote</name> *</type><name>ents</name> <init>= <expr>(struct <name>proxy_remote</name> *) <name><name>proxies</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>, <decl><type ref="prev"/><name>access_status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>direct_connect</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>maxfwd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>attempts</name> <init>= <expr>0</expr></init>, <name>max_attempts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dirconn_entry</name> *</type><name>list</name> <init>= <expr>(struct <name>dirconn_entry</name> *)<name><name>conf</name>-&gt;<name>dirconn</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>saved_status</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>handler</name></name> &amp;&amp;
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0 &amp;&amp;
<call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_REVERSE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<return>return <expr><name>DECLINED</name></expr>;</return>
}</block></then></if></else></if>
<if>if <condition>(<expr>(<name>str</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Max-Forwards"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<expr_stmt><expr><name>maxfwd</name> = <call><name>apr_strtoi64</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>maxfwd</name> &lt; 0 || <name>maxfwd</name> == <name>APR_INT64_MAX</name> || *<name>end</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"Max-Forwards value '%s' could not be parsed"</expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>maxfwd</name> == 0</expr>)</condition><then> <block>{
<switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name></expr>)</condition> <block>{
<case>case <expr><name>M_TRACE</name></expr>: <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_send_http_trace</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
</case><case>case <expr><name>M_OPTIONS</name></expr>: <block>{
<decl_stmt><decl><type><name>int</name></type> <name>access_status</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>proxyreq</name></name> = <name>PROXYREQ_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_send_http_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_die</name><argument_list>(<argument><expr><name>access_status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block>
</case><default>default: <block>{
<return>return <expr><call><name>ap_proxyerror</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>,
<argument><expr>"Max-Forwards has reached zero - proxy loop?"</expr></argument>)</argument_list></call></expr>;</return>
}</block>
</default>}</block></switch>
}</block></then></if></else></if>
<expr_stmt><expr><name>maxfwd</name> = (<name>maxfwd</name> &gt; 0) ? <name>maxfwd</name> - 1 : 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>maxfwd</name> = <name><name>conf</name>-&gt;<name>maxfwd</name></name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>maxfwd</name> &gt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Max-Forwards"</expr></argument>,
<argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%" <name>APR_INT64_T_FMT</name></expr></argument>, <argument><expr><name>maxfwd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> == <name>M_TRACE</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>coreconf</name> <init>= <expr>(<name>core_server_config</name> *)
<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>coreconf</name>-&gt;<name>trace_enable</name></name> == <name>AP_TRACE_DISABLE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"TRACE forbidden by server configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"verbose-error-to"</expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01139</expr></argument>)</argument_list></call>
"TRACE forbidden by server configuration"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_METHOD_NOT_ALLOWED</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>coreconf</name>-&gt;<name>trace_enable</name></name> != <name>AP_TRACE_EXTENDED</name>
&amp;&amp; (<name><name>r</name>-&gt;<name>read_length</name></name> || <name><name>r</name>-&gt;<name>read_chunked</name></name> || <name><name>r</name>-&gt;<name>remaining</name></name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"error-notes"</expr></argument>,
<argument><expr>"TRACE with request body is not allowed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"verbose-error-to"</expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01140</expr></argument>)</argument_list></call>
"TRACE with request body is not allowed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>uri</name> = <name><name>r</name>-&gt;<name>filename</name></name> + 6</expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01141</expr></argument>)</argument_list></call>
"proxy_handler no URL in %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>domain</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>proxy_needsdomain</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_is_HTTP_REDIRECT</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><name>HTTP_MOVED_PERMANENTLY</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>scheme</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>p</name> - <name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>direct_connect</name> = <name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>dirconn</name>-&gt;<name>nelts</name></name> &amp;&amp;
!<name>direct_connect</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>direct_connect</name> = <name><name>list</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>matcher</name><argument_list>(<argument><expr>&amp;<name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
<argument><expr>(<name>direct_connect</name>) ? <call><name>APLOGNO</name><argument_list>(<argument><expr>03231</expr></argument>)</argument_list></call> "NoProxy for %s" : <call><name>APLOGNO</name><argument_list>(<argument><expr>03232</expr></argument>)</argument_list></call> "UseProxy for %s"</expr></argument>,
<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<do>do <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>url</name> <init>= <expr><name>uri</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>ap_proxy_pre_request</name><argument_list>(<argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr>&amp;<name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> != <name>OK</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>access_status</name> != <name>HTTP_SERVICE_UNAVAILABLE</name></expr>)</condition><then>
<return>return <expr><name>access_status</name></expr>;</return></then></if>
<if>if <condition>(<expr>!<name>worker</name></expr>)</condition><then>
<expr_stmt><expr><name>balancer</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<if>if <condition>(<expr><name>balancer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>balancer</name> &amp;&amp; <name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts_set</name></name> &amp;&amp; !<name>max_attempts</name></expr>)</condition><then>
<expr_stmt><expr><name>max_attempts</name> = <name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>max_attempts</name></name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>direct_connect</name></expr>)</condition><then> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>proxies</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<expr_stmt><expr><name>p2</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>scheme</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>scheme</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0 ||
(<name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>use_regex</name> &amp;&amp;
<call><name>ap_regexec</name><argument_list>(<argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>regexp</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> == 0) ||
(<name>p2</name> == <name>NULL</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>scheme</name></expr></argument>)</argument_list></call> == 0) ||
(<name>p2</name> != <name>NULL</name> &amp;&amp;
<call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>scheme</name></expr></argument>,
<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>scheme</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01142</expr></argument>)</argument_list></call>
"Trying to run scheme_handler against proxy"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>proxy_run_scheme_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
<argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>hostname</name></expr></argument>,
<argument><expr><name><name>ents</name><index>[<expr><name>i</name></expr>]</index></name>.<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> != <name>DECLINED</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cl_a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>cl</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>access_status</name> != <name>HTTP_BAD_GATEWAY</name></expr>)</condition><then> <block>{
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>cl_a</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cl_a</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>cl</name></expr></argument>, <argument><expr><name>cl_a</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cl</name> &gt; 0</expr>)</condition><then> <block>{
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
}</block></then></if>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01143</expr></argument>)</argument_list></call>
"Running scheme %s handler (attempt %d)"</expr></argument>,
<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>attempts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_PROXY_RUN</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>attempts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <call><name>proxy_run_scheme_handler</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>,
<argument><expr><name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>access_status</name> == <name>OK</name>
|| <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-error-override"</expr></argument>)</argument_list></call></expr>)</condition><then>
<break>break;</break></then>
<else>else <if>if <condition>(<expr><name>access_status</name> == <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>balancer</name>
&amp;&amp; !(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IGNORE_ERRORS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>access_status</name> == <name>HTTP_SERVICE_UNAVAILABLE</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>balancer</name>
&amp;&amp; !(<name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> &amp; <name>PROXY_WORKER_IGNORE_ERRORS</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IN_ERROR</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>error_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if></else></if></else></if>
}</block> while <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call> &amp;&amp;
<name>max_attempts</name> &gt; <name>attempts</name>++</expr>)</condition>;</do>
<if>if <condition>(<expr><name>DECLINED</name> == <name>access_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01144</expr></argument>)</argument_list></call>
"No protocol handler was valid for the URL %s "
"(scheme '%s'). "
"If you are using a DSO version of mod_proxy, make sure "
"the proxy submodules are included in the configuration "
"using LoadModule."</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>access_status</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
<goto>goto <name>cleanup</name>;</goto>
}</block></then></if>
<label><name>cleanup</name>:</label>
<if>if <condition>(<expr>(<name>access_status</name> != <name>OK</name>) &amp;&amp; (<name>access_status</name> != <name>DONE</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>saved_status</name> = <name><name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>access_status</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_post_request</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>access_status</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>saved_status</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_proxy_post_request</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>proxy_run_request_status</name><argument_list>(<argument><expr>&amp;<name>access_status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>AP_PROXY_RUN_FINISHED</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>attempts</name></expr></argument>, <argument><expr><name>access_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>access_status</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type> <name>create_proxy_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>ps</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>sec_proxy</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_conf_vector_t</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>proxies</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>proxy_remote</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>aliases</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>proxy_alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>noproxies</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>noproxy_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>dirconn</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>dirconn_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>workers</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_worker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>balancers</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_balancer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>forward</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>reverse</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>domain</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>id</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"p%x"</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>viaopt</name></name> = <name>via_off</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>viaopt_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>req</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>max_balancers</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>bal_persist</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>inherit</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>inherit_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ppinherit</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ppinherit_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>bgrowth</name></name> = 5</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>bgrowth_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>req_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>recv_buffer_size</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>recv_buffer_size_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>io_buffer_size</name></name> = <name>AP_IOBUFSIZE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>io_buffer_size_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>maxfwd</name></name> = <name>DEFAULT_MAX_FORWARDS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>maxfwd_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>timeout</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>timeout_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>badopt</name></name> = <name>bad_error</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>badopt_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>source_address</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>source_address_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name><name>ps</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ps</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type> <name>merge_proxy_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>ps</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>base</name> <init>= <expr>(<name>proxy_server_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>proxy_server_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>inherit</name></name> = (<name><name>overrides</name>-&gt;<name>inherit_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>inherit</name></name> : <name><name>overrides</name>-&gt;<name>inherit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>inherit_set</name></name> = <name><name>overrides</name>-&gt;<name>inherit_set</name></name> || <name><name>base</name>-&gt;<name>inherit_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ppinherit</name></name> = (<name><name>overrides</name>-&gt;<name>ppinherit_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>ppinherit</name></name> : <name><name>overrides</name>-&gt;<name>ppinherit</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>ppinherit_set</name></name> = <name><name>overrides</name>-&gt;<name>ppinherit_set</name></name> || <name><name>base</name>-&gt;<name>ppinherit_set</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ps</name>-&gt;<name>ppinherit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>proxies</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>proxies</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>proxies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>proxies</name></name> = <name><name>overrides</name>-&gt;<name>proxies</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>sec_proxy</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>sec_proxy</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>sec_proxy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>aliases</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>aliases</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>aliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>noproxies</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>noproxies</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>noproxies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>dirconn</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>dirconn</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>dirconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>ps</name>-&gt;<name>inherit</name></name> || <name><name>ps</name>-&gt;<name>ppinherit</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>workers</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>workers</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>balancers</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>balancers</name></name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>balancers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>ps</name>-&gt;<name>workers</name></name> = <name><name>overrides</name>-&gt;<name>workers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>balancers</name></name> = <name><name>overrides</name>-&gt;<name>balancers</name></name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>forward</name></name> = <name><name>overrides</name>-&gt;<name>forward</name></name> ? <name><name>overrides</name>-&gt;<name>forward</name></name> : <name><name>base</name>-&gt;<name>forward</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>reverse</name></name> = <name><name>overrides</name>-&gt;<name>reverse</name></name> ? <name><name>overrides</name>-&gt;<name>reverse</name></name> : <name><name>base</name>-&gt;<name>reverse</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>domain</name></name> = (<name><name>overrides</name>-&gt;<name>domain</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>domain</name></name> : <name><name>overrides</name>-&gt;<name>domain</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>id</name></name> = (<name><name>overrides</name>-&gt;<name>id</name></name> == <name>NULL</name>) ? <name><name>base</name>-&gt;<name>id</name></name> : <name><name>overrides</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>viaopt</name></name> = (<name><name>overrides</name>-&gt;<name>viaopt_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>viaopt</name></name> : <name><name>overrides</name>-&gt;<name>viaopt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>viaopt_set</name></name> = <name><name>overrides</name>-&gt;<name>viaopt_set</name></name> || <name><name>base</name>-&gt;<name>viaopt_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>req</name></name> = (<name><name>overrides</name>-&gt;<name>req_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>req</name></name> : <name><name>overrides</name>-&gt;<name>req</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>req_set</name></name> = <name><name>overrides</name>-&gt;<name>req_set</name></name> || <name><name>base</name>-&gt;<name>req_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>bgrowth</name></name> = (<name><name>overrides</name>-&gt;<name>bgrowth_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>bgrowth</name></name> : <name><name>overrides</name>-&gt;<name>bgrowth</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>bgrowth_set</name></name> = <name><name>overrides</name>-&gt;<name>bgrowth_set</name></name> || <name><name>base</name>-&gt;<name>bgrowth_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>max_balancers</name></name> = <name><name>overrides</name>-&gt;<name>max_balancers</name></name> || <name><name>base</name>-&gt;<name>max_balancers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>bal_persist</name></name> = <name><name>overrides</name>-&gt;<name>bal_persist</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>recv_buffer_size</name></name> = (<name><name>overrides</name>-&gt;<name>recv_buffer_size_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>recv_buffer_size</name></name> : <name><name>overrides</name>-&gt;<name>recv_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>recv_buffer_size_set</name></name> = <name><name>overrides</name>-&gt;<name>recv_buffer_size_set</name></name> || <name><name>base</name>-&gt;<name>recv_buffer_size_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>io_buffer_size</name></name> = (<name><name>overrides</name>-&gt;<name>io_buffer_size_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>io_buffer_size</name></name> : <name><name>overrides</name>-&gt;<name>io_buffer_size</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>io_buffer_size_set</name></name> = <name><name>overrides</name>-&gt;<name>io_buffer_size_set</name></name> || <name><name>base</name>-&gt;<name>io_buffer_size_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>maxfwd</name></name> = (<name><name>overrides</name>-&gt;<name>maxfwd_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>maxfwd</name></name> : <name><name>overrides</name>-&gt;<name>maxfwd</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>maxfwd_set</name></name> = <name><name>overrides</name>-&gt;<name>maxfwd_set</name></name> || <name><name>base</name>-&gt;<name>maxfwd_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>timeout</name></name> = (<name><name>overrides</name>-&gt;<name>timeout_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>timeout</name></name> : <name><name>overrides</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>timeout_set</name></name> = <name><name>overrides</name>-&gt;<name>timeout_set</name></name> || <name><name>base</name>-&gt;<name>timeout_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>badopt</name></name> = (<name><name>overrides</name>-&gt;<name>badopt_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>badopt</name></name> : <name><name>overrides</name>-&gt;<name>badopt</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>badopt_set</name></name> = <name><name>overrides</name>-&gt;<name>badopt_set</name></name> || <name><name>base</name>-&gt;<name>badopt_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>proxy_status</name></name> = (<name><name>overrides</name>-&gt;<name>proxy_status_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>proxy_status</name></name> : <name><name>overrides</name>-&gt;<name>proxy_status</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>proxy_status_set</name></name> = <name><name>overrides</name>-&gt;<name>proxy_status_set</name></name> || <name><name>base</name>-&gt;<name>proxy_status_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>source_address</name></name> = (<name><name>overrides</name>-&gt;<name>source_address_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>source_address</name></name> : <name><name>overrides</name>-&gt;<name>source_address</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>source_address_set</name></name> = <name><name>overrides</name>-&gt;<name>source_address_set</name></name> || <name><name>base</name>-&gt;<name>source_address_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ps</name>-&gt;<name>pool</name></name> = <name><name>base</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
<return>return <expr><name>ps</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_source_address</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>addr</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>addr</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name><name>psf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>psf</name>-&gt;<name>source_address</name></name> = <name>addr</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>source_address_set</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<return>return <expr>"ProxySourceAddress invalid value"</expr>;</return>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_proxy_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>new</name> <init>=
<expr>(<name>proxy_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>raliases</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>proxy_alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cookie_paths</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>proxy_alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cookie_domains</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>proxy_alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>preserve_host_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>preserve_host</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>interpolate_env</name></name> = -1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>error_override</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>error_override_set</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>add_forwarded_headers</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>add_forwarded_headers_set</name></name> = 0</expr>;</expr_stmt>
<return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_proxy_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>proxy_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>proxy_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>proxy_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>proxy_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>p</name></name> = <name><name>add</name>-&gt;<name>p</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>p_is_fnmatch</name></name> = <name><name>add</name>-&gt;<name>p_is_fnmatch</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>r</name></name> = <name><name>add</name>-&gt;<name>r</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>refs</name></name> = <name><name>add</name>-&gt;<name>refs</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>raliases</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>raliases</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>raliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cookie_paths</name></name>
= <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>cookie_paths</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>cookie_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>cookie_domains</name></name>
= <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>cookie_domains</name></name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>cookie_domains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>interpolate_env</name></name> = (<name><name>add</name>-&gt;<name>interpolate_env</name></name> == -1) ? <name><name>base</name>-&gt;<name>interpolate_env</name></name>
: <name><name>add</name>-&gt;<name>interpolate_env</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>preserve_host</name></name> = (<name><name>add</name>-&gt;<name>preserve_host_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>preserve_host</name></name>
: <name><name>add</name>-&gt;<name>preserve_host</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>preserve_host_set</name></name> = <name><name>add</name>-&gt;<name>preserve_host_set</name></name> || <name><name>base</name>-&gt;<name>preserve_host_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>error_override</name></name> = (<name><name>add</name>-&gt;<name>error_override_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>error_override</name></name>
: <name><name>add</name>-&gt;<name>error_override</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>error_override_set</name></name> = <name><name>add</name>-&gt;<name>error_override_set</name></name> || <name><name>base</name>-&gt;<name>error_override_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>alias</name></name> = (<name><name>add</name>-&gt;<name>alias_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>alias</name></name> : <name><name>add</name>-&gt;<name>alias</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>alias_set</name></name> = <name><name>add</name>-&gt;<name>alias_set</name></name> || <name><name>base</name>-&gt;<name>alias_set</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>add_forwarded_headers</name></name> =
(<name><name>add</name>-&gt;<name>add_forwarded_headers_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>add_forwarded_headers</name></name>
: <name><name>add</name>-&gt;<name>add_forwarded_headers</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>add_forwarded_headers_set</name></name> = <name><name>add</name>-&gt;<name>add_forwarded_headers_set</name></name>
|| <name><name>base</name>-&gt;<name>add_forwarded_headers_set</name></name></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_proxy</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>f1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r1</name></decl></param>, <param><decl><type><name>int</name></type> <name>regex</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_remote</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>, *<decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>r</name></decl>, *<decl><type ref="prev"/><name>f</name></decl>, *<decl><type ref="prev"/><name>scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>reg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>port</name></decl>;</decl_stmt>
<expr_stmt><expr><name>r</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>scheme</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>f</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>p</name> == <name>NULL</name> || <name><name>p</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>p</name><index>[<expr>2</expr>]</index></name> != '/' || <name><name>p</name><index>[<expr>3</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>regex</name></expr>)</condition><then>
<return>return <expr>"ProxyRemoteMatch: Bad syntax for a remote proxy server"</expr>;</return></then>
<else>else
<return>return <expr>"ProxyRemote: Bad syntax for a remote proxy server"</expr>;</return></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>scheme</name><index>[<expr><name>p</name>-<name>r</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>q</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>p</name> + 3</expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>q</name> != <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>q</name> + 1</expr></argument>, <argument><expr>"%u"</expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call> != 1 || <name>port</name> &gt; 65535</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>regex</name></expr>)</condition><then>
<return>return <expr>"ProxyRemoteMatch: Bad syntax for a remote proxy server (bad port number)"</expr>;</return></then>
<else>else
<return>return <expr>"ProxyRemote: Bad syntax for a remote proxy server (bad port number)"</expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr>*<name>q</name> = '\0'</expr>;</expr_stmt>
}</block></then> <else>else
<expr_stmt><expr><name>port</name> = -1</expr>;</expr_stmt></else></if>
<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>regex</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>reg</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>reg</name></expr>)</condition><then>
<return>return <expr>"Regular expression for ProxyRemoteMatch could not be compiled."</expr>;</return></then></if>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></else></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>p</name> + 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>port</name> == -1</expr>)</condition><then> <block>{
<expr_stmt><expr><name>port</name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>proxies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>scheme</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>protocol</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>hostname</name></name> = <name>p</name> + 3</expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>port</name></name> = <name>port</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>regexp</name></name> = <name>reg</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>use_regex</name></name> = <name>regex</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_proxy_noregex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>f1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r1</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_proxy</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_proxy_regex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>f1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r1</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_proxy</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>f1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_proxy_de_socketfy</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *url</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ptr</name></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"unix:"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> &amp;&amp;
((<name>ptr</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>'|'</expr></argument>)</argument_list></call>) != <name>NULL</name>)</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ret</name></decl>, *<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<expr_stmt><expr><name>ret</name> = <name>ptr</name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>c</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>c</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr>"//localhost"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr><name>ret</name></expr>;</return>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>url</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_pass</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_regex</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>proxy_dir_conf</name> *)<name>dummy</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>f</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>params</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_regex</name> <init>= <expr><name>is_regex</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>f</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>"~"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>is_regex</name></expr>)</condition><then> <block>{
<return>return <expr>"ProxyPassMatch invalid syntax ('~' usage)."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>use_regex</name> = 1</expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>f</name> = <name>word</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <name>word</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>,<argument><expr>"nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>PROXYPASS_NOCANON</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>,<argument><expr>"interpolate"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>PROXYPASS_INTERPOLATE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>word</name></expr></argument>,<argument><expr>"noquery"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>flags</name> |= <name>PROXYPASS_NOQUERY</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>val</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>*<name>r</name> == '/'</expr>)</condition><then> <block>{
<return>return <expr>"ProxyPass|ProxyPassMatch can not have a path when defined in "
"a location."</expr>;</return>
}</block></then> <else>else <block>{
<return>return <expr>"Invalid ProxyPass|ProxyPassMatch parameter. Parameter must "
"be in the form 'key=value'."</expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<return>return <expr>"Invalid ProxyPass|ProxyPassMatch parameter. Parameter must be "
"in the form 'key=value'."</expr>;</return>
}</block></else></if>
}</block></then> <else>else
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt></else></if>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if></else></if>
}</block></while><empty_stmt>;</empty_stmt>
<if>if <condition>(<expr><name>r</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr>"ProxyPass|ProxyPassMatch needs a path when not defined in a location"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>alias</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>proxy_alias</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dconf</name>-&gt;<name>alias_set</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>new</name> = <name><name>dconf</name>-&gt;<name>alias</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>use_regex</name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>aliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fake</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>flags</name></name> = <name>flags</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>use_regex</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>regex</name></name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>new</name>-&gt;<name>regex</name></name> == <name>NULL</name></expr>)</condition><then>
<return>return <expr>"Regular expression could not be compiled."</expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>regex</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>r</name><index>[<expr>0</expr>]</index></name> == '!' &amp;&amp; <name><name>r</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then>
<return>return <expr><name>NULL</name></expr>;</return></then></if>
<expr_stmt><expr><name>arr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_proxy_valid_balancer_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name> <init>= <expr><call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>fake_copy</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>use_regex</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>fake_copy</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>fake_copy</name> = <name>f</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr>!<name>balancer</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_proxy_define_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>balancer</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>fake_copy</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxyPass "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_proxy_update_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>fake_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>set_balancer_param</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxyPass "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></for>
<expr_stmt><expr><name><name>new</name>-&gt;<name>balancer</name></name> = <name>balancer</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reuse</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>worker</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxyPass "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>PROXY_COPY_CONF_PARAMS</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>reuse</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01145</expr></argument>)</argument_list></call>
"Sharing worker '%s' instead of creating new worker '%s'"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>real</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>reuse</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01146</expr></argument>)</argument_list></call>
"Ignoring parameter '%s=%s' for worker '%s' because of worker sharing"</expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>set_worker_param</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxyPass "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
}</block></for>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_pass_noregex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_pass</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_pass_regex</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>add_pass</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type> <name>add_pass_reverse</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>f</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>i</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fake</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>interp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
<expr_stmt><expr><name>err</name> = <call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIRECTORY</name>|<name>NOT_IN_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>r</name> == <name>NULL</name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"interpolate"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"ProxyPassReverse needs a path when not defined in a location"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fake</name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>real</name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name>interp</name> = <name>i</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name>r</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"interpolate"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"ProxyPassReverse can not have a path when defined in a location"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fake</name> = <name><name>cmd</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>real</name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name>interp</name> = <name>r</name></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>raliases</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fake</name></name> = <name>fake</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <name>real</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>flags</name></name> = <name>interp</name> ? <name>PROXYPASS_INTERPOLATE</name> : 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>cookie_path</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>f</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>cookie_paths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fake</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>flags</name></name> = <name>interp</name> ? <name>PROXYPASS_INTERPOLATE</name> : 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>cookie_domain</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>f</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>interp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>proxy_alias</name> *</type><name>new</name></decl>;</decl_stmt>
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>cookie_domains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>fake</name></name> = <name>f</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>real</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>flags</name></name> = <name>interp</name> ? <name>PROXYPASS_INTERPOLATE</name> : 0</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_proxy_exclude</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>parms</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>noproxy_entry</name> *</type><name>new</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>noproxy_entry</name> *</type><name>list</name> <init>= <expr>(struct <name>noproxy_entry</name> *) <name><name>conf</name>-&gt;<name>noproxies</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_sockaddr_t</name> *</type><name>addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>noproxies</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>noproxies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = <name>arg</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>APR_SUCCESS</name> == <call><name>apr_sockaddr_info_get</name><argument_list>(<argument><expr>&amp;<name>addr</name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>APR_UNSPEC</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>addr</name></name> = <name>addr</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>new</name>-&gt;<name>addr</name></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_proxy_dirconn</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>parms</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dirconn_entry</name> *</type><name>New</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>dirconn_entry</name> *</type><name>list</name> <init>= <expr>(struct <name>dirconn_entry</name> *) <name><name>conf</name>-&gt;<name>dirconn</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>dirconn</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>found</name> = 1</expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></for>
<if>if <condition>(<expr>!<name>found</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>New</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>dirconn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>New</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>New</name>-&gt;<name>hostaddr</name></name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>ap_proxy_is_ipaddr</name><argument_list>(<argument><expr><name>New</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03018</expr></argument>)</argument_list></call>
"Parsed addr %s"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>New</name>-&gt;<name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03019</expr></argument>)</argument_list></call>
"Parsed mask %s"</expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>New</name>-&gt;<name>mask</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_proxy_is_domainname</name><argument_list>(<argument><expr><name>New</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>New</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03020</expr></argument>)</argument_list></call>
"Parsed domain %s"</expr></argument>, <argument><expr><name><name>New</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <if>if <condition>(<expr><call><name>ap_proxy_is_hostname</name><argument_list>(<argument><expr><name>New</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name><name>New</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03021</expr></argument>)</argument_list></call>
"Parsed host %s"</expr></argument>, <argument><expr><name><name>New</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_proxy_is_word</name><argument_list>(<argument><expr><name>New</name></expr></argument>, <argument><expr><name><name>parms</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUGGING</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Parsed word %s\n"</expr></argument>, <argument><expr><name><name>New</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></else></if></else></if></else></if>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_proxy_domain</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>arg</name><index>[<expr>0</expr>]</index></name> != '.'</expr>)</condition><then>
<return>return <expr>"ProxyDomain: domain name must start with a dot."</expr>;</return></then></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>domain</name></name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_proxy_req</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>req</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>req_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_proxy_error_override</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_override</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>error_override_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>add_proxy_http_headers</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>add_forwarded_headers</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>add_forwarded_headers_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_preserve_host</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>preserve_host</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>preserve_host_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_recv_buffer_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name> &lt; 512 &amp;&amp; <name>s</name> != 0</expr>)</condition><then> <block>{
<return>return <expr>"ProxyReceiveBufferSize must be &gt;= 512 bytes, or 0 for system default."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>recv_buffer_size</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>recv_buffer_size_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_io_buffer_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>s</name> &lt; 512 &amp;&amp; <name>s</name></expr>)</condition><then> <block>{
<return>return <expr>"ProxyIOBufferSize must be &gt;= 512 bytes, or 0 for system default."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>io_buffer_size</name></name> = (<name>s</name> ? <name>s</name> : <name>AP_IOBUFSIZE</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>io_buffer_size_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_max_forwards</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>s</name> <init>= <expr><call><name>atol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>maxfwd</name></name> = <name>s</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>maxfwd_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>set_proxy_timeout</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><name>timeout</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>timeout</name>&lt;1</expr>)</condition><then> <block>{
<return>return <expr>"Proxy Timeout must be at least 1 second."</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>timeout_set</name></name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>set_via_opt</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>viaopt</name></name> = <name>via_off</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>viaopt</name></name> = <name>via_on</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Block"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>viaopt</name></name> = <name>via_block</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Full"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>viaopt</name></name> = <name>via_full</name></expr>;</expr_stmt></then>
<else>else <block>{
<return>return <expr>"ProxyVia must be one of: "
"off | on | full | block"</expr>;</return>
}</block></else></if></else></if></else></if></else></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>viaopt_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>set_bad_opt</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"IsError"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>badopt</name></name> = <name>bad_error</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Ignore"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>badopt</name></name> = <name>bad_ignore</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"StartBody"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>badopt</name></name> = <name>bad_body</name></expr>;</expr_stmt></then>
<else>else <block>{
<return>return <expr>"ProxyBadHeader must be one of: "
"IsError | Ignore | StartBody"</expr>;</return>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>badopt_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type>
<name>set_status_opt</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>proxy_status</name></name> = <name>status_off</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>proxy_status</name></name> = <name>status_on</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Full"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>proxy_status</name></name> = <name>status_full</name></expr>;</expr_stmt></then>
<else>else <block>{
<return>return <expr>"ProxyStatus must be one of: "
"off | on | full"</expr>;</return>
}</block></else></if></else></if></else></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>proxy_status_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_bgrowth</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>growth</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>growth</name> &lt; 0 || <name>growth</name> &gt; 1000</expr>)</condition><then> <block>{
<return>return <expr>"BalancerGrowth must be between 0 and 1000"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>bgrowth</name></name> = <name>growth</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>bgrowth_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_persist</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>bal_persist</name></name> = <name>flag</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_inherit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>inherit</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>inherit_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_ppinherit</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>parms</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>ppinherit</name></name> = <name>flag</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>psf</name>-&gt;<name>ppinherit_set</name></name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_member</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>params</name> <init>= <expr><call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>reuse</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>val</name></decl>;</decl_stmt>
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>path</name></expr>)</condition><then>
<expr_stmt><expr><name>path</name> = <name>word</name></expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
<expr_stmt><expr><name>name</name> = <name>word</name></expr>;</expr_stmt></then>
<else>else <block>{
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>path</name></name></expr>)</condition><then>
<return>return <expr>"BalancerMember can not have a balancer name when defined in a location"</expr>;</return></then>
<else>else
<return>return <expr>"Invalid BalancerMember parameter. Parameter must "
"be in the form 'key=value'"</expr>;</return></else></if>
}</block></else></if></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr>!<name>path</name></expr>)</condition><then>
<return>return <expr>"BalancerMember must define balancer name when outside &lt;Proxy &gt; section"</expr>;</return></then></if>
<if>if <condition>(<expr>!<name>name</name></expr>)</condition><then>
<return>return <expr>"BalancerMember must define remote proxy server"</expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>balancer</name> = <call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>balancer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_define_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>balancer</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"BalancerMember "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>worker</name> = <call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01147</expr></argument>)</argument_list></call>
"Defining worker '%s' for balancer '%s'"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>err</name> = <call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"BalancerMember "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01148</expr></argument>)</argument_list></call>
"Defined worker '%s' for balancer '%s'"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_COPY_CONF_PARAMS</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>reuse</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01149</expr></argument>)</argument_list></call>
"Sharing worker '%s' instead of creating new worker '%s'"</expr></argument>,
<argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>arr</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>elts</name> = (const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name>reuse</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01150</expr></argument>)</argument_list></call>
"Ignoring parameter '%s=%s' for worker '%s' because of worker sharing"</expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><call><name>ap_proxy_worker_name</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>err</name> = <call><name>set_worker_param</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>,
<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"BalancerMember "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></else></if>
}</block></for>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
<name>set_proxy_param</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>=
<expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>in_proxy_section</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_HTACCESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><name>err</name></expr>;</return></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>parent</name></name> &amp;&amp;
<call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>parent</name>-&gt;<name>directive</name></name></expr></argument>,
<argument><expr>"&lt;Proxy"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pargs</name> <init>= <expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>parent</name>-&gt;<name>args</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>pargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>word</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call>)</expr>)</condition><then>
<expr_stmt><expr>*<name>word</name> = '\0'</expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>in_proxy_section</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>name</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><call><name>ap_proxy_valid_balancer_name</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>balancer</name> = <call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>balancer</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>in_proxy_section</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_define_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>balancer</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxySet "</expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxySet can not find '"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>"' Balancer."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>worker</name> = <call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>worker</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>in_proxy_section</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxySet "</expr></argument>,
<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then> <else>else
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxySet can not find '"</expr></argument>,
<argument><expr><name>name</name></expr></argument>, <argument><expr>"' Worker."</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
}</block></then></if>
}</block></else></if>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid ProxySet parameter. Parameter must be "
"in the form 'key=value'"</expr>;</return>
}</block></then> <else>else
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>set_worker_param</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>set_balancer_param</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ProxySet: "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"; "</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_add_per_proxy_conf</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>ap_conf_vector_t</name> *</type><name>dir_config</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>sconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> **</type><name>new_space</name> <init>= <expr>(<name>void</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>sec_proxy</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_space</name> = <name>dir_config</name></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>proxysection</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>endp</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'&gt;'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>old_overrides</name> <init>= <expr><name><name>cmd</name>-&gt;<name>override</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>old_path</name> <init>= <expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>new_dir_conf</name> <init>= <expr><call><name>ap_create_per_dir_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>thiscmd</name> <init>= <expr><name><name>cmd</name>-&gt;<name>cmd</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>word</name></decl>, *<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>NOT_IN_DIR_LOC_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>sconf</name> <init>=
<expr>(<name>proxy_server_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>endp</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; directive missing closing '&gt;'"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>arg</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>endp</name>-<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>arg</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>thiscmd</name>-&gt;<name>cmd_data</name></name></expr>)</condition><then>
<return>return <expr>"&lt;ProxyMatch &gt; block must specify a path"</expr>;</return></then>
<else>else
<return>return <expr>"&lt;Proxy &gt; block must specify a path"</expr>;</return></else></if>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>OR_ALL</name>|<name>ACCESS_CONF</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> += 6</expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name><name>thiscmd</name>-&gt;<name>cmd_data</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>r</name></expr>)</condition><then> <block>{
<return>return <expr>"Regex could not be compiled"</expr>;</return>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>conf</name> = <call><name>ap_set_config_vectors</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_dir_conf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>path</name></name></expr></argument>,
<argument><expr>&amp;<name>proxy_module</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>errmsg</name> = <call><name>ap_walk_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>first_child</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>new_dir_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>errmsg</name> != <name>NULL</name></expr>)</condition><then>
<return>return <expr><name>errmsg</name></expr>;</return></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>p</name></name> = <name><name>cmd</name>-&gt;<name>path</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>p_is_fnmatch</name></name> = <call><name>apr_fnmatch_test</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>conf</name>-&gt;<name>refs</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_regname</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>refs</name></name></expr></argument>, <argument><expr><name>AP_REG_MATCH</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_add_per_proxy_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>new_dir_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>arg</name> != '\0'</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>thiscmd</name>-&gt;<name>cmd_data</name></name></expr>)</condition><then>
<return>return <expr>"Multiple &lt;ProxyMatch&gt; arguments not (yet) supported."</expr>;</return></then></if>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>p_is_fnmatch</name></name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments are not supported for wildchar url."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>!<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments are not supported for non url."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><call><name>ap_proxy_valid_balancer_name</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>conf</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>balancer</name> = <call><name>ap_proxy_get_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>sconf</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>balancer</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_define_balancer</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>balancer</name></expr></argument>,
<argument><expr><name>sconf</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>worker</name> = <call><name>ap_proxy_get_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sconf</name></expr></argument>,
<argument><expr><call><name>ap_proxy_de_socketfy</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>(<name>char</name>*)<name><name>conf</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>worker</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>err</name> = <call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>worker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>sconf</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>" "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></then></if>
}</block></else></if>
<if>if <condition>(<expr><name>worker</name> == <name>NULL</name> &amp;&amp; <name>balancer</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>,
<argument><expr>"&gt; arguments are supported only for workers."</expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<expr_stmt><expr><name>word</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>val</name></expr>)</condition><then> <block>{
<return>return <expr>"Invalid Proxy parameter. Parameter must be "
"in the form 'key=value'"</expr>;</return>
}</block></then> <else>else
<expr_stmt><expr>*<name>val</name>++ = '\0'</expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>worker</name></expr>)</condition><then>
<expr_stmt><expr><name>err</name> = <call><name>set_worker_param</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>err</name> = <call><name>set_balancer_param</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>balancer</name></expr></argument>,
<argument><expr><name>word</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<if>if <condition>(<expr><name>err</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name><name>thiscmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr>" "</expr></argument>,
<argument><expr><name>word</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>"; "</expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block></while>
}</block></then></if>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>path</name></name> = <name>old_path</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cmd</name>-&gt;<name>override</name></name> = <name>old_overrides</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>proxy_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;Proxy"</expr></argument>, <argument><expr><name>proxysection</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container for directives affecting resources located in the proxied "
"location"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"&lt;ProxyMatch"</expr></argument>, <argument><expr><name>proxysection</name></expr></argument>, <argument><expr>(<name>void</name>*)1</expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Container for directives affecting resources located in the proxied "
"location, in regular expression syntax"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyRequests"</expr></argument>, <argument><expr><name>set_proxy_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"on if the true proxy requests should be accepted"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"ProxyRemote"</expr></argument>, <argument><expr><name>add_proxy_noregex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a scheme, partial URL or '*' and a proxy server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"ProxyRemoteMatch"</expr></argument>, <argument><expr><name>add_proxy_regex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"a regex pattern and a proxy server"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyPassInterpolateEnv"</expr></argument>, <argument><expr><name>ap_set_flag_slot_char</name></expr></argument>,
<argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>proxy_dir_conf</name></expr></argument>, <argument><expr><name>interpolate_env</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Interpolate Env Vars in reverse Proxy"</expr></argument>)</argument_list></call></expr> ,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ProxyPass"</expr></argument>, <argument><expr><name>add_pass_noregex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"a virtual path and a URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ProxyPassMatch"</expr></argument>, <argument><expr><name>add_pass_regex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"a virtual path and a URL"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE123</name><argument_list>(<argument><expr>"ProxyPassReverse"</expr></argument>, <argument><expr><name>add_pass_reverse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"a virtual path and a URL for reverse proxy behaviour"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"ProxyPassReverseCookiePath"</expr></argument>, <argument><expr><name>cookie_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Path rewrite rule for proxying cookies"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"ProxyPassReverseCookieDomain"</expr></argument>, <argument><expr><name>cookie_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>, <argument><expr>"Domain rewrite rule for proxying cookies"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"ProxyBlock"</expr></argument>, <argument><expr><name>set_proxy_exclude</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A list of names, hosts or domains to which the proxy will not connect"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyReceiveBufferSize"</expr></argument>, <argument><expr><name>set_recv_buffer_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Receive buffer size for outgoing HTTP and FTP connections in bytes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyIOBufferSize"</expr></argument>, <argument><expr><name>set_io_buffer_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"IO buffer size for outgoing HTTP and FTP connections in bytes"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyMaxForwards"</expr></argument>, <argument><expr><name>set_max_forwards</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The maximum number of proxies a request may be forwarded through."</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"NoProxy"</expr></argument>, <argument><expr><name>set_proxy_dirconn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"A list of domains, hosts, or subnets to which the proxy will connect directly"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyDomain"</expr></argument>, <argument><expr><name>set_proxy_domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"The default intranet domain name (in absence of a domain in the URL)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyVia"</expr></argument>, <argument><expr><name>set_via_opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Configure Via: proxy header header to one of: on | off | block | full"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyErrorOverride"</expr></argument>, <argument><expr><name>set_proxy_error_override</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"use our error handling pages instead of the servers' we are proxying"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyPreserveHost"</expr></argument>, <argument><expr><name>set_preserve_host</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"on if we should preserve host header while proxying"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyTimeout"</expr></argument>, <argument><expr><name>set_proxy_timeout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Set the timeout (in seconds) for a proxied connection. "
"This overrides the server timeout"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyBadHeader"</expr></argument>, <argument><expr><name>set_bad_opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"How to handle bad header line in response: IsError | Ignore | StartBody"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"BalancerMember"</expr></argument>, <argument><expr><name>add_member</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"A balancer name and scheme with list of params"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"BalancerGrowth"</expr></argument>, <argument><expr><name>set_bgrowth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Number of additional Balancers that can be added post-config"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"BalancerPersist"</expr></argument>, <argument><expr><name>set_persist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"on if the balancer should persist changes on reboot/restart made via the Balancer Manager"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"BalancerInherit"</expr></argument>, <argument><expr><name>set_inherit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"on if this server should inherit Balancers and Workers defined in the main server "
"(Setting to off recommended if using the Balancer Manager)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyPassInherit"</expr></argument>, <argument><expr><name>set_ppinherit</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"on if this server should inherit all ProxyPass directives defined in the main server "
"(Setting to off recommended if using the Balancer Manager)"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxyStatus"</expr></argument>, <argument><expr><name>set_status_opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Configure Status: proxy status to one of: on | off | full"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"ProxySet"</expr></argument>, <argument><expr><name>set_proxy_param</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"A balancer or worker name with list of params"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxySourceAddress"</expr></argument>, <argument><expr><name>set_source_address</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
<argument><expr>"Configure local source IP used for request forward"</expr></argument>)</argument_list></call></expr>,
<expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ProxyAddHeaders"</expr></argument>, <argument><expr><name>add_proxy_http_headers</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
<argument><expr>"on if X-Forwarded-* headers should be added or completed"</expr></argument>)</argument_list></call></expr>,
<expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_proxy_enable</name></expr></argument>)</argument_list></call> *<name>proxy_ssl_enable</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_engine_disable</name></expr></argument>)</argument_list></call> *<name>proxy_ssl_disable</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call> *<name>proxy_is_https</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call> *<name>proxy_ssl_val</name> = <name>NULL</name></expr>;</expr_stmt>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_ssl_enable</name><argument_list>(<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>proxy_ssl_enable</name></expr>)</condition><then> <block>{
<return>return <expr><name>c</name> ? <call><name>proxy_ssl_enable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> : 1</expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_ssl_disable</name><argument_list>(<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>proxy_ssl_disable</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>proxy_ssl_disable</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_proxy_conn_is_https</name><argument_list>(<argument>conn_rec *c</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>proxy_is_https</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>proxy_is_https</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr>0</expr>;</return></else></if>
}</block>
<macro><name>PROXY_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_proxy_ssl_val</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>server_rec *s</argument>,
<argument>conn_rec *c</argument>, <argument>request_rec *r</argument>,
<argument>const char *var</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr><name>proxy_ssl_val</name></expr>)</condition><then> <block>{
<return>return <expr>(const <name>char</name> *)<call><name>proxy_ssl_val</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>var</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else
<return>return <expr><name>NULL</name></expr>;</return></else></if>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name>proxy_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>proxy_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02478</expr></argument>)</argument_list></call>
"failed to create %s mutex"</expr></argument>, <argument><expr><name>proxy_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>proxy_ssl_enable</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_proxy_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_ssl_disable</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_engine_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_is_https</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_ssl_val</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_proxy_strmatch_path</name> = <call><name>apr_strmatch_precompile</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"path="</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_proxy_strmatch_domain</name> = <call><name>apr_strmatch_precompile</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>"domain="</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_status_hook</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name> <init>= <expr>(<name>proxy_server_conf</name> *)
<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_balancer</name> *</type><name>balancer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name> == 0 ||
<name><name>conf</name>-&gt;<name>proxy_status</name></name> == <name>status_off</name></expr>)</condition><then>
<return>return <expr><name>OK</name></expr>;</return></then></if>
<expr_stmt><expr><name>balancer</name> = (<name>proxy_balancer</name> *)<name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>balancers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;\n&lt;h1&gt;Proxy LoadBalancer Status for "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;/h1&gt;\n\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table border=\"0\"&gt;&lt;tr&gt;"
"&lt;th&gt;SSes&lt;/th&gt;&lt;th&gt;Timeout&lt;/th&gt;&lt;th&gt;Method&lt;/th&gt;"
"&lt;/tr&gt;\n&lt;tr&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr>" | "</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky_path</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>sticky</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;td&gt; - "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%" <name>APR_TIME_T_FMT</name> "&lt;/td&gt;"</expr></argument>,
<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%s&lt;/td&gt;\n"</expr></argument>,
<argument><expr><name><name>balancer</name>-&gt;<name>lbmethod</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;table border=\"0\"&gt;&lt;tr&gt;"
"&lt;th&gt;Sch&lt;/th&gt;&lt;th&gt;Host&lt;/th&gt;&lt;th&gt;Stat&lt;/th&gt;"
"&lt;th&gt;Route&lt;/th&gt;&lt;th&gt;Redir&lt;/th&gt;"
"&lt;th&gt;F&lt;/th&gt;&lt;th&gt;Set&lt;/th&gt;&lt;th&gt;Acc&lt;/th&gt;&lt;th&gt;Wr&lt;/th&gt;&lt;th&gt;Rd&lt;/th&gt;"
"&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ProxyBalancer[%d]Name: %s\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>n</name> = 0</expr>;</init> <condition><expr><name>n</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>n</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>fbuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tr&gt;\n&lt;td&gt;"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>scheme</name></name></name></expr></argument>, <argument><expr>"&lt;/td&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>hostname</name></name></name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>ap_proxy_parse_wstatus</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>route</name></name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>redirect</name></name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;/td&gt;&lt;td&gt;%.2f&lt;/td&gt;"</expr></argument>, <argument><expr><call>(<name>float</name>)<argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name></expr></argument>)</argument_list></call>/100.0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%d&lt;/td&gt;"</expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;td&gt;%" <name>APR_SIZE_T_FMT</name> "&lt;/td&gt;&lt;td&gt;"</expr></argument>,
<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>elected</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>transferred</name></name></name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;td&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>read</name></name></name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tr&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ProxyBalancer[%d]Worker[%d]Name: %s\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>name</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ProxyBalancer[%d]Worker[%d]Status: %s\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>ap_proxy_parse_wstatus</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ProxyBalancer[%d]Worker[%d]Elected: %"
<name>APR_SIZE_T_FMT</name> "\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>elected</name></name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ProxyBalancer[%d]Worker[%d]Sent: %s\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>transferred</name></name></name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"ProxyBalancer[%d]Worker[%d]Rcvd: %s\n"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><call><name>apr_strfsize</name><argument_list>(<argument><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>read</name></name></name></expr></argument>, <argument><expr><name>fbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr>++<name>worker</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>++<name>balancer</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr /&gt;&lt;table&gt;\n"
"&lt;tr&gt;&lt;th&gt;SSes&lt;/th&gt;&lt;td&gt;Sticky session name&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Timeout&lt;/th&gt;&lt;td&gt;Balancer Timeout&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Sch&lt;/th&gt;&lt;td&gt;Connection scheme&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Host&lt;/th&gt;&lt;td&gt;Backend Hostname&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Stat&lt;/th&gt;&lt;td&gt;Worker status&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Route&lt;/th&gt;&lt;td&gt;Session Route&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Redir&lt;/th&gt;&lt;td&gt;Session Route Redirection&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;F&lt;/th&gt;&lt;td&gt;Load Balancer Factor&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Acc&lt;/th&gt;&lt;td&gt;Number of uses&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Wr&lt;/th&gt;&lt;td&gt;Number of bytes transferred&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;tr&gt;&lt;th&gt;Rd&lt;/th&gt;&lt;td&gt;Number of bytes read&lt;/td&gt;&lt;/tr&gt;\n"
"&lt;/table&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>reverse</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr>&amp;<name>proxy_mutex</name></expr></argument>,
<argument><expr><call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr><name>proxy_mutex</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02479</expr></argument>)</argument_list></call>
"could not init proxy_mutex in child"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr><name>s</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>void</name> *</type><name>sconf</name> <init>= <expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><name>conf</name> = (<name>proxy_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>sconf</name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> *)<name><name>conf</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
<expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr><name><name>conf</name>-&gt;<name>req_set</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>req</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>proxy_worker</name> *</type><name>forward</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>forward</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://www.apache.org"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>forward</name></name> = <name>forward</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"proxy:forward"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>hash</name>.<name>def</name></name> = <name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> =
<call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>hash</name>.<name>fnv</name></name> = <name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> =
<call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_FNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IGNORE_ERRORS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_GENERIC</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>forward</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>forward</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>reverse</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_proxy_define_worker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>reverse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>"http://www.apache.org"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"proxy:reverse"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PROXY_STRNCPY</name><argument_list>(<argument><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reverse</name>-&gt;<name>hash</name>.<name>def</name></name> = <name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>def</name></name> =
<call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reverse</name>-&gt;<name>hash</name>.<name>fnv</name></name> = <name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>hash</name>.<name>fnv</name></name> =
<call><name>ap_proxy_hashfunc</name><argument_list>(<argument><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>PROXY_HASHFUNC_FNV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_IGNORE_ERRORS</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>status</name></name> |= <name>PROXY_WORKER_GENERIC</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>reverse</name></name> = <name>reverse</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_proxy_initialize_worker</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>reverse</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>reverse</name>-&gt;<name>s</name>-&gt;<name>is_address_reusable</name></name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>conf</name>-&gt;<name>reverse</name></name> = <name>reverse</name></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>proxy_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02480</expr></argument>)</argument_list></call>
"failed to register %s mutex"</expr></argument>, <argument><expr><name>proxy_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>500</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>status_hook</name></expr></argument>, <argument><expr><name>proxy_status_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>proxy_lb_workers</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>set_worker_hc_param_f</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>set_worker_hc_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszSucc</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_rewrite.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>aszPred</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mpm_winnt.c"</expr>, <expr>"mod_proxy_balancer.c"</expr>,
<expr>"mod_proxy_hcheck.c"</expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>proxy_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>proxy_trans</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>proxy_map_location</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>proxy_fixup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>aszSucc</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>proxy_detect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>proxy_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>proxy_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>child_init</name></expr></argument>, <argument><expr><name>aszPred</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>proxy_util_register_hooks</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_proxy_dir_config</name></expr>,
<expr><name>merge_proxy_dir_config</name></expr>,
<expr><name>create_proxy_config</name></expr>,
<expr><name>merge_proxy_config</name></expr>,
<expr><name>proxy_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(scheme_handler)
APR_HOOK_LINK(canon_handler)
APR_HOOK_LINK(pre_request)
APR_HOOK_LINK(post_request)
APR_HOOK_LINK(request_status)</argument>
)</argument_list></macro>
<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>scheme_handler</argument>,
<argument>(request_rec *r, proxy_worker *worker,
proxy_server_conf *conf,
char *url, const char *proxyhost,
apr_port_t proxyport)</argument>,<argument>(r,worker,conf,
url,proxyhost,proxyport)</argument>,<argument>DECLINED</argument>)</argument_list></macro>
<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>canon_handler</argument>,
<argument>(request_rec *r, char *url)</argument>,<argument>(r,
url)</argument>,<argument>DECLINED</argument>)</argument_list></macro>
<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>pre_request</argument>, <argument>(
proxy_worker **worker,
proxy_balancer **balancer,
request_rec *r,
proxy_server_conf *conf,
char **url)</argument>,<argument>(worker,balancer,
r,conf,url)</argument>,<argument>DECLINED</argument>)</argument_list></macro>
<macro><name>APR_IMPLEMENT_EXTERNAL_HOOK_RUN_FIRST</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>post_request</argument>,
<argument>(proxy_worker *worker,
proxy_balancer *balancer,
request_rec *r,
proxy_server_conf *conf)</argument>,<argument>(worker,
balancer,r,conf)</argument>,<argument>DECLINED</argument>)</argument_list></macro>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>fixups</argument>,
<argument>(request_rec *r)</argument>, <argument>(r)</argument>,
<argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument>proxy</argument>, <argument>PROXY</argument>, <argument>int</argument>, <argument>request_status</argument>,
<argument>(int *status, request_rec *r)</argument>,
<argument>(status, r)</argument>,
<argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
</unit>
