<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/arch/netware/libprews.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netware.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;novsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>_NonAppStart</name>
<parameter_list>(
<param><decl><type><name>void</name> *</type><name>NLMHandle</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>errorScreen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmdLine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loadDirPath</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>uninitializedDataLength</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>NLMFileHandle</name></decl></param>,
<param><function_decl><type><name>int</name></type> (*<name>readRoutineP</name>)<parameter_list>( <param><decl><type><name>int</name></type> <name>conn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fileHandle</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>offset</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>nbytes</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>bytesRead</name></decl></param>, <param><decl><type><name>void</name> *</type><name>buffer</name></decl></param> )</parameter_list></function_decl></param>,
<param><decl><type><name>size_t</name></type> <name>customDataOffset</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>customDataSize</name></decl></param>,
<param><decl><type><name>int</name></type> <name>messageCount</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>messages</name></decl></param>
)</parameter_list> <block>{
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(cmdLine)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(loadDirPath)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(uninitializedDataLength)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(NLMFileHandle)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(readRoutineP)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(customDataOffset)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(customDataSize)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(messageCount)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(messages)</cpp:pragma>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>
<return>return <expr><call><name>WSAStartup</name><argument_list>(<argument><expr>(<name>WORD</name>) <call><name>MAKEWORD</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>wsaData</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return <expr>0</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>void</name></type> <name>_NonAppStop</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>USE_WINSOCK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<function><type><name>int</name></type> <name>_NonAppCheckUnload</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list> <block>{
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
