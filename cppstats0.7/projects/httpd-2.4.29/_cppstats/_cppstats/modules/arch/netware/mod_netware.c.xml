<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/modules/arch/netware/mod_netware.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cgi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>netware_module</name></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>file_type_handlers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>file_handler_mode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>extra_env_vars</name></decl>;</decl_stmt>
}</block></struct></type> <name>netware_dir_config</name>;</typedef>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_netware_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>netware_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>netware_dir_config</name>*) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>netware_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>file_type_handlers</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>file_handler_mode</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>extra_env_vars</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>new</name>-&gt;<name>file_type_handlers</name></name></expr></argument>, <argument><expr>"NLM"</expr></argument>, <argument><expr>"OS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_netware_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>netware_dir_config</name> *</type><name>base</name> <init>= <expr>(<name>netware_dir_config</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>netware_dir_config</name> *</type><name>add</name> <init>= <expr>(<name>netware_dir_config</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>netware_dir_config</name> *</type><name>new</name> <init>= <expr>(<name>netware_dir_config</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>netware_dir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>file_type_handlers</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>file_type_handlers</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>file_type_handlers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>file_handler_mode</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>file_handler_mode</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>file_handler_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>new</name>-&gt;<name>extra_env_vars</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>add</name>-&gt;<name>extra_env_vars</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>extra_env_vars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>new</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_extension_map</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>netware_dir_config</name> *</type><name>m</name></decl></param>,
<param><decl><type><name>char</name> *</type><name>CGIhdlr</name></decl></param>, <param><decl><type><name>char</name> *</type><name>ext</name></decl></param>, <param><decl><type><name>char</name> *</type><name>detach</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>ext</name> == '.'</expr>)</condition><then>
<expr_stmt><expr>++<name>ext</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>CGIhdlr</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>CGIhdlr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>len</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<if>if <condition>(<expr><name><name>CGIhdlr</name><index>[<expr><name>i</name></expr>]</index></name> == '\\'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>CGIhdlr</name><index>[<expr><name>i</name></expr>]</index></name> = '/'</expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></then></if>
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>file_type_handlers</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>CGIhdlr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>detach</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>file_handler_mode</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr>"y"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_cgi_build_command</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> ***</type><name>argv</name></decl></param>,
<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
<param><decl><type><name>cgi_exec_info_t</name> *</type><name>e_info</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cmd_only</name></decl>, *<decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_cmd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>netware_dir_config</name> *</type><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>d</name> = (<name>netware_dir_config</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
<argument><expr>&amp;<name>netware_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>e_info</name>-&gt;<name>process_cgi</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cmd</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>args</name><index>[<expr>0</expr>]</index></name> &amp;&amp; !<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>args</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>cmd_only</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>*<name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e_info</name>-&gt;<name>cmd_type</name></name> = <name>APR_PROGRAM</name></expr>;</expr_stmt>
<for>for (<init><expr><name>ptr</name> = <name>cmd_only</name></expr>;</init> <condition><expr>*<name>ptr</name> &amp;&amp; (*<name>ptr</name> != ' ')</expr>;</condition> <incr><expr><name>ptr</name>++</expr></incr>)<empty_stmt>;</empty_stmt></for>
<expr_stmt><expr>*<name>ptr</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>ext</name> = <call><name>strrchr</name><argument_list>(<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name>cmd_only</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>ext</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>ext</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>*<name>ext</name> == '.'</expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>ext</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>new_cmd</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>file_type_handlers</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>e_info</name>-&gt;<name>detached</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>new_cmd</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02135</expr></argument>)</argument_list></call>
"Could not find a command associated with the %s extension"</expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EBADF</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>stricmp</name><argument_list>(<argument><expr><name>new_cmd</name></expr></argument>, <argument><expr>"OS"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>cmd</name> = <call><name>apr_pstrcat</name> <argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>new_cmd</name></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr><name>cmd_only</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>d</name>-&gt;<name>file_handler_mode</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>e_info</name>-&gt;<name>addrspace</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr>*<name>cmd</name></expr></argument>, <argument><expr>(<name>char</name>***)<name>argv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>cmd</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>*<name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>netware_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_sys_privileges_handlers</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>OK</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_cgi_build_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>netware_pre_config</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>netware_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE23</name><argument_list>(<argument><expr>"CGIMapExtension"</expr></argument>, <argument><expr><name>set_extension_map</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
<argument><expr>"Full path to the CGI NLM module followed by a file extension. If the "
"first parameter is set to \"OS\" then the following file extension is "
"treated as NLM. The optional parameter \"detach\" can be specified if "
"the NLM should be launched in its own address space."</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>netware</name></expr></argument>)</argument_list></call> = <block>{
<expr><name>STANDARD20_MODULE_STUFF</name></expr>,
<expr><name>create_netware_dir_config</name></expr>,
<expr><name>merge_netware_dir_configs</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>NULL</name></expr>,
<expr><name>netware_cmds</name></expr>,
<expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
