<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/support/rotatelogs.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_poll.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFSIZE</name></cpp:macro> <cpp:value>65536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERRMSGSZ</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_NEW</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_TIME</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_SIZE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_FORCE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>ROTATE_REASONS</name><index>[]</index></name> <init>= <expr><block>{
<expr>"None"</expr>,
<expr>"Open a new file"</expr>,
<expr>"Time interval expired"</expr>,
<expr>"Maximum size reached"</expr>,
<expr>"Forced rotation"</expr>,
<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>
<typedef>typedef <type>struct <name>rotate_config</name></type> <name>rotate_config_t</name>;</typedef>
<struct>struct <name>rotate_config</name> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tRotation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>utc_offset</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_localtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>use_strftime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>force_open</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>echo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szLogRoot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>truncate</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>linkfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>postrotate_prog</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<decl_stmt><decl><type><name>int</name></type> <name>create_empty</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>int</name></type> <name>num_files</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>rotate_status</name></type> <name>rotate_status_t</name>;</typedef>
<struct>struct <name>logfile</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>APR_PATH_MAX</name></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>rotate_status</name> <block>{
<decl_stmt><decl><type>struct <name>logfile</name></type> <name>current</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><name>ERRMSGSZ</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rotateReason</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tLogEnd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nMessCount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>fileNum</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>rotate_config_t</name></type> <name>config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>rotate_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>argv0</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>reason</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"%s\n"</expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<argument><expr>"Usage: %s [-v] [-l] [-L linkname] [-p prog] [-f] [-t] [-e] [-c] [-n number] &lt;logfile&gt; "
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
"Usage: %s [-v] [-l] [-L linkname] [-p prog] [-f] [-t] [-e] [-n number] &lt;logfile&gt; "
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"{&lt;rotation time in seconds&gt;|&lt;rotation size&gt;(B|K|M|G)} "
"[offset minutes from UTC]\n\n"</expr></argument>,
<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"Add this:\n\nTransferLog \"|%s.exe /some/where 86400\"\n\n"</expr></argument>,
<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"Add this:\n\nTransferLog \"|%s /some/where 86400\"\n\n"</expr></argument>,
<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"or \n\nTransferLog \"|%s /some/where 5M\"\n\n"</expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"to httpd.conf. By default, the generated name will be\n"
"&lt;logfile&gt;.nnnn where nnnn is the system time at which the log\n"
"nominally starts (N.B. if using a rotation time, the time will\n"
"always be a multiple of the rotation time, so you can synchronize\n"
"cron scripts with it). If &lt;logfile&gt; contains strftime conversion\n"
"specifications, those will be used instead. At the end of each\n"
"rotation time or when the file size is reached a new log is\n"
"started.\n"
"\n"
"Options:\n"
" -v Verbose operation. Messages are written to stderr.\n"
" -l Base rotation on local time instead of UTC.\n"
" -L path Create hard link from current log to specified path.\n"
" -p prog Run specified program after opening a new log file. See below.\n"
" -f Force opening of log on program start.\n"
" -t Truncate logfile instead of rotating, tail friendly.\n"
" -e Echo log to stdout for further processing.\n"
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
" -c Create log even if it is empty.\n"
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
"\n"
"The program is invoked as \"[prog] &lt;curfile&gt; [&lt;prevfile&gt;]\"\n"
"where &lt;curfile&gt; is the filename of the newly opened logfile, and\n"
"&lt;prevfile&gt;, if given, is the filename of the previously used logfile.\n"
"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_now</name><parameter_list>(<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tNow</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>utc_offset</name> <init>= <expr><name><name>config</name>-&gt;<name>utc_offset</name></name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>use_localtime</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>lt</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_lt</name><argument_list>(<argument><expr>&amp;<name>lt</name></expr></argument>, <argument><expr><name>tNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>utc_offset</name> = <name><name>lt</name>.<name>tm_gmtoff</name></name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name>int</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name>tNow</name></expr></argument>)</argument_list></call> + <name>utc_offset</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>close_logfile</name><parameter_list>(<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>, <param><decl><type>struct <name>logfile</name> *</type><name>logfile</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>verbose</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Closing file %s\n"</expr></argument>, <argument><expr><name><name>logfile</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name><name>logfile</name>-&gt;<name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>logfile</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpConfig</name> <parameter_list>(<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation time interval: %12d\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>tRotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation size interval: %12d\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>sRotation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation time UTC offset: %12d\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>utc_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation based on localtime: %12s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>use_localtime</name></name> ? "yes" : "no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation file date pattern: %12s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>use_strftime</name></name> ? "yes" : "no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation file forced open: %12s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>force_open</name></name> ? "yes" : "no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation verbose: %12s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>verbose</name></name> ? "yes" : "no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation create empty logs: %12s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>create_empty</name></name> ? "yes" : "no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Rotation file name: %21s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>szLogRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Post-rotation prog: %21s\n"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>postrotate_prog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkRotate</name><parameter_list>(<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>, <param><decl><type><name>rotate_status_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>status</name>-&gt;<name>rotateReason</name></name> = <name>ROTATE_NEW</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>config</name>-&gt;<name>sRotation</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>current_size</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>current_size</name> = <name><name>finfo</name>.<name>size</name></name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>current_size</name> &gt; <name><name>config</name>-&gt;<name>sRotation</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>status</name>-&gt;<name>rotateReason</name></name> = <name>ROTATE_SIZE</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>config</name>-&gt;<name>tRotation</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>get_now</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call> &gt;= <name><name>status</name>-&gt;<name>tLogEnd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>status</name>-&gt;<name>rotateReason</name></name> = <name>ROTATE_TIME</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name><name>config</name>-&gt;<name>tRotation</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>get_now</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call> &gt;= <name><name>status</name>-&gt;<name>tLogEnd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>status</name>-&gt;<name>rotateReason</name></name> = <name>ROTATE_TIME</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"No rotation time or size specified\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>rotateReason</name></name> != <name>ROTATE_NONE</name> &amp;&amp; <name><name>config</name>-&gt;<name>verbose</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"File rotation needed, reason: %s\n"</expr></argument>, <argument><expr><name><name>ROTATE_REASONS</name><index>[<expr><name><name>status</name>-&gt;<name>rotateReason</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>post_rotate</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type>struct <name>logfile</name> *</type><name>newlog</name></decl></param>,
<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>, <param><decl><type><name>rotate_status_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_procattr_t</name> *</type><name>pattr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>argv</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_proc_t</name></type> <name>proc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>linkfile</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_remove</name><argument_list>(<argument><expr><name><name>config</name>-&gt;<name>linkfile</name></name></expr></argument>, <argument><expr><name><name>newlog</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>verbose</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr>"Linking %s to %s\n"</expr></argument>, <argument><expr><name><name>newlog</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>linkfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_link</name><argument_list>(<argument><expr><name><name>newlog</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>linkfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr>sizeof <name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error linking file %s to %s (%s)\n"</expr></argument>,
<argument><expr><name><name>newlog</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>linkfile</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr>!<name><name>config</name>-&gt;<name>postrotate_prog</name></name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<while>while <condition>(<expr><call><name>apr_proc_wait_all_procs</name><argument_list>(<argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_NOWAIT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call> == <name>APR_CHILD_DONE</name></expr>)</condition>
<empty_stmt>;</empty_stmt></while>
<if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_procattr_create</name><argument_list>(<argument><expr>&amp;<name>pattr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"post_rotate: apr_procattr_create failed for '%s': %s\n"</expr></argument>,
<argument><expr><name><name>config</name>-&gt;<name>postrotate_prog</name></name></expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_procattr_error_check_set</name><argument_list>(<argument><expr><name>pattr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
<expr_stmt><expr><name>rv</name> = <call><name>apr_procattr_cmdtype_set</name><argument_list>(<argument><expr><name>pattr</name></expr></argument>, <argument><expr><name>APR_PROGRAM_ENV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
<argument><expr>"post_rotate: could not set up process attributes for '%s': %s\n"</expr></argument>,
<argument><expr><name><name>config</name>-&gt;<name>postrotate_prog</name></name></expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name><name>config</name>-&gt;<name>postrotate_prog</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <name><name>newlog</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name> = <name><name>status</name>-&gt;<name>current</name>.<name>name</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>verbose</name></name></expr>)</condition><then>
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Calling post-rotate program: %s\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_create</name><argument_list>(<argument><expr>&amp;<name>proc</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pattr</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not spawn post-rotate process '%s': %s\n"</expr></argument>,
<argument><expr><name><name>config</name>-&gt;<name>postrotate_prog</name></name></expr></argument>,
<argument><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>truncate_and_write_error</name><parameter_list>(<param><decl><type><name>rotate_status_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>buflen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>errbuf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_trunc</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error truncating the file %s\n"</expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>current</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>errbuf</name></name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Error writing error (%s) to the file %s\n"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>errbuf</name></name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>current</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>doRotate</name><parameter_list>(<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>, <param><decl><type><name>rotate_status_t</name> *</type><name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><call><name>get_now</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tLogStart</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>logfile</name></type> <name>newlog</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thisLogNum</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>status</name>-&gt;<name>rotateReason</name></name> = <name>ROTATE_NONE</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>tRotation</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>tLogEnd</name></decl>;</decl_stmt>
<expr_stmt><expr><name>tLogStart</name> = (<name>now</name> / <name><name>config</name>-&gt;<name>tRotation</name></name>) * <name><name>config</name>-&gt;<name>tRotation</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name>tLogEnd</name> = <name>tLogStart</name> + <name><name>config</name>-&gt;<name>tRotation</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>tLogStart</name> &lt; <name><name>status</name>-&gt;<name>tLogEnd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>tLogStart</name> = <name>now</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>status</name>-&gt;<name>tLogEnd</name></name> = <name>tLogEnd</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>tLogStart</name> = <name>now</name></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>use_strftime</name></name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>tNow</name> <init>= <expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>tLogStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_exp_t</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>rs</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_time_exp_gmt</name><argument_list>(<argument><expr>&amp;<name>e</name></expr></argument>, <argument><expr><name>tNow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_strftime</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr>&amp;<name>rs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>szLogRoot</name></name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>truncate</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>szLogRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>config</name>-&gt;<name>num_files</name></name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>fileNum</name></name> == -1 || <name><name>status</name>-&gt;<name>fileNum</name></name> == (<name><name>config</name>-&gt;<name>num_files</name></name> - 1)</expr>)</condition><then> <block>{
<expr_stmt><expr><name>thisLogNum</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>szLogRoot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>thisLogNum</name> = <name><name>status</name>-&gt;<name>fileNum</name></name> + 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s.%d"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>szLogRoot</name></name></expr></argument>, <argument><expr><name>thisLogNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>"%s.%010d"</expr></argument>, <argument><expr><name><name>config</name>-&gt;<name>szLogRoot</name></name></expr></argument>,
<argument><expr><name>tLogStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></else></if>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>newlog</name>.<name>pool</name></name></expr></argument>, <argument><expr><name><name>status</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>verbose</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Opening file %s\n"</expr></argument>, <argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name><name>newlog</name>.<name>fd</name></name></expr></argument>, <argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr><name>APR_WRITE</name> | <name>APR_CREATE</name> | <name>APR_APPEND</name>
| (<name><name>config</name>-&gt;<name>truncate</name></name> || (<name><name>config</name>-&gt;<name>num_files</name></name> &gt; 0 &amp;&amp; <name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name>) ? <name>APR_TRUNCATE</name> : 0)</expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>newlog</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>post_rotate</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>newlog</name></expr></argument>, <argument><expr><name>config</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name>-&gt;<name>fileNum</name></name> = <name>thisLogNum</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>close_logfile</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr>&amp;<name><name>status</name>-&gt;<name>current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>status</name>-&gt;<name>current</name></name> = <name>newlog</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>error</name><index>[<expr>120</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr>sizeof <name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>-&gt;<name>current</name>.<name>fd</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Could not open log file '%s' (%s)\n"</expr></argument>, <argument><expr><name><name>newlog</name>.<name>name</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>newlog</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>status</name>-&gt;<name>errbuf</name></name></expr></argument>, <argument><expr>sizeof <name><name>status</name>-&gt;<name>errbuf</name></name></expr></argument>,
<argument><expr>"Resetting log file due to error opening "
"new log file, %10d messages lost: %-25.25s\n"</expr></argument>,
<argument><expr><name><name>status</name>-&gt;<name>nMessCount</name></name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>truncate_and_write_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>status</name>-&gt;<name>nMessCount</name></name> = 0</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_time_or_size</name><parameter_list>(<param><decl><type><name>rotate_config_t</name> *</type><name>config</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>, <param><decl><type><name>int</name></type> <name>last</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>mult</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>ptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'B'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mult</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>ptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'K'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mult</name> = 1024</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>ptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'M'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mult</name> = 1024 * 1024</expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr>(<name>ptr</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>'G'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>mult</name> = 1024 * 1024 * 1024</expr>;</expr_stmt>
}</block></then></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>ptr</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>sRotation</name></name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr>"Rotation size parameter allowed only once"</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>*(<name>ptr</name>+1) == '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>config</name>-&gt;<name>sRotation</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> * <name>mult</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>sRotation</name></name> == 0</expr>)</condition><then> <block>{
<return>return <expr>"Invalid rotation size parameter"</expr>;</return>
}</block></then></if>
}</block></then> <else>else <if>if <condition>(<expr>(<name><name>config</name>-&gt;<name>sRotation</name></name> &gt; 0 || <name><name>config</name>-&gt;<name>tRotation</name></name> &gt; 0) &amp;&amp; <name>last</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>use_localtime</name></name></expr>)</condition><then> <block>{
<return>return <expr>"UTC offset parameter is not valid with -l"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>config</name>-&gt;<name>utc_offset</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call> * 60</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>tRotation</name></name> &gt; 0</expr>)</condition><then> <block>{
<return>return <expr>"Rotation time parameter allowed only once"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>config</name>-&gt;<name>tRotation</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>config</name>-&gt;<name>tRotation</name></name> &lt;= 0</expr>)</condition><then> <block>{
<return>return <expr>"Invalid rotation time parameter"</expr>;</return>
}</block></then></if>
}</block></else></if></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUFSIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nRead</name></decl>, <decl><type ref="prev"/><name>nWrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f_stdin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>f_stdout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_pollfd_t</name></type> <name>pollfd</name> <init>= <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>pollret</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>polltimeout</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>apr_app_initialize</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>sizeof <name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>sizeof <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name>.<name>rotateReason</name></name> = <name>ROTATE_NONE</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>status</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr><name><name>status</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<while>while <condition>(<expr>(<name>rv</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr>"lL:p:ftvecn:"</expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<while>while <condition>(<expr>(<name>rv</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr>"lL:p:ftven:"</expr></argument>, <argument><expr>&amp;<name>c</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{
<case>case <expr>'l'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>use_localtime</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'L'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>linkfile</name></name> = <name>opt_arg</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>postrotate_prog</name></name> = <name>opt_arg</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>apr_signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>force_open</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'t'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>truncate</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'v'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>verbose</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'e'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>echo</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
</case><case>case <expr>'c'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>create_empty</name></name> = 1</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><case>case <expr>'n'</expr>:
<expr_stmt><expr><name><name>config</name>.<name>num_files</name></name> = <call><name>atoi</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>status</name>.<name>fileNum</name></name> = -1</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name>rv</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>(<name>argc</name> - <name><name>opt</name>-&gt;<name>ind</name></name> &lt; 2) || (<name>argc</name> - <name><name>opt</name>-&gt;<name>ind</name></name> &gt; 4)</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>"Incorrect number of arguments"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>config</name>.<name>szLogRoot</name></name> = <name><name>argv</name><index>[<expr><name><name>opt</name>-&gt;<name>ind</name></name>++</expr>]</index></name></expr>;</expr_stmt>
<for>for(<init>;</init> <condition><expr><name><name>opt</name>-&gt;<name>ind</name></name> &lt; <name>argc</name></expr>;</condition> <incr><expr><name><name>opt</name>-&gt;<name>ind</name></name>++</expr></incr>) <block>{
<if>if <condition>(<expr>(<name>err</name> = <call><name>get_time_or_size</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name><name>opt</name>-&gt;<name>ind</name></name></expr>]</index></name></expr></argument>,
<argument><expr><name><name>opt</name>-&gt;<name>ind</name></name> &lt; <name>argc</name> - 1 ? 0 : 1</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><name><name>config</name>.<name>use_strftime</name></name> = (<call><name>strchr</name><argument_list>(<argument><expr><name><name>config</name>.<name>szLogRoot</name></name></expr></argument>, <argument><expr>'%'</expr></argument>)</argument_list></call> != <name>NULL</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>config</name>.<name>use_strftime</name></name> &amp;&amp; <name><name>config</name>.<name>num_files</name></name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Cannot use -n with %% in filename\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>status</name>.<name>fileNum</name></name> == -1 &amp;&amp; <name><name>config</name>.<name>num_files</name></name> &lt; 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Invalid -n argument\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_file_open_stdin</name><argument_list>(<argument><expr>&amp;<name>f_stdin</name></expr></argument>, <argument><expr><name><name>status</name>.<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unable to open stdin\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>f_stdout</name></expr></argument>, <argument><expr><name><name>status</name>.<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unable to open stdout\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>config</name>.<name>verbose</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>dumpConfig</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>config</name>.<name>create_empty</name></name> &amp;&amp; <name><name>config</name>.<name>tRotation</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>pollfd</name>.<name>p</name></name> = <name><name>status</name>.<name>pool</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc_type</name></name> = <name>APR_POLL_FILE</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>reqevents</name></name> = <name>APR_POLLIN</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>pollfd</name>.<name>desc</name>.<name>f</name></name> = <name>f_stdin</name></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>config</name>.<name>force_open</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>doRotate</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init>;</init><condition>;</condition><incr/>) <block>{
<expr_stmt><expr><name>nRead</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILES_AS_SOCKETS</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>config</name>.<name>create_empty</name></name> &amp;&amp; <name><name>config</name>.<name>tRotation</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>polltimeout</name> = <name><name>status</name>.<name>tLogEnd</name></name> ? <name><name>status</name>.<name>tLogEnd</name></name> - <call><name>get_now</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>)</argument_list></call> : <name><name>config</name>.<name>tRotation</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>polltimeout</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>pollret</name> = <name>APR_TIMEUP</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>pollret</name> = <call><name>apr_poll</name><argument_list>(<argument><expr>&amp;<name>pollfd</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>pollret</name></expr></argument>, <argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>polltimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
}</block></then></if>
<if>if <condition>(<expr><name>pollret</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>f_stdin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
}</block></then> <else>else <if>if <condition>(<expr><name>pollret</name> == <name>APR_TIMEUP</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>buf</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>nRead</name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unable to poll stdin\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>f_stdin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>checkRotate</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>status</name>.<name>rotateReason</name></name> != <name>ROTATE_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>doRotate</name><argument_list>(<argument><expr>&amp;<name>config</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>nWrite</name> = <name>nRead</name></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_write_full</name><argument_list>(<argument><expr><name><name>status</name>.<name>current</name>.<name>fd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nWrite</name></expr></argument>, <argument><expr>&amp;<name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>nWrite</name> != <name>nRead</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>cur_offset</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cur_offset</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>apr_file_seek</name><argument_list>(<argument><expr><name><name>status</name>.<name>current</name>.<name>fd</name></name></expr></argument>, <argument><expr><name>APR_CUR</name></expr></argument>, <argument><expr>&amp;<name>cur_offset</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cur_offset</name> = -1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>status</name>.<name>nMessCount</name></name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>status</name>.<name>errbuf</name></name></expr></argument>, <argument><expr>sizeof <name><name>status</name>.<name>errbuf</name></name></expr></argument>,
<argument><expr>"Error %d writing to log file at offset %" <name>APR_OFF_T_FMT</name> ". "
"%10d messages lost (%pm)\n"</expr></argument>,
<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>cur_offset</name></expr></argument>, <argument><expr><name><name>status</name>.<name>nMessCount</name></name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>truncate_and_write_error</name><argument_list>(<argument><expr>&amp;<name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>status</name>.<name>nMessCount</name></name>++</expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name><name>config</name>.<name>echo</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>apr_file_write_full</name><argument_list>(<argument><expr><name>f_stdout</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>, <argument><expr>&amp;<name>nWrite</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"Unable to write to stdout\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block></for>
<return>return <expr>0</expr>;</return>
}</block></while></block></function>
</unit>
