<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/support/passwd_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"passwd_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDIO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_sha1.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_CRYPT_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;crypt.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STRING_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IO_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name></cpp:macro> <cpp:value>_write</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>errfile</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>abort_on_oom</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rc</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name> <init>= <expr>"Error: out of memory\n"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>written</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<do>do <block>{
<expr_stmt><expr><name>written</name> = <call><name>write</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>written</name> == <name>count</name></expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr><name>written</name> &gt; 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> += <name>written</name></expr>;</expr_stmt>
<expr_stmt><expr><name>count</name> -= <name>written</name></expr>;</expr_stmt>
}</block></then></if>
}</block> while <condition>(<expr><name>written</name> &gt;= 0 || <name>errno</name> == <name>EINTR</name></expr>)</condition>;</do>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_salt</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>errstr</name></decl></param>,
<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>rnd</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>itoa64</name><index>[]</index></name> <init>=
<expr>"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>val</name> <init>= <expr>0</expr></init>, <name>bits</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>n</name> = (<name>size</name> * 6 + 7)/8</expr>;</expr_stmt>
<if>if <condition>(<expr><name>n</name> &gt; <sizeof>sizeof<argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"generate_salt(): BUG: Buffer too small"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>errstr</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"Unable to generate random bytes: %pm"</expr></argument>,
<argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR_RANDOM</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>n</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr><name>size</name> &gt; 0</expr>)</condition> <block>{
<if>if <condition>(<expr><name>bits</name> &lt; 6</expr>)</condition><then> <block>{
<expr_stmt><expr><name>val</name> |= (<name><name>rnd</name><index>[<expr><name>n</name>++</expr>]</index></name> &lt;&lt; <name>bits</name>)</expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> += 8</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>s</name>++ = <name><name>itoa64</name><index>[<expr><name>val</name> &amp; 0x3f</expr>]</index></name></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name>--</expr>;</expr_stmt>
<expr_stmt><expr><name>val</name> &gt;&gt;= 6</expr>;</expr_stmt>
<expr_stmt><expr><name>bits</name> -= 6</expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr>*<name>s</name> = '\0'</expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>putline</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>f</name> == <name>NULL</name></expr>)</condition><then>
<return>return;</return></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_puts</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"Error writing temp file: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>ERR_FILEPERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>get_password</name><parameter_list>(<param><decl><type>struct <name>passwd_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>MAX_STRING_LEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>passwd_src</name></name> == <name>PW_STDIN</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>file_stdin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>nread</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_file_open_stdin</name><argument_list>(<argument><expr>&amp;<name>file_stdin</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = "Unable to read from stdin."</expr>;</expr_stmt>
<return>return <expr><name>ERR_GENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_file_read_full</name><argument_list>(<argument><expr><name>file_stdin</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>,
<argument><expr>&amp;<name>nread</name></expr></argument>)</argument_list></call> != <name>APR_EOF</name>
|| <name>nread</name> == <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
<goto>goto <name>err_too_long</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nread</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>nread</name> &gt;= 1 &amp;&amp; <name><name>buf</name><index>[<expr><name>nread</name>-1</expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nread</name>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr><name>nread</name> &gt;= 2 &amp;&amp; <name><name>buf</name><index>[<expr><name>nread</name>-2</expr>]</index></name> == '\r'</expr>)</condition><then>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>nread</name>-2</expr>]</index></name> = '\0'</expr>;</expr_stmt></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>file_stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>passwd</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>passwd_src</name></name> == <name>PW_PROMPT_VERIFY</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bufsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_password_get</name><argument_list>(<argument><expr>"Enter password: "</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bufsize</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>err_too_long</name>;</goto></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>passwd</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bufsize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>apr_password_get</name><argument_list>(<argument><expr>"New password: "</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bufsize</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
<goto>goto <name>err_too_long</name>;</goto></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>passwd</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>bufsize</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_password_get</name><argument_list>(<argument><expr>"Re-type new password: "</expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passwd</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = "password verification error"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passwd</name></name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passwd</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR_PWMISMATCH</name></expr>;</return>
}</block></then></if>
}</block></else></if></else></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
<label><name>err_too_long</name>:</label>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"password too long (&gt;%" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ERR_OVERFLOW</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>mkhash</name><parameter_list>(<param><decl><type>struct <name>passwd_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>pw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>salt</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> *</type><name>cbuf</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cost</name></name> != 0 &amp;&amp; <name><name>ctx</name>-&gt;<name>alg</name></name> != <name>ALG_BCRYPT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>,
<argument><expr>"Warning: Ignoring -C argument for this algorithm." <name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>passwd</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>ret</name> = <call><name>get_password</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
<return>return <expr><name>ret</name></expr>;</return></then></if>
}</block></then></if>
<expr_stmt><expr><name>pw</name> = <name><name>ctx</name>-&gt;<name>passwd</name></name></expr>;</expr_stmt>
<switch>switch <condition>(<expr><name><name>ctx</name>-&gt;<name>alg</name></name></expr>)</condition> <block>{
<case>case <expr><name>ALG_APSHA</name></expr>:
<expr_stmt><expr><call><name>apr_sha1_base64</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>ALG_APMD5</name></expr>:
<expr_stmt><expr><name>ret</name> = <call><name>generate_salt</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>errstr</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_md5_encode</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>,
<argument><expr>"could not encode password: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <name>ERR_GENERAL</name></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
</case><case>case <expr><name>ALG_PLAIN</name></expr>:
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name>pw</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
</case><case>case <expr><name>ALG_CRYPT</name></expr>:
<expr_stmt><expr><name>ret</name> = <call><name>generate_salt</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>errstr</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><name>cbuf</name> = <call><name>crypt</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>cbuf</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"crypt() failed: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <name>ERR_PWMISMATCH</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name>cbuf</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call> &gt; 8</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>truncpw</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name><name>truncpw</name><index>[<expr>8</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><call><name>crypt</name><argument_list>(<argument><expr><name>truncpw</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"Warning: Password truncated to 8 "
"characters by CRYPT algorithm." <name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>truncpw</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BCRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
</case><case>case <expr><name>ALG_BCRYPT</name></expr>:
<expr_stmt><expr><name>rv</name> = <call><name>apr_generate_random_bytes</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name>*)<name>salt</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unable to generate random "
"bytes: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <name>ERR_RANDOM</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>cost</name></name> == 0</expr>)</condition><then>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>cost</name></name> = <name>BCRYPT_DEFAULT_COST</name></expr>;</expr_stmt></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_bcrypt_encode</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>cost</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name>*)<name>salt</name></expr></argument>, <argument><expr>16</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>out</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>out_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Unable to encode with "
"bcrypt: %pm"</expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ret</name> = <name>ERR_PWMISMATCH</name></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"mkhash(): BUG: invalid algorithm %d"</expr></argument>,
<argument><expr><name><name>ctx</name>-&gt;<name>alg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pw</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>parse_common_options</name><parameter_list>(<param><decl><type>struct <name>passwd_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>char</name></type> <name>opt</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl></param>)</parameter_list> <block>{
<switch>switch <condition>(<expr><name>opt</name></expr>)</condition> <block>{
<case>case <expr>'b'</expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>passwd_src</name></name> = <name>PW_ARG</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>passwd_src</name></name> = <name>PW_STDIN</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'m'</expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>alg</name></name> = <name>ALG_APMD5</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'s'</expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>alg</name></name> = <name>ALG_APSHA</name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'p'</expr>:
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>alg</name></name> = <name>ALG_PLAIN</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>PLAIN_ALGO_SUPPORTED</name></expr></cpp:if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>,
<argument><expr>"Warning: storing passwords as plain text might just "
"not work on this platform." <name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr>'d'</expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>alg</name></name> = <name>ALG_CRYPT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>,
<argument><expr>"Warning: CRYPT algorithm not supported on this "
"platform." <name>NL</name>
"Automatically using MD5 format." <name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>alg</name></name> = <name>ALG_APMD5</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr>'B'</expr>:
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BCRYPT_ALGO_SUPPORTED</name></expr></cpp:if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>alg</name></name> = <name>ALG_BCRYPT</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = "BCRYPT algorithm not supported on this platform"</expr>;</expr_stmt>
<return>return <expr><name>ERR_ALG_NOT_SUPP</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<break>break;</break>
</case><case>case <expr>'C'</expr>: <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>num</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>opt_arg</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>endptr</name> != '\0' || <name>num</name> &lt;= 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>errstr</name></name> = "argument to -C must be a positive integer"</expr>;</expr_stmt>
<return>return <expr><name>ERR_SYNTAX</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>ctx</name>-&gt;<name>cost</name></name> = <name>num</name></expr>;</expr_stmt>
<break>break;</break>
}</block>
</case><default>default:
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>,
<argument><expr>"parse_common_options(): BUG: invalid option %c"</expr></argument>,
<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
