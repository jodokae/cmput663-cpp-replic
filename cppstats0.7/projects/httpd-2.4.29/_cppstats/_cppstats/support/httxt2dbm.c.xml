<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/support/httxt2dbm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbm.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>input</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>output</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>format</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>shortname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_file_t</name> *</type><name>errfile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>verbose</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>REWRITE_MAX_TXT_MAP_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REWRITE_MAX_TXT_MAP_LINE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVAIL</name></cpp:macro> <cpp:value>"available"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNAVAIL</name></cpp:macro> <cpp:value>"unavailable"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>have_sdbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>have_gdbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>have_ndbm</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>have_db</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_HAVE_SDBM</name></expr></cpp:if>
<expr_stmt><expr><name>have_sdbm</name> = <name>AVAIL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>have_sdbm</name> = <name>UNAVAIL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_HAVE_GDBM</name></expr></cpp:if>
<expr_stmt><expr><name>have_gdbm</name> = <name>AVAIL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>have_gdbm</name> = <name>UNAVAIL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_HAVE_NDBM</name></expr></cpp:if>
<expr_stmt><expr><name>have_ndbm</name> = <name>AVAIL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>have_ndbm</name> = <name>UNAVAIL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APU_HAVE_DB</name></expr></cpp:if>
<expr_stmt><expr><name>have_db</name> = <name>AVAIL</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>have_db</name> = <name>UNAVAIL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>,
<argument>"%s -- Program to Create DBM Files for use by RewriteMap" NL
"Usage: %s [-v] [-f format] -i SOURCE_TXT -o OUTPUT_DBM" NL
NL
"Options: " NL
" -v More verbose output" NL
NL
" -i Source Text File. If '-', use stdin." NL
NL
" -o Output DBM." NL
NL
" -f DBM Format. If not specified, will use the APR Default." NL
" GDBM for GDBM files (%s)" NL
" SDBM for SDBM files (%s)" NL
" DB for berkeley DB files (%s)" NL
" NDBM for NDBM files (%s)" NL
" default for the default DBM type" NL
NL</argument>,
<argument>shortname</argument>,
<argument>shortname</argument>,
<argument>have_gdbm</argument>,
<argument>have_sdbm</argument>,
<argument>have_db</argument>,
<argument>have_ndbm</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>to_dbm</name><parameter_list>(<param><decl><type><name>apr_dbm_t</name> *</type><name>dbm</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>fp</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>line</name><index>[<expr><name>REWRITE_MAX_TXT_MAP_LINE</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_datum_t</name></type> <name>dbmval</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name>*</type> <name>p</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_file_gets</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>c</name></decl>, *<decl><type ref="prev"/><name>value</name></decl>;</decl_stmt>
<if>if <condition>(<expr>*<name>line</name> == '#' || <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>line</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>c</name> = <name>line</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>c</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>c</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>c</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dptr</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>c</name> - <name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmkey</name>.<name>dsize</name></name> = (<name>c</name> - <name>line</name>)</expr>;</expr_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>c</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!*<name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>value</name> = <name>c</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>c</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr>++<name>c</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name><name>dbmval</name>.<name>dptr</name></name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>c</name> - <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>dbmval</name>.<name>dsize</name></name> = (<name>c</name> - <name>value</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>" '%s' -&gt; '%s'" <name>NL</name></expr></argument>,
<argument><expr><name><name>dbmkey</name>.<name>dptr</name></name></expr></argument>, <argument><expr><name><name>dbmval</name>.<name>dptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_store</name><argument_list>(<argument><expr><name>dbm</name></expr></argument>, <argument><expr><name>dbmkey</name></expr></argument>, <argument><expr><name>dbmval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
}</block></while>
<return>return <expr><name>rv</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *<specifier>const</specifier></type> <name><name>argv</name><index>[]</index></name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_getopt_t</name> *</type><name>opt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>infile</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_dbm_t</name> *</type><name>outdbm</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_app_initialize</name><argument_list>(<argument><expr>&amp;<name>argc</name></expr></argument>, <argument><expr>&amp;<name>argv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>atexit</name><argument_list>(<argument><expr><name>apr_terminate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>verbose</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>format</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>input</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>output</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>argc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>shortname</name> = <call><name>apr_filepath_name_get</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>shortname</name> = "httxt2dbm"</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_file_open_stderr</name><argument_list>(<argument><expr>&amp;<name>errfile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_getopt_init</name><argument_list>(<argument><expr>&amp;<name>opt</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: apr_getopt_init failed." NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>argc</name> &lt;= 1</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<while>while <condition>(<expr>(<name>rv</name> = <call><name>apr_getopt</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr>"vf::i::o::"</expr></argument>, <argument><expr>&amp;<name>ch</name></expr></argument>, <argument><expr>&amp;<name>opt_arg</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition> <block>{
<switch>switch <condition>(<expr><name>ch</name></expr>)</condition> <block>{
<case>case <expr>'v'</expr>:
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: -v can only be passed once" NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>verbose</name> = 1</expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'f'</expr>:
<if>if <condition>(<expr><name>format</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: -f can only be passed once" NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>format</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'i'</expr>:
<if>if <condition>(<expr><name>input</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: -i can only be passed once" NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>input</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr>'o'</expr>:
<if>if <condition>(<expr><name>output</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: -o can only be passed once" NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>output</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>opt_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
}</block></while>
<if>if <condition>(<expr><name>rv</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: Parsing Arguments Failed" NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>input</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: No input file specified." NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>output</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>, <argument>"Error: No output DBM specified." NL NL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>format</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>format</name> = "default"</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"DBM Format: %s" <name>NL</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr>"-"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open_stdin</name><argument_list>(<argument><expr>&amp;<name>infile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>infile</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>APR_READ</name>|<name>APR_BUFFERED</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>,
<argument>"Error: Cannot open input file '%s': (%d) %pm" NL NL</argument>,
<argument>input</argument>, <argument>rv</argument>, <argument>&amp;rv</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"Input File: %s" <name>NL</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_dbm_open_ex</name><argument_list>(<argument><expr>&amp;<name>outdbm</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>APR_DBM_RWCREATE</name></expr></argument>,
<argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_ENOTIMPL</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>,
<argument>"Error: The requested DBM Format '%s' is not available." NL NL</argument>,
<argument>format</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>,
<argument>"Error: Cannot open output DBM '%s': (%d) %pm" NL NL</argument>,
<argument>output</argument>, <argument>rv</argument>, <argument>&amp;rv</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"DBM File: %s" <name>NL</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>to_dbm</name><argument_list>(<argument><expr><name>outdbm</name></expr></argument>, <argument><expr><name>infile</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<macro><name>apr_file_printf</name><argument_list>(<argument>errfile</argument>,
<argument>"Error: Converting to DBM: (%d) %pm" NL NL</argument>,
<argument>rv</argument>, <argument>&amp;rv</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_dbm_close</name><argument_list>(<argument><expr><name>outdbm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>verbose</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>errfile</name></expr></argument>, <argument><expr>"Conversion Complete." <name>NL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
