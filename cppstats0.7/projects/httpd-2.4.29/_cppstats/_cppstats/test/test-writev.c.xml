<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/test/test-writev.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/uio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>INADDR_NONE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INADDR_NONE</name></cpp:macro> <cpp:value>(-1ul)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>void</name></type> <name>main</name><parameter_list>( <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param> )</parameter_list> <block>{
<decl_stmt><decl><type>struct <name>sockaddr_in</name></type> <name>server_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>iovec</name></type> <name><name>vector</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>just_say_no</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
<if>if<condition>( <expr><name>argc</name> != 3</expr> )</condition><then> <block>{
<label><name>usage</name>:</label>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr>"usage: test-writev a.b.c.d port#\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr>1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>server_addr</name>.<name>sin_family</name></name> = <name>AF_INET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>server_addr</name>.<name>sin_addr</name>.<name>s_addr</name></name> = <call><name>inet_addr</name><argument_list>( <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if<condition>( <expr><name><name>server_addr</name>.<name>sin_addr</name>.<name>s_addr</name></name> == <name>INADDR_NONE</name></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stderr</name></expr></argument>, <argument><expr>"bogus address\n"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>usage</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name><name>server_addr</name>.<name>sin_port</name></name> = <call><name>htons</name><argument_list>( <argument><expr><call><name>atoi</name><argument_list>( <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>s</name> = <call><name>socket</name><argument_list>( <argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr>0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<if>if<condition>( <expr><name>s</name> &lt; 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"socket"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if<condition>( <expr><call><name>connect</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr>(struct <name>sockaddr</name> *)&amp;<name>server_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>server_addr</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call>
!= 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr>"connect"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<if>if<condition>( <expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr>(<name>char</name>*)&amp;<name>just_say_no</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>just_say_no</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> != 0</expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>perror</name><argument_list>( <argument><expr>"TCP_NODELAY"</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for( <init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <sizeof>sizeof<argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></sizeof></expr>;</condition> <incr><expr>++<name>i</name></expr></incr> ) <block>{
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> = 'x'</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name><name>vector</name><index>[<expr>0</expr>]</index></name>.<name>iov_base</name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr>0</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr>1</expr>]</index></name>.<name>iov_base</name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr>1</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr>2</expr>]</index></name>.<name>iov_base</name> = <name>buf</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>vector</name><index>[<expr>2</expr>]</index></name>.<name>iov_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<expr_stmt><expr><name>i</name> = <call><name>writev</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr>&amp;<name><name>vector</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>3</expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>fprintf</name><argument_list>( <argument><expr><name>stdout</name></expr></argument>, <argument><expr>"i=%d, errno=%d\n"</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>errno</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
