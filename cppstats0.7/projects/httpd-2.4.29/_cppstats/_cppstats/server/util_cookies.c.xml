<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/server/util_cookies.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_cookies.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_PREFIX</name></cpp:macro> <cpp:value>"ap_cookie: "</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_write</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>, <argument>const char *val</argument>,
<argument>const char *attrs</argument>, <argument>long maxage</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rfc2109</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buffer</name> = ""</expr>;</expr_stmt>
<if>if <condition>(<expr><name>maxage</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buffer</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Max-Age="</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>maxage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rfc2109</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>attrs</name> &amp;&amp; *<name>attrs</name> ? <name>attrs</name> : <name>DEFAULT_ATTRS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><macro><name>APLOGNO</name><argument_list>(<argument>00007</argument>)</argument_list></macro> <name>LOG_PREFIX</name>
"user '%s' set cookie: '%s'"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>rfc2109</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>maxage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>t</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>apr_table_t</name> *</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SET_COOKIE</name></expr></argument>, <argument><expr><name>rfc2109</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_write2</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name2</argument>, <argument>const char *val</argument>,
<argument>const char *attrs2</argument>, <argument>long maxage</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rfc2965</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>buffer</name> = ""</expr>;</expr_stmt>
<if>if <condition>(<expr><name>maxage</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>buffer</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Max-Age="</expr></argument>, <argument><expr><call><name>apr_ltoa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>maxage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rfc2965</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name2</name></expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
<argument><expr><name>attrs2</name> &amp;&amp; *<name>attrs2</name> ? <name>attrs2</name> : <name>DEFAULT_ATTRS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><macro><name>APLOGNO</name><argument_list>(<argument>00008</argument>)</argument_list></macro> <name>LOG_PREFIX</name>
"user '%s' set cookie2: '%s'"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>rfc2965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>maxage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>t</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>apr_table_t</name> *</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SET_COOKIE2</name></expr></argument>, <argument><expr><name>rfc2965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_remove</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>, <argument>const char *attrs</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rfc2109</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>"=;Max-Age=0;"</expr></argument>,
<argument><expr><name>attrs</name> ? <name>attrs</name> : <name>CLEAR_ATTRS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><macro><name>APLOGNO</name><argument_list>(<argument>00009</argument>)</argument_list></macro> <name>LOG_PREFIX</name>
"user '%s' removed cookie: '%s'"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>rfc2109</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>t</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>apr_table_t</name> *</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SET_COOKIE</name></expr></argument>, <argument><expr><name>rfc2109</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_remove2</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name2</argument>, <argument>const char *attrs2</argument>, <argument>...</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>va_list</name></type> <name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>rfc2965</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>name2</name></expr></argument>, <argument><expr>"=;Max-Age=0;"</expr></argument>,
<argument><expr><name>attrs2</name> ? <name>attrs2</name> : <name>CLEAR_ATTRS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><macro><name>APLOGNO</name><argument_list>(<argument>00010</argument>)</argument_list></macro> <name>LOG_PREFIX</name>
"user '%s' removed cookie2: '%s'"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name>rfc2965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>attrs2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>(<name>t</name> = <call><name>va_arg</name><argument_list>(<argument><expr><name>vp</name></expr></argument>, <argument><expr><name>apr_table_t</name> *</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>SET_COOKIE2</name></expr></argument>, <argument><expr><name>rfc2965</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>extract_cookie_line</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>varg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_cookie_do</name> *</type><name>v</name> <init>= <expr><name>varg</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>last1</name></decl>, *<decl><type ref="prev"/><name>last2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>cookie</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>v</name>-&gt;<name>name</name></name> ? <name><name>v</name>-&gt;<name>name</name></name> : ""</expr></argument>, <argument><expr>"="</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>new_cookie</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>comma</name> <init>= <expr>","</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>next1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>semi</name> <init>= <expr>";"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>next2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sep</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cookies</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eat</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>next1</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>cookie</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr>&amp;<name>last1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next1</name></expr>)</condition> <block>{
<expr_stmt><expr><name>next2</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>next1</name></expr></argument>, <argument><expr><name>semi</name></expr></argument>, <argument><expr>&amp;<name>last2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>next2</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>trim</name> <init>= <expr><name>next2</name></expr></init></decl>;</decl_stmt>
<while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>trim</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
<expr_stmt><expr><name>trim</name>++</expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>trim</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name><name>v</name>-&gt;<name>encoded</name></name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr><name>trim</name> + <name>len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>v</name>-&gt;<name>duplicated</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name><name>v</name>-&gt;<name>encoded</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>trim</name> + <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eat</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr>*<name>trim</name> != '$'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>cookies</name>++</expr>;</expr_stmt>
<expr_stmt><expr><name>eat</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr>!<name>eat</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>new_cookie</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>new_cookie</name></expr></argument>, <argument><expr><name>sep</name></expr></argument>, <argument><expr><name>next2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name>next2</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>semi</name></expr></argument>, <argument><expr>&amp;<name>last2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> = <name>semi</name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><name>next1</name> = <call><name>apr_strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>comma</name></expr></argument>, <argument><expr>&amp;<name>last1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>sep</name> = <name>comma</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>cookies</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>v</name>-&gt;<name>new_cookies</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>new_cookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_read</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>, <argument>const char **val</argument>,
<argument>int remove</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>ap_cookie_do</name></type> <name>v</name></decl>;</decl_stmt>
<expr_stmt><expr><name><name>v</name>.<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>.<name>encoded</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>.<name>new_cookies</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>.<name>duplicated</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>v</name>.<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_do</name><argument_list>(<argument><expr><name>extract_cookie_line</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>,
<argument><expr>"Cookie"</expr></argument>, <argument><expr>"Cookie2"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>v</name>.<name>duplicated</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><macro><name>APLOGNO</name><argument_list>(<argument>00011</argument>)</argument_list></macro> <name>LOG_PREFIX</name>
"client submitted cookie '%s' more than once: %s"</expr></argument>, <argument><expr><name><name>v</name>.<name>name</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>remove</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Cookie2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>r</name>-&gt;<name>headers_in</name></name> = <call><name>apr_table_overlay</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>v</name>.<name>new_cookies</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>val</name> = <name><name>v</name>.<name>encoded</name></name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_check_string</name><argument_list>(<argument>const char *string</argument>)</argument_list></macro> <block>{
<if>if <condition>(<expr>!<name>string</name> || !*<name>string</name> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call> || <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>'&amp;'</expr></argument>)</argument_list></call> ||
<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr>';'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EGENERAL</name></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
</unit>
