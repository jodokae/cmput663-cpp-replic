<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/server/mpm_common.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_signal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_allocator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GRP_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;grp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_HOOK_LINKS</name></cpp:macro> <cpp:value>APR_HOOK_LINK(monitor) APR_HOOK_LINK(drop_privileges) APR_HOOK_LINK(mpm) APR_HOOK_LINK(mpm_query) APR_HOOK_LINK(mpm_register_timed_callback) APR_HOOK_LINK(mpm_get_name) APR_HOOK_LINK(end_generation) APR_HOOK_LINK(child_status) APR_HOOK_LINK(suspend_connection) APR_HOOK_LINK(resume_connection)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_ENABLE_EXCEPTION_HOOK</name></expr></cpp:if>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>APR_HOOK_LINK(fatal_exception)
DEFAULT_HOOK_LINKS</argument>
)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>fatal_exception</argument>,
<argument>(ap_exception_info_t *ei)</argument>, <argument>(ei)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<macro><name>APR_HOOK_STRUCT</name><argument_list>(
<argument>DEFAULT_HOOK_LINKS</argument>
)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>monitor</argument>,
<argument>(apr_pool_t *p, server_rec *s)</argument>, <argument>(p, s)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_ALL</name><argument_list>(<argument>int</argument>, <argument>drop_privileges</argument>,
<argument>(apr_pool_t * pchild, server_rec * s)</argument>,
<argument>(pchild, s)</argument>, <argument>OK</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>, <argument>mpm</argument>,
<argument>(apr_pool_t *pconf, apr_pool_t *plog, server_rec *s)</argument>,
<argument>(pconf, plog, s)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>int</argument>, <argument>mpm_query</argument>,
<argument>(int query_code, int *result, apr_status_t *_rv)</argument>,
<argument>(query_code, result, _rv)</argument>, <argument>DECLINED</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>apr_status_t</argument>, <argument>mpm_register_timed_callback</argument>,
<argument>(apr_time_t t, ap_mpm_callback_fn_t *cbfn, void *baton)</argument>,
<argument>(t, cbfn, baton)</argument>, <argument>APR_ENOTIMPL</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>end_generation</argument>,
<argument>(server_rec *s, ap_generation_t gen)</argument>,
<argument>(s, gen)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>child_status</argument>,
<argument>(server_rec *s, pid_t pid, ap_generation_t gen, int slot, mpm_child_status status)</argument>,
<argument>(s,pid,gen,slot,status)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>suspend_connection</argument>,
<argument>(conn_rec *c, request_rec *r)</argument>,
<argument>(c, r)</argument>)</argument_list></macro>
<macro><name>AP_IMPLEMENT_HOOK_VOID</name><argument_list>(<argument>resume_connection</argument>,
<argument>(conn_rec *c, request_rec *r)</argument>,
<argument>(c, r)</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>APR_HOOK_PROBES_ENABLED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBES_ENABLED</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_ENTRY</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_ENTRY</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_RETURN</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_RETURN</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>rv</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_INVOKE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_INVOKE</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>src</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_PROBE_COMPLETE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_PROBE_COMPLETE</name><parameter_list>(<param><type><name>ud</name></type></param>,<param><type><name>ns</name></type></param>,<param><type><name>name</name></type></param>,<param><type><name>src</name></type></param>,<param><type><name>rv</name></type></param>,<param><type><name>args</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APR_HOOK_INT_DCL_UD</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_HOOK_INT_DCL_UD</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_IMPLEMENT_HOOK_RUN_FIRST</name><argument_list>(<argument>const char *</argument>, <argument>mpm_get_name</argument>,
<argument>(void)</argument>,
<argument>()</argument>, <argument>NULL</argument>)</argument_list></macro>
<typedef>typedef <type><struct>struct <name>mpm_gen_info_t</name> <block>{
<macro><name>APR_RING_ENTRY</name><argument_list>(<argument>mpm_gen_info_t</argument>)</argument_list></macro> <expr_stmt><expr><name>link</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>gen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>active</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>done</name></decl>;</decl_stmt>
}</block></struct></type> <name>mpm_gen_info_t</name>;</typedef>
<expr_stmt><expr><call><name>APR_RING_HEAD</name><argument_list>(<argument><expr><name>mpm_gen_info_head_t</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><specifier>static</specifier> struct <name>mpm_gen_info_head_t</name> *</type><name>geninfo</name></decl>, *<decl><type ref="prev"/><name>unused_geninfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gen_head_init</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>const</specifier> <name>char</name> *</type><name>ap_pid_fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_max_requests_per_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>char</name></type> <name><name>ap_coredump_dir</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_coredumpdir_configured</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>int</name></type> <name>ap_graceful_shutdown_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>apr_uint32_t</name></type> <name>ap_max_mem_free</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <name>apr_size_t</name></type> <name>ap_thread_stacksize</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOCATOR_MAX_FREE_DEFAULT</name></cpp:macro> <cpp:value>(2048*1024)</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>mpm_common_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><name>ap_pid_fname</name> = <name>DEFAULT_PIDLOG</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_max_requests_per_child</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>ap_coredump_dir</name></expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_coredump_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_coredumpdir_configured</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ap_graceful_shutdown_timeout</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>ap_max_mem_free</name> = <name>ALLOCATOR_MAX_FREE_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_thread_stacksize</name> = 0</expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>INTERVAL_OF_WRITABLE_PROBES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERVAL_OF_WRITABLE_PROBES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>wait_or_timeout_counter</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_wait_or_timeout</name><argument_list>(<argument>apr_exit_why_e *status</argument>, <argument>int *exitcode</argument>,
<argument>apr_proc_t *ret</argument>, <argument>apr_pool_t *p</argument>,
<argument>server_rec *s</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr>++<name>wait_or_timeout_counter</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>wait_or_timeout_counter</name> == <name>INTERVAL_OF_WRITABLE_PROBES</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>wait_or_timeout_counter</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_monitor</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_wait_all_procs</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>exitcode</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>APR_NOWAIT</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_EINTR</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>ret</name>-&gt;<name>pid</name></name> = -1</expr>;</expr_stmt>
<return>return;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>APR_STATUS_IS_CHILD_DONE</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>ret</name>-&gt;<name>pid</name></name> = -1</expr>;</expr_stmt>
}</block>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TCP_NODELAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>ap_sock_disable_nagle</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>s</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_socket_opt_set</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>APR_TCP_NODELAY</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00542</expr></argument>)</argument_list></call>
"apr_socket_opt_set: (TCP_NODELAY)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETPWNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>uid_t</argument>)</argument_list></macro> <macro><name>ap_uname2id</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>passwd</name> *</type><name>ent</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then>
<return>return <expr>(<call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>name</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</return></then></if>
<if>if <condition>(<expr>!(<name>ent</name> = <call><name>getpwnam</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00543</expr></argument>)</argument_list></call>
"%s: bad user name %s"</expr></argument>, <argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name><name>ent</name>-&gt;<name>pw_uid</name></name>)</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETGRNAM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>gid_t</argument>)</argument_list></macro> <macro><name>ap_gname2id</name><argument_list>(<argument>const char *name</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type>struct <name>group</name> *</type><name>ent</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then>
<return>return <expr>(<call><name>atoi</name><argument_list>(<argument><expr>&amp;<name><name>name</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>)</expr>;</return></then></if>
<if>if <condition>(<expr>!(<name>ent</name> = <call><name>getgrnam</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00544</expr></argument>)</argument_list></call>
"%s: bad group name %s"</expr></argument>, <argument><expr><name>ap_server_argv0</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr>(<name><name>ent</name>-&gt;<name>gr_gid</name></name>)</expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_INITGROUPS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>initgroups</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>gid_t</name></type> <name>basegid</name></decl></param>)</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<return>return <expr>0</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>gid_t</name></type> <name><name>groups</name><index>[<expr><name>NGROUPS_MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>group</name> *</type><name>g</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>setgrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>groups</name><index>[<expr><name>index</name>++</expr>]</index></name> = <name>basegid</name></expr>;</expr_stmt>
<while>while <condition>(<expr><name>index</name> &lt; <name>NGROUPS_MAX</name> &amp;&amp; ((<name>g</name> = <call><name>getgrent</name><argument_list>()</argument_list></call>) != <name>NULL</name>)</expr>)</condition> <block>{
<if>if <condition>(<expr><name><name>g</name>-&gt;<name>gr_gid</name></name> != <name>basegid</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>names</name></decl>;</decl_stmt>
<for>for (<init><expr><name>names</name> = <name><name>g</name>-&gt;<name>gr_mem</name></name></expr>;</init> <condition><expr>*<name>names</name> != <name>NULL</name></expr>;</condition> <incr><expr>++<name>names</name></expr></incr>) <block>{
<if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>*<name>names</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<expr_stmt><expr><name><name>groups</name><index>[<expr><name>index</name>++</expr>]</index></name> = <name><name>g</name>-&gt;<name>gr_gid</name></name></expr>;</expr_stmt></then></if>
}</block></for>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>endgrent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<return>return <expr><call><name>setgroups</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>groups</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_pidfile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>is_virtual</name></name></expr>)</condition><then> <block>{
<return>return <expr>"PidFile directive not allowed in &lt;VirtualHost&gt;"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ap_pid_fname</name> = <name>arg</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_mpm_dump_pidfile</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_file_t</name> *</type><name>out</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"PidFile: \"%s\"\n"</expr></argument>,
<argument><expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ap_pid_fname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_max_requests</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"MaxRequestsPerChild"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00545</expr></argument>)</argument_list></call>
"MaxRequestsPerChild is deprecated, use "
"MaxConnectionsPerChild instead."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>ap_max_requests_per_child</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_coredumpdir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fname</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>fname</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid CoreDumpDirectory path "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>finfo</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_FINFO_TYPE</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"CoreDumpDirectory "</expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr>" does not exist"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>finfo</name>.<name>filetype</name></name> != <name>APR_DIR</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"CoreDumpDirectory "</expr></argument>, <argument><expr><name>fname</name></expr></argument>,
<argument><expr>" is not a directory"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>ap_coredump_dir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_coredump_dir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ap_coredumpdir_configured</name> = 1</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><macro><name>ap_mpm_set_graceful_shutdown</name><argument_list>(<argument>cmd_parms *cmd</argument>,
<argument>void *dummy</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>ap_graceful_shutdown_timeout</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_max_mem_free</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> &lt; 0 || <name>errno</name> == <name>ERANGE</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid MaxMemFree value: "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>ap_max_mem_free</name> = (<name>apr_uint32_t</name>)<name>value</name> * 1024</expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<function><type><specifier>const</specifier> <name>char</name> *</type><name>ap_mpm_set_thread_stacksize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>long</name></type> <name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>errno</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <call><name>strtol</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>value</name> &lt; 0 || <name>errno</name> == <name>ERANGE</name></expr>)</condition><then>
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid ThreadStackSize value: "</expr></argument>,
<argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>ap_thread_stacksize</name> = (<name>apr_size_t</name>)<name>value</name></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mpm_query</name><argument_list>(<argument>int query_code</argument>, <argument>int *result</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<if>if <condition>(<expr><call><name>ap_run_mpm_query</name><argument_list>(<argument><expr><name>query_code</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call> == <name>DECLINED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>void</name></type> <name>end_gen</name><parameter_list>(<param><decl><type><name>mpm_gen_info_t</name> *</type><name>gi</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr>"end of generation %d"</expr></argument>, <argument><expr><name><name>gi</name>-&gt;<name>gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_end_generation</name><argument_list>(<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><name><name>gi</name>-&gt;<name>gen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_REMOVE</name><argument_list>(<argument><expr><name>gi</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_INSERT_HEAD</name><argument_list>(<argument><expr><name>unused_geninfo</name></expr></argument>, <argument><expr><name>gi</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>apr_status_t</name></type> <name>ap_mpm_end_gen_helper</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>unused</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>gen</name> <init>= <expr><name>ap_config_generation</name> - 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mpm_gen_info_t</name> *</type><name>cur</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>geninfo</name> == <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>cur</name> = <call><name>APR_RING_FIRST</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> != <call><name>APR_RING_SENTINEL</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>cur</name>-&gt;<name>gen</name></name> != <name>gen</name></expr>)</condition> <block>{
<expr_stmt><expr><name>cur</name> = <call><name>APR_RING_NEXT</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr><name>cur</name> == <call><name>APR_RING_SENTINEL</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr>"no record of generation %d"</expr></argument>, <argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>cur</name>-&gt;<name>done</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>cur</name>-&gt;<name>active</name></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>end_gen</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_core_child_status</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>pid_t</name></type> <name>pid</name></decl></param>,
<param><decl><type><name>ap_generation_t</name></type> <name>gen</name></decl></param>, <param><decl><type><name>int</name></type> <name>slot</name></decl></param>,
<param><decl><type><name>mpm_child_status</name></type> <name>status</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mpm_gen_info_t</name> *</type><name>cur</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_msg</name> <init>= <expr>"unknown status"</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>gen_head_init</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>gen_head_init</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>geninfo</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>geninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>unused_geninfo</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>unused_geninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_INIT</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_INIT</name><argument_list>(<argument><expr><name>unused_geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>cur</name> = <call><name>APR_RING_FIRST</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>cur</name> != <call><name>APR_RING_SENTINEL</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call> &amp;&amp;
<name><name>cur</name>-&gt;<name>gen</name></name> != <name>gen</name></expr>)</condition> <block>{
<expr_stmt><expr><name>cur</name> = <call><name>APR_RING_NEXT</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<switch>switch<condition>(<expr><name>status</name></expr>)</condition> <block>{
<case>case <expr><name>MPM_CHILD_STARTED</name></expr>:
<expr_stmt><expr><name>status_msg</name> = "started"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>cur</name> == <call><name>APR_RING_SENTINEL</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<call><name>APR_RING_EMPTY</name><argument_list>(<argument><expr><name>unused_geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>cur</name> = <call><name>APR_RING_FIRST</name><argument_list>(<argument><expr><name>unused_geninfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_REMOVE</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>cur</name>-&gt;<name>active</name></name> = <name><name>cur</name>-&gt;<name>done</name></name> = 0</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>cur</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>sizeof *<name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name><name>cur</name>-&gt;<name>gen</name></name> = <name>gen</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_ELEM_INIT</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_RING_INSERT_HEAD</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_random_parent_after_fork</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name><name>cur</name>-&gt;<name>active</name></name></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>MPM_CHILD_EXITED</name></expr>:
<expr_stmt><expr><name>status_msg</name> = "exited"</expr>;</expr_stmt>
<if>if <condition>(<expr><name>cur</name> == <call><name>APR_RING_SENTINEL</name><argument_list>(<argument><expr><name>geninfo</name></expr></argument>, <argument><expr><name>mpm_gen_info_t</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00546</expr></argument>)</argument_list></call>
"no record of generation %d of exiting child %" <name>APR_PID_T_FMT</name></expr></argument>,
<argument><expr><name>gen</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr>--<name><name>cur</name>-&gt;<name>active</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name><name>cur</name>-&gt;<name>active</name></name> &amp;&amp; <name><name>cur</name>-&gt;<name>done</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>end_gen</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<break>break;</break>
</case><case>case <expr><name>MPM_CHILD_LOST_SLOT</name></expr>:
<expr_stmt><expr><name>status_msg</name> = "lost slot"</expr>;</expr_stmt>
<break>break;</break>
</case>}</block></switch>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE4</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
<argument><expr>"mpm child %" <name>APR_PID_T_FMT</name> " (gen %d/slot %d) %s"</expr></argument>,
<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>gen</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>, <argument><expr><name>status_msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mpm_register_timed_callback</name><argument_list>(<argument>apr_time_t t</argument>, <argument>ap_mpm_callback_fn_t *cbfn</argument>, <argument>void *baton</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>ap_run_mpm_register_timed_callback</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>cbfn</name></expr></argument>, <argument><expr><name>baton</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><macro><name>ap_show_mpm</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><call><name>ap_run_mpm_get_name</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>name</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>name</name> = ""</expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>name</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><macro><name>ap_check_mpm</name><argument_list>(<argument>void</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>last_mpm_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name><name>_hooks</name>.<name>link_mpm</name></name> || <name><name>_hooks</name>.<name>link_mpm</name>-&gt;<name>nelts</name></name> == 0</expr>)</condition><then>
<return>return <expr>"No MPM loaded."</expr>;</return></then>
<else>else <if>if <condition>(<expr><name><name>_hooks</name>.<name>link_mpm</name>-&gt;<name>nelts</name></name> &gt; 1</expr>)</condition><then>
<return>return <expr>"More than one MPM loaded."</expr>;</return></then></if></else></if>
<if>if <condition>(<expr><name>last_mpm_name</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>last_mpm_name</name></expr></argument>, <argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr>"The MPM cannot be changed during restart."</expr>;</return>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>last_mpm_name</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>ap_pglobal</name></expr></argument>, <argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
</unit>
