<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/server/mpm/winnt/child.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_vhost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_getopt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_shm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_listen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_default.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_winnt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_atomic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mswsock.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WSAID_ACCEPTEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_ACCEPTEX</name></cpp:macro> <cpp:value>{0xb5367df1, 0xcbac, 0x11cf, {0x95, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>BOOL</name></type> (<name>WINAPI</name> *<name>LPFN_ACCEPTEX</name>)<parameter_list>(<param><decl><type><name>SOCKET</name></type></decl></param>, <param><decl><type><name>SOCKET</name></type></decl></param>, <param><decl><type><name>PVOID</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>, <param><decl><type><name>LPDWORD</name></type></decl></param>, <param><decl><type><name>LPOVERLAPPED</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WSAID_GETACCEPTEXSOCKADDRS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSAID_GETACCEPTEXSOCKADDRS</name></cpp:macro> <cpp:value>{0xb5367df2, 0xcbac, 0x11cf, {0x95, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92}}</cpp:value></cpp:define>
<typedef>typedef <function_decl><type><name>VOID</name></type> (<name>WINAPI</name> *<name>LPFN_GETACCEPTEXSOCKADDRS</name>)<parameter_list>(<param><decl><type><name>PVOID</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>, <param><decl><type><name>DWORD</name></type></decl></param>,
<param><decl><type>struct</type> <name>sockaddr</name> **</decl></param>, <param><decl><type><name>LPINT</name></type></decl></param>,
<param><decl><type>struct</type> <name>sockaddr</name> **</decl></param>, <param><decl><type><name>LPINT</name></type></decl></param>)</parameter_list>;</function_decl></typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CONTAINING_RECORD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONTAINING_RECORD</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTAINING_RECORD</name><parameter_list>(<param><type><name>address</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>field</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((type *)( (char *)(address) - (char *)(&amp;((type *)0)-&gt;field)))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDED_ADDR_SIZE</name></cpp:macro> <cpp:value>(sizeof(SOCKADDR_IN6)+16)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDED_ADDR_SIZE</name></cpp:macro> <cpp:value>(sizeof(SOCKADDR_IN)+16)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>mpm_winnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <name>winnt_conn_ctx_t_s</name> <block>{
<decl_stmt><decl><type>struct <name>winnt_conn_ctx_t_s</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>accept_socket</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buff</name><index>[<expr>2*<name>PADDED_ADDR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sockaddr</name> *</type><name>sa_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sa_server_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>sockaddr</name> *</type><name>sa_client</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sa_client_len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptrans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_alloc_t</name> *</type><name>ba</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket</name> *</type><name>data</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<decl_stmt><decl><type><name>short</name></type> <name>socket_family</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>winnt_conn_ctx_t</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>IOCP_CONNECTION_ACCEPTED</name> <init>= <expr>1</expr></init></decl>,
<decl><name>IOCP_WAIT_FOR_RECEIVE</name> <init>= <expr>2</expr></init></decl>,
<decl><name>IOCP_WAIT_FOR_TRANSMITFILE</name> <init>= <expr>3</expr></init></decl>,
<decl><name>IOCP_SHUTDOWN</name> <init>= <expr>4</expr></init></decl>
}</block></enum></type> <name>io_state_e</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_pool_t</name> *</type><name>pchild</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>shutdown_in_progress</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>workers_may_exit</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>g_blocked_threads</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>max_requests_per_child_event</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_mutex_t</name> *</type><name>child_lock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_thread_mutex_t</name> *</type><name>qlock</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>winnt_conn_ctx_t</name> *</type><name>qhead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>winnt_conn_ctx_t</name> *</type><name>qtail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_uint32_t</name></type> <name>num_completion_contexts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_uint32_t</name></type> <name>max_num_completion_contexts</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>ThreadDispatchIOCP</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>qwait_event</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>mpm_recycle_completion_context</name><parameter_list>(<param><decl><type><name>winnt_conn_ctx_t</name> *</type><name>context</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>context</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>HANDLE</name></type> <name>saved_event</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>ba</name></name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>next</name></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>saved_event</name> = <name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>context</name>-&gt;<name>overlapped</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>context</name>-&gt;<name>overlapped</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name> = <name>saved_event</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>qtail</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>qtail</name>-&gt;<name>next</name></name> = <name>context</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>qhead</name> = <name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>qwait_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>qtail</name> = <name>context</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<function><type><specifier>static</specifier> <name>winnt_conn_ctx_t</name> *</type><name>mpm_get_completion_context</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>timeout</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>winnt_conn_ctx_t</name> *</type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>timeout</name> = 0</expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>qhead</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>context</name> = <name>qhead</name></expr>;</expr_stmt>
<expr_stmt><expr><name>qhead</name> = <name><name>qhead</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>qhead</name></expr>)</condition><then>
<expr_stmt><expr><name>qtail</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><name>qwait_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>context</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr><name>num_completion_contexts</name> &gt;= <name>max_num_completion_contexts</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>reported</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<name>reported</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00326</expr></argument>)</argument_list></call>
"Server ran out of threads to serve "
"requests. Consider raising the "
"ThreadsPerChild setting"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>reported</name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>qwait_event</name></expr></argument>, <argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>WAIT_OBJECT_0</name></expr>)</condition><then>
<continue>continue;</continue></then>
<else>else <block>{
<if>if <condition>(<expr><name>rv</name> == <name>WAIT_TIMEOUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00327</expr></argument>)</argument_list></call>
"mpm_get_completion_context: Failed to get a "
"free context within 1 second"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>timeout</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00328</expr></argument>)</argument_list></call>
"mpm_get_completion_context: "
"WaitForSingleObject failed to get free context"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></else></if>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>context</name> = (<name>winnt_conn_ctx_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>winnt_conn_ctx_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>,
<argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00329</expr></argument>)</argument_list></call>
"mpm_get_completion_context: "
"CreateEvent failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_allocator_create</name><argument_list>(<argument><expr>&amp;<name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_allocator_max_free_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>ap_max_mem_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00330</expr></argument>)</argument_list></call>
"mpm_get_completion_context: Failed "
"to create the transaction pool."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>apr_allocator_owner_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>, <argument><expr>"transaction"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>ba</name></name> = <call><name>apr_bucket_alloc_create</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_atomic_inc32</name><argument_list>(<argument><expr>&amp;<name>num_completion_contexts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
}</block></then> <else>else <block>{
<break>break;</break>
}</block></else></if>
}</block></while>
<return>return <expr><name>context</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ACCEPTEX_ERR_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name> <name>__stdcall</name></type> <name>winnt_accept</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>lr_</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name> <init>= <expr>(<name>ap_listen_rec</name> *)<name>lr_</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_sock_info_t</name></type> <name>sockinfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>winnt_conn_ctx_t</name> *</type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>BytesRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SOCKET</name></type> <name>nlsd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPFN_ACCEPTEX</name></type> <name>lpfnAcceptEx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPFN_GETACCEPTEXSOCKADDRS</name></type> <name>lpfnGetAcceptExSockaddrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>GuidAcceptEx</name> <init>= <expr><name>WSAID_ACCEPTEX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>GUID</name></type> <name>GuidGetAcceptExSockaddrs</name> <init>= <expr><name>WSAID_GETACCEPTEXSOCKADDRS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>core_server_config</name> *</type><name>core_sconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>accf_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>accf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>err_count</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>events</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<decl_stmt><decl><type><name>SOCKADDR_STORAGE</name></type> <name>ss_listen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>namelen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ss_listen</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>u_long</name></type> <name>zero</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>core_sconf</name> = <call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>ap_server_conf</name>-&gt;<name>module_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>accf_name</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>core_sconf</name>-&gt;<name>accf_map</name></name></expr></argument>, <argument><expr><name><name>lr</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>accf_name</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>accf</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>accf_name</name> = "none"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02531</expr></argument>)</argument_list></call> "winnt_accept: Listen protocol '%s' has "
"no known accept filter. Using 'none' instead"</expr></argument>,
<argument><expr><name><name>lr</name>-&gt;<name>protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>accf_name</name></expr></argument>, <argument><expr>"data"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><name>accf</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>accf_name</name> = "connect"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03458</expr></argument>)</argument_list></call> "winnt_accept: 'data' accept filter is no "
"longer supported. Using 'connect' instead"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>accf_name</name></expr></argument>, <argument><expr>"connect"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>accf</name> = 1</expr>;</expr_stmt></then>
<else>else <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>accf_name</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
<expr_stmt><expr><name>accf</name> = 0</expr>;</expr_stmt></then>
<else>else <block>{
<expr_stmt><expr><name>accf</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>accf_name</name> = "none"</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00331</expr></argument>)</argument_list></call>
"winnt_accept: unrecognized AcceptFilter '%s', "
"only 'data', 'connect' or 'none' are valid. "
"Using 'none' instead"</expr></argument>, <argument><expr><name>accf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if></else></if></else></if>
<expr_stmt><expr><call><name>apr_os_sock_get</name><argument_list>(<argument><expr>&amp;<name>nlsd</name></expr></argument>, <argument><expr><name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name>nlsd</name></expr></argument>, <argument><expr>(struct <name>sockaddr</name> *)&amp;<name>ss_listen</name></expr></argument>, <argument><expr>&amp;<name>namelen</name></expr></argument>)</argument_list></call> == <name>SOCKET_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00332</expr></argument>)</argument_list></call>
"winnt_accept: getsockname error on listening socket, "
"is IPv6 available?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>accf</name> &gt; 0</expr>)</condition><then> <block>{
<if>if <condition>(<expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>nlsd</name></expr></argument>, <argument><expr><name>SIO_GET_EXTENSION_FUNCTION_POINTER</name></expr></argument>,
<argument><expr>&amp;<name>GuidAcceptEx</name></expr></argument>, <argument><expr>sizeof <name>GuidAcceptEx</name></expr></argument>,
<argument><expr>&amp;<name>lpfnAcceptEx</name></expr></argument>, <argument><expr>sizeof <name>lpfnAcceptEx</name></expr></argument>,
<argument><expr>&amp;<name>BytesRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> == <name>SOCKET_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02322</expr></argument>)</argument_list></call>
"winnt_accept: failed to retrieve AcceptEx, try 'AcceptFilter none'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><call><name>WSAIoctl</name><argument_list>(<argument><expr><name>nlsd</name></expr></argument>, <argument><expr><name>SIO_GET_EXTENSION_FUNCTION_POINTER</name></expr></argument>,
<argument><expr>&amp;<name>GuidGetAcceptExSockaddrs</name></expr></argument>, <argument><expr>sizeof <name>GuidGetAcceptExSockaddrs</name></expr></argument>,
<argument><expr>&amp;<name>lpfnGetAcceptExSockaddrs</name></expr></argument>, <argument><expr>sizeof <name>lpfnGetAcceptExSockaddrs</name></expr></argument>,
<argument><expr>&amp;<name>BytesRead</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> == <name>SOCKET_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02323</expr></argument>)</argument_list></call>
"winnt_accept: failed to retrieve GetAcceptExSockaddrs, try 'AcceptFilter none'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>events</name><index>[<expr>1</expr>]</index></name> = <name>exit_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>events</name><index>[<expr>2</expr>]</index></name> = <name>max_requests_per_child_event</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<label><name>reinit</name>:</label>
<expr_stmt><expr><name><name>events</name><index>[<expr>0</expr>]</index></name> = <name>exit_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>events</name><index>[<expr>1</expr>]</index></name> = <name>max_requests_per_child_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>events</name><index>[<expr>2</expr>]</index></name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>WSAEventSelect</name><argument_list>(<argument><expr><name>nlsd</name></expr></argument>, <argument><expr><name><name>events</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>FD_ACCEPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>,
<argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00333</expr></argument>)</argument_list></call>
"WSAEventSelect() failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>events</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>1</expr>;</return>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00334</expr></argument>)</argument_list></call>
"Child: Accept thread listening on %pI using AcceptFilter %s"</expr></argument>,
<argument><expr><name><name>lr</name>-&gt;<name>bind_addr</name></name></expr></argument>, <argument><expr><name>accf_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>!<name>shutdown_in_progress</name></expr>)</condition> <block>{
<if>if <condition>(<expr>!<name>context</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>timeout</name></decl>;</decl_stmt>
<expr_stmt><expr><name>context</name> = <call><name>mpm_get_completion_context</name><argument_list>(<argument><expr>&amp;<name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>context</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!<name>timeout</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>err_count</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_count</name> &gt; <name>MAX_ACCEPTEX_ERR_COUNT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00335</expr></argument>)</argument_list></call>
"winnt_accept: Too many failures grabbing a "
"connection ctx. Aborting."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<if>if <condition>(<expr><name>accf</name> &gt; 0</expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>accept_socket</name></name> == <name>INVALID_SOCKET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <call><name>socket</name><argument_list>(<argument><expr><name><name>ss_listen</name>.<name>ss_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>,
<argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>socket_family</name></name> = <name><name>ss_listen</name>.<name>ss_family</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>context</name>-&gt;<name>socket_family</name></name> != <name><name>ss_listen</name>.<name>ss_family</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <call><name>socket</name><argument_list>(<argument><expr><name><name>ss_listen</name>.<name>ss_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>,
<argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>socket_family</name></name> = <name><name>ss_listen</name>.<name>ss_family</name></name></expr>;</expr_stmt>
}</block></then></if></else></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>accept_socket</name></name> == <name>INVALID_SOCKET</name></expr>)</condition><then>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>accept_socket</name></name> == <name>INVALID_SOCKET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00336</expr></argument>)</argument_list></call>
"winnt_accept: Failed to allocate an accept socket. "
"Temporary resource constraint? Try again."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <name><name>context</name>-&gt;<name>buff</name></name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>lpfnAcceptEx</name><argument_list>(<argument><expr><name>nlsd</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>PADDED_ADDR_SIZE</name></expr></argument>, <argument><expr><name>PADDED_ADDR_SIZE</name></expr></argument>, <argument><expr>&amp;<name>BytesRead</name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>overlapped</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>(<name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAECONNRESET</name></expr></argument>)</argument_list></call>) ||
(<name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAEACCES</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr>(<name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAEINVAL</name></expr></argument>)</argument_list></call>) ||
(<name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAENOTSOCK</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>err_count</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_count</name> &gt; <name>MAX_ACCEPTEX_ERR_COUNT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00337</expr></argument>)</argument_list></call>
"Child: Encountered too many AcceptEx "
"faults accepting client connections. "
"Possible causes: dynamic address renewal, "
"or incompatible VPN or firewall software. "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00338</expr></argument>)</argument_list></call>
"winnt_mpm: falling back to "
"'AcceptFilter none'."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>accf</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr>(<name>rv</name> != <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_IO_PENDING</name></expr></argument>)</argument_list></call>) &amp;&amp;
(<name>rv</name> != <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSA_IO_PENDING</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<expr_stmt><expr>++<name>err_count</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_count</name> &gt; <name>MAX_ACCEPTEX_ERR_COUNT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00339</expr></argument>)</argument_list></call>
"Child: Encountered too many AcceptEx "
"faults accepting client connections."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00340</expr></argument>)</argument_list></call>
"winnt_mpm: falling back to "
"'AcceptFilter none'."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>accf</name> = 0</expr>;</expr_stmt>
<goto>goto <name>reinit</name>;</goto>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name>err_count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>events</name><index>[<expr>0</expr>]</index></name> = <name><name>context</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name></expr>;</expr_stmt>
<do>do <block>{
<expr_stmt><expr><name>rv</name> = <call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rv</name> == <name>WAIT_IO_COMPLETION</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rv</name> == <name>WAIT_OBJECT_0</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name><name>context</name>-&gt;<name>accept_socket</name></name> != <name>INVALID_SOCKET</name>) &amp;&amp;
!<call><name>GetOverlappedResult</name><argument_list>(<argument><expr>(<name>HANDLE</name>)<name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>overlapped</name></name></expr></argument>,
<argument><expr>&amp;<name>BytesRead</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>,
<argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00341</expr></argument>)</argument_list></call>
"winnt_accept: Asynchronous AcceptEx failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if>
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>accept_socket</name></name> == <name>INVALID_SOCKET</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><name>err_count</name> = 0</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>,
<argument><expr><name>SO_UPDATE_ACCEPT_CONTEXT</name></expr></argument>, <argument><expr>(<name>char</name> *)&amp;<name>nlsd</name></expr></argument>,
<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nlsd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00342</expr></argument>)</argument_list></call>
"setsockopt(SO_UPDATE_ACCEPT_CONTEXT) failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>lpfnGetAcceptExSockaddrs</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>PADDED_ADDR_SIZE</name></expr></argument>, <argument><expr><name>PADDED_ADDR_SIZE</name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_server</name></name></expr></argument>, <argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_server_len</name></name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_client</name></name></expr></argument>, <argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_client_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>accept_socket</name></name> != <name>INVALID_SOCKET</name></expr>)</condition><then>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<do>do <block>{
<expr_stmt><expr><name>rv</name> = <call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr>3</expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block> while <condition>(<expr><name>rv</name> == <name>WAIT_IO_COMPLETION</name></expr>)</condition>;</do>
<if>if <condition>(<expr><name>rv</name> != <name>WAIT_OBJECT_0</name> + 2</expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><name><name>context</name>-&gt;<name>sa_server</name></name> = (<name>void</name> *) <name><name>context</name>-&gt;<name>buff</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>sa_server_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>context</name>-&gt;<name>buff</name></name></expr></argument>)</argument_list></sizeof> / 2</expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>sa_client_len</name></name> = <name><name>context</name>-&gt;<name>sa_server_len</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>sa_client</name></name> = <call>(<name>void</name> *) <argument_list>(<argument><expr><name><name>context</name>-&gt;<name>buff</name></name>
+ <name><name>context</name>-&gt;<name>sa_server_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <call><name>accept</name><argument_list>(<argument><expr><name>nlsd</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>sa_server</name></name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_server_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>context</name>-&gt;<name>accept_socket</name></name> == <name>INVALID_SOCKET</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rv</name> = <call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAECONNRESET</name></expr></argument>)</argument_list></call>
|| <name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAEINPROGRESS</name></expr></argument>)</argument_list></call>
|| <name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAEWOULDBLOCK</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>,
<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00343</expr></argument>)</argument_list></call>
"accept() failed, retrying."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>,
<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00344</expr></argument>)</argument_list></call>
"accept() failed."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>( <expr><name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAEMFILE</name></expr></argument>)</argument_list></call>
|| <name>rv</name> == <call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>WSAENOBUFS</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>++<name>err_count</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>err_count</name> &gt; <name>MAX_ACCEPTEX_ERR_COUNT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00345</expr></argument>)</argument_list></call>
"Child: Encountered too many accept() "
"resource faults, aborting."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then></if>
<continue>continue;</continue>
}</block></then></if>
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>WSAEventSelect</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>err_count</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>context</name>-&gt;<name>sa_server_len</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name><name>context</name>-&gt;<name>buff</name></name></expr></argument>)</argument_list></sizeof> / 2</expr>;</expr_stmt>
<if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>sa_server</name></name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_server_len</name></name></expr></argument>)</argument_list></call> == <name>SOCKET_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00346</expr></argument>)</argument_list></call>
"getsockname failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr>(<call><name>getpeername</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>sa_client</name></name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_client_len</name></name></expr></argument>)</argument_list></call>) == <name>SOCKET_ERROR</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_netos_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00347</expr></argument>)</argument_list></call>
"getpeername failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name><name>context</name>-&gt;<name>sa_client</name></name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>context</name>-&gt;<name>sa_client</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
<expr_stmt><expr><name><name>sockinfo</name>.<name>os_sock</name></name> = &amp;<name><name>context</name>-&gt;<name>accept_socket</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockinfo</name>.<name>local</name></name> = <name><name>context</name>-&gt;<name>sa_server</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockinfo</name>.<name>remote</name></name> = <name><name>context</name>-&gt;<name>sa_client</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockinfo</name>.<name>family</name></name> = <name><name>context</name>-&gt;<name>sa_server</name>-&gt;<name>sa_family</name></name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockinfo</name>.<name>type</name></name> = <name>SOCK_STREAM</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>sockinfo</name>.<name>protocol</name></name> = <name>IPPROTO_TCP</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ioctlsocket</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name>FIONBIO</name></expr></argument>, <argument><expr>&amp;<name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_RCVTIMEO</name></expr></argument>,
<argument><expr>(<name>char</name> *) &amp;<name>zero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>accept_socket</name></name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_SNDTIMEO</name></expr></argument>,
<argument><expr>(<name>char</name> *) &amp;<name>zero</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_sock_make</name><argument_list>(<argument><expr>&amp;<name><name>context</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr>&amp;<name>sockinfo</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PostQueuedCompletionStatus</name><argument_list>(<argument><expr><name>ThreadDispatchIOCP</name></expr></argument>, <argument><expr><name>BytesRead</name></expr></argument>,
<argument><expr><name>IOCP_CONNECTION_ACCEPTED</name></expr></argument>,
<argument><expr>&amp;<name><name>context</name>-&gt;<name>overlapped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>context</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></while>
<if>if <condition>(<expr>!<name>accf</name></expr>)</condition><then>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>events</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr>!<name>shutdown_in_progress</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>exit_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00348</expr></argument>)</argument_list></call>
"Child: Accept thread exiting."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>winnt_conn_ctx_t</name> *</type><name>winnt_get_connection</name><parameter_list>(<param><decl><type><name>winnt_conn_ctx_t</name> *</type><name>context</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>BytesRead</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LPOVERLAPPED</name></type> <name>pol</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>ULONG_PTR</name></type> <name>CompKey</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>DWORD</name></type> <name>CompKey</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><call><name>mpm_recycle_completion_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_atomic_inc32</name><argument_list>(<argument><expr>&amp;<name>g_blocked_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<if>if <condition>(<expr><name>workers_may_exit</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_atomic_dec32</name><argument_list>(<argument><expr>&amp;<name>g_blocked_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>GetQueuedCompletionStatus</name><argument_list>(<argument><expr><name>ThreadDispatchIOCP</name></expr></argument>, <argument><expr>&amp;<name>BytesRead</name></expr></argument>,
<argument><expr>&amp;<name>CompKey</name></expr></argument>, <argument><expr>&amp;<name>pol</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>rc</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00349</expr></argument>)</argument_list></call>
"Child: GetQueuedComplationStatus returned %d"</expr></argument>,
<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<switch>switch <condition>(<expr><name>CompKey</name></expr>)</condition> <block>{
<case>case <expr><name>IOCP_CONNECTION_ACCEPTED</name></expr>:
<expr_stmt><expr><name>context</name> = <call><name>CONTAINING_RECORD</name><argument_list>(<argument><expr><name>pol</name></expr></argument>, <argument><expr><name>winnt_conn_ctx_t</name></expr></argument>, <argument><expr><name>overlapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
</case><case>case <expr><name>IOCP_SHUTDOWN</name></expr>:
<expr_stmt><expr><call><name>apr_atomic_dec32</name><argument_list>(<argument><expr>&amp;<name>g_blocked_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</case><default>default:
<expr_stmt><expr><call><name>apr_atomic_dec32</name><argument_list>(<argument><expr>&amp;<name>g_blocked_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>NULL</name></expr>;</return>
</default>}</block></switch>
<break>break;</break>
}</block></while>
<expr_stmt><expr><call><name>apr_atomic_dec32</name><argument_list>(<argument><expr>&amp;<name>g_blocked_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>context</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>__stdcall</name></type> <name>worker_main</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>thread_num_val</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_thread_t</name> *</type><name>thd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_os_thread_t</name></type> <name>osthd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>requests_this_child</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>winnt_conn_ctx_t</name> *</type><name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>thread_num</name> <init>= <expr>(<name>int</name>)<name>thread_num_val</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_sb_handle_t</name> *</type><name>sbh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>disconnected</name></decl>;</decl_stmt>
<expr_stmt><expr><name>osthd</name> = <call><name>apr_os_thread_current</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>thread_num</name></expr></argument>, <argument><expr><name>SERVER_READY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>context</name> = <call><name>winnt_get_connection</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>context</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>ap_max_requests_per_child</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>requests_this_child</name>++</expr>;</expr_stmt>
<if>if <condition>(<expr><name>requests_this_child</name> &gt; <name>ap_max_requests_per_child</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name>max_requests_per_child_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr><call><name>ap_create_sb_handle</name><argument_list>(<argument><expr>&amp;<name>sbh</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>thread_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>c</name> = <call><name>ap_run_create_connection</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>,
<argument><expr><name><name>context</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>thread_num</name></expr></argument>, <argument><expr><name>sbh</name></expr></argument>,
<argument><expr><name><name>context</name>-&gt;<name>ba</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>c</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><name>thd</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_os_thread_put</name><argument_list>(<argument><expr>&amp;<name>thd</name></expr></argument>, <argument><expr>&amp;<name>osthd</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>ptrans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>c</name>-&gt;<name>current_thread</name></name> = <name>thd</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_process_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>context</name>-&gt;<name>sock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_lingering_close</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_socket_opt_get</name><argument_list>(<argument><expr><name><name>context</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>APR_SO_DISCONNECTED</name></expr></argument>, <argument><expr>&amp;<name>disconnected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>disconnected</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>context</name>-&gt;<name>accept_socket</name></name> = <name>INVALID_SOCKET</name></expr>;</expr_stmt>
}</block></then></if>
}</block></while>
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>thread_num</name></expr></argument>, <argument><expr><name>SERVER_DEAD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_thread</name><parameter_list>(<param><decl><type><name>HANDLE</name> *</type><name>handles</name></decl></param>, <param><decl><type><name>int</name> *</type><name>thread_cnt</name></decl></param>,
<param><decl><type><name>int</name></type> <name>thread_to_clean</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>handles</name><index>[<expr><name>thread_to_clean</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = <name>thread_to_clean</name></expr>;</init> <condition><expr><name>i</name> &lt; ((*<name>thread_cnt</name>) - 1)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<expr_stmt><expr><name><name>handles</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>handles</name><index>[<expr><name>i</name> + 1</expr>]</index></name></expr>;</expr_stmt></for>
<expr_stmt><expr>(*<name>thread_cnt</name>)--</expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>create_listener_thread</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>unsigned</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_listeners</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name></decl>;</decl_stmt>
<for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr> ;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><name>num_listeners</name>++</expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>max_num_completion_contexts</name> = <name>ap_threads_per_child</name> + <name>num_listeners</name></expr>;</expr_stmt>
<for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr>;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<if>if <condition>(<expr><name><name>lr</name>-&gt;<name>sd</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>_beginthreadex</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr>65536</expr></argument>, <argument><expr><name>winnt_accept</name></expr></argument>,
<argument><expr>(<name>void</name> *) <name>lr</name></expr></argument>, <argument><expr><name>stack_res_flag</name></expr></argument>, <argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>child_main</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>DWORD</name></type> <name>parent_pid</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>ht</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_listen_rec</name> *</type><name>lr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name></type> <name><name>child_events</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HANDLE</name> *</type><name>child_handles</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>listener_started</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>threads_created</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>watch_thread</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>time_remains</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cld</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>tid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>num_events</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>pchild</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr>"pchild"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_run_child_init</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ht</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>max_requests_per_child_event</name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>max_requests_per_child_event</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00350</expr></argument>)</argument_list></call>
"Child: Failed to create a max_requests event."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>child_events</name><index>[<expr>0</expr>]</index></name> = <name>exit_event</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_events</name><index>[<expr>1</expr>]</index></name> = <name>max_requests_per_child_event</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>parent_pid</name> != <name>my_pid</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>child_events</name><index>[<expr>2</expr>]</index></name> = <call><name>OpenProcess</name><argument_list>(<argument><expr><name>SYNCHRONIZE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>parent_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child_events</name><index>[<expr>2</expr>]</index></name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>num_events</name> = 2</expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02643</expr></argument>)</argument_list></call>
"Child: Failed to open handle to parent process %ld; "
"will not react to abrupt parent termination"</expr></argument>, <argument><expr><name>parent_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>num_events</name> = 3</expr>;</expr_stmt>
}</block></else></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>child_events</name><index>[<expr>2</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><name>num_events</name> = 2</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>status</name> = <call><name>apr_proc_mutex_lock</name><argument_list>(<argument><expr><name>start_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00351</expr></argument>)</argument_list></call>
"Child: Failed to acquire the start_mutex. "
"Process will exit."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00352</expr></argument>)</argument_list></call>
"Child: Acquired the start mutex."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>ThreadDispatchIOCP</name> = <call><name>CreateIoCompletionPort</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>qlock</name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qwait_event</name> = <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>qwait_event</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00353</expr></argument>)</argument_list></call>
"Child: Failed to create a qwait event."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>APEXIT_CHILDINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00354</expr></argument>)</argument_list></call>
"Child: Starting %d worker threads."</expr></argument>, <argument><expr><name>ap_threads_per_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>child_handles</name> = (<name>HANDLE</name>) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr><name>ap_threads_per_child</name>
* <sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>child_lock</name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>ap_threads_per_child</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>score_idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><name><name>ap_scoreboard_image</name>-&gt;<name>servers</name><index>[<expr>0</expr>]</index><index>[<expr><name>i</name></expr>]</index></name>.<name>status</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>status</name> != <name>SERVER_GRACEFUL</name> &amp;&amp; <name>status</name> != <name>SERVER_DEAD</name></expr>)</condition><then> <block>{
<continue>continue;</continue>
}</block></then></if>
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>SERVER_STARTING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>child_handles</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap_thread_stacksize</name></expr></argument>,
<argument><expr><name>worker_main</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>i</name></expr></argument>,
<argument><expr><name>stack_res_flag</name></expr></argument>, <argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child_handles</name><index>[<expr><name>i</name></expr>]</index></name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00355</expr></argument>)</argument_list></call>
"Child: CreateThread failed. Unable to "
"create all worker threads. Created %d of the %d "
"threads requested with the ThreadsPerChild "
"configuration directive."</expr></argument>,
<argument><expr><name>threads_created</name></expr></argument>, <argument><expr><name>ap_threads_per_child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<goto>goto <name>shutdown</name>;</goto>
}</block></then></if>
<expr_stmt><expr><name>threads_created</name>++</expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>score_idx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr>*<name>score_idx</name> = <name>i</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr>&amp;<name><name>child_handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>score_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>listener_started</name> &amp;&amp; <name>threads_created</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>create_listener_thread</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>listener_started</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>winnt_mpm_state</name> = <name>AP_MPMQ_RUNNING</name></expr>;</expr_stmt>
}</block></then></if>
<if>if <condition>(<expr><name>threads_created</name> == <name>ap_threads_per_child</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>exit_event</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call> != <name>WAIT_TIMEOUT</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr>1 * <name>APR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<while>while <condition>(<expr>1</expr>)</condition> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_HAS_OTHER_CHILD</name></expr></cpp:if>
<expr_stmt><expr><name>rv</name> = <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><name>num_events</name></expr></argument>, <argument><expr>(<name>HANDLE</name> *)<name>child_events</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cld</name> = <name>rv</name> - <name>WAIT_OBJECT_0</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<expr_stmt><expr><name>rv</name> = <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><name>num_events</name></expr></argument>, <argument><expr>(<name>HANDLE</name> *)<name>child_events</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>cld</name> = <name>rv</name> - <name>WAIT_OBJECT_0</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>WAIT_TIMEOUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_proc_other_child_refresh_all</name><argument_list>(<argument><expr><name>APR_OC_REASON_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rv</name> == <name>WAIT_FAILED</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00356</expr></argument>)</argument_list></call>
"Child: WAIT_FAILED -- shutting down server"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>num_events</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>out_flags</name></decl>;</decl_stmt>
<if>if <condition>(<expr>0 == <call><name>GetHandleInformation</name><argument_list>(<argument><expr><name><name>child_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>out_flags</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02644</expr></argument>)</argument_list></call>
"Child: Event handle #%d (%pp) is invalid"</expr></argument>,
<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>child_events</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>cld</name> == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00357</expr></argument>)</argument_list></call>
"Child: Exit event signaled. Child process is "
"ending."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <if>if <condition>(<expr><name>cld</name> == 2</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02538</expr></argument>)</argument_list></call>
"Child: Parent process exited abruptly. Child process "
"is ending"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00358</expr></argument>)</argument_list></call>
"Child: Process exiting because it reached "
"MaxConnectionsPerChild. Signaling the parent to "
"restart a new child process."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ap_signal_parent</name><argument_list>(<argument><expr><name>SIGNAL_PARENT_RESTART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<break>break;</break>
}</block></else></if></else></if></else></if></else></if>
}</block></while>
<label><name>shutdown</name>:</label>
<expr_stmt><expr><name>winnt_mpm_state</name> = <name>AP_MPMQ_STOPPING</name></expr>;</expr_stmt>
<for>for (<init><expr><name>lr</name> = <name>ap_listeners</name></expr>;</init> <condition><expr><name>lr</name></expr> ;</condition> <incr><expr><name>lr</name> = <name><name>lr</name>-&gt;<name>next</name></name></expr></incr>) <block>{
<expr_stmt><expr><call><name>apr_socket_close</name><argument_list>(<argument><expr><name><name>lr</name>-&gt;<name>sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>shutdown_in_progress</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>workers_may_exit</name> = 1</expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_mutex_unlock</name><argument_list>(<argument><expr><name>start_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00359</expr></argument>)</argument_list></call>
"Child: Released the start mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00360</expr></argument>)</argument_list></call>
"Child: Failure releasing the start mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if>
<while>while <condition>(<expr><name>g_blocked_threads</name> &gt; 0</expr>)</condition> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00361</expr></argument>)</argument_list></call>
"Child: %d threads blocked on the completion port"</expr></argument>,
<argument><expr><name>g_blocked_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name>=<name>g_blocked_threads</name></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>) <block>{
<expr_stmt><expr><call><name>PostQueuedCompletionStatus</name><argument_list>(<argument><expr><name>ThreadDispatchIOCP</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>IOCP_SHUTDOWN</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>qhead</name></expr>)</condition> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>qhead</name>-&gt;<name>overlapped</name>.<name>hEvent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name><name>qhead</name>-&gt;<name>accept_socket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>qhead</name> = <name><name>qhead</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
}</block></while>
<expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>watch_thread</name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name>time_remains</name> = <call>(<name>int</name>)<argument_list>(<argument><expr><name><name>ap_server_conf</name>-&gt;<name>timeout</name></name> / <call><name>APR_TIME_C</name><argument_list>(<argument><expr>1000</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr><name>threads_created</name></expr>)</condition> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>nFailsafe</name> <init>= <expr><name>MAXIMUM_WAIT_OBJECTS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>dwRet</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>watch_thread</name> &gt;= <name>threads_created</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>time_remains</name> -= 100) &lt; 0</expr>)</condition><then>
<break>break;</break></then></if>
<if>if <condition>(<expr>(<name>time_remains</name> % 30000) == 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
<argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00362</expr></argument>)</argument_list></call>
"Child: Waiting %d more seconds "
"for %d worker threads to finish."</expr></argument>,
<argument><expr><name>time_remains</name> / 1000</expr></argument>, <argument><expr><name>threads_created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>watch_thread</name> = 0</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>dwRet</name> = <call><name>WaitForMultipleObjects</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>threads_created</name> - <name>watch_thread</name></expr></argument>,
<argument><expr><name>MAXIMUM_WAIT_OBJECTS</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>child_handles</name> + <name>watch_thread</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>dwRet</name> == <name>WAIT_FAILED</name></expr>)</condition><then> <block>{
<break>break;</break>
}</block></then></if>
<if>if <condition>(<expr><name>dwRet</name> == <name>WAIT_TIMEOUT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>watch_thread</name> += <name>MAXIMUM_WAIT_OBJECTS</name></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then> <else>else <if>if <condition>(<expr><name>dwRet</name> &gt;= <name>WAIT_ABANDONED_0</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>(<name>nFailsafe</name>--) &lt; 1</expr>)</condition><then>
<break>break;</break></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>watch_thread</name> += (<name>dwRet</name> - <name>WAIT_OBJECT_0</name>)</expr>;</expr_stmt>
<if>if <condition>(<expr><name>watch_thread</name> &gt;= <name>threads_created</name></expr>)</condition><then>
<break>break;</break></then></if>
<expr_stmt><expr><call><name>cleanup_thread</name><argument_list>(<argument><expr><name>child_handles</name></expr></argument>, <argument><expr>&amp;<name>threads_created</name></expr></argument>, <argument><expr><name>watch_thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></while>
<if>if <condition>(<expr><name>threads_created</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00363</expr></argument>)</argument_list></call>
"Child: Terminating %d threads that failed to exit."</expr></argument>,
<argument><expr><name>threads_created</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>threads_created</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
<decl_stmt><decl><type><name>int</name> *</type><name>idx</name></decl>;</decl_stmt>
<expr_stmt><expr><call><name>TerminateThread</name><argument_list>(<argument><expr><name><name>child_handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>child_handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>idx</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>ht</name></expr></argument>, <argument><expr>&amp;<name><name>child_handles</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>idx</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>ap_update_child_status_from_indexes</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>*<name>idx</name></expr></argument>, <argument><expr><name>SERVER_DEAD</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></for>
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_NOTICE</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>ap_server_conf</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00364</expr></argument>)</argument_list></call>
"Child: All worker threads have exited."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_destroy</name><argument_list>(<argument><expr><name>child_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_thread_mutex_destroy</name><argument_list>(<argument><expr><name>qlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>qwait_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pchild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>exit_event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>child_events</name><index>[<expr>2</expr>]</index></name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>child_events</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
