<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/server/util_mutex.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_UNISTD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>APLOG_MODULE_INDEX</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APLOG_MODULE_INDEX</name></cpp:macro> <cpp:value>AP_CORE_MODULE_INDEX</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_parse_mutex</name><argument_list>(<argument>const char *arg</argument>, <argument>apr_pool_t *pool</argument>,
<argument>apr_lockmech_e *mutexmech</argument>,
<argument>const char **mutexfile</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>meth</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>file</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>file</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*(<name>file</name>++) = '\0'</expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>file</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>file</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
<expr_stmt><expr>*<name>mutexfile</name> = <name>NULL</name></expr>;</expr_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"no"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>APR_ENOLOCK</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"yes"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexmech</name> = <name>APR_LOCK_DEFAULT</name></expr>;</expr_stmt>
}</block></then>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FCNTL_SERIALIZE</name></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"fcntl"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexmech</name> = <name>APR_LOCK_FCNTL</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FLOCK_SERIALIZE</name></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"flock"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexmech</name> = <name>APR_LOCK_FLOCK</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_POSIXSEM_SERIALIZE</name></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"posixsem"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"sem"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexmech</name> = <name>APR_LOCK_POSIXSEM</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>file</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexfile</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>file</name> = <name>NULL</name></expr>;</expr_stmt>
}</block></then></if>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SYSVSEM_SERIALIZE</name></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"sysvsem"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"sem"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexmech</name> = <name>APR_LOCK_SYSVSEM</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_PROC_PTHREAD_SERIALIZE</name></expr></cpp:if>
<else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>meth</name></expr></argument>, <argument><expr>"pthread"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexmech</name> = <name>APR_LOCK_PROC_PTHREAD</name></expr>;</expr_stmt>
}</block></then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<else>else <block>{
<return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
}</block></else></if></else></if></else></if></else></if></else></if></else></if>
<if>if <condition>(<expr><name>file</name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutexfile</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!*<name>mutexfile</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_BADARG</name></expr>;</return>
}</block></then></if>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>options</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>set</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>none</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>omit_pid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_lockmech_e</name></type> <name>mech</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
}</block></struct></type> <name>mutex_cfg_t</name>;</typedef>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>mxcfg_by_type</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_mutex_init</name><argument_list>(<argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>def</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>mxcfg_by_type</name></expr>)</condition><then> <block>{
<return>return;</return>
}</block></then></if>
<expr_stmt><expr><name>mxcfg_by_type</name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>mxcfg_by_type</name></expr></argument>, <argument><expr><name>ap_pool_cleanup_set_null</name></expr></argument>,
<argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>def</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name>-&gt;<name>mech</name></name> = <name>APR_LOCK_DEFAULT</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>def</name>-&gt;<name>dir</name></name> = <call><name>ap_runtime_dir_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mxcfg_by_type</name></expr></argument>, <argument><expr>"default"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro><macro><name>ap_set_mutex</name><argument_list>(<argument>cmd_parms *cmd</argument>, <argument>void *dummy</argument>,
<argument>const char *arg</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name> <init>= <expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>elt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mechdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_mutex</name> <init>= <expr>0</expr></init>, <name>omit_pid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>type_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_lockmech_e</name></type> <name>mech</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mutexdir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>mxcfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><call><name>ap_check_cmd_context</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>GLOBAL_ONLY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>err</name> != <name>NULL</name></expr>)</condition><then> <block>{
<return>return <expr><name>err</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>mechdir</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>*<name>mechdir</name> == '\0'</expr>)</condition><then> <block>{
<return>return <expr>"Mutex requires at least a mechanism argument ("
<name>AP_ALL_AVAILABLE_MUTEXES_STRING</name> ")"</expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_parse_mutex</name><argument_list>(<argument><expr><name>mechdir</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>mech</name></expr></argument>, <argument><expr>&amp;<name>mutexdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> == <name>APR_ENOTIMPL</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Invalid Mutex argument "</expr></argument>, <argument><expr><name>mechdir</name></expr></argument>,
<argument><expr>" (" <name>AP_ALL_AVAILABLE_MUTEXES_STRING</name> ")"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_BADARG</name>
|| (<name>mutexdir</name> &amp;&amp; !<call><name>ap_is_directory</name><argument_list>(<argument><expr><name>ptemp</name></expr></argument>, <argument><expr><name>mutexdir</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Invalid Mutex directory in argument "</expr></argument>,
<argument><expr><name>mechdir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>rv</name> == <name>APR_ENOLOCK</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>no_mutex</name> = 1</expr>;</expr_stmt>
}</block></then></if></else></if></else></if>
<expr_stmt><expr><name>type_list</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>const <name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>arg</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr>"omitpid"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><name>omit_pid</name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new_type</name> <init>= <expr>(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_type</name> = <name>s</name></expr>;</expr_stmt>
}</block></else></if>
}</block></while>
<if>if <condition>(<expr><call><name>apr_is_empty_array</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>new_type</name> <init>= <expr>(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>new_type</name> = "default"</expr>;</expr_stmt>
}</block></then></if>
<while>while <condition>(<expr>(<name>elt</name> = (const <name>char</name> **)<call><name>apr_array_pop</name><argument_list>(<argument><expr><name>type_list</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name> <init>= <expr>*<name>elt</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>mxcfg</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mxcfg_by_type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mxcfg</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"Mutex type %s is not valid"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>none</name></name> = 0</expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>omit_pid</name></name> = <name>omit_pid</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>set</name></name> = 1</expr>;</expr_stmt>
<if>if <condition>(<expr><name>no_mutex</name></expr>)</condition><then> <block>{
<if>if <condition>(<expr>!(<name><name>mxcfg</name>-&gt;<name>options</name></name> &amp; <name>AP_MUTEX_ALLOW_NONE</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr>"None is not allowed for mutex type %s"</expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>none</name></name> = 1</expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>mech</name></name> = <name>mech</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mutexdir</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>dir</name></name> = <name>mutexdir</name></expr>;</expr_stmt>
}</block></then></if>
}</block></else></if>
}</block></while>
<return>return <expr><name>NULL</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mutex_register</name><argument_list>(<argument>apr_pool_t *pconf</argument>,
<argument>const char *type</argument>,
<argument>const char *default_dir</argument>,
<argument>apr_lockmech_e default_mech</argument>,
<argument>apr_int32_t options</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>mxcfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>sizeof *<name>mxcfg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>options</name> &amp; ~(<name>AP_MUTEX_ALLOW_NONE</name> | <name>AP_MUTEX_DEFAULT_NONE</name>))</expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><call><name>ap_mutex_init</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>options</name></name> = <name>options</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>options</name> &amp; <name>AP_MUTEX_DEFAULT_NONE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>none</name></name> = 1</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>dir</name></name> = <name>default_dir</name></expr>;</expr_stmt>
<expr_stmt><expr><name><name>mxcfg</name>-&gt;<name>mech</name></name> = <name>default_mech</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>mxcfg_by_type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>mxcfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>int</name></type> <name>mutex_needs_file</name><parameter_list>(<param><decl><type><name>apr_lockmech_e</name></type> <name>mech</name></decl></param>)</parameter_list> <block>{
<if>if <condition>(<expr><name>mech</name> != <name>APR_LOCK_FLOCK</name>
&amp;&amp; <name>mech</name> != <name>APR_LOCK_FCNTL</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_FLOCK_SERIALIZE</name> || <name>APR_USE_FCNTL_SERIALIZE</name></expr></cpp:if>
&amp;&amp; <name>mech</name> != <name>APR_LOCK_DEFAULT</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
)</condition><then> <block>{
<return>return <expr>0</expr>;</return>
}</block></then></if>
<return>return <expr>1</expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_mutex_filename</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>mutex_cfg_t</name> *</type><name>mxcfg</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>instance_id</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pid_suffix</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr>!<call><name>mutex_needs_file</name><argument_list>(<argument><expr><name><name>mxcfg</name>-&gt;<name>mech</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_UNISTD_H</name></expr></cpp:if>
<if>if <condition>(<expr>!<name><name>mxcfg</name>-&gt;<name>omit_pid</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>pid_suffix</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>".%" <name>APR_PID_T_FMT</name></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>,
<argument><expr><name><name>mxcfg</name>-&gt;<name>dir</name></name></expr></argument>,
<argument><expr>"/"</expr></argument>,
<argument><expr><name>type</name></expr></argument>,
<argument><expr><name>instance_id</name> ? "-" : ""</expr></argument>,
<argument><expr><name>instance_id</name> ? <name>instance_id</name> : ""</expr></argument>,
<argument><expr><name>pid_suffix</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>mutex_cfg_t</name> *</type><name>mxcfg_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>defcfg</name></decl>, *<decl><type ref="prev"/><name>mxcfg</name></decl>, *<decl><type ref="prev"/><name>newcfg</name></decl>;</decl_stmt>
<expr_stmt><expr><name>defcfg</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mxcfg_by_type</name></expr></argument>, <argument><expr>"default"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>mxcfg</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mxcfg_by_type</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr>!<name>mxcfg</name></expr>)</condition><then> <block>{
<return>return <expr><name>NULL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newcfg</name> = <name>mxcfg</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>defcfg</name>-&gt;<name>set</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newcfg</name> = <name>defcfg</name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>none</name></name> || <name><name>mxcfg</name>-&gt;<name>mech</name></name> != <name>APR_LOCK_DEFAULT</name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newcfg</name> = <name>mxcfg</name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>newcfg</name> = <name>defcfg</name></expr>;</expr_stmt>
}</block></else></if></else></if></else></if>
<if>if <condition>(<expr>!<name><name>newcfg</name>-&gt;<name>none</name></name> &amp;&amp; <call><name>mutex_needs_file</name><argument_list>(<argument><expr><name><name>newcfg</name>-&gt;<name>mech</name></name></expr></argument>)</argument_list></call> &amp;&amp; !<name><name>newcfg</name>-&gt;<name>dir</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name>newcfg</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>newcfg</name></expr></argument>, <argument><expr>sizeof *<name>newcfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name><name>defcfg</name>-&gt;<name>set</name></name> &amp;&amp; <name><name>defcfg</name>-&gt;<name>dir</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newcfg</name>-&gt;<name>dir</name></name> = <name><name>defcfg</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
}</block></then> <else>else <if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>dir</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><name><name>newcfg</name>-&gt;<name>dir</name></name> = <name><name>mxcfg</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
}</block></then> <else>else <block>{
<expr_stmt><expr><name><name>newcfg</name>-&gt;<name>dir</name></name> = <name><name>defcfg</name>-&gt;<name>dir</name></name></expr>;</expr_stmt>
}</block></else></if></else></if>
}</block></then></if>
<return>return <expr><name>newcfg</name></expr>;</return>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_bad_create_options</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00021</expr></argument>)</argument_list></call>
"Invalid options were specified when creating the %s mutex"</expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_unknown_type</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00022</expr></argument>)</argument_list></call>
"Can't create mutex of unknown type %s"</expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_create_failure</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00023</expr></argument>)</argument_list></call>
"Couldn't create the %s mutex %s%s%s"</expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr><name>fname</name> ? "(file " : ""</expr></argument>,
<argument><expr><name>fname</name> ? <name>fname</name> : ""</expr></argument>,
<argument><expr><name>fname</name> ? ")" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>void</name></type> <name>log_perms_failure</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00024</expr></argument>)</argument_list></call>
"Couldn't set permissions on the %s mutex; "
"check User and Group directives"</expr></argument>,
<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_global_mutex_create</name><argument_list>(<argument>apr_global_mutex_t **mutex</argument>,
<argument>const char **name</argument>,
<argument>const char *type</argument>,
<argument>const char *instance_id</argument>,
<argument>server_rec *s</argument>, <argument>apr_pool_t *p</argument>,
<argument>apr_int32_t options</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>mxcfg</name> <init>= <expr><call><name>mxcfg_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>options</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_bad_create_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>mxcfg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_unknown_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>none</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutex</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fname</name> = <call><name>get_mutex_filename</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mxcfg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>instance_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_global_mutex_create</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>mxcfg</name>-&gt;<name>mech</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_create_failure</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>name</name></expr>)</condition><then>
<expr_stmt><expr>*<name>name</name> = <name>fname</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_unixd_set_global_mutex_perms</name><argument_list>(<argument><expr>*<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_perms_failure</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proc_mutex_create</name><argument_list>(<argument>apr_proc_mutex_t **mutex</argument>,
<argument>const char **name</argument>,
<argument>const char *type</argument>,
<argument>const char *instance_id</argument>,
<argument>server_rec *s</argument>, <argument>apr_pool_t *p</argument>,
<argument>apr_int32_t options</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>mxcfg</name> <init>= <expr><call><name>mxcfg_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>options</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_bad_create_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>!<name>mxcfg</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_unknown_type</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>none</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr>*<name>mutex</name> = <name>NULL</name></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>fname</name> = <call><name>get_mutex_filename</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mxcfg</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>instance_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_proc_mutex_create</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>mxcfg</name>-&gt;<name>mech</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_create_failure</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>rv</name></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>name</name></expr>)</condition><then>
<expr_stmt><expr>*<name>name</name> = <name>fname</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_NEED_SET_MUTEX_PERMS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>rv</name> = <call><name>ap_unixd_set_proc_mutex_perms</name><argument_list>(<argument><expr>*<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>log_perms_failure</name><argument_list>(<argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>rv</name></expr>;</return>
}</block>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_dump_mutexes</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>server_rec *s</argument>, <argument>apr_file_t *out</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_hash_index_t</name> *</type><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>defcfg</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name>mxcfg_by_type</name></expr></argument>, <argument><expr>"default"</expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<for>for (<init><expr><name>idx</name> = <call><name>apr_hash_first</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mxcfg_by_type</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>idx</name></expr>;</condition> <incr><expr><name>idx</name> = <call><name>apr_hash_next</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
<decl_stmt><decl><type><name>mutex_cfg_t</name> *</type><name>mxcfg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>mech</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>name_</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>apr_hash_this</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr>&amp;<name>name_</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>name</name> = <name>name_</name></expr>;</expr_stmt>
<expr_stmt><expr><name>mxcfg</name> = <call><name>mxcfg_lookup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>mxcfg</name> == <name>defcfg</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Mutex %s: using_defaults\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>none</name></name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Mutex %s: none\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<continue>continue;</continue>
}</block></then></if>
<switch>switch <condition>(<expr><name><name>mxcfg</name>-&gt;<name>mech</name></name></expr>)</condition> <block>{
<case>case <expr><name>APR_LOCK_DEFAULT</name></expr>:
<expr_stmt><expr><name>mech</name> = "default"</expr>;</expr_stmt>
<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FCNTL_SERIALIZE</name></expr></cpp:if>
</case><case>case <expr><name>APR_LOCK_FCNTL</name></expr>:
<expr_stmt><expr><name>mech</name> = "fcntl"</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FLOCK_SERIALIZE</name></expr></cpp:if>
</case><case>case <expr><name>APR_LOCK_FLOCK</name></expr>:
<expr_stmt><expr><name>mech</name> = "flock"</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_POSIXSEM_SERIALIZE</name></expr></cpp:if>
</case><case>case <expr><name>APR_LOCK_POSIXSEM</name></expr>:
<expr_stmt><expr><name>mech</name> = "posixsem"</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SYSVSEM_SERIALIZE</name></expr></cpp:if>
</case><case>case <expr><name>APR_LOCK_SYSVSEM</name></expr>:
<expr_stmt><expr><name>mech</name> = "sysvsem"</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_PROC_PTHREAD_SERIALIZE</name></expr></cpp:if>
</case><case>case <expr><name>APR_LOCK_PROC_PTHREAD</name></expr>:
<expr_stmt><expr><name>mech</name> = "pthread"</expr>;</expr_stmt>
<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</case><default>default:
<expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
</default>}</block></switch>
<if>if <condition>(<expr><name><name>mxcfg</name>-&gt;<name>dir</name></name></expr>)</condition><then>
<expr_stmt><expr><name>dir</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>mxcfg</name>-&gt;<name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Mutex %s: dir=\"%s\" mechanism=%s %s\n"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>mech</name></expr></argument>,
<argument><expr><name><name>mxcfg</name>-&gt;<name>omit_pid</name></name> ? "[OmitPid]" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
}</block>
</unit>
