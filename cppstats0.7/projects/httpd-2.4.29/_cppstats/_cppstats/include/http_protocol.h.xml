<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/include/http_protocol.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_HTTP_PROTOCOL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTP_PROTOCOL_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_mmap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>,<argument>insert_error_filter</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <name>ap_filter_rec_t</name> *</type><name>ap_old_write_func</name></decl>;</decl_stmt>
<function_decl><type><name>request_rec</name> *</type><name>ap_read_request</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_mime_headers</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_mime_headers_core</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_finalize_request_protocol</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_send_error_response</name><argument_list>(<argument>request_rec *r</argument>, <argument>int recursive_error</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_content_length</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_off_t length</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_keepalive</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_time_t</argument>)</argument_list></macro> <macro><name>ap_rationalize_mtime</name><argument_list>(<argument>request_rec *r</argument>, <argument>apr_time_t mtime</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_make_content_type</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_setup_make_content_type</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_make_etag</name><argument_list>(<argument>request_rec *r</argument>, <argument>int force_weak</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_etag</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_last_modified</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AP_CONDITION_NONE</name></decl>,
<decl><name>AP_CONDITION_NOMATCH</name></decl>,
<decl><name>AP_CONDITION_WEAK</name></decl>,
<decl><name>AP_CONDITION_STRONG</name></decl>
}</block></enum></type> <name>ap_condition_e</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_condition_if_match</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_table_t</name> *<name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_condition_if_unmodified_since</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_table_t</name> *<name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_condition_if_none_match</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_table_t</name> *<name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_condition_if_modified_since</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_table_t</name> *<name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_condition_e</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_condition_if_range</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>apr_table_t</name> *<name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_meets_conditions</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_send_fd</name><argument_list>(<argument>apr_file_t *fd</argument>, <argument>request_rec *r</argument>, <argument>apr_off_t offset</argument>,
<argument>apr_size_t length</argument>, <argument>apr_size_t *nbytes</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_send_mmap</name><argument_list>(<argument>apr_mmap_t *mm</argument>,
<argument>request_rec *r</argument>,
<argument>apr_size_t offset</argument>,
<argument>apr_size_t length</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_method_register</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>methname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_method_registry_init</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_METHOD_CHECK_ALLOWED</name><parameter_list>(<param><type><name>mask</name></type></param>, <param><type><name>methname</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((mask) &amp; (AP_METHOD_BIT &lt;&lt; ap_method_number_of((methname))))</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_method_list_t *</argument>)</argument_list></macro> <macro><name>ap_make_method_list</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int nelts</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_copy_method_list</name><argument_list>(<argument><expr><name>ap_method_list_t</name> *<name>dest</name></expr></argument>,
<argument><expr><name>ap_method_list_t</name> *<name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_method_in_list</name><argument_list>(<argument><expr><name>ap_method_list_t</name> *<name>l</name></expr></argument>, <argument><expr>const <name>char</name> *<name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_method_list_add</name><argument_list>(<argument><expr><name>ap_method_list_t</name> *<name>l</name></expr></argument>, <argument><expr>const <name>char</name> *<name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_method_list_remove</name><argument_list>(<argument><expr><name>ap_method_list_t</name> *<name>l</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_clear_method_list</name><argument_list>(<argument><expr><name>ap_method_list_t</name> *<name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>char</name> *<name>ct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_accept_ranges</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rputc</name><argument_list>(<argument>int c</argument>, <argument>request_rec *r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rwrite</name><argument_list>(<argument>const void *buf</argument>, <argument>int nbyte</argument>, <argument>request_rec *r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>int</name></type> <name>ap_rputs</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>ap_rwrite</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr>(<name>int</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rvputs</name><argument_list>(<argument>request_rec *r</argument>,<argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_vrprintf</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *fmt</argument>, <argument>va_list vlist</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rprintf</name><argument_list>(<argument>request_rec *r</argument>, <argument>const char *fmt</argument>,<argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>2</expr></argument>,<argument><expr>3</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_rflush</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_index_of_response</name><argument_list>(<argument>int status</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_get_status_line</name><argument_list>(<argument>int status</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_setup_client_block</name><argument_list>(<argument>request_rec *r</argument>, <argument>int read_policy</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>long</argument>)</argument_list></macro> <macro><name>ap_get_client_block</name><argument_list>(<argument>request_rec *r</argument>, <argument>char *buffer</argument>, <argument>apr_size_t bufsiz</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_map_http_request_error</name><argument_list>(<argument>apr_status_t rv</argument>, <argument>int status</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_discard_request_body</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_note_auth_failure</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_note_basic_auth_failure</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_note_digest_auth_failure</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>, <argument>note_auth_failure</argument>, <argument>(request_rec *r, const char *auth_type)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_basic_auth_pw</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>char</name> **<name>pw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_GET_BASIC_AUTH_PW_NOTE</name></cpp:macro> <cpp:value>"AP_GET_BASIC_AUTH_PW_NOTE"</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_basic_auth_components</name><argument_list>(<argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>username</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_parse_uri</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>char</name> *<name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_GETLINE_FOLD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_GETLINE_CRLF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_getline</name><argument_list>(<argument>char *s</argument>, <argument>int n</argument>, <argument>request_rec *r</argument>, <argument>int flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_rgetline</name><argument_list>(<argument>char **s</argument>, <argument>apr_size_t n</argument>,
<argument>apr_size_t *read</argument>,
<argument>request_rec *r</argument>, <argument>int flags</argument>,
<argument>apr_bucket_brigade *bb</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_rgetline</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>n</name></type></param>, <param><type><name>read</name></type></param>, <param><type><name>r</name></type></param>, <param><type><name>fold</name></type></param>, <param><type><name>bb</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_rgetline_core((s), (n), (read), (r), (fold), (bb))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_rgetline_core</name><argument_list>(<argument>char **s</argument>, <argument>apr_size_t n</argument>,
<argument>apr_size_t *read</argument>,
<argument>request_rec *r</argument>, <argument>int flags</argument>,
<argument>apr_bucket_brigade *bb</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_method_number_of</name><argument_list>(<argument><expr>const <name>char</name> *<name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_method_name_of</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>int methnum</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>void</argument>,<argument>pre_read_request</argument>,<argument>(request_rec *r, conn_rec *c)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>post_read_request</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>log_transaction</argument>,<argument>(request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>const char *</argument>,<argument>http_scheme</argument>,<argument>(const request_rec *r)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>apr_port_t</argument>,<argument>default_port</argument>,<argument>(const request_rec *r)</argument>)</argument_list></macro>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_PROTOCOL_HTTP1</name></cpp:macro> <cpp:value>"http/1.1"</cpp:value></cpp:define>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>protocol_propose</argument>,<argument>(conn_rec *c, request_rec *r,
server_rec *s,
const apr_array_header_t *offers,
apr_array_header_t *proposals)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>int</argument>,<argument>protocol_switch</argument>,<argument>(conn_rec *c, request_rec *r,
server_rec *s,
const char *protocol)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE_HOOK</name><argument_list>(<argument>const char *</argument>,<argument>protocol_get</argument>,<argument>(const conn_rec *c)</argument>)</argument_list></macro>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_get_protocol_upgrades</name><argument_list>(<argument>conn_rec *c</argument>, <argument>request_rec *r</argument>,
<argument>server_rec *s</argument>, <argument>int report_all</argument>,
<argument>const apr_array_header_t **pupgrades</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_select_protocol</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>,
<argument><expr>const <name>apr_array_header_t</name> *<name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_switch_protocol</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_protocol</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_allowed_protocol</name><argument_list>(<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr>const <name>char</name> *<name>protocol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type>struct <name>ap_bucket_error</name></type> <name>ap_bucket_error</name>;</typedef>
<struct>struct <name>ap_bucket_error</name> <block>{
<decl_stmt><decl><type><name>apr_bucket_refcount</name></type> <name>refcount</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl>;</decl_stmt>
}</block>;</struct>
<decl_stmt><decl><type><name>AP_DECLARE_DATA</name> <specifier>extern</specifier> <specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>ap_bucket_type_error</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_BUCKET_IS_ERROR</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(e-&gt;type == &amp;ap_bucket_type_error)</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <macro><name>ap_bucket_error_make</name><argument_list>(<argument>apr_bucket *b</argument>, <argument>int error</argument>,
<argument>const char *buf</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_bucket *</argument>)</argument_list></macro> <macro><name>ap_bucket_error_create</name><argument_list>(<argument>int error</argument>, <argument>const char *buf</argument>,
<argument>apr_pool_t *p</argument>,
<argument>apr_bucket_alloc_t *list</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_byterange_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>, <argument><expr><name>apr_bucket_brigade</name> *<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_http_header_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>, <argument><expr><name>apr_bucket_brigade</name> *<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_content_length_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *</expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_old_write_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>, <argument><expr><name>apr_bucket_brigade</name> *<name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_sub_req_protocol</name><argument_list>(<argument><expr><name>request_rec</name> *<name>rnew</name></expr></argument>, <argument><expr>const <name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_finalize_sub_req_protocol</name><argument_list>(<argument><expr><name>request_rec</name> *<name>sub_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_send_interim_response</name><argument_list>(<argument>request_rec *r</argument>, <argument>int send_headers</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
