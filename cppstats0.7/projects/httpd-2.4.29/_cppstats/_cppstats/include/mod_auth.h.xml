<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/include/mod_auth.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_MOD_AUTH_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_MOD_AUTH_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"authn"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PROVIDER_GROUP</name></cpp:macro> <cpp:value>"authz"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PROVIDER_VERSION</name></cpp:macro> <cpp:value>"0"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_DEFAULT_PROVIDER</name></cpp:macro> <cpp:value>"file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PROVIDER_NAME_NOTE</name></cpp:macro> <cpp:value>"authn_provider_name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PROVIDER_NAME_NOTE</name></cpp:macro> <cpp:value>"authz_provider_name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHN_PREFIX</name></cpp:macro> <cpp:value>"AUTHENTICATE_"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHZ_PREFIX</name></cpp:macro> <cpp:value>"AUTHORIZE_"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SATISFY_ALL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_ALL</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SATISFY_ANY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_ANY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SATISFY_NOSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SATISFY_NOSPEC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AUTH_DENIED</name></decl>,
<decl><name>AUTH_GRANTED</name></decl>,
<decl><name>AUTH_USER_FOUND</name></decl>,
<decl><name>AUTH_USER_NOT_FOUND</name></decl>,
<decl><name>AUTH_GENERAL_ERROR</name></decl>
}</block></enum></type> <name>authn_status</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AUTHZ_DENIED</name></decl>,
<decl><name>AUTHZ_GRANTED</name></decl>,
<decl><name>AUTHZ_NEUTRAL</name></decl>,
<decl><name>AUTHZ_GENERAL_ERROR</name></decl>,
<decl><name>AUTHZ_DENIED_NO_USER</name></decl>
}</block></enum></type> <name>authz_status</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>authn_status</name></type> (*<name>check_password</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>password</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>authn_status</name></type> (*<name>get_realm_hash</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>realm</name></decl></param>, <param><decl><type><name>char</name> **</type><name>rethash</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>authn_provider</name>;</typedef>
<typedef>typedef <type>struct <name>authn_provider_list</name></type> <name>authn_provider_list</name>;</typedef>
<struct>struct <name>authn_provider_list</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>provider_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>authn_provider</name> *</type><name>provider</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>authn_provider_list</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><struct>struct <block>{
<function_decl><type><name>authz_status</name></type> (*<name>check_authorization</name>)<parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>parsed_require_line</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type>(*<name>parse_require_line</name>)<parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>require_line</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>void</name> **</type><name>parsed_require_line</name></decl></param>)</parameter_list>;</function_decl>
}</block></struct></type> <name>authz_provider</name>;</typedef>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_authn_cache_store</name></expr></argument>,
<argument><expr>(<name>request_rec</name>*, const <name>char</name>*, const <name>char</name>*,
const <name>char</name>*, const <name>char</name>*)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
