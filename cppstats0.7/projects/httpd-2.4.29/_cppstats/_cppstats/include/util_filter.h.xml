<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/include/util_filter.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_FILTER_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDARG_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AP_MODE_READBYTES</name></decl>,
<decl><name>AP_MODE_GETLINE</name></decl>,
<decl><name>AP_MODE_EATCRLF</name></decl>,
<decl><name>AP_MODE_SPECULATIVE</name></decl>,
<decl><name>AP_MODE_EXHAUSTIVE</name></decl>,
<decl><name>AP_MODE_INIT</name></decl>
}</block></enum></type> <name>ap_input_mode_t</name>;</typedef>
<typedef>typedef <type>struct <name>ap_filter_t</name></type> <name>ap_filter_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (*<name>ap_out_filter_func</name>)<parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (*<name>ap_in_filter_func</name>)<parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
<param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>,
<param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
<param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
<param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (*<name>ap_init_filter_func</name>)<parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <type><union>union <name>ap_filter_func</name> <block>{
<decl_stmt><decl><type><name>ap_out_filter_func</name></type> <name>out_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_in_filter_func</name></type> <name>in_func</name></decl>;</decl_stmt>
}</block></union></type> <name>ap_filter_func</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AP_FTYPE_RESOURCE</name> <init>= <expr>10</expr></init></decl>,
<decl><name>AP_FTYPE_CONTENT_SET</name> <init>= <expr>20</expr></init></decl>,
<decl><name>AP_FTYPE_PROTOCOL</name> <init>= <expr>30</expr></init></decl>,
<decl><name>AP_FTYPE_TRANSCODE</name> <init>= <expr>40</expr></init></decl>,
<decl><name>AP_FTYPE_CONNECTION</name> <init>= <expr>50</expr></init></decl>,
<decl><name>AP_FTYPE_NETWORK</name> <init>= <expr>60</expr></init></decl>
}</block></enum></type> <name>ap_filter_type</name>;</typedef>
<typedef>typedef <type>struct <name>ap_filter_rec_t</name></type> <name>ap_filter_rec_t</name>;</typedef>
<typedef>typedef <type>struct <name>ap_filter_provider_t</name></type> <name>ap_filter_provider_t</name>;</typedef>
<struct>struct <name>ap_filter_rec_t</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_func</name></type> <name>filter_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_init_filter_func</name></type> <name>filter_init_func</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_rec_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_provider_t</name> *</type><name>providers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_type</name></type> <name>ftype</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>proto_flags</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>ap_filter_t</name> <block>{
<decl_stmt><decl><type><name>ap_filter_rec_t</name> *</type><name>frec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>ctx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_get_brigade</name><argument_list>(<argument>ap_filter_t *filter</argument>,
<argument>apr_bucket_brigade *bucket</argument>,
<argument>ap_input_mode_t mode</argument>,
<argument>apr_read_type_e block</argument>,
<argument>apr_off_t readbytes</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>filter</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> *<name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_pass_brigade_fchk</name><argument_list>(<argument>request_rec *r</argument>,
<argument>apr_bucket_brigade *bucket</argument>,
<argument>const char *fmt</argument>,
<argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>3</expr></argument>,<argument><expr>4</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <macro><name>ap_register_input_filter</name><argument_list>(<argument>const char *name</argument>,
<argument>ap_in_filter_func filter_func</argument>,
<argument>ap_init_filter_func filter_init</argument>,
<argument>ap_filter_type ftype</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <macro><name>ap_register_output_filter</name><argument_list>(<argument>const char *name</argument>,
<argument>ap_out_filter_func filter_func</argument>,
<argument>ap_init_filter_func filter_init</argument>,
<argument>ap_filter_type ftype</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <macro><name>ap_register_output_filter_protocol</name><argument_list>(
<argument>const char *name</argument>,
<argument>ap_out_filter_func filter_func</argument>,
<argument>ap_init_filter_func filter_init</argument>,
<argument>ap_filter_type ftype</argument>,
<argument>unsigned int proto_flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>, <argument><expr><name>void</name> *<name>ctx</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_input_filter_handle</name><argument_list>(<argument><expr><name>ap_filter_rec_t</name> *<name>f</name></expr></argument>,
<argument><expr><name>void</name> *<name>ctx</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_input_filter_handle</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>, <argument><expr><name>void</name> *<name>ctx</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_output_filter_handle</name><argument_list>(<argument><expr><name>ap_filter_rec_t</name> *<name>f</name></expr></argument>,
<argument><expr><name>void</name> *<name>ctx</name></expr></argument>,
<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>,
<argument><expr><name>conn_rec</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_filter_rec_t *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_output_filter_handle</name><argument_list>(<argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_remove_input_filter_byhandle</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>next</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_remove_output_filter_byhandle</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>next</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> **<name>save_to</name></expr></argument>,
<argument><expr><name>apr_bucket_brigade</name> **<name>b</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_filter_flush</name><argument_list>(<argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>,
<argument><expr><name>void</name> *<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_fflush</name><argument_list>(<argument><expr><name>ap_filter_t</name> *<name>f</name></expr></argument>, <argument><expr><name>apr_bucket_brigade</name> *<name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_fwrite</name><parameter_list>(<param><type><name>f</name></type></param>, <param><type><name>bb</name></type></param>, <param><type><name>data</name></type></param>, <param><type><name>nbyte</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_brigade_write(bb, ap_filter_flush, f, data, nbyte)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_fputs</name><parameter_list>(<param><type><name>f</name></type></param>, <param><type><name>bb</name></type></param>, <param><type><name>str</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_brigade_write(bb, ap_filter_flush, f, str, strlen(str))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_fputc</name><parameter_list>(<param><type><name>f</name></type></param>, <param><type><name>bb</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>apr_brigade_putc(bb, ap_filter_flush, f, c)</cpp:value></cpp:define>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fputstrs</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_fprintf</name><argument_list>(<argument>ap_filter_t *f</argument>,
<argument>apr_bucket_brigade *bb</argument>,
<argument>const char *fmt</argument>,
<argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<call><name>format</name><argument_list>(<argument><expr><name>printf</name></expr></argument>,<argument><expr>3</expr></argument>,<argument><expr>4</expr></argument>)</argument_list></call>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_filter_protocol</name><argument_list>(<argument>ap_filter_t* f</argument>, <argument>unsigned int proto_flags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_PROTO_CHANGE</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_PROTO_CHANGE_LENGTH</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_PROTO_NO_BYTERANGE</name></cpp:macro> <cpp:value>0x4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_PROTO_NO_PROXY</name></cpp:macro> <cpp:value>0x8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_PROTO_NO_CACHE</name></cpp:macro> <cpp:value>0x10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_PROTO_TRANSFORM</name></cpp:macro> <cpp:value>0x20</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
