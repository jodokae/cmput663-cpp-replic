<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/include/util_mutex.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UTIL_MUTEX_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_MUTEX_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_global_mutex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FLOCK_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_FLOCK_SERIALIZE</name></cpp:macro> <cpp:value>", 'flock:/path/to/file'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_FLOCK_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FCNTL_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_FCNTL_SERIALIZE</name></cpp:macro> <cpp:value>", 'fcntl:/path/to/file'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_FCNTL_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SYSVSEM_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_SYSVSEM_SERIALIZE</name></cpp:macro> <cpp:value>", 'sysvsem'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_SYSVSEM_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_POSIXSEM_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_POSIXSEM_SERIALIZE</name></cpp:macro> <cpp:value>", 'posixsem'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_POSIXSEM_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_PROC_PTHREAD_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_PTHREAD_SERIALIZE</name></cpp:macro> <cpp:value>", 'pthread'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_PTHREAD_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_FLOCK_SERIALIZE</name> || <name>APR_HAS_FCNTL_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_FILE_SERIALIZE</name></cpp:macro> <cpp:value>", 'file:/path/to/file'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_FILE_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SYSVSEM_SERIALIZE</name> || <name>APR_HAS_POSIXSEM_SERIALIZE</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_SEM_SERIALIZE</name></cpp:macro> <cpp:value>", 'sem'"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_LIST_SEM_SERIALIZE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_ALL_AVAILABLE_MUTEXES_STRING</name></cpp:macro> <cpp:value>"Mutex mechanisms are: 'none', 'default'" AP_LIST_FLOCK_SERIALIZE AP_LIST_FCNTL_SERIALIZE AP_LIST_FILE_SERIALIZE AP_LIST_PTHREAD_SERIALIZE AP_LIST_SYSVSEM_SERIALIZE AP_LIST_POSIXSEM_SERIALIZE AP_LIST_SEM_SERIALIZE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_AVAILABLE_MUTEXES_STRING</name></cpp:macro> <cpp:value>"Mutex mechanisms are: 'default'" AP_LIST_FLOCK_SERIALIZE AP_LIST_FCNTL_SERIALIZE AP_LIST_FILE_SERIALIZE AP_LIST_PTHREAD_SERIALIZE AP_LIST_SYSVSEM_SERIALIZE AP_LIST_POSIXSEM_SERIALIZE AP_LIST_SEM_SERIALIZE</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_parse_mutex</name><argument_list>(<argument><expr>const <name>char</name> *<name>arg</name></expr></argument>, <argument><expr><name>apr_pool_t</name> *<name>pool</name></expr></argument>,
<argument><expr><name>apr_lockmech_e</name> *<name>mutexmech</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>mutexfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_mutex</name><argument_list>(<argument><expr><name>cmd_parms</name> *<name>cmd</name></expr></argument>, <argument><expr><name>void</name> *<name>dummy</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE_NONSTD</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_mutex_init</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MUTEX_ALLOW_NONE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MUTEX_DEFAULT_NONE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_mutex_register</name><argument_list>(<argument>apr_pool_t *pconf</argument>,
<argument>const char *type</argument>,
<argument>const char *default_dir</argument>,
<argument>apr_lockmech_e default_mech</argument>,
<argument>apr_int32_t options</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_global_mutex_create</name><argument_list>(<argument>apr_global_mutex_t **mutex</argument>,
<argument>const char **name</argument>,
<argument>const char *type</argument>,
<argument>const char *instance_id</argument>,
<argument>server_rec *server</argument>,
<argument>apr_pool_t *pool</argument>,
<argument>apr_int32_t options</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_proc_mutex_create</name><argument_list>(<argument>apr_proc_mutex_t **mutex</argument>,
<argument>const char **name</argument>,
<argument>const char *type</argument>,
<argument>const char *instance_id</argument>,
<argument>server_rec *server</argument>,
<argument>apr_pool_t *pool</argument>,
<argument>apr_int32_t options</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_CORE_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_dump_mutexes</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>, <argument><expr><name>apr_file_t</name> *<name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
