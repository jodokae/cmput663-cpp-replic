<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/include/util_cookies.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>UTIL_COOKIES_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTIL_COOKIES_H</name></cpp:macro></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_COOKIE</name></cpp:macro> <cpp:value>"Set-Cookie"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_COOKIE2</name></cpp:macro> <cpp:value>"Set-Cookie2"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ATTRS</name></cpp:macro> <cpp:value>"HttpOnly;Secure;Version=1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR_ATTRS</name></cpp:macro> <cpp:value>"Version=1"</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoded</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>new_cookies</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>duplicated</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_cookie_do</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_write</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>,
<argument>const char *val</argument>, <argument>const char *attrs</argument>,
<argument>long maxage</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_write2</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name2</argument>,
<argument>const char *val</argument>, <argument>const char *attrs2</argument>,
<argument>long maxage</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_remove</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>,
<argument>const char *attrs</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_remove2</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name2</argument>,
<argument>const char *attrs2</argument>, <argument>...</argument>)</argument_list></macro>
<expr_stmt><expr><name>AP_FN_ATTR_SENTINEL</name></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_cookie_read</name><argument_list>(<argument>request_rec * r</argument>, <argument>const char *name</argument>, <argument>const char **val</argument>,
<argument>int remove</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_cookie_check_string</name><argument_list>(<argument><expr>const <name>char</name> *<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
