<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/include/httpd.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>APACHE_HTTPD_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APACHE_HTTPD_H</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mmn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_release.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_poll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regex.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_STDLIB_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HTTPD_ROOT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPD_ROOT</name></cpp:macro> <cpp:value>"/os2httpd"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPD_ROOT</name></cpp:macro> <cpp:value>"/apache"</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPD_ROOT</name></cpp:macro> <cpp:value>"/apache"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTPD_ROOT</name></cpp:macro> <cpp:value>"/usr/local/apache"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DOCUMENT_LOCATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCUMENT_LOCATION</name></cpp:macro> <cpp:value>HTTPD_ROOT "/docs"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCUMENT_LOCATION</name></cpp:macro> <cpp:value>HTTPD_ROOT "/htdocs"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DYNAMIC_MODULE_LIMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DYNAMIC_MODULE_LIMIT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ADMIN</name></cpp:macro> <cpp:value>"[no address given]"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_ERRORLOG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ERRORLOG</name></cpp:macro> <cpp:value>"logs/error.log"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ERRORLOG</name></cpp:macro> <cpp:value>"logs/error_log"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_ACCESS_FNAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ACCESS_FNAME</name></cpp:macro> <cpp:value>"htaccess"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ACCESS_FNAME</name></cpp:macro> <cpp:value>".htaccess"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SERVER_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERVER_CONFIG_FILE</name></cpp:macro> <cpp:value>"conf/httpd.conf"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_PATH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_PATH</name></cpp:macro> <cpp:value>"/bin:/usr/bin:/usr/ucb:/usr/bsd:/usr/local/bin"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SUEXEC_BIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUEXEC_BIN</name></cpp:macro> <cpp:value>HTTPD_ROOT "/bin/suexec"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_TIMEOUT</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_KEEPALIVE_TIMEOUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_KEEPALIVE_TIMEOUT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_KEEPALIVE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_KEEPALIVE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LIMIT_REQUEST_LINE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LIMIT_REQUEST_LINE</name></cpp:macro> <cpp:value>8190</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LIMIT_REQUEST_FIELDSIZE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LIMIT_REQUEST_FIELDSIZE</name></cpp:macro> <cpp:value>8190</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LIMIT_REQUEST_FIELDS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LIMIT_REQUEST_FIELDS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>DEFAULT_LIMIT_BLANK_LINES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_LIMIT_BLANK_LINES</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_ADD_DEFAULT_CHARSET_NAME</name></cpp:macro> <cpp:value>"iso-8859-1"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SERVER_PROTOCOL</name></cpp:macro> <cpp:value>"HTTP/1.1"</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_DEFAULT_INDEX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEFAULT_INDEX</name></cpp:macro> <cpp:value>"index.html"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_TYPES_CONFIG_FILE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TYPES_CONFIG_FILE</name></cpp:macro> <cpp:value>"conf/mime.types"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_HTML_2_0</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE HTML PUBLIC \"-//IETF//" "DTD HTML 2.0//EN\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_HTML_3_2</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//" "DTD HTML 3.2 Final//EN\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_HTML_4_0S</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//" "DTD HTML 4.0//EN\"\n" "\"http://www.w3.org/TR/REC-html40/strict.dtd\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_HTML_4_0T</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//" "DTD HTML 4.0 Transitional//EN\"\n" "\"http://www.w3.org/TR/REC-html40/loose.dtd\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_HTML_4_0F</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE HTML PUBLIC \"-//W3C//" "DTD HTML 4.0 Frameset//EN\"\n" "\"http://www.w3.org/TR/REC-html40/frameset.dtd\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_XHTML_1_0S</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE html PUBLIC \"-//W3C//" "DTD XHTML 1.0 Strict//EN\"\n" "\"http://www.w3.org/TR/xhtml1/DTD/" "xhtml1-strict.dtd\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_XHTML_1_0T</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE html PUBLIC \"-//W3C//" "DTD XHTML 1.0 Transitional//EN\"\n" "\"http://www.w3.org/TR/xhtml1/DTD/" "xhtml1-transitional.dtd\"&gt;\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOCTYPE_XHTML_1_0F</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE html PUBLIC \"-//W3C//" "DTD XHTML 1.0 Frameset//EN\"\n" "\"http://www.w3.org/TR/xhtml1/DTD/" "xhtml1-frameset.dtd\"&gt;"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VERSION</name><parameter_list>(<param><type><name>major</name></type></param>,<param><type><name>minor</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(1000*(major)+(minor))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VERSION_MAJOR</name><parameter_list>(<param><type><name>number</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((number)/1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VERSION_MINOR</name><parameter_list>(<param><type><name>number</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((number)%1000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_HTTP_PORT</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_HTTPS_PORT</name></cpp:macro> <cpp:value>443</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_default_port</name><parameter_list>(<param><type><name>port</name></type></param>,<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((port) == ap_default_port(r))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_default_port</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_run_default_port(r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_http_scheme</name><parameter_list>(<param><type><name>r</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_run_http_scheme(r)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRING_LEN</name></cpp:macro> <cpp:value>HUGE_STRING_LEN</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUGE_STRING_LEN</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IOBUFSIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_REG_MATCH</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_SENDFILE</name></cpp:macro> <cpp:value>16777216</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APEXIT_OK</name></cpp:macro> <cpp:value>0x0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APEXIT_INIT</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APEXIT_CHILDINIT</name></cpp:macro> <cpp:value>0x3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APEXIT_CHILDSICK</name></cpp:macro> <cpp:value>0x7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APEXIT_CHILDFATAL</name></cpp:macro> <cpp:value>0xf</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_DECLARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_DECLARE_NONSTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_DECLARE_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MODULE_DECLARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MODULE_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MODULE_DECLARE_NONSTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MODULE_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_MODULE_DECLARE_DATA</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MODULE_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_CORE_DECLARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_DECLARE</name></cpp:macro> <cpp:value>AP_DECLARE</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>AP_CORE_DECLARE_NONSTD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_CORE_DECLARE_NONSTD</name></cpp:macro> <cpp:value>AP_DECLARE_NONSTD</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_START_USERERR</name></cpp:macro> <cpp:value>(APR_OS_START_USERERR + 2000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_USERERR_LEN</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DECLINED</name></cpp:macro> <cpp:value>(AP_START_USERERR + 0)</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><name>int</name></type> <name>major</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>minor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>patch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>add_string</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_version_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_revision</name><argument_list>(<argument><expr><name>ap_version_t</name> *<name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_banner</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_description</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_add_version_component</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>pconf</name></expr></argument>, <argument><expr>const <name>char</name> *<name>component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_server_built</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OK</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLINED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DONE</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUSPENDED</name></cpp:macro> <cpp:value>-3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NOBODY_WROTE</name></cpp:macro> <cpp:value>-100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NOBODY_READ</name></cpp:macro> <cpp:value>-101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_FILTER_ERROR</name></cpp:macro> <cpp:value>-102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESPONSE_CODES</name></cpp:macro> <cpp:value>103</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CONTINUE</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SWITCHING_PROTOCOLS</name></cpp:macro> <cpp:value>101</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PROCESSING</name></cpp:macro> <cpp:value>102</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_OK</name></cpp:macro> <cpp:value>200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CREATED</name></cpp:macro> <cpp:value>201</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_ACCEPTED</name></cpp:macro> <cpp:value>202</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NON_AUTHORITATIVE</name></cpp:macro> <cpp:value>203</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NO_CONTENT</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESET_CONTENT</name></cpp:macro> <cpp:value>205</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PARTIAL_CONTENT</name></cpp:macro> <cpp:value>206</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MULTI_STATUS</name></cpp:macro> <cpp:value>207</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_ALREADY_REPORTED</name></cpp:macro> <cpp:value>208</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_IM_USED</name></cpp:macro> <cpp:value>226</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MULTIPLE_CHOICES</name></cpp:macro> <cpp:value>300</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MOVED_PERMANENTLY</name></cpp:macro> <cpp:value>301</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MOVED_TEMPORARILY</name></cpp:macro> <cpp:value>302</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SEE_OTHER</name></cpp:macro> <cpp:value>303</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NOT_MODIFIED</name></cpp:macro> <cpp:value>304</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_USE_PROXY</name></cpp:macro> <cpp:value>305</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_TEMPORARY_REDIRECT</name></cpp:macro> <cpp:value>307</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PERMANENT_REDIRECT</name></cpp:macro> <cpp:value>308</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_BAD_REQUEST</name></cpp:macro> <cpp:value>400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UNAUTHORIZED</name></cpp:macro> <cpp:value>401</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PAYMENT_REQUIRED</name></cpp:macro> <cpp:value>402</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_FORBIDDEN</name></cpp:macro> <cpp:value>403</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NOT_FOUND</name></cpp:macro> <cpp:value>404</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_METHOD_NOT_ALLOWED</name></cpp:macro> <cpp:value>405</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NOT_ACCEPTABLE</name></cpp:macro> <cpp:value>406</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PROXY_AUTHENTICATION_REQUIRED</name></cpp:macro> <cpp:value>407</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REQUEST_TIME_OUT</name></cpp:macro> <cpp:value>408</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_CONFLICT</name></cpp:macro> <cpp:value>409</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_GONE</name></cpp:macro> <cpp:value>410</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_LENGTH_REQUIRED</name></cpp:macro> <cpp:value>411</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PRECONDITION_FAILED</name></cpp:macro> <cpp:value>412</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></cpp:macro> <cpp:value>413</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REQUEST_URI_TOO_LARGE</name></cpp:macro> <cpp:value>414</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UNSUPPORTED_MEDIA_TYPE</name></cpp:macro> <cpp:value>415</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RANGE_NOT_SATISFIABLE</name></cpp:macro> <cpp:value>416</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_EXPECTATION_FAILED</name></cpp:macro> <cpp:value>417</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_MISDIRECTED_REQUEST</name></cpp:macro> <cpp:value>421</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UNPROCESSABLE_ENTITY</name></cpp:macro> <cpp:value>422</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_LOCKED</name></cpp:macro> <cpp:value>423</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_FAILED_DEPENDENCY</name></cpp:macro> <cpp:value>424</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UPGRADE_REQUIRED</name></cpp:macro> <cpp:value>426</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_PRECONDITION_REQUIRED</name></cpp:macro> <cpp:value>428</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_TOO_MANY_REQUESTS</name></cpp:macro> <cpp:value>429</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE</name></cpp:macro> <cpp:value>431</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_UNAVAILABLE_FOR_LEGAL_REASONS</name></cpp:macro> <cpp:value>451</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_INTERNAL_SERVER_ERROR</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NOT_IMPLEMENTED</name></cpp:macro> <cpp:value>501</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_BAD_GATEWAY</name></cpp:macro> <cpp:value>502</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_SERVICE_UNAVAILABLE</name></cpp:macro> <cpp:value>503</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_GATEWAY_TIME_OUT</name></cpp:macro> <cpp:value>504</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VERSION_NOT_SUPPORTED</name></cpp:macro> <cpp:value>505</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VARIANT_ALSO_VARIES</name></cpp:macro> <cpp:value>506</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_INSUFFICIENT_STORAGE</name></cpp:macro> <cpp:value>507</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_LOOP_DETECTED</name></cpp:macro> <cpp:value>508</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NOT_EXTENDED</name></cpp:macro> <cpp:value>510</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_NETWORK_AUTHENTICATION_REQUIRED</name></cpp:macro> <cpp:value>511</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_INFO</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 100)&amp;&amp;((x) &lt; 200))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_SUCCESS</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 200)&amp;&amp;((x) &lt; 300))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_REDIRECT</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 300)&amp;&amp;((x) &lt; 400))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_ERROR</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 400)&amp;&amp;((x) &lt; 600))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_CLIENT_ERROR</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 400)&amp;&amp;((x) &lt; 500))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_SERVER_ERROR</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 500)&amp;&amp;((x) &lt; 600))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_is_HTTP_VALID_RESPONSE</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;= 100)&amp;&amp;((x) &lt; 600))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_status_drops_connection</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((x) == HTTP_BAD_REQUEST) || ((x) == HTTP_REQUEST_TIME_OUT) || ((x) == HTTP_LENGTH_REQUIRED) || ((x) == HTTP_REQUEST_ENTITY_TOO_LARGE) || ((x) == HTTP_REQUEST_URI_TOO_LARGE) || ((x) == HTTP_INTERNAL_SERVER_ERROR) || ((x) == HTTP_SERVICE_UNAVAILABLE) || ((x) == HTTP_NOT_IMPLEMENTED))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_GET</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PUT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_POST</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_DELETE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_CONNECT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_OPTIONS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_TRACE</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PATCH</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PROPFIND</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PROPPATCH</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MKCOL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_COPY</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MOVE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOCK</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_UNLOCK</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_VERSION_CONTROL</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_CHECKOUT</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_UNCHECKOUT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_CHECKIN</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_UPDATE</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LABEL</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_REPORT</name></cpp:macro> <cpp:value>21</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MKWORKSPACE</name></cpp:macro> <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MKACTIVITY</name></cpp:macro> <cpp:value>23</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_BASELINE_CONTROL</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_MERGE</name></cpp:macro> <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_INVALID</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHODS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_METHOD_BIT</name></cpp:macro> <cpp:value>((apr_int64_t)1)</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>ap_method_list_t</name></type> <name>ap_method_list_t</name>;</typedef>
<struct>struct <name>ap_method_list_t</name> <block>{
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>method_mask</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>method_list</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CGI_MAGIC_TYPE</name></cpp:macro> <cpp:value>"application/x-httpd-cgi"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDES_MAGIC_TYPE</name></cpp:macro> <cpp:value>"text/x-server-parsed-html"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCLUDES_MAGIC_TYPE3</name></cpp:macro> <cpp:value>"text/x-server-parsed-html3"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIR_MAGIC_TYPE</name></cpp:macro> <cpp:value>"httpd/unix-directory"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEFAULT_HANDLER_NAME</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_IS_DEFAULT_HANDLER_NAME</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(*x == '\0')</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRLF</name></cpp:macro> <cpp:value>"\015\012"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CR</name></cpp:macro> <cpp:value>'\r'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LF</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRLF</name></cpp:macro> <cpp:value>"\r\n"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRLF_ASCII</name></cpp:macro> <cpp:value>"\015\012"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_NO_BODY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_CHUNKED_ERROR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REQUEST_CHUNKED_DECHUNK</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REQ_ACCEPT_PATH_INFO</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REQ_REJECT_PATH_INFO</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_REQ_DEFAULT_PATH_INFO</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<struct>struct <name>htaccess_result</name> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dir</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>override</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>override_opts</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>override_list</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_conf_vector_t</name> *</type><name>htaccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>htaccess_result</name> *</type><name>next</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>process_rec</name></type> <name>process_rec</name>;</typedef>
<typedef>typedef <type>struct <name>server_rec</name></type> <name>server_rec</name>;</typedef>
<typedef>typedef <type>struct <name>conn_rec</name></type> <name>conn_rec</name>;</typedef>
<typedef>typedef <type>struct <name>request_rec</name></type> <name>request_rec</name>;</typedef>
<typedef>typedef <type>struct <name>conn_state_t</name></type> <name>conn_state_t</name>;</typedef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<struct>struct <name>process_rec</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>short_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> * <specifier>const</specifier> *</type><name>argv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>request_rec</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type><name>prev</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>request_rec</name> *</type>main</decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>the_request</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>assbackwards</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proxyreq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>header_only</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>proto_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>protocol</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_time</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>status_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>method_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int64_t</name></type> <name>allowed</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>allowed_xmethods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_method_list_t</name> *</type><name>allowed_methods</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>sent_bodyct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_time_t</name></type> <name>mtime</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>range</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>clength</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>chunked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>read_chunked</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>expecting_100</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>kept_body</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>body_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>remaining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>read_length</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>err_headers_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>subprocess_env</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>handler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>content_encoding</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>content_languages</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>vlist_validator</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>user</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>ap_auth_type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>unparsed_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>canonical_filename</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>path_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>args</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>used_path_info</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>eos_sent</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_conf_vector_t</name> *</type><name>per_dir_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_conf_vector_t</name> *</type><name>request_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>ap_logconf</name> *</type><name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>htaccess_result</name> *</type><name>htaccess</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>output_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>input_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>proto_output_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>proto_input_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>no_local_copy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>invoke_mtx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_uri_t</name></type> <name>parsed_uri</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>finfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>useragent_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>useragent_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>trailers_in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>trailers_out</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>useragent_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>double_reverse</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYREQ_NONE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYREQ_PROXY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYREQ_REVERSE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXYREQ_RESPONSE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<typedef>typedef <type><enum>enum <block>{
<decl><name>AP_CONN_UNKNOWN</name></decl>,
<decl><name>AP_CONN_CLOSE</name></decl>,
<decl><name>AP_CONN_KEEPALIVE</name></decl>
}</block></enum></type> <name>ap_conn_keepalive_e</name>;</typedef>
<struct>struct <name>conn_rec</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>base_server</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>vhost_lookup_data</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>local_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>client_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>client_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>remote_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>remote_logname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>local_ip</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>local_host</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_conf_vector_t</name> *</type><name>conn_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>input_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_filter_t</name> *</type><name>output_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>sbh</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>apr_bucket_alloc_t</name> *</type><name>bucket_alloc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_state_t</name> *</type><name>cs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_in_input_filters</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>data_in_output_filters</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>clogging_input_filters</name>:1</expr>;</expr_stmt>
<expr_stmt><expr><name>signed</name> <name>int</name> <name>double_reverse</name>:2</expr>;</expr_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>aborted</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ap_conn_keepalive_e</name></type> <name>keepalive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keepalives</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> struct <name>ap_logconf</name> *</type><name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>log_id</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name></expr></cpp:if>
<decl_stmt><decl><type><name>apr_thread_t</name> *</type><name>current_thread</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>conn_rec</name> *</type><name>master</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><enum>enum <block>{
<decl><name>CONN_STATE_CHECK_REQUEST_LINE_READABLE</name></decl>,
<decl><name>CONN_STATE_READ_REQUEST_LINE</name></decl>,
<decl><name>CONN_STATE_HANDLER</name></decl>,
<decl><name>CONN_STATE_WRITE_COMPLETION</name></decl>,
<decl><name>CONN_STATE_SUSPENDED</name></decl>,
<decl><name>CONN_STATE_LINGER</name></decl>,
<decl><name>CONN_STATE_LINGER_NORMAL</name></decl>,
<decl><name>CONN_STATE_LINGER_SHORT</name></decl>
}</block></enum></type> <name>conn_state_e</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{
<decl><name>CONN_SENSE_DEFAULT</name></decl>,
<decl><name>CONN_SENSE_WANT_READ</name></decl>,
<decl><name>CONN_SENSE_WANT_WRITE</name></decl>
}</block></enum></type> <name>conn_sense_e</name>;</typedef>
<struct>struct <name>conn_state_t</name> <block>{
<decl_stmt><decl><type><name>conn_state_e</name></type> <name>state</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>conn_sense_e</name></type> <name>sense</name></decl>;</decl_stmt>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_VHOST_ADDR</name></cpp:macro> <cpp:value>0xfffffffful</cpp:value></cpp:define>
<typedef>typedef <type>struct <name>server_addr_rec</name></type> <name>server_addr_rec</name>;</typedef>
<struct>struct <name>server_addr_rec</name> <block>{
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>virthost</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_sockaddr_t</name> *</type><name>host_addr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>host_port</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>ap_logconf</name> <block>{
<decl_stmt><decl><type><name>signed</name> <name>char</name> *</type><name>module_levels</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
}</block>;</struct>
<struct>struct <name>server_rec</name> <block>{
<decl_stmt><decl><type><name>process_rec</name> *</type><name>process</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_rec</name> *</type><name>next</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>error_fname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>error_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_logconf</name></type> <name>log</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_conf_vector_t</name> *</type><name>module_config</name></decl>;</decl_stmt>
<decl_stmt><decl><type>struct <name>ap_conf_vector_t</name> *</type><name>lookup_defaults</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>defn_name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name></type> <name>defn_line_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>is_virtual</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>server_scheme</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>server_admin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>server_hostname</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>server_addr_rec</name> *</type><name>addrs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>keep_alive_timeout</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep_alive_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>keep_alive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>wild_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>pathlen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_req_line</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_req_fieldsize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>limit_req_fields</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>context</name></decl>;</decl_stmt>
<expr_stmt><expr><name>unsigned</name> <name>int</name> <name>keep_alive_timeout_set</name>:1</expr>;</expr_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>ap_sload_t</name></type> <name>ap_sload_t</name>;</typedef>
<struct>struct <name>ap_sload_t</name> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>idle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_off_t</name></type> <name>bytes_served</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>access_count</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type>struct <name>ap_loadavg_t</name></type> <name>ap_loadavg_t</name>;</typedef>
<struct>struct <name>ap_loadavg_t</name> <block>{
<decl_stmt><decl><type><name>float</name></type> <name>loadavg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>loadavg5</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float</name></type> <name>loadavg15</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_context_document_root</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_context_prefix</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_context_info</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>char</name> *<name>prefix</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>document_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_set_document_root</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>, <argument><expr>const <name>char</name> *<name>document_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_field_noparam</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>intype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_ht_time</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>apr_time_t t</argument>, <argument>const char *fmt</argument>, <argument>int gmt</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_getword</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char **line</argument>, <argument>char stop</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_getword_nc</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>char **line</argument>, <argument>char stop</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getword_white</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> **<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getword_white_nc</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>char</name> **<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_getword_nulls</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char **line</argument>,
<argument>char stop</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_getword_nulls_nc</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>char **line</argument>, <argument>char stop</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> **<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getword_conf_nc</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>char</name> **<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getword_conf2</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> **<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getword_conf2_nc</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>char</name> **<name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_resolve_env</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> * <name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_size_list_item</name><argument_list>(<argument><expr>const <name>char</name> **<name>field</name></expr></argument>, <argument><expr><name>int</name> *<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_list_item</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> **<name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_list_item</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>line</name></expr></argument>, <argument><expr>const <name>char</name> *<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_etag_weak</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>line</name></expr></argument>, <argument><expr>const <name>char</name> *<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_etag_strong</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>line</name></expr></argument>, <argument><expr>const <name>char</name> *<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_scan_http_field_content</name><argument_list>(<argument><expr>const <name>char</name> *<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_scan_http_token</name><argument_list>(<argument><expr>const <name>char</name> *<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_scan_vchar_obstext</name><argument_list>(<argument><expr>const <name>char</name> *<name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_parse_token_list_strict</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *tok</argument>,
<argument>apr_array_header_t **tokens</argument>,
<argument>int skip_invalid</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_get_token</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char **accept_line</argument>, <argument>int accept_white</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_token</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>line</name></expr></argument>, <argument><expr>const <name>char</name> *<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_find_last_token</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>line</name></expr></argument>, <argument><expr>const <name>char</name> *<name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_url</name><argument_list>(<argument><expr>const <name>char</name> *<name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unescape_all</name><argument_list>(<argument><expr><name>char</name> *<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>char</name> *<name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_unescape_url_keep2f</name><argument_list>(<argument>char *url</argument>, <argument>int decode_slashes</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_unescape_urlencoded</name><argument_list>(<argument><expr><name>char</name> *<name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_no2slash</name><argument_list>(<argument><expr><name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_getparents</name><argument_list>(<argument><expr><name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_path_segment</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_path_segment_buffer</name><argument_list>(<argument><expr><name>char</name> *<name>c</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_os_escape_path</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *path</argument>, <argument>int partial</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_escape_uri</name><parameter_list>(<param><type><name>ppool</name></type></param>,<param><type><name>path</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_os_escape_path(ppool,path,1)</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_urlencoded</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_urlencoded_buffer</name><argument_list>(<argument><expr><name>char</name> *<name>c</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_escape_html</name><parameter_list>(<param><type><name>p</name></type></param>,<param><type><name>s</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_escape_html2(p,s,0)</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_escape_html2</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *s</argument>, <argument>int toasc</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_logitem</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_size_t</argument>)</argument_list></macro> <macro><name>ap_escape_errorlog_item</name><argument_list>(<argument>char *dest</argument>, <argument>const char *source</argument>,
<argument>apr_size_t buflen</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_construct_server</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *hostname</argument>,
<argument>apr_port_t port</argument>, <argument>const request_rec *r</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_shell_cmd</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_count_dirs</name><argument_list>(<argument><expr>const <name>char</name> *<name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_make_dirstr_prefix</name><argument_list>(<argument>char *d</argument>, <argument>const char *s</argument>, <argument>int n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_make_dirstr_parent</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_make_full_path</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>a</name></expr></argument>, <argument><expr>const <name>char</name> *<name>dir</name></expr></argument>, <argument><expr>const <name>char</name> *<name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_os_is_path_absolute</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_matchexp</name><argument_list>(<argument><expr>const <name>char</name> *<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strcmp_match</name><argument_list>(<argument><expr>const <name>char</name> *<name>str</name></expr></argument>, <argument><expr>const <name>char</name> *<name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strcasecmp_match</name><argument_list>(<argument><expr>const <name>char</name> *<name>str</name></expr></argument>, <argument><expr>const <name>char</name> *<name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strcasestr</name><argument_list>(<argument><expr>const <name>char</name> *<name>s1</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_stripprefix</name><argument_list>(<argument><expr>const <name>char</name> *<name>bigstring</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_pbase64decode</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>bufcoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_pbase64encode</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>char</name> *<name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>ap_regex_t *</argument>)</argument_list></macro> <macro><name>ap_pregcomp</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *pattern</argument>,
<argument>int cflags</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_pregfree</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr><name>ap_regex_t</name> *<name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_pregsub</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>const char *input</argument>,
<argument>const char *source</argument>, <argument>apr_size_t nmatch</argument>,
<argument>ap_regmatch_t pmatch[]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_pregsub_ex</name><argument_list>(<argument>apr_pool_t *p</argument>, <argument>char **result</argument>,
<argument>const char *input</argument>, <argument>const char *source</argument>,
<argument>apr_size_t nmatch</argument>,
<argument>ap_regmatch_t pmatch[]</argument>,
<argument>apr_size_t maxlen</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_content_type_tolower</name><argument_list>(<argument><expr><name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_str_tolower</name><argument_list>(<argument><expr><name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_str_toupper</name><argument_list>(<argument><expr><name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_ind</name><argument_list>(<argument>const char *str</argument>, <argument>char c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_rind</name><argument_list>(<argument>const char *str</argument>, <argument>char c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_escape_quotes</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>instring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_append_pid</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>string</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_timeout_parameter_parse</name><argument_list>(
<argument><expr>const <name>char</name> *<name>timeout_parameter</name></expr></argument>,
<argument><expr><name>apr_interval_time_t</name> *<name>timeout</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>default_time_unit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_request_has_body</name><argument_list>(<argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_pstr2_alnum</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>src</name></expr></argument>,
<argument><expr>const <name>char</name> **<name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_str2_alnum</name><argument_list>(<argument><expr>const <name>char</name> *<name>src</name></expr></argument>, <argument><expr><name>char</name> *<name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<typedef>typedef <type><struct>struct <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>value</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_form_pair_t</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_parse_form_data</name><argument_list>(<argument>request_rec *r</argument>, <argument>struct ap_filter_t *f</argument>,
<argument>apr_array_header_t **ptr</argument>,
<argument>apr_size_t num</argument>, <argument>apr_size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_rdirectory</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_is_directory</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>, <argument><expr>const <name>char</name> *<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_OSD_POSIX</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>os_init_job_environment</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user_name</name></decl></param>, <param><decl><type><name>int</name></type> <name>one_process</name></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><name>char</name> *</type><name>ap_get_local_host</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_log_assert</name><argument_list>(<argument>const char *szExp</argument>, <argument>const char *szFile</argument>, <argument>int nLine</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<name>noreturn</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_assert</name><parameter_list>(<param><type><name>exp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((exp) ? (void)0 : ap_log_assert(#exp,__FILE__,__LINE__))</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEBUG_ASSERT</name><parameter_list>(<param><type><name>exp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_assert(exp)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_DEBUG_ASSERT</name><parameter_list>(<param><type><name>exp</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((void)0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGSTOP_DETACH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGSTOP_MAKE_CHILD</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGSTOP_SPAWN_CHILD</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGSTOP_PIPED_LOG_SPAWN</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGSTOP_CGI_CHILD</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_SIGSTOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>raise_sigstop_flags</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_SIGSTOP</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do { if (raise_sigstop_flags &amp; SIGSTOP_##x) raise(SIGSTOP);} while (0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RAISE_SIGSTOP</name><parameter_list>(<param><type><name>x</name></type></param>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>const <name>char</name> *<name>prefix</name></expr></argument>, <argument><expr><name>request_rec</name> *<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strchr</name><argument_list>(<argument>char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strchr_c</name><argument_list>(<argument>const char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_strrchr</name><argument_list>(<argument>char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <macro><name>ap_strrchr_c</name><argument_list>(<argument>const char *s</argument>, <argument>int c</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strstr</name><argument_list>(<argument><expr><name>char</name> *<name>s</name></expr></argument>, <argument><expr>const <name>char</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_strstr_c</name><argument_list>(<argument><expr>const <name>char</name> *<name>s</name></expr></argument>, <argument><expr>const <name>char</name> *<name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AP_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strchr</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strchr</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_strchr(s,c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strrchr</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strrchr</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_strrchr(s,c)</cpp:value></cpp:define>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>strstr</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>strstr</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ap_strstr(s,c)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_strchr</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strchr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_strchr_c</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strchr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_strrchr</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strrchr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_strrchr_c</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strrchr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_strstr</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strstr(s, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ap_strstr_c</name><parameter_list>(<param><type><name>s</name></type></param>, <param><type><name>c</name></type></param>)</parameter_list></cpp:macro> <cpp:value>strstr(s, c)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_random_insecure_bytes</name><argument_list>(<argument>void *buf</argument>, <argument>apr_size_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_uint32_t</argument>)</argument_list></macro> <macro><name>ap_random_pick</name><argument_list>(<argument>apr_uint32_t min</argument>, <argument>apr_uint32_t max</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_abort_on_oom</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>__attribute__</name><argument_list>(<argument><expr>(<name>noreturn</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_malloc</name><argument_list>(<argument>size_t size</argument>)</argument_list></macro>
<macro><name>__attribute__</name><argument_list>(<argument>(malloc)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>AP_FN_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_calloc</name><argument_list>(<argument>size_t nelem</argument>, <argument>size_t size</argument>)</argument_list></macro>
<macro><name>__attribute__</name><argument_list>(<argument>(malloc)</argument>)</argument_list></macro>
<expr_stmt><expr><call><name>AP_FN_ATTR_ALLOC_SIZE2</name><argument_list>(<argument><expr>1</expr></argument>,<argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void *</argument>)</argument_list></macro> <macro><name>ap_realloc</name><argument_list>(<argument>void *ptr</argument>, <argument>size_t size</argument>)</argument_list></macro>
<decl_stmt><decl><type><name>AP_FN_ATTR_WARN_UNUSED_RESULT</name></type>
<name>AP_FN_ATTR_ALLOC_SIZE</name><argument_list>(<argument><expr>2</expr></argument>)</argument_list></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_sload</name><argument_list>(<argument><expr><name>ap_sload_t</name> *<name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_loadavg</name><argument_list>(<argument><expr><name>ap_loadavg_t</name> *<name>ld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_bin2hex</name><argument_list>(<argument>const void *src</argument>, <argument>apr_size_t srclen</argument>, <argument>char *dest</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_exec_line</name><argument_list>(<argument><expr><name>apr_pool_t</name> *<name>p</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>cmd</name></expr></argument>,
<argument><expr>const <name>char</name> * const *<name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_NORESTART</name></cpp:macro> <cpp:value>APR_OS_START_USEERR + 1</cpp:value></cpp:define>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_array_str_index</name><argument_list>(<argument>const apr_array_header_t *array</argument>,
<argument>const char *s</argument>,
<argument>int start</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_array_str_contains</name><argument_list>(<argument><expr>const <name>apr_array_header_t</name> *<name>array</name></expr></argument>,
<argument><expr>const <name>char</name> *<name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_cstr_casecmp</name><argument_list>(<argument><expr>const <name>char</name> *<name>s1</name></expr></argument>, <argument><expr>const <name>char</name> *<name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>int</argument>)</argument_list></macro> <macro><name>ap_cstr_casecmpn</name><argument_list>(<argument>const char *s1</argument>, <argument>const char *s2</argument>, <argument>apr_size_t n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
