<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/os/win32/ap_regkey.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch/win32/apr_arch_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arch/win32/apr_arch_misc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regkey.h"</cpp:file></cpp:include>
<struct>struct <name>ap_regkey_t</name> <block>{
<decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>
}</block>;</struct>
<macro><name>AP_DECLARE</name><argument_list>(<argument>const ap_regkey_t *</argument>)</argument_list></macro> <macro><name>ap_regkey_const</name><argument_list>(<argument>int i</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><specifier>static</specifier> struct <name>ap_regkey_t</name></type> <name><name>ap_regkey_consts</name><index>[<expr>7</expr>]</index></name> <init>= <expr><block>{
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_CLASSES_ROOT</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_CURRENT_CONFIG</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_CURRENT_USER</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_LOCAL_MACHINE</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_USERS</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_PERFORMANCE_DATA</name></expr>}</block></expr>,
<expr><block>{<expr><name>NULL</name></expr>, <expr><name>HKEY_DYN_DATA</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<return>return <expr><name>ap_regkey_consts</name> + <name>i</name></expr>;</return>
}</block>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>regkey_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>key</name></decl></param>)</parameter_list> <block>{
<decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>regkey</name> <init>= <expr><name>key</name></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name><name>regkey</name>-&gt;<name>hkey</name></name> &amp;&amp; <name><name>regkey</name>-&gt;<name>hkey</name></name> != <name>INVALID_HANDLE_VALUE</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name><name>regkey</name>-&gt;<name>hkey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>regkey</name>-&gt;<name>hkey</name></name> = <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_open</name><argument_list>(<argument>ap_regkey_t **newkey</argument>,
<argument>const ap_regkey_t *parentkey</argument>,
<argument>const char *keyname</argument>,
<argument>apr_int32_t flags</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>access</name> <init>= <expr><name>KEY_QUERY_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>exists</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<if>if <condition>(<expr><name>flags</name> &amp; <name>APR_READ</name></expr>)</condition><then>
<expr_stmt><expr><name>access</name> |= <name>KEY_READ</name></expr>;</expr_stmt></then></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>APR_WRITE</name></expr>)</condition><then>
<expr_stmt><expr><name>access</name> |= <name>KEY_WRITE</name></expr>;</expr_stmt></then></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>keylen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wkeylen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wkeyname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr>&amp;<name>keylen</name></expr></argument>, <argument><expr><name>wkeyname</name></expr></argument>, <argument><expr>&amp;<name>wkeylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>keylen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<if>if <condition>(<expr><name>flags</name> &amp; <name>APR_CREATE</name></expr>)</condition><then>
<expr_stmt><expr><name>rc</name> = <call><name>RegCreateKeyExW</name><argument_list>(<argument><expr><name><name>parentkey</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wkeyname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>hkey</name></expr></argument>, <argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rc</name> = <call><name>RegOpenKeyExW</name><argument_list>(<argument><expr><name><name>parentkey</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wkeyname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr>&amp;<name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<if>if <condition>(<expr><name>flags</name> &amp; <name>APR_CREATE</name></expr>)</condition><then>
<expr_stmt><expr><name>rc</name> = <call><name>RegCreateKeyEx</name><argument_list>(<argument><expr><name><name>parentkey</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
<argument><expr><name>access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>hkey</name></expr></argument>, <argument><expr>&amp;<name>exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
<else>else
<expr_stmt><expr><name>rc</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name><name>parentkey</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr>&amp;<name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>flags</name> &amp; <name>APR_EXCL</name>) &amp;&amp; (<name>exists</name> == <name>REG_OPENED_EXISTING_KEY</name>)</expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_EEXIST</name></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>newkey</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>**<name>newkey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>newkey</name>)-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
<expr_stmt><expr><name>(*<name>newkey</name>)-&gt;<name>hkey</name></name> = <name>hkey</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>(*<name>newkey</name>)-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call>(<name>void</name> *)<argument_list>(<argument><expr>*<name>newkey</name></expr></argument>)</argument_list></call></expr></argument>,
<argument><expr><name>regkey_cleanup</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_close</name><argument_list>(<argument>ap_regkey_t *regkey</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
<if>if <condition>(<expr>(<name>stat</name> = <call><name>regkey_cleanup</name><argument_list>(<argument><expr><name>regkey</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>apr_pool_cleanup_kill</name><argument_list>(<argument><expr><name><name>regkey</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>regkey</name></expr></argument>, <argument><expr><name>regkey_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
<return>return <expr><name>stat</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_remove</name><argument_list>(<argument>const ap_regkey_t *parent</argument>,
<argument>const char *keyname</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>keylen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wkeylen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wkeyname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr>&amp;<name>keylen</name></expr></argument>, <argument><expr><name>wkeyname</name></expr></argument>, <argument><expr>&amp;<name>wkeylen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>keylen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegDeleteKeyW</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wkeyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<decl_stmt><decl><type><name>DWORD</name></type> <name>subkeys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>HKEY</name></type> <name>hkey</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>RegOpenKeyEx</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>KEY_READ</name></expr></argument>, <argument><expr>&amp;<name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryInfoKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>subkeys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>RegCloseKey</name><argument_list>(<argument><expr><name>hkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>subkeys</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_ACCESS_DENIED</name></expr></argument>)</argument_list></call></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegDeleteKey</name><argument_list>(<argument><expr><name><name>parent</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>keyname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_get</name><argument_list>(<argument>char **result</argument>,
<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wvallen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wvalname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>wvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>&amp;<name>wvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>valuelen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>DWORD</name> *)&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr>(<name>size</name> &lt; 2) || (<name>type</name> != <name>REG_SZ</name> &amp;&amp; <name>type</name> != <name>REG_EXPAND_SZ</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr><name>wvalue</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>,
<argument><expr>(<name>LPBYTE</name>)<name>wvalue</name></expr></argument>, <argument><expr>(<name>DWORD</name> *)&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<if>if <condition>(<expr><name>type</name> == <name>REG_EXPAND_SZ</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>zbuf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>ExpandEnvironmentStringsW</name><argument_list>(<argument><expr><name>wvalue</name></expr></argument>, <argument><expr><name>zbuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>tmp</name> <init>= <expr><name>wvalue</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>wvalue</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>ExpandEnvironmentStringsW</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>wvalue</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then> <else>else <block>{
<expr_stmt><expr><name>size</name> /= 2</expr>;</expr_stmt>
}</block></else></if>
<expr_stmt><expr><name>valuelen</name> = (<name>size</name> - 1) * 3 + 1</expr>;</expr_stmt>
<expr_stmt><expr>*<name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_ucs2_to_utf8</name><argument_list>(<argument><expr><name>wvalue</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>*<name>result</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>size</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>DWORD</name> *)&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr>(<name>size</name> &lt; 1) || (<name>type</name> != <name>REG_SZ</name> &amp;&amp; <name>type</name> != <name>REG_EXPAND_SZ</name>)</expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr>*<name>result</name></expr></argument>, <argument><expr>(<name>DWORD</name> *)&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<if>if <condition>(<expr><name>type</name> == <name>REG_EXPAND_SZ</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name></type> <name><name>zbuf</name><index>[<expr>1</expr>]</index></name></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> = <call><name>ExpandEnvironmentStrings</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>, <argument><expr><name>zbuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name></expr>)</condition><then> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name> <init>= <expr>*<name>result</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>size</name> = <call><name>ExpandEnvironmentStrings</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr>*<name>result</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></then></if>
}</block></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>const char *value</argument>,
<argument>apr_int32_t flags</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DWORD</name></type> <name>type</name> <init>= <expr>(<name>flags</name> &amp; <name>AP_REGKEY_EXPAND</name>) ? <name>REG_EXPAND_SZ</name> : <name>REG_SZ</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>alloclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wvallen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wvalname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>wvalue</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>&amp;<name>wvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>valuelen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>wvallen</name> = <name>alloclen</name> = <name>size</name></expr>;</expr_stmt>
<expr_stmt><expr><name>wvalue</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>alloclen</name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>wvalue</name></expr></argument>, <argument><expr>&amp;<name>wvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>size</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>size</name> = (<name>alloclen</name> - <name>wvallen</name>) * 2</expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>RegSetValueExW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>type</name></expr></argument>,
<argument><expr>(<name>LPBYTE</name>)<name>wvalue</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>RegSetValueEx</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_raw_get</name><argument_list>(<argument>void **result</argument>,
<argument>apr_size_t *resultsize</argument>,
<argument>apr_int32_t *resulttype</argument>,
<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wvallen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wvalname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>&amp;<name>wvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>valuelen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resulttype</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resultsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<expr_stmt><expr>*<name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>resultsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueExW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resulttype</name></expr></argument>,
<argument><expr>(<name>LPBYTE</name>)*<name>result</name></expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resultsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resulttype</name></expr></argument>,
<argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resultsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
<expr_stmt><expr>*<name>result</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>*<name>resultsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rc</name> = <call><name>RegQueryValueEx</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resulttype</name></expr></argument>,
<argument><expr>(<name>LPBYTE</name>)*<name>result</name></expr></argument>, <argument><expr>(<name>LPDWORD</name>)<name>resultsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_raw_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>const void *value</argument>,
<argument>apr_size_t valuesize</argument>,
<argument>apr_int32_t valuetype</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wvallen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wvalname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>&amp;<name>wvallen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>valuelen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegSetValueExW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>valuetype</name></expr></argument>,
<argument><expr>(<name>LPBYTE</name>)<name>value</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<name>valuesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>RegSetValueEx</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>valuetype</name></expr></argument>,
<argument><expr>(<name>LPBYTE</name>)<name>value</name></expr></argument>, <argument><expr>(<name>DWORD</name>)<name>valuesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_array_get</name><argument_list>(<argument>apr_array_header_t **result</argument>,
<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_int32_t</name></type> <name>type</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_raw_get</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>type</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><name>rv</name></expr>;</return>
}</block></then> <else>else <if>if <condition>(<expr><name>type</name> != <name>REG_MULTI_SZ</name></expr>)</condition><then> <block>{
<return>return <expr><name>APR_EINVAL</name></expr>;</return>
}</block></then></if></else></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>alloclen</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>size</name> /= 2</expr>;</expr_stmt>
<expr_stmt><expr><name>alloclen</name> = <name>valuelen</name> = <name>size</name> * 3 + 2</expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_ucs2_to_utf8</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>size</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name><name>buf</name><index>[<expr>(<name>alloclen</name> - <name>valuelen</name>)</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr>(<name>alloclen</name> - <name>valuelen</name>) + 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>buf</name> = (<name>char</name> *)<name>value</name></expr>;</expr_stmt>
<if>if <condition>(<expr><name>size</name> &lt; 2 || <name><name>buf</name><index>[<expr><name>size</name> - 1</expr>]</index></name> != '\0' || <name><name>buf</name><index>[<expr><name>size</name> - 2</expr>]</index></name> != '\0'</expr>)</condition><then> <block>{
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name> + 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name> + 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name><name>buf</name><index>[<expr><name>size</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
}</block></then></if>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<expr_stmt><expr><name>size</name> = 0</expr>;</expr_stmt>
<for>for (<init><expr><name>tmp</name> = <name>buf</name></expr>;</init> <condition><expr>*<name>tmp</name></expr>;</condition> <incr><expr>++<name>tmp</name></expr></incr>) <block>{
<expr_stmt><expr>++<name>size</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>tmp</name></expr>)</condition> <block>{
<expr_stmt><expr>++<name>tmp</name></expr>;</expr_stmt>
}</block></while>
}</block></for>
<expr_stmt><expr>*<name>result</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>(<name>int</name>)<name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for (<init><expr><name>tmp</name> = <name>buf</name></expr>;</init> <condition><expr>*<name>tmp</name></expr>;</condition> <incr><expr>++<name>tmp</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>char</name> **</type><name>newelem</name> <init>= <expr>(<name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr>*<name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr>*<name>newelem</name> = <name>tmp</name></expr>;</expr_stmt>
<while>while <condition>(<expr>*<name>tmp</name></expr>)</condition> <block>{
<expr_stmt><expr>++<name>tmp</name></expr>;</expr_stmt>
}</block></while>
}</block></for>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_array_set</name><argument_list>(<argument>ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>int nelts</argument>,
<argument>const char * const * elts</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> *</type><name>value</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bufsize</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name> *</type><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>bufrem</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bufsize</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>bufsize</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>nelts</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>bufsize</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>bufrem</name> = <name>bufsize</name></expr>;</expr_stmt>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bufsize</name> * 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>buf</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>eltsize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>size</name> <init>= <expr><name>eltsize</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>rv</name> = <call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr>&amp;<name>bufrem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>size</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>tmp</name> += <name>eltsize</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>nelts</name></expr>)</condition><then> <block>{
<expr_stmt><expr>--<name>bufrem</name></expr>;</expr_stmt>
<expr_stmt><expr>(*<name>tmp</name>++) = L'\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>--<name>bufrem</name></expr>;</expr_stmt>
<expr_stmt><expr>*<name>tmp</name> = L'\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>bufsize</name> = (<name>bufsize</name> - <name>bufrem</name>) * 2</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = (<name>void</name>*)<name>buf</name></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> *</type><name>tmp</name></decl>;</decl_stmt>
<expr_stmt><expr><name>bufsize</name> = 1</expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<expr_stmt><expr><name>bufsize</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>nelts</name></expr>)</condition><then> <block>{
<expr_stmt><expr>++<name>bufsize</name></expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr><name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> = <name>buf</name></expr>;</expr_stmt>
<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>tmp</name> += <name>len</name></expr>;</expr_stmt>
}</block></for>
<if>if <condition>(<expr>!<name>nelts</name></expr>)</condition><then> <block>{
<expr_stmt><expr>(*<name>tmp</name>++) = '\0'</expr>;</expr_stmt>
}</block></then></if>
<expr_stmt><expr>*<name>tmp</name> = '\0'</expr>;</expr_stmt>
<expr_stmt><expr><name>value</name> = <name>buf</name></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<return>return <expr><call><name>ap_regkey_value_raw_set</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>, <argument><expr><name>value</name></expr></argument>,
<argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>REG_MULTI_SZ</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_regkey_value_remove</name><argument_list>(<argument>const ap_regkey_t *key</argument>,
<argument>const char *valuename</argument>,
<argument>apr_pool_t *pool</argument>)</argument_list></macro> <block>{
<decl_stmt><decl><type><name>LONG</name></type> <name>rc</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_UNICODE_FS</name></expr></cpp:if>
<macro><name>IF_WIN_OS_IS_UNICODE</name></macro> <block>{
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_size_t</name></type> <name>wvallen</name> <init>= <expr>256</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_wchar_t</name></type> <name><name>wvalname</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_conv_utf8_to_ucs2</name><argument_list>(<argument><expr><name>valuename</name></expr></argument>, <argument><expr>&amp;<name>valuelen</name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>, <argument><expr>&amp;<name>wvallen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
<return>return <expr><name>rv</name></expr>;</return></then>
<else>else <if>if <condition>(<expr><name>valuelen</name></expr>)</condition><then>
<return>return <expr><name>APR_ENAMETOOLONG</name></expr>;</return></then></if></else></if>
<expr_stmt><expr><name>rc</name> = <call><name>RegDeleteValueW</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>wvalname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_ANSI_FS</name></expr></cpp:if>
<macro><name>ELSE_WIN_OS_IS_ANSI</name></macro> <block>{
<expr_stmt><expr><name>rc</name> = <call><name>RegDeleteValue</name><argument_list>(<argument><expr><name><name>key</name>-&gt;<name>hkey</name></name></expr></argument>, <argument><expr><name>valuename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<if>if <condition>(<expr><name>rc</name> != <name>ERROR_SUCCESS</name></expr>)</condition><then> <block>{
<return>return <expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></then></if>
<return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
