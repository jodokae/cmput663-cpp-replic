<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="_cppstats/os/netware/util_nw.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netware.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nks/netware.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nks/vm.h&gt;</cpp:file></cpp:include>
<function_decl><type><name>void</name></type> <name>ap_down_server_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_dummy_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>ap_cb_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>nlmUnloadSignaled</name><parameter_list>(<param><decl><type><name>int</name></type> <name>wait</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>event_handle_t</name></type> <name>eh</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Warn_t</name></type> <name>ref</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Report_t</name></type> <name>dum</name></decl>;</decl_stmt>
<macro><name>AP_DECLARE</name><argument_list>(<argument>apr_status_t</argument>)</argument_list></macro> <macro><name>ap_os_create_privileged_process</name><argument_list>(
<argument>const request_rec *r</argument>,
<argument>apr_proc_t *newproc</argument>, <argument>const char *progname</argument>,
<argument>const char * const *args</argument>,
<argument>const char * const *env</argument>,
<argument>apr_procattr_t *attr</argument>, <argument>apr_pool_t *p</argument>)</argument_list></macro> <block>{
<return>return <expr><call><name>apr_proc_create</name><argument_list>(<argument><expr><name>newproc</name></expr></argument>, <argument><expr><name>progname</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name>env</name></expr></argument>, <argument><expr><name>attr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block>
<function><type><name>int</name></type> <name>_NonAppCheckUnload</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list> <block>{
<return>return <expr><call><name>nlmUnloadSignaled</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_down_server_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>nlmUnloadSignaled</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_dummy_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>, <param><decl><type><name>void</name> *</type><name>b</name></decl></param>)</parameter_list> <block>{
<return>return;</return>
}</block></function>
<function><type><name>void</name></type> <name>ap_cb_destroy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>a</name></decl></param>)</parameter_list> <block>{
<expr_stmt><expr><call><name>UnRegisterEventNotification</name><argument_list>(<argument><expr><name>eh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NX_UNWRAP_INTERFACE</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NX_UNWRAP_INTERFACE</name><argument_list>(<argument><expr><name>dum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>_NonAppStart</name>
<parameter_list>(
<param><decl><type><name>void</name> *</type><name>NLMHandle</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>errorScreen</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmdLine</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>loadDirPath</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>uninitializedDataLength</name></decl></param>,
<param><decl><type><name>void</name> *</type><name>NLMFileHandle</name></decl></param>,
<param><function_decl><type><name>int</name></type> (*<name>readRoutineP</name>)<parameter_list>( <param><decl><type><name>int</name></type> <name>conn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fileHandle</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>offset</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>nbytes</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>bytesRead</name></decl></param>, <param><decl><type><name>void</name> *</type><name>buffer</name></decl></param> )</parameter_list></function_decl></param>,
<param><decl><type><name>size_t</name></type> <name>customDataOffset</name></decl></param>,
<param><decl><type><name>size_t</name></type> <name>customDataSize</name></decl></param>,
<param><decl><type><name>int</name></type> <name>messageCount</name></decl></param>,
<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>messages</name></decl></param>
)</parameter_list> <block>{
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(cmdLine)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(loadDirPath)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(uninitializedDataLength)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(NLMFileHandle)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(readRoutineP)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(customDataOffset)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(customDataSize)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(messageCount)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(messages)</cpp:pragma>
<decl_stmt><decl><type><name>rtag_t</name></type> <name>rt</name> <init>= <expr><call><name>AllocateResourceTag</name><argument_list>(<argument><expr><name>NLMHandle</name></expr></argument>, <argument><expr>"Apache2 Down Server Callback"</expr></argument>,
<argument><expr><name>EventSignature</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><call><name>NX_WRAP_INTERFACE</name><argument_list>(<argument><expr>(<name>void</name> *)<name>ap_down_server_cb</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NX_WRAP_INTERFACE</name><argument_list>(<argument><expr>(<name>void</name> *)<name>ap_dummy_cb</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>(<name>void</name> **)&amp;<name>dum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><name>eh</name> = <call><name>RegisterForEventNotification</name><argument_list>(<argument><expr><name>rt</name></expr></argument>, <argument><expr><name>EVENT_DOWN_SERVER</name></expr></argument>,
<argument><expr><name>EVENT_PRIORITY_APPLICATION</name></expr></argument>,
<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>dum</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>NXVmRegisterExitHandler</name><argument_list>(<argument><expr><name>ap_cb_destroy</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
