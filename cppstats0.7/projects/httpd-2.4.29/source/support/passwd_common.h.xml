<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/support/passwd_common.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_PASSWD_COMMON_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_PASSWD_COMMON_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>2,0,0</expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu_version.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRING_LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALG_PLAIN</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALG_CRYPT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALG_APMD5</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALG_APSHA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALG_BCRYPT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCRYPT_DEFAULT_COST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_FILEPERM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_SYNTAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_PWMISMATCH</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_INTERRUPTED</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_OVERFLOW</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_BADUSER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_INVALID</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_RANDOM</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_GENERAL</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_ALG_NOT_SUPP</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NL</name></cpp:macro> <cpp:value>APR_EOL_STR</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPT_ALGO_SUPPORTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAIN_ALGO_SUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CRYPT_ALGO_SUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAIN_ALGO_SUPPORTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>APR_VERSION_AT_LEAST</name><argument_list>(<argument><expr>2,0,0</expr></argument>)</argument_list></call> || \
    (<name>APU_MAJOR_VERSION</name> == 1 &amp;&amp; <name>APU_MINOR_VERSION</name> &gt;= 5)</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCRYPT_ALGO_SUPPORTED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BCRYPT_ALGO_SUPPORTED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Must be initialized with apr_file_open_stderr() before using any of the
 * below functions.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>apr_file_t</name> *</type><name>errfile</name></decl>;</decl_stmt>

<struct>struct <name>passwd_ctx</name> <block>{
    <decl_stmt><decl><type><name>apr_pool_t</name>      *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>      *</type><name>errstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            *</type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type>      <name>out_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>            *</type><name>passwd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>alg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>cost</name></decl>;</decl_stmt>
    <enum>enum <block>{
        <decl><name>PW_PROMPT</name> <init>= <expr>0</expr></init></decl>,
        <decl><name>PW_ARG</name></decl>,
        <decl><name>PW_STDIN</name></decl>,
        <decl><name>PW_PROMPT_VERIFY</name></decl>,
    }</block> <decl><name>passwd_src</name></decl>;</enum>
}</block>;</struct>


<comment type="block">/*
 * To be used as apr_pool_abort_fn
 */</comment>
<function_decl><type><name>int</name></type> <name>abort_on_oom</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rc</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Write a line to the file. On error, print a message and exit
 */</comment>
<function_decl><type><name>void</name></type> <name>putline</name><parameter_list>(<param><decl><type><name>apr_file_t</name> *</type><name>f</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>l</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * The following functions return zero on success; otherwise, one of
 * the ERR_* codes is returned and an error message is stored in ctx-&gt;errstr.
 */</comment>

<comment type="block">/*
 * Parse the algorithm specific options.
 */</comment>
<function_decl><type><name>int</name></type> <name>parse_common_options</name><parameter_list>(<param><decl><type>struct <name>passwd_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>char</name></type> <name>opt</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>opt_arg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Ask for password with verification.
 */</comment>
<function_decl><type><name>int</name></type> <name>get_password</name><parameter_list>(<param><decl><type>struct <name>passwd_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Make a password record from the given information.
 */</comment>
<function_decl><type><name>int</name></type> <name>mkhash</name><parameter_list>(<param><decl><type>struct <name>passwd_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _PASSWD_COMMON_H */</comment>

</unit>
