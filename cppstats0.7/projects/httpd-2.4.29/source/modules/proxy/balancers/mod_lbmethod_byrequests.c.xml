<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/proxy/balancers/mod_lbmethod_byrequests.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>lbmethod_byrequests_module</name></decl>;</decl_stmt>

<expr_stmt><expr>static <call><call><name>int</name> <argument_list>(<argument><expr>*<name>ap_proxy_retry_worker_fn</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr>const <name>char</name> *<name>proxy_function</name></expr></argument>,
        <argument><expr><name>proxy_worker</name> *<name>worker</name></expr></argument>, <argument><expr><name>server_rec</name> *<name>s</name></expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>

<comment type="block">/*
 * The idea behind the find_best_byrequests scheduler is the following:
 *
 * lbfactor is "how much we expect this worker to work", or "the worker's
 * normalized work quota".
 *
 * lbstatus is "how urgent this worker has to work to fulfill its quota
 * of work".
 *
 * We distribute each worker's work quota to the worker, and then look
 * which of them needs to work most urgently (biggest lbstatus).  This
 * worker is then selected for work, and its lbstatus reduced by the
 * total work quota we distributed to all workers.  Thus the sum of all
 * lbstatus does not change.(*)
 *
 * If some workers are disabled, the others will
 * still be scheduled correctly.
 *
 * If a balancer is configured as follows:
 *
 * worker     a    b    c    d
 * lbfactor  25   25   25   25
 *
 * And b gets disabled, the following schedule is produced:
 *
 *    a c d a c d a c d ...
 *
 * Note that the above lbfactor setting is the *exact* same as:
 *
 * worker     a    b    c    d
 * lbfactor   1    1    1    1
 *
 * Asymmetric configurations work as one would expect. For
 * example:
 *
 * worker     a    b    c    d
 * lbfactor   1    1    1    2
 *
 * would have a, b and c all handling about the same
 * amount of load with d handling twice what a or b
 * or c handles individually. So we could see:
 *
 *   b a d c d a c d b d ...
 *
 */</comment>

<function><type><specifier>static</specifier> <name>proxy_worker</name> *</type><name>find_best_byrequests</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>,
                                <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>total_factor</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_worker</name> *</type><name>mycandidate</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cur_lbset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_lbset</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>checking_standby</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>checked_standby</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ap_proxy_retry_worker_fn</name> =
                <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_proxy_retry_worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>ap_proxy_retry_worker_fn</name></expr>)</condition><then> <block>{
            <comment type="block">/* can only happen if mod_proxy isn't loaded */</comment>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01207</expr></argument>)</argument_list></call>
                 "proxy: Entering byrequests for BALANCER (%s)"</expr></argument>,
                 <argument><expr><name><name>balancer</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* First try to see if we have available candidate */</comment>
    <do>do <block>{
        <expr_stmt><expr><name>checking_standby</name> = <name>checked_standby</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr>!<name>mycandidate</name> &amp;&amp; !<name>checked_standby</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr>!<name>checking_standby</name></expr>)</condition><then> <block>{    <comment type="block">/* first time through */</comment>
                    <if>if <condition>(<expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name> &gt; <name>max_lbset</name></expr>)</condition><then>
                        <expr_stmt><expr><name>max_lbset</name> = <name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name></expr>;</expr_stmt></then></if>
                }</block></then></if>
                <if>if <condition>(
                    <expr>(<name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbset</name></name></name> != <name>cur_lbset</name>) ||
                    (<name>checking_standby</name> ? !<call><name>PROXY_WORKER_IS_STANDBY</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call> : <call><name>PROXY_WORKER_IS_STANDBY</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call>) ||
                    (<call><name>PROXY_WORKER_IS_DRAINING</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call>)</expr>
                    )</condition><then> <block>{
                    <continue>continue;</continue>
                }</block></then></if>

                <comment type="block">/* If the worker is in error state run
                 * retry on that worker. It will be marked as
                 * operational if the retry timeout is elapsed.
                 * The worker might still be unusable, but we try
                 * anyway.
                 */</comment>
                <if>if <condition>(<expr>!<call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                    <expr_stmt><expr><call><name>ap_proxy_retry_worker_fn</name><argument_list>(<argument><expr>"BALANCER"</expr></argument>, <argument><expr>*<name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                <comment type="block">/* Take into calculation only the workers that are
                 * not in error state or not disabled.
                 */</comment>
                <if>if <condition>(<expr><call><name>PROXY_WORKER_IS_USABLE</name><argument_list>(<argument><expr>*<name>worker</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name></name> += <name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>total_factor</name> += <name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbfactor</name></name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr>!<name>mycandidate</name> || <name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name></name> &gt; <name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>lbstatus</name></name></expr>)</condition><then>
                        <expr_stmt><expr><name>mycandidate</name> = *<name>worker</name></expr>;</expr_stmt></then></if>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>checked_standby</name> = <name>checking_standby</name>++</expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cur_lbset</name>++</expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>cur_lbset</name> &lt;= <name>max_lbset</name> &amp;&amp; !<name>mycandidate</name></expr>)</condition>;</do>

    <if>if <condition>(<expr><name>mycandidate</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>lbstatus</name></name> -= <name>total_factor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01208</expr></argument>)</argument_list></call>
                     "proxy: byrequests selected worker \"%s\" : busy %" <name>APR_SIZE_T_FMT</name> " : lbstatus %d"</expr></argument>,
                     <argument><expr><name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>busy</name></name></expr></argument>, <argument><expr><name><name>mycandidate</name>-&gt;<name>s</name>-&gt;<name>lbstatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></then></if>

    <return>return <expr><name>mycandidate</name></expr>;</return>
}</block></function>

<comment type="block">/* assumed to be mutex protected by caller */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>reset</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_worker</name> **</type><name>worker</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>worker</name> = (<name>proxy_worker</name> **)<name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>balancer</name>-&gt;<name>workers</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>worker</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>(*<name>worker</name>)-&gt;<name><name>s</name>-&gt;<name>lbstatus</name></name></name> = 0</expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>age</name><parameter_list>(<param><decl><type><name>proxy_balancer</name> *</type><name>balancer</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * How to add additional lbmethods:
 *   1. Create func which determines "best" candidate worker
 *      (eg: find_best_bytraffic, above)
 *   2. Register it as a provider.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>proxy_balancer_method</name></type> <name>byrequests</name> <init>=
<expr><block>{
    <expr>"byrequests"</expr>,
    <expr>&amp;<name>find_best_byrequests</name></expr>,
    <expr><name>NULL</name></expr>,
    <expr>&amp;<name>reset</name></expr>,
    <expr>&amp;<name>age</name></expr>,
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Only the mpm_winnt has child init hook handler.
     * make sure that we are called after the mpm
     * initializes and after the mod_proxy
     */</comment>
    <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>PROXY_LBMETHOD</name></expr></argument>, <argument><expr>"byrequests"</expr></argument>, <argument><expr>"0"</expr></argument>, <argument><expr>&amp;<name>byrequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>lbmethod_byrequests</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,       <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>NULL</name></expr>,       <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>NULL</name></expr>,       <comment type="block">/* create per-server config structure */</comment>
    <expr><name>NULL</name></expr>,       <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>NULL</name></expr>,       <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hook</name></expr> <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
