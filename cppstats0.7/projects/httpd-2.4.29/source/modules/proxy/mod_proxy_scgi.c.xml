<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/proxy/mod_proxy_scgi.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_proxy_scgi.c
 * Proxy backend module for the SCGI protocol
 * (http://python.ca/scgi/protocol.txt)
 *
 * Andr√© Malo (nd/perlig.de), August 2007
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_MEMFUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scgi.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCHEME</name></cpp:macro> <cpp:value>"scgi"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROXY_FUNCTION</name></cpp:macro> <cpp:value>"SCGI"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCGI_MAGIC</name></cpp:macro> <cpp:value>"SCGI"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCGI_PROTOCOL_VERSION</name></cpp:macro> <cpp:value>"1"</cpp:value></cpp:define>

<comment type="block">/* just protect from typos */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTENT_LENGTH</name></cpp:macro> <cpp:value>"CONTENT_LENGTH"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GATEWAY_INTERFACE</name></cpp:macro> <cpp:value>"GATEWAY_INTERFACE"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_scgi_module</name></decl>;</decl_stmt>


<typedef>typedef <type><enum>enum <block>{
    <decl><name>scgi_internal_redirect</name></decl>,
    <decl><name>scgi_sendfile</name></decl>
}</block></enum></type> <name>scgi_request_type</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl>;</decl_stmt>    <comment type="block">/* target URL */</comment>
    <decl_stmt><decl><type><name>scgi_request_type</name></type> <name>type</name></decl>;</decl_stmt>  <comment type="block">/* type of request */</comment>
}</block></struct></type> <name>scgi_request_config</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scgi_sendfile_off</name> <init>= <expr>"off"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scgi_sendfile_on</name> <init>= <expr>"X-Sendfile"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scgi_internal_redirect_off</name> <init>= <expr>"off"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scgi_internal_redirect_on</name> <init>= <expr>"Location"</expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>sendfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>internal_redirect</name></decl>;</decl_stmt>
}</block></struct></type> <name>scgi_config</name>;</typedef>


<comment type="block">/*
 * We create our own bucket type, which is actually derived (c&amp;p) from the
 * socket bucket.
 * Maybe some time this should be made more abstract (like passing an
 * interception function to read or something) and go into the ap_ or
 * even apr_ namespace.
 */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name> *</type><name>counter</name></decl>;</decl_stmt>
}</block></struct></type> <name>socket_ex_data</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>apr_bucket</name> *</type><name>bucket_socket_ex_create</name><parameter_list>(<param><decl><type><name>socket_ex_data</name> *</type><name>data</name></decl></param>,
                                           <param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>list</name></decl></param>)</parameter_list>;</function_decl>


<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bucket_socket_ex_read</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>a</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>str</name></decl></param>,
                                          <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>,
                                          <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>socket_ex_data</name> *</type><name>data</name> <init>= <expr><name><name>a</name>-&gt;<name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>p</name> <init>= <expr><name><name>data</name>-&gt;<name>sock</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr>*<name>str</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>len</name> = <name>APR_BUCKET_BUFF_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> = <call><name>apr_bucket_alloc</name><argument_list>(<argument><expr>*<name>len</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_socket_recv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>block</name> == <name>APR_NONBLOCK_READ</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>rv</name> != <name>APR_EOF</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_bucket_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>*<name>len</name> &gt; 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_bucket_heap</name> *</type><name>h</name></decl>;</decl_stmt>

        <comment type="block">/* count for stats */</comment>
        <expr_stmt><expr>*<name><name>data</name>-&gt;<name>counter</name></name> += *<name>len</name></expr>;</expr_stmt>

        <comment type="block">/* Change the current bucket to refer to what we read */</comment>
        <expr_stmt><expr><name>a</name> = <call><name>apr_bucket_heap_make</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>*<name>len</name></expr></argument>, <argument><expr><name>apr_bucket_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>h</name> = <name><name>a</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>h</name>-&gt;<name>alloc_len</name></name> = <name>APR_BUCKET_BUFF_SIZE</name></expr>;</expr_stmt> <comment type="block">/* note the real buffer size */</comment>
        <expr_stmt><expr>*<name>str</name> = <name>buf</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BUCKET_INSERT_AFTER</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>bucket_socket_ex_create</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>a</name>-&gt;<name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>apr_bucket_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> = <call><name>apr_bucket_immortal_make</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>str</name> = <name><name>a</name>-&gt;<name>data</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>bucket_type_socket_ex</name> <init>= <expr><block>{
    <expr>"SOCKET_EX"</expr>, <expr>5</expr>, <expr><name>APR_BUCKET_DATA</name></expr>,
    <expr><name>apr_bucket_destroy_noop</name></expr>,
    <expr><name>bucket_socket_ex_read</name></expr>,
    <expr><name>apr_bucket_setaside_notimpl</name></expr>,
    <expr><name>apr_bucket_split_notimpl</name></expr>,
    <expr><name>apr_bucket_copy_notimpl</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>apr_bucket</name> *</type><name>bucket_socket_ex_make</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>socket_ex_data</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>b</name>-&gt;<name>type</name></name>        = &amp;<name>bucket_type_socket_ex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>length</name></name>      = <call>(<name>apr_size_t</name>)<argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>start</name></name>       = -1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>data</name></name>        = <name>data</name></expr>;</expr_stmt>
    <return>return <expr><name>b</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_bucket</name> *</type><name>bucket_socket_ex_create</name><parameter_list>(<param><decl><type><name>socket_ex_data</name> *</type><name>data</name></decl></param>,
                                           <param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>list</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><call><name>apr_bucket_alloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>APR_BUCKET_INIT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>free</name></name> = <name>apr_bucket_free</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>b</name>-&gt;<name>list</name></name> = <name>list</name></expr>;</expr_stmt>
    <return>return <expr><call><name>bucket_socket_ex_make</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/*
 * Canonicalize scgi-like URLs.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scgi_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr>":65535"</expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>SCHEME</name> "://"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCHEME</name></expr></argument>)</argument_list></sizeof> + 2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>url</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>SCHEME</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt> <comment type="block">/* Keep slashes */</comment>

    <expr_stmt><expr><name>port</name> = <name>def_port</name> = <name>SCGI_DEF_PORT</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00857</expr></argument>)</argument_list></call>
                      "error parsing URL %s: %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>port</name> != <name>def_port</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%u"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>sport</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name>ap_strchr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="block">/* if literal IPv6 address */</comment>
        <expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>path</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:" <name>SCHEME</name> "://"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>, <argument><expr>"/"</expr></argument>,
                              <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-scgi-pathinfo"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>r</name>-&gt;<name>path_info</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Send a block of data, ensure, everything is sent
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sendall</name><parameter_list>(<param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>length</name></decl></param>,
                   <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>written</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>length</name> &gt; 0</expr>)</condition> <block>{
        <expr_stmt><expr><name>written</name> = <name>length</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_socket_send</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>written</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00858</expr></argument>)</argument_list></call>
                          "sending data to %s:%u failed"</expr></argument>,
                          <argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* count for stats */</comment>
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name> += <name>written</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf</name> += <name>written</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>length</name> -= <name>written</name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Send SCGI header block
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>send_headers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>, *<decl><type ref="prev"/><name>cp</name></decl>, *<decl><type ref="prev"/><name>bodylen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ns_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>env_table</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>env</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>bodylen_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>headerlen</name> <init>=   <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></sizeof>
                           + <sizeof>sizeof<argument_list>(<argument><expr><name>SCGI_MAGIC</name></expr></argument>)</argument_list></sizeof>
                           + <sizeof>sizeof<argument_list>(<argument><expr><name>SCGI_PROTOCOL_VERSION</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The header blob basically takes the environment and concatenates
     * keys and values using 0 bytes. There are special treatments here:
     *   - GATEWAY_INTERFACE and SCGI_MAGIC are dropped
     *   - CONTENT_LENGTH is always set and must be sent as the very first
     *     variable
     *
     * Additionally it's wrapped into a so-called netstring (see SCGI spec)
     */</comment>
    <expr_stmt><expr><name>env_table</name> = <call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>env</name> = (<name>apr_table_entry_t</name> *)<name><name>env_table</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>env_table</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
        <if>if <condition>(   <expr>(!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>GATEWAY_INTERFACE</name></expr></argument>)</argument_list></call>)
            || (!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></call>)
            || (!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>SCGI_MAGIC</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>headerlen</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> + 2</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>bodylen</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bodylen_size</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bodylen</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>headerlen</name> += <name>bodylen_size</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ns_len</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%" <name>APR_SIZE_T_FMT</name> ":"</expr></argument>, <argument><expr><name>headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>ns_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>headerlen</name> += <name>len</name> + 1</expr>;</expr_stmt> <comment type="block">/* 1 == , */</comment>
    <expr_stmt><expr><name>cp</name> = <name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>headerlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>ns_len</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cp</name> += <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>CONTENT_LENGTH</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cp</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>bodylen</name></expr></argument>, <argument><expr><name>bodylen_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cp</name> += <name>bodylen_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>SCGI_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCGI_MAGIC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cp</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>SCGI_MAGIC</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name>SCGI_PROTOCOL_VERSION</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCGI_PROTOCOL_VERSION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cp</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>SCGI_PROTOCOL_VERSION</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>env_table</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>j</name></expr></incr>) <block>{
        <if>if <condition>(   <expr>(!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>GATEWAY_INTERFACE</name></expr></argument>)</argument_list></call>)
            || (!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>CONTENT_LENGTH</name></expr></argument>)</argument_list></call>)
            || (!<call><name>strcmp</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>SCGI_MAGIC</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cp</name> += <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cp</name></expr></argument>, <argument><expr><name><name>env</name><index>[<expr><name>j</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cp</name> += <name>len</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr>*<name>cp</name>++ = ','</expr>;</expr_stmt>

    <return>return <expr><call><name>sendall</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>headerlen</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>


<comment type="block">/*
 * Send request body (if any)
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>send_request_body</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>buf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>AP_IOBUFSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>readlen</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>readlen</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AP_IOBUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>readlen</name> &gt; 0</expr>)</condition> <block>{
            <expr_stmt><expr><name>status</name> = <call><name>sendall</name><argument_list>(<argument><expr><name>conn</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
                <return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>readlen</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AP_IOBUFSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><name>readlen</name> == -1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00859</expr></argument>)</argument_list></call>
                          "receiving request body failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * Fetch response from backend and pass back to the front
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>pass_response</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>scgi_config</name> *</type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>socket_ex_data</name> *</type><name>sock_data</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sock_data</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sock_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock_data</name>-&gt;<name>sock</name></name> = <name><name>conn</name>-&gt;<name>sock</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sock_data</name>-&gt;<name>counter</name></name> = &amp;<name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> = <call><name>bucket_socket_ex_create</name><argument_list>(<argument><expr><name>sock_data</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>status</name> = <call><name>ap_scan_script_header_err_brigade_ex</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                                  <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00860</expr></argument>)</argument_list></call>
                      "error reading response headers from %s:%u"</expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_scgi_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>sendfile</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>sendfile</name></name> != <name>scgi_sendfile_off</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>short</name></type> <name>err</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>sendfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>location</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>sendfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>location</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>scgi_request_config</name> *</type><name>req_conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>req_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00861</expr></argument>)</argument_list></call>
                          "Found %s: %s - preparing subrequest."</expr></argument>,
                          <argument><expr><name><name>conf</name>-&gt;<name>sendfile</name></name></expr></argument>, <argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>sendfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>sendfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>req_conf</name>-&gt;<name>location</name></name> = <name>location</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>req_conf</name>-&gt;<name>type</name></name> = <name>scgi_sendfile</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_scgi_module</name></expr></argument>,
                                 <argument><expr><name>req_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name> 
        &amp;&amp; (!<name><name>conf</name>-&gt;<name>internal_redirect</name></name> <comment type="block">/* default === On */</comment>
            || <name><name>conf</name>-&gt;<name>internal_redirect</name></name> != <name>scgi_internal_redirect_off</name>)</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>short</name></type> <name>err</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>location_header</name> <init>= <expr><name><name>conf</name>-&gt;<name>internal_redirect</name></name> ? 
            <name><name>conf</name>-&gt;<name>internal_redirect</name></name> : <name>scgi_internal_redirect_on</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>location_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>location</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>err</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><name>location</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>location_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>location</name> &amp;&amp; *<name>location</name> == '/'</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>scgi_request_config</name> *</type><name>req_conf</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                                       <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>req_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>location_header</name></expr></argument>, <argument><expr>"Location"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>location_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>location_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
            <expr_stmt><expr><name><name>req_conf</name>-&gt;<name>location</name></name> = <name>location</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>req_conf</name>-&gt;<name>type</name></name> = <name>scgi_internal_redirect</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_scgi_module</name></expr></argument>,
                                 <argument><expr><name>req_conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>AP_FILTER_ERROR</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Internal redirect / subrequest handler, working on request_status hook
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scgi_request_status</name><parameter_list>(<param><decl><type><name>int</name> *</type><name>status</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>scgi_request_config</name> *</type><name>req_conf</name></decl>;</decl_stmt>

    <if>if <condition>(   <expr>(*<name>status</name> == <name>OK</name>)
        &amp;&amp; (<name>req_conf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>,
                                            <argument><expr>&amp;<name>proxy_scgi_module</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <switch>switch <condition>(<expr><name><name>req_conf</name>-&gt;<name>type</name></name></expr>)</condition> <block>{
        <case>case <expr><name>scgi_internal_redirect</name></expr>:
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00862</expr></argument>)</argument_list></call>
                          "Internal redirect to %s"</expr></argument>, <argument><expr><name><name>req_conf</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
                <comment type="block">/* keep HEAD, which is passed around as M_GET, too */</comment>
                <expr_stmt><expr><name><name>r</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
                <expr_stmt><expr><name><name>r</name>-&gt;<name>method_number</name></name> = <name>M_GET</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_internal_redirect_handler</name><argument_list>(<argument><expr><name><name>req_conf</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
            <comment type="block">/* break; */</comment>

        </case><case>case <expr><name>scgi_sendfile</name></expr>:
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00863</expr></argument>)</argument_list></call>
                          "File subrequest to %s"</expr></argument>, <argument><expr><name><name>req_conf</name>-&gt;<name>location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <do>do <block>{
                <decl_stmt><decl><type><name>request_rec</name> *</type><name>rr</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>rr</name> = <call><name>ap_sub_req_lookup_file</name><argument_list>(<argument><expr><name><name>req_conf</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
                                            <argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>rr</name>-&gt;<name>status</name></name> == <name>HTTP_OK</name> &amp;&amp; <name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name></expr>)</condition><then> <block>{
                    <comment type="block">/*
                     * We don't touch Content-Length here. It might be
                     * borked (there's plenty of room for a race condition).
                     * Either the backend sets it or it's gonna be chunked.
                     */</comment>
                    <expr_stmt><expr><call><name>ap_run_sub_req</name><argument_list>(<argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00864</expr></argument>)</argument_list></call>
                                  "Subrequest to file '%s' not possible. "
                                  "(rr-&gt;status=%d, rr-&gt;finfo.filetype=%d)"</expr></argument>,
                                  <argument><expr><name><name>req_conf</name>-&gt;<name>location</name></name></expr></argument>, <argument><expr><name><name>rr</name>-&gt;<name>status</name></name></expr></argument>,
                                  <argument><expr><name><name>rr</name>-&gt;<name>finfo</name>.<name>filetype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr>*<name>status</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
                    <return>return <expr>*<name>status</name></expr>;</return>
                }</block></else></if>
            }</block> while <condition>(<expr>0</expr>)</condition>;</do>

            <return>return <expr><name>OK</name></expr>;</return>
            <comment type="block">/* break; */</comment>
        </case>}</block></switch>
    }</block></then></if>

    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * This handles scgi:(dest) URLs
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>scgi_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
                        <param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>, <param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>dummy</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>SCHEME</name> "://"</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCHEME</name></expr></argument>)</argument_list></sizeof> + 2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00865</expr></argument>)</argument_list></call>
                      "declining URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Create space for state information */</comment>
    <expr_stmt><expr><name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name>PROXY_FUNCTION</name></expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
                                         <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
        <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name><name>backend</name>-&gt;<name>is_ssl</name></name> = 0</expr>;</expr_stmt>

    <comment type="block">/* Step One: Determine Who To Connect To */</comment>
    <expr_stmt><expr><name>uri</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>ap_proxy_determine_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
                                           <argument><expr><name>uri</name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>,
                                           <argument><expr>&amp;<name>dummy</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
        <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

    <comment type="block">/* Step Two: Make the Connection */</comment>
    <if>if <condition>(<expr><call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr><name>PROXY_FUNCTION</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00866</expr></argument>)</argument_list></call>
                      "failed to make connection to backend: %s:%u"</expr></argument>,
                      <argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>, <argument><expr><name><name>backend</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
        <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

    <comment type="block">/* Step Three: Process the Request */</comment>
    <if>if <condition>(   <expr>((<name>status</name> = <call><name>ap_setup_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REQUEST_CHUNKED_ERROR</name></expr></argument>)</argument_list></call>) != <name>OK</name>)
        || ((<name>status</name> = <call><name>send_headers</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call>) != <name>OK</name>)
        || ((<name>status</name> = <call><name>send_request_body</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call>) != <name>OK</name>)
        || ((<name>status</name> = <call><name>pass_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>)</argument_list></call>) != <name>OK</name>)</expr>)</condition><then> <block>{
        <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

<label><name>cleanup</name>:</label>
    <if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt> <comment type="block">/* always close the socket */</comment>
        <expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>PROXY_FUNCTION</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_scgi_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>scgi_config</name> *</type><name>conf</name><init>=<expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>sendfile</name></name> = <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* === default (off) */</comment>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>internal_redirect</name></name> = <name>NULL</name></expr>;</expr_stmt> <comment type="block">/* === default (on) */</comment>

    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_scgi_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base_</name></decl></param>, <param><decl><type><name>void</name> *</type><name>add_</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>scgi_config</name> *</type><name>base</name><init>=<expr><name>base_</name></expr></init>, *<name>add</name><init>=<expr><name>add_</name></expr></init>, *<name>conf</name><init>=<expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>sendfile</name></name> = <name><name>add</name>-&gt;<name>sendfile</name></name> ? <name><name>add</name>-&gt;<name>sendfile</name></name>: <name><name>base</name>-&gt;<name>sendfile</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>internal_redirect</name></name> = <name><name>add</name>-&gt;<name>internal_redirect</name></name>
                              ? <name><name>add</name>-&gt;<name>internal_redirect</name></name>
                              : <name><name>base</name>-&gt;<name>internal_redirect</name></name></expr>;</expr_stmt>
    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>scgi_set_send_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>scgi_config</name> *</type><name>conf</name><init>=<expr><name>mconfig</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>sendfile</name></name> = <name>scgi_sendfile_off</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>sendfile</name></name> = <name>scgi_sendfile_on</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>sendfile</name></name> = <name>arg</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>scgi_set_internal_redirect</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>mconfig</name></decl></param>,
                                              <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>scgi_config</name> *</type><name>conf</name> <init>= <expr><name>mconfig</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"Off"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>internal_redirect</name></name> = <name>scgi_internal_redirect_off</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"On"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>internal_redirect</name></name> = <name>scgi_internal_redirect_on</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>internal_redirect</name></name> = <name>arg</name></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>scgi_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxySCGISendfile"</expr></argument>, <argument><expr><name>scgi_set_send_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                  <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
                  <argument><expr>"The name of the X-Sendfile pseudo response header or "
                  "On or Off"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ProxySCGIInternalRedirect"</expr></argument>, <argument><expr><name>scgi_set_internal_redirect</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                  <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
                  <argument><expr>"The name of the pseudo response header or On or Off"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>scgi_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>scgi_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>request_status</name></expr></argument>, <argument><expr><name>scgi_request_status</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                      <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_scgi</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_scgi_config</name></expr>,  <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>merge_scgi_config</name></expr>,   <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>NULL</name></expr>,                <comment type="block">/* create per-server config structure */</comment>
    <expr><name>NULL</name></expr>,                <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>scgi_cmds</name></expr>,           <comment type="block">/* command table */</comment>
    <expr><name>register_hooks</name></expr>       <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
