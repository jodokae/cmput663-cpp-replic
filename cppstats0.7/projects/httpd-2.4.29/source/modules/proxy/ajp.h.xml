<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/proxy/ajp.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file ajp.h
 * @brief Apache Jserv Protocol
 *
 * @defgroup AJP_defines mod_proxy AJP definitions
 * @ingroup  APACHE_INTERNAL
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>AJP_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_network_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_poll.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uri.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_fnmatch.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_NETINET_IN_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_ARPA_INET_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_DEF_HOST</name></cpp:macro> <cpp:value>"127.0.0.1"</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NETWARE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_DEF_PORT</name></cpp:macro> <cpp:value>9009</cpp:value></cpp:define>     <comment type="block">/* default to 9009 since 8009 is used by OS */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_DEF_PORT</name></cpp:macro> <cpp:value>8009</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The following environment variables match mod_ssl! */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_HTTPS_INDICATOR</name></cpp:macro>           <cpp:value>"HTTPS"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_SSL_PROTOCOL_INDICATOR</name></cpp:macro>    <cpp:value>"SSL_PROTOCOL"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_SSL_CLIENT_CERT_INDICATOR</name></cpp:macro> <cpp:value>"SSL_CLIENT_CERT"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_SSL_CIPHER_INDICATOR</name></cpp:macro>      <cpp:value>"SSL_CIPHER"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_SSL_SESSION_INDICATOR</name></cpp:macro>     <cpp:value>"SSL_SESSION_ID"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_SSL_KEY_SIZE_INDICATOR</name></cpp:macro>    <cpp:value>"SSL_CIPHER_USEKEYSIZE"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AJP_USE_HTTPD_WRAP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd_wrap.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_ebcdic.h"</cpp:file></cpp:include>

<comment type="block">/** AJP Specific error codes
 */</comment>
<comment type="block">/** Buffer overflow exception */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_EOVERFLOW</name></cpp:macro>           <cpp:value>(APR_OS_START_USERERR + 1)</cpp:value></cpp:define>
<comment type="block">/** Destination Buffer is to small */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_ETOSMALL</name></cpp:macro>            <cpp:value>(APR_OS_START_USERERR + 2)</cpp:value></cpp:define>
<comment type="block">/** Invalid input parameters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_EINVAL</name></cpp:macro>              <cpp:value>(APR_OS_START_USERERR + 3)</cpp:value></cpp:define>
<comment type="block">/** Bad message signature */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_EBAD_SIGNATURE</name></cpp:macro>      <cpp:value>(APR_OS_START_USERERR + 4)</cpp:value></cpp:define>
<comment type="block">/** Incoming message too bg */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_ETOBIG</name></cpp:macro>              <cpp:value>(APR_OS_START_USERERR + 5)</cpp:value></cpp:define>
<comment type="block">/** Missing message header */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_ENO_HEADER</name></cpp:macro>          <cpp:value>(APR_OS_START_USERERR + 6)</cpp:value></cpp:define>
<comment type="block">/** Bad message header */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_EBAD_HEADER</name></cpp:macro>         <cpp:value>(APR_OS_START_USERERR + 7)</cpp:value></cpp:define>
<comment type="block">/** Bad message */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_EBAD_MESSAGE</name></cpp:macro>        <cpp:value>(APR_OS_START_USERERR + 8)</cpp:value></cpp:define>
<comment type="block">/** Cant log via AJP14 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_ELOGFAIL</name></cpp:macro>            <cpp:value>(APR_OS_START_USERERR + 9)</cpp:value></cpp:define>
<comment type="block">/** Bad request method */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_EBAD_METHOD</name></cpp:macro>         <cpp:value>(APR_OS_START_USERERR + 10)</cpp:value></cpp:define>


<comment type="block">/** A structure that represents ajp message */</comment>
<typedef>typedef <type>struct <name>ajp_msg</name></type> <name>ajp_msg_t</name>;</typedef>

<comment type="block">/** A structure that represents ajp message */</comment>
<struct>struct <name>ajp_msg</name>
<block>{
    <comment type="block">/** The buffer holding a AJP message */</comment>
    <decl_stmt><decl><type><name>apr_byte_t</name>  *</type><name>buf</name></decl>;</decl_stmt>
    <comment type="block">/** The length of AJP message header (defaults to AJP_HEADER_LEN) */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>header_len</name></decl>;</decl_stmt>
    <comment type="block">/** The length of AJP message */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>len</name></decl>;</decl_stmt>
    <comment type="block">/** The current read position */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>pos</name></decl>;</decl_stmt>
    <comment type="block">/** Flag indicating the origing of the message */</comment>
    <decl_stmt><decl><type><name>int</name></type>         <name>server_side</name></decl>;</decl_stmt>
    <comment type="block">/** The size of the buffer */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_size</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/**
 * Signature for the messages sent from Apache to tomcat
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_WS_HEADER</name></cpp:macro>             <cpp:value>0x1234</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_HEADER_LEN</name></cpp:macro>              <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_HEADER_SZ_LEN</name></cpp:macro>           <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_HEADER_SZ</name></cpp:macro>               <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_MSG_BUFFER_SZ</name></cpp:macro>           <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_MAX_BUFFER_SZ</name></cpp:macro>           <cpp:value>65536</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP13_MAX_SEND_BODY_SZ</name></cpp:macro>      <cpp:value>(AJP_MAX_BUFFER_SZ - AJP_HEADER_SZ)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_PING_PONG_SZ</name></cpp:macro>            <cpp:value>128</cpp:value></cpp:define>

<comment type="block">/** Send a request from web server to container*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_FORWARD_REQUEST</name></cpp:macro>   <cpp:value>(unsigned char)2</cpp:value></cpp:define>
<comment type="block">/** Write a body chunk from the servlet container to the web server */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_SEND_BODY_CHUNK</name></cpp:macro>   <cpp:value>(unsigned char)3</cpp:value></cpp:define>
<comment type="block">/** Send response headers from the servlet container to the web server. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_SEND_HEADERS</name></cpp:macro>      <cpp:value>(unsigned char)4</cpp:value></cpp:define>
<comment type="block">/** Marks the end of response. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_END_RESPONSE</name></cpp:macro>      <cpp:value>(unsigned char)5</cpp:value></cpp:define>
<comment type="block">/** Get further data from the web server if it hasn't all been transferred yet. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_GET_BODY_CHUNK</name></cpp:macro>    <cpp:value>(unsigned char)6</cpp:value></cpp:define>
<comment type="block">/** The web server asks the container to shut itself down. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_SHUTDOWN</name></cpp:macro>          <cpp:value>(unsigned char)7</cpp:value></cpp:define>
<comment type="block">/** Webserver ask container to take control (logon phase) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_PING</name></cpp:macro>              <cpp:value>(unsigned char)8</cpp:value></cpp:define>
<comment type="block">/** Container response to cping request */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_CPONG</name></cpp:macro>             <cpp:value>(unsigned char)9</cpp:value></cpp:define>
<comment type="block">/** Webserver check if container is alive, since container should respond by cpong */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMD_AJP13_CPING</name></cpp:macro>             <cpp:value>(unsigned char)10</cpp:value></cpp:define>

<comment type="block">/** @} */</comment>

<comment type="block">/**
 * @defgroup AJP_api AJP API functions
 * @ingroup  MOD_PROXY
 * @{
 */</comment>
<comment type="block">/**
 * Check a new AJP Message by looking at signature and return its size
 *
 * @param msg       AJP Message to check
 * @param len       Pointer to returned len
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_check_header</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Reset an AJP Message
 *
 * @param msg       AJP Message to reset
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_reset</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Reuse an AJP Message
 *
 * @param msg       AJP Message to reuse
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_reuse</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Mark the end of an AJP Message
 *
 * @param msg       AJP Message to end
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_end</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Add an unsigned 32bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_append_uint32</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint32_t</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Add an unsigned 16bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_append_uint16</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint16_t</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Add an unsigned 8bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_append_uint8</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 *  Add a String in AJP message, and transform the String in ASCII
 *  if convert is set and we're on an EBCDIC machine
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to String
 * @param convert   When set told to convert String to ASCII
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_append_string_ex</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>convert</name></decl></param>)</parameter_list>;</function_decl>
<comment type="block">/**
 *  Add a String in AJP message, and transform
 *  the String in ASCII if we're on an EBCDIC machine
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ajp_msg_append_string</name><parameter_list>(<param><type><name>m</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ajp_msg_append_string_ex(m, v, 1)</cpp:value></cpp:define>

<comment type="block">/**
 *  Add a String in AJP message.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ajp_msg_append_string_ascii</name><parameter_list>(<param><type><name>m</name></type></param>, <param><type><name>v</name></type></param>)</parameter_list></cpp:macro> <cpp:value>ajp_msg_append_string_ex(m, v, 0)</cpp:value></cpp:define>

<comment type="block">/**
 * Add a Byte array to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to Byte array
 * @param valuelen  Byte array len
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_append_bytes</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_byte_t</name> *</type><name>value</name></decl></param>,
                                  <param><decl><type><name>apr_size_t</name></type> <name>valuelen</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get a 32bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_get_uint32</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint32_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get a 16bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_get_uint16</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint16_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Peek a 16bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_peek_uint16</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint16_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get a 8bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_get_uint8</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Peek a 8bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_peek_uint8</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get a String value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_get_string</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rvalue</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Get a Byte array from AJP Message
 *
 * @param msg        AJP Message to get value from
 * @param rvalue     Pointer where value will be returned
 * @param rvalue_len Pointer where Byte array len will be returned
 * @return           APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_get_bytes</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name> **</type><name>rvalue</name></decl></param>,
                               <param><decl><type><name>apr_size_t</name> *</type><name>rvalue_len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Create an AJP Message from pool
 *
 * @param pool      memory pool to allocate AJP message from
 * @param size      size of the buffer to create
 * @param rmsg      Pointer to newly created AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> **</type><name>rmsg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Recopy an AJP Message to another
 *
 * @param smsg      source AJP message
 * @param dmsg      destination AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_copy</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>smsg</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>dmsg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Serialize in an AJP Message a PING command
 *
 * +-----------------------+
 * | PING CMD (1 byte)     |
 * +-----------------------+
 *
 * @param msg       AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_serialize_ping</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Serialize in an AJP Message a CPING command
 *
 * +-----------------------+
 * | CPING CMD (1 byte)    |
 * +-----------------------+
 *
 * @param msg      AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_serialize_cping</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Dump up to the first 1024 bytes on an AJP Message
 *
 * @param pool      pool to allocate from
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @param count     the number of bytes to dump
 * @param buf       buffer pointer for dump message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_dump</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>err</name></decl></param>,
                          <param><decl><type><name>apr_size_t</name></type> <name>count</name></decl></param>, <param><decl><type><name>char</name> **</type><name>buf</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Log an AJP message
 *
 * @param r         The current request
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_msg_log</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>err</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Send an AJP message to backend
 *
 * @param sock      backend socket
 * @param msg       AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_ilink_send</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Receive an AJP message from backend
 *
 * @param sock      backend socket
 * @param msg       AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_ilink_receive</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Build the ajp header message and send it
 * @param sock      backend socket
 * @param r         current request
 * @param buffsize  max size of the AJP packet.
 * @param uri       requested uri
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_send_header</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                             <param><decl><type><name>apr_size_t</name></type> <name>buffsize</name></decl></param>,
                             <param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Read the ajp message and return the type of the message.
 * @param sock      backend socket
 * @param r         current request
 * @param buffsize  size of the buffer.
 * @param msg       returned AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_read_header</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
                             <param><decl><type><name>request_rec</name>  *</type><name>r</name></decl></param>,
                             <param><decl><type><name>apr_size_t</name></type> <name>buffsize</name></decl></param>,
                             <param><decl><type><name>ajp_msg_t</name> **</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Allocate a msg to send data
 * @param pool      pool to allocate from
 * @param ptr       data buffer
 * @param len       the length of allocated data buffer
 * @param msg       returned AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type>  <name>ajp_alloc_data_msg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>,
                                 <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> **</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Send the data message
 * @param sock      backend socket
 * @param msg       AJP message to send
 * @param len       AJP message length
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type>  <name>ajp_send_data_msg</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
                                <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Parse the message type
 * @param r         current request
 * @param msg       AJP message
 * @return          AJP message type.
 */</comment>
<function_decl><type><name>int</name></type> <name>ajp_parse_type</name><parameter_list>(<param><decl><type><name>request_rec</name>  *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Parse the header message from container
 * @param r         current request
 * @param conf      proxy config
 * @param msg       AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_parse_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl></param>,
                              <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Parse the message body and return data address and length
 * @param r         current request
 * @param msg       AJP message
 * @param len       returned AJP message length
 * @param ptr       returned data
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type>  <name>ajp_parse_data</name><parameter_list>(<param><decl><type><name>request_rec</name>  *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>,
                             <param><decl><type><name>apr_uint16_t</name> *</type><name>len</name></decl></param>, <param><decl><type><name>char</name> **</type><name>ptr</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Check the reuse flag in CMD_AJP13_END_RESPONSE
 * @param r         current request
 * @param msg       AJP message
 * @param reuse     returned reuse flag
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_parse_reuse</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>,
                             <param><decl><type><name>apr_byte_t</name> *</type><name>reuse</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Handle the CPING/CPONG messages
 * @param sock      backend socket
 * @param r         current request
 * @param timeout   time window for receiving cpong reply
 * @return          APR_SUCCESS or error
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>ajp_handle_cping_cpong</name><parameter_list>(<param><decl><type><name>apr_socket_t</name> *</type><name>sock</name></decl></param>,
                                    <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                    <param><decl><type><name>apr_interval_time_t</name></type> <name>timeout</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/**
 * Convert numeric message type into string
 * @param type      AJP message type
 * @return          AJP message type as a string
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ajp_type_str</name><parameter_list>(<param><decl><type><name>int</name></type> <name>type</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/** @} */</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* AJP_H */</comment>

</unit>
