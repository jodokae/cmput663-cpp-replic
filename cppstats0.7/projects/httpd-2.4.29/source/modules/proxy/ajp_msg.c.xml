<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/proxy/ajp_msg.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ajp.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>APLOG_USE_MODULE</name><argument_list>(<argument><expr><name>proxy_ajp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_MSG_DUMP_BYTES_PER_LINE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
<comment type="block">/* 2 hex digits plus space plus one char per dumped byte */</comment>
<comment type="block">/* plus prefix plus separator plus '\0' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_MSG_DUMP_PREFIX_LENGTH</name></cpp:macro>  <cpp:value>strlen("XXXX    ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AJP_MSG_DUMP_LINE_LENGTH</name></cpp:macro>    <cpp:value>((AJP_MSG_DUMP_BYTES_PER_LINE * \
                                    strlen("XX .")) + \
                                    AJP_MSG_DUMP_PREFIX_LENGTH + \
                                    strlen(" - ") + 1)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> *</type><name>hex_table</name> <init>= <expr>"0123456789ABCDEF"</expr></init></decl>;</decl_stmt>

<comment type="block">/**
 * Dump the given number of bytes on an AJP Message
 *
 * @param pool      pool to allocate from
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @param count     the number of bytes to dump
 * @param buf       buffer pointer for dump message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_dump</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>err</name></decl></param>,
                          <param><decl><type><name>apr_size_t</name></type> <name>count</name></decl></param>, <param><decl><type><name>char</name> **</type><name>buf</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>        *</type><name>current</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>bl</name></decl>, <decl><type ref="prev"/><name>rl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_byte_t</name></type>  <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>len</name> <init>= <expr><name><name>msg</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type>  <name>line_len</name></decl>;</decl_stmt>

    <comment type="block">/* Display only first "count" bytes */</comment>
    <if>if <condition>(<expr><name>len</name> &gt; <name>count</name></expr>)</condition><then>
        <expr_stmt><expr><name>len</name> = <name>count</name></expr>;</expr_stmt></then></if>
         <comment type="block">/* First the space needed for the first line */</comment>
    <expr_stmt><expr><name>bl</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call> + 3 * (<call><name>strlen</name><argument_list>(<argument><expr>" XXX="</expr></argument>)</argument_list></call> + 20) + 1 +
         <comment type="block">/* Now for the data lines */</comment>
         (<name>len</name> + 15) / 16 * <name>AJP_MSG_DUMP_LINE_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>buf</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>buf</name></expr>)</condition><then>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr>*<name>buf</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>,
                 <argument><expr>"%s pos=%" <name>APR_SIZE_T_FMT</name>
                 " len=%" <name>APR_SIZE_T_FMT</name> " max=%" <name>APR_SIZE_T_FMT</name> "\n"</expr></argument>,
                 <argument><expr><name>err</name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>pos</name></name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>max_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>current</name> = *<name>buf</name> + <call><name>strlen</name><argument_list>(<argument><expr>*<name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>i</name> += <name>AJP_MSG_DUMP_BYTES_PER_LINE</name></expr></incr>) <block>{
        <comment type="block">/* Safety check: do we have enough buffer for another line? */</comment>
        <expr_stmt><expr><name>rl</name> = <name>bl</name> - (<name>current</name> - *<name>buf</name>)</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>AJP_MSG_DUMP_LINE_LENGTH</name> &gt; <name>rl</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*(<name>current</name> - 1) = '\0'</expr>;</expr_stmt>
            <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>rl</name></expr></argument>, <argument><expr>"%.4lx    "</expr></argument>, <argument><expr>(<name>unsigned</name> <name>long</name>)<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>current</name> += <name>AJP_MSG_DUMP_PREFIX_LENGTH</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>line_len</name> = <name>len</name> - <name>i</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>line_len</name> &gt; <name>AJP_MSG_DUMP_BYTES_PER_LINE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>line_len</name> = <name>AJP_MSG_DUMP_BYTES_PER_LINE</name></expr>;</expr_stmt>
        }</block></then></if>
        <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>line_len</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>x</name> = <name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>i</name> + <name>j</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt><expr>*<name>current</name>++ = <name><name>hex_table</name><index>[<expr><name>x</name> &gt;&gt; 4</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>current</name>++ = <name><name>hex_table</name><index>[<expr><name>x</name> &amp; 0x0f</expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>current</name>++ = ' '</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr>*<name>current</name>++ = ' '</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>current</name>++ = '-'</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>current</name>++ = ' '</expr>;</expr_stmt>
        <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name>line_len</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>x</name> = <name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>i</name> + <name>j</name></expr>]</index></name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>x</name> &gt; 0x20 &amp;&amp; <name>x</name> &lt; 0x7F</expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>current</name>++ = <name>x</name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr>*<name>current</name>++ = '.'</expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr>*<name>current</name>++ = '\n'</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr>*(<name>current</name> - 1) = '\0'</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Log an AJP message
 *
 * @param request   The current request
 * @param msg       AJP Message to dump
 * @param err       error string to display
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_log</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>char</name> *</type><name>err</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf</name></decl>, *<decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>APLOGrtrace7</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>level</name> = <name>APLOG_TRACE7</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>count</name> = 1024</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>APLOGrtrace8</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>level</name> = <name>APLOG_TRACE8</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>count</name> = <name>AJP_MAX_BUFFER_SZ</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>rc</name> = <call><name>ajp_msg_dump</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr>(<name>next</name> = <call><name>ap_strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
                <expr_stmt><expr>*<name>next</name> = '\0'</expr>;</expr_stmt>
                <comment type="block">/* Intentional no APLOGNO */</comment>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> = <name>next</name> + 1</expr>;</expr_stmt>
            }</block></while>
            <comment type="block">/* Intentional no APLOGNO */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"%s"</expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Check a new AJP Message by looking at signature and return its size
 *
 * @param msg       AJP Message to check
 * @param len       Pointer to returned len
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_check_header</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_byte_t</name> *</type><name>head</name> <init>= <expr><name><name>msg</name>-&gt;<name>buf</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>msglen</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!((<name><name>head</name><index>[<expr>0</expr>]</index></name> == 0x41 &amp;&amp; <name><name>head</name><index>[<expr>1</expr>]</index></name> == 0x42) ||
          (<name><name>head</name><index>[<expr>0</expr>]</index></name> == 0x12 &amp;&amp; <name><name>head</name><index>[<expr>1</expr>]</index></name> == 0x34))</expr>)</condition><then> <block>{

        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01080</expr></argument>)</argument_list></call>
                      "ajp_msg_check_header() got bad signature %02x%02x"</expr></argument>,
                      <argument><expr><name><name>head</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>head</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>AJP_EBAD_SIGNATURE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>msglen</name>  = ((<name><name>head</name><index>[<expr>2</expr>]</index></name> &amp; 0xff) &lt;&lt; 8)</expr>;</expr_stmt>
    <expr_stmt><expr><name>msglen</name> += (<name><name>head</name><index>[<expr>3</expr>]</index></name> &amp; 0xFF)</expr>;</expr_stmt>

    <if>if <condition>(<expr><name>msglen</name> &gt; <name><name>msg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01081</expr></argument>)</argument_list></call>
                     "ajp_msg_check_header() incoming message is "
                     "too big %" <name>APR_SIZE_T_FMT</name> ", max is %" <name>APR_SIZE_T_FMT</name></expr></argument>,
                     <argument><expr><name>msglen</name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>max_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>AJP_ETOBIG</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> = <name>msglen</name> + <name>AJP_HEADER_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>pos</name></name> = <name>AJP_HEADER_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>len</name>     = <name>msglen</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Reset an AJP Message
 *
 * @param msg       AJP Message to reset
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_reset</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> = <name>AJP_HEADER_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>pos</name></name> = <name>AJP_HEADER_LEN</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Reuse an AJP Message
 *
 * @param msg       AJP Message to reuse
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_reuse</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_byte_t</name> *</type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_size</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>buf</name> = <name><name>msg</name>-&gt;<name>buf</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>max_size</name> = <name><name>msg</name>-&gt;<name>max_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ajp_msg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name></name> = <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>max_size</name></name> = <name>max_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>header_len</name></name> = <name>AJP_HEADER_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Mark the end of an AJP Message
 *
 * @param msg       AJP Message to end
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_end</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>msg</name>-&gt;<name>len</name></name> - <name>AJP_HEADER_LEN</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>msg</name>-&gt;<name>server_side</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>0</expr>]</index></name> = 0x41</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>1</expr>]</index></name> = 0x42</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>0</expr>]</index></name> = 0x12</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>1</expr>]</index></name> = 0x34</expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>2</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr>(<name>len</name> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr>3</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr><name>len</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>int</name></type> <name>ajp_log_overflow</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>context</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03229</expr></argument>)</argument_list></call>
                 "%s(): BufferOverflowException %" <name>APR_SIZE_T_FMT</name>
                 " %" <name>APR_SIZE_T_FMT</name></expr></argument>,
                 <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>pos</name></name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>AJP_EOVERFLOW</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Add an unsigned 32bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_append_uint32</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint32_t</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>msg</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>len</name> + 4) &gt; <name><name>msg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_append_uint32"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name></expr>]</index></name>     = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr>(<name>value</name> &gt;&gt; 24) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name> + 1</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr>(<name>value</name> &gt;&gt; 16) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name> + 2</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr>(<name>value</name> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name> + 3</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr><name>value</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> += 4</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Add an unsigned 16bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_append_uint16</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint16_t</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>msg</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>len</name> + 2) &gt; <name><name>msg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_append_uint16"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name></expr>]</index></name>     = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr>(<name>value</name> &gt;&gt; 8) &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name> + 1</expr>]</index></name> = <call>(<name>apr_byte_t</name>)<argument_list>(<argument><expr><name>value</name> &amp; 0xFF</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> += 2</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Add an unsigned 8bits value to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     value to add to AJP Message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_append_uint8</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name></type> <name>value</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name> <init>= <expr><name><name>msg</name>-&gt;<name>len</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>len</name> + 1) &gt; <name><name>msg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_append_uint8"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name>len</name></expr>]</index></name> = <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> += 1</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 *  Add a String in AJP message, and transform the String in ASCII
 *  if convert is set and we're on an EBCDIC machine
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to String
 * @param convert   When set told to convert String to ASCII
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_append_string_ex</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>convert</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>value</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return<expr>(<call><name>ajp_msg_append_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>0xFFFF</expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name><name>msg</name>-&gt;<name>len</name></name> + <name>len</name> + 3) &gt; <name><name>msg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_append_cvt_string"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* ignore error - we checked once */</comment>
    <expr_stmt><expr><call><name>ajp_msg_append_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>(<name>apr_uint16_t</name>)<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* We checked for space !!  */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>msg</name>-&gt;<name>buf</name></name> + <name><name>msg</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* including \0 */</comment>

    <if>if <condition>(<expr><name>convert</name></expr>)</condition><then> <block>{
        <comment type="block">/* convert from EBCDIC if needed */</comment>
        <expr_stmt><expr><call><name>ap_xlate_proto_to_ascii</name><argument_list>(<argument><expr>(<name>char</name> *)<name><name>msg</name>-&gt;<name>buf</name></name> + <name><name>msg</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> += <name>len</name> + 1</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Add a Byte array to AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param value     Pointer to Byte array
 * @param valuelen  Byte array len
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_append_bytes</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>apr_byte_t</name> *</type><name>value</name></decl></param>,
                                  <param><decl><type><name>apr_size_t</name></type> <name>valuelen</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>! <name>valuelen</name></expr>)</condition><then> <block>{
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return> <comment type="block">/* Shouldn't we indicate an error ? */</comment>
    }</block></then></if>

    <if>if <condition>(<expr>(<name><name>msg</name>-&gt;<name>len</name></name> + <name>valuelen</name>) &gt; <name><name>msg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_append_bytes"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* We checked for space !!  */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>msg</name>-&gt;<name>buf</name></name> + <name><name>msg</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> += <name>valuelen</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Get a 32bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_get_uint32</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint32_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name><name>msg</name>-&gt;<name>pos</name></name> + 3) &gt; <name><name>msg</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_get_uint32"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>value</name>  = ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>++)</expr>]</index></name> &amp; 0xFF) &lt;&lt; 24)</expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> |= ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>++)</expr>]</index></name> &amp; 0xFF) &lt;&lt; 16)</expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> |= ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>++)</expr>]</index></name> &amp; 0xFF) &lt;&lt; 8)</expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> |= ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>++)</expr>]</index></name> &amp; 0xFF))</expr>;</expr_stmt>

    <expr_stmt><expr>*<name>rvalue</name> = <name>value</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>


<comment type="block">/**
 * Get a 16bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_get_uint16</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint16_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name><name>msg</name>-&gt;<name>pos</name></name> + 1) &gt; <name><name>msg</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_get_uint16"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>value</name>  = ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>++)</expr>]</index></name> &amp; 0xFF) &lt;&lt; 8)</expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> += ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>++)</expr>]</index></name> &amp; 0xFF))</expr>;</expr_stmt>

    <expr_stmt><expr>*<name>rvalue</name> = <name>value</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Peek a 16bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_peek_uint16</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_uint16_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>value</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name><name>msg</name>-&gt;<name>pos</name></name> + 1) &gt; <name><name>msg</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_peek_uint16"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>value</name> = ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name>)</expr>]</index></name> &amp; 0xFF) &lt;&lt; 8)</expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> += ((<name><name>msg</name>-&gt;<name>buf</name><index>[<expr>(<name><name>msg</name>-&gt;<name>pos</name></name> + 1)</expr>]</index></name> &amp; 0xFF))</expr>;</expr_stmt>

    <expr_stmt><expr>*<name>rvalue</name> = <name>value</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Peek a 8bits unsigned value from AJP Message, position in message
 * is not updated
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_peek_uint8</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>msg</name>-&gt;<name>pos</name></name> &gt; <name><name>msg</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_peek_uint8"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>rvalue</name> = <name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name><name>msg</name>-&gt;<name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Get a 8bits unsigned value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_get_uint8</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name> *</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{

    <if>if <condition>(<expr><name><name>msg</name>-&gt;<name>pos</name></name> &gt; <name><name>msg</name>-&gt;<name>len</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_get_uint8"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>rvalue</name> = <name><name>msg</name>-&gt;<name>buf</name><index>[<expr><name><name>msg</name>-&gt;<name>pos</name></name>++</expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>


<comment type="block">/**
 * Get a String value from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_get_string</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>rvalue</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type>   <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>status</name> = <call><name>ajp_msg_get_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>start</name> = <name><name>msg</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>status</name> != <name>APR_SUCCESS</name>) || (<name>size</name> + <name>start</name> &gt; <name><name>msg</name>-&gt;<name>max_size</name></name>)</expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_get_string"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>pos</name></name> += (<name>apr_size_t</name>)<name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>pos</name></name>++</expr>;</expr_stmt>                   <comment type="block">/* a String in AJP is NULL terminated */</comment>

    <expr_stmt><expr>*<name>rvalue</name> = (const <name>char</name> *)(<name><name>msg</name>-&gt;<name>buf</name></name> + <name>start</name>)</expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>


<comment type="block">/**
 * Get a Byte array from AJP Message
 *
 * @param msg       AJP Message to get value from
 * @param rvalue    Pointer where value will be returned
 * @param rvalueLen Pointer where Byte array len will be returned
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_get_bytes</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>apr_byte_t</name> **</type><name>rvalue</name></decl></param>,
                               <param><decl><type><name>apr_size_t</name> *</type><name>rvalue_len</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type>   <name>start</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>status</name> = <call><name>ajp_msg_get_uint16</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* save the current position */</comment>
    <expr_stmt><expr><name>start</name> = <name><name>msg</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>status</name> != <name>APR_SUCCESS</name>) || (<name>size</name> + <name>start</name> &gt; <name><name>msg</name>-&gt;<name>max_size</name></name>)</expr>)</condition><then> <block>{
        <return>return <expr><call><name>ajp_log_overflow</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_msg_get_bytes"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>pos</name></name> += (<name>apr_size_t</name>)<name>size</name></expr>;</expr_stmt>   <comment type="block">/* only bytes, no trailer */</comment>

    <expr_stmt><expr>*<name>rvalue</name>     = <name><name>msg</name>-&gt;<name>buf</name></name> + <name>start</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rvalue_len</name> = <name>size</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>


<comment type="block">/**
 * Create an AJP Message from pool
 *
 * @param pool      memory pool to allocate AJP message from
 * @param size      size of the buffer to create
 * @param rmsg      Pointer to newly created AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> **</type><name>rmsg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ajp_msg_t</name> *</type><name>msg</name> <init>= <expr>(<name>ajp_msg_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ajp_msg_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>server_side</name></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>msg</name>-&gt;<name>buf</name></name> = (<name>apr_byte_t</name> *)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>len</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>header_len</name></name> = <name>AJP_HEADER_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>msg</name>-&gt;<name>max_size</name></name> = <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rmsg</name> = <name>msg</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Recopy an AJP Message to another
 *
 * @param smsg      source AJP message
 * @param dmsg      destination AJP message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_copy</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>smsg</name></decl></param>, <param><decl><type><name>ajp_msg_t</name> *</type><name>dmsg</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>smsg</name>-&gt;<name>len</name></name> &gt; <name><name>smsg</name>-&gt;<name>max_size</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01082</expr></argument>)</argument_list></call>
                     "ajp_msg_copy(): destination buffer too "
                     "small %" <name>APR_SIZE_T_FMT</name> ", max size is %" <name>APR_SIZE_T_FMT</name></expr></argument>,
                     <argument><expr><name><name>smsg</name>-&gt;<name>len</name></name></expr></argument>, <argument><expr><name><name>smsg</name>-&gt;<name>max_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return  <expr><name>AJP_ETOSMALL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dmsg</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>smsg</name>-&gt;<name>buf</name></name></expr></argument>, <argument><expr><name><name>smsg</name>-&gt;<name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dmsg</name>-&gt;<name>len</name></name> = <name><name>smsg</name>-&gt;<name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dmsg</name>-&gt;<name>pos</name></name> = <name><name>smsg</name>-&gt;<name>pos</name></name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>


<comment type="block">/**
 * Serialize in an AJP Message a PING command
 *
 * +-----------------------+
 * | PING CMD (1 byte)     |
 * +-----------------------+
 *
 * @param smsg      AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_serialize_ping</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>rc</name> = <call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>CMD_AJP13_PING</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
        <return>return <expr><name>rc</name></expr>;</return></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Serialize in an AJP Message a CPING command
 *
 * +-----------------------+
 * | CPING CMD (1 byte)    |
 * +-----------------------+
 *
 * @param smsg      AJP message to put serialized message
 * @return          APR_SUCCESS or error
 */</comment>
<function><type><name>apr_status_t</name></type> <name>ajp_msg_serialize_cping</name><parameter_list>(<param><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name>rc</name> = <call><name>ajp_msg_append_uint8</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>CMD_AJP13_CPING</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
        <return>return <expr><name>rc</name></expr>;</return></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>
</unit>
