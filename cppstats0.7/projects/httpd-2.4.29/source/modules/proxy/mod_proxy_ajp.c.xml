<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/proxy/mod_proxy_ajp.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/* AJP routines for Apache proxy */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ajp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>proxy_ajp_module</name></decl>;</decl_stmt>

<comment type="block">/*
 * Canonicalise http-like URLs.
 * scheme is the scheme for the URL
 * url is the URL starting with the first '/'
 * def_port is the default port for this scheme.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_ajp_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>search</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>

    <comment type="block">/* ap_port_of_scheme() */</comment>
    <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ajp:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>url</name> += 4</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></else></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr>"canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * do syntactic check.
     * We break the URL into host, port, path, search
     */</comment>
    <expr_stmt><expr><name>port</name> = <name>def_port</name> = <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr>"ajp"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00867</expr></argument>)</argument_list></call> "error parsing URL %s: %s"</expr></argument>,
                      <argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * now parse path/search args, according to rfc1738:
     * process the path. With proxy-nocanon set (by
     * mod_proxy) we use the raw, unparsed uri
     */</comment>
    <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>   <comment type="block">/* this is the raw path */</comment>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>,
                                 <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>search</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>port</name> != <name>def_port</name></expr>)</condition><then>
         <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
         <expr_stmt><expr><name><name>sport</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt></else></if>

    <if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* if literal IPv6 address */</comment>
        <expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:ajp://"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>,
                              <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>search</name>) ? "?" : ""</expr></argument>,
                              <argument><expr>(<name>search</name>) ? <name>search</name> : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_NON_IDEMPOTENT</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_IDEMPOTENT</name></cpp:macro>           <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>METHOD_IDEMPOTENT_WITH_ARGS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_idempotent</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * RFC2616 (9.1.2): GET, HEAD, PUT, DELETE, OPTIONS, TRACE are considered
     * idempotent. Hint: HEAD requests use M_GET as method number as well.
     */</comment>
    <switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name></expr>)</condition> <block>{
        <case>case <expr><name>M_GET</name></expr>:
        </case><case>case <expr><name>M_DELETE</name></expr>:
        </case><case>case <expr><name>M_PUT</name></expr>:
        </case><case>case <expr><name>M_OPTIONS</name></expr>:
        </case><case>case <expr><name>M_TRACE</name></expr>:
            <comment type="block">/*
             * If the request has arguments it might have side-effects and thus
             * it might be undesirable to resend it to a backend again
             * automatically.
             */</comment>
            <if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
                <return>return <expr><name>METHOD_IDEMPOTENT_WITH_ARGS</name></expr>;</return>
            }</block></then></if>
            <return>return <expr><name>METHOD_IDEMPOTENT</name></expr>;</return>
        <comment type="block">/* Everything else is not considered idempotent. */</comment>
        </case><default>default:
            <return>return <expr><name>METHOD_NON_IDEMPOTENT</name></expr>;</return>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_off_t</name></type> <name>get_content_length</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main == <name>NULL</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>clp</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>clp</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>errp</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>clp</name></expr></argument>, <argument><expr>&amp;<name>errp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> || *<name>errp</name> || <name>len</name> &lt; 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>len</name> = 0</expr>;</expr_stmt> <comment type="block">/* parse error */</comment>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>len</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * XXX: AJP Auto Flushing
 *
 * When processing CMD_AJP13_SEND_BODY_CHUNK AJP messages we will do a poll
 * with FLUSH_WAIT milliseconds timeout to determine if more data is currently
 * available at the backend. If there is no more data available, we flush
 * the data to the client by adding a flush bucket to the brigade we pass
 * up the filter chain.
 * This is only a bandaid to fix the AJP/1.3 protocol shortcoming of not
 * sending (actually not having defined) a flush message, when the data
 * should be flushed to the client. As soon as this protocol shortcoming is
 * fixed this code should be removed.
 *
 * For further discussion see PR37100.
 * http://issues.apache.org/bugzilla/show_bug.cgi?id=37100
 */</comment>

<comment type="block">/*
 * process the request and write the response.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ap_proxy_ajp_request</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                <param><decl><type><name>proxy_conn_rec</name> *</type><name>conn</name></decl></param>,
                                <param><decl><type><name>conn_rec</name> *</type><name>origin</name></decl></param>,
                                <param><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl></param>,
                                <param><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl></param>,
                                <param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><name>char</name> *</type><name>server_portstr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>input_brigade</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>output_brigade</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ajp_msg_t</name> *</type><name>msg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bufsiz</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>send_body_chunk_buff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint16_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_byte_t</name></type> <name>conn_reuse</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tenc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>havebody</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>client_failed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>backend_failed</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>bb_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>data_sent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>request_ended</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>headers_sent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int32_t</name></type> <name>conn_poll_fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pollfd_t</name> *</type><name>conn_poll</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>psf</name> <init>=
    <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>maxsize</name> <init>= <expr><name>AJP_MSG_BUFFER_SZ</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>send_body</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>content_length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>original_status</name> <init>= <expr><name><name>r</name>-&gt;<name>status</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>original_status_line</name> <init>= <expr><name><name>r</name>-&gt;<name>status_line</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>psf</name>-&gt;<name>io_buffer_size_set</name></name></expr>)</condition><then>
       <expr_stmt><expr><name>maxsize</name> = <name><name>psf</name>-&gt;<name>io_buffer_size</name></name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>maxsize</name> &gt; <name>AJP_MAX_BUFFER_SZ</name></expr>)</condition><then>
       <expr_stmt><expr><name>maxsize</name> = <name>AJP_MAX_BUFFER_SZ</name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name>maxsize</name> &lt; <name>AJP_MSG_BUFFER_SZ</name></expr>)</condition><then>
       <expr_stmt><expr><name>maxsize</name> = <name>AJP_MSG_BUFFER_SZ</name></expr>;</expr_stmt></then></if></else></if>
    <expr_stmt><expr><name>maxsize</name> = <call><name>APR_ALIGN</name><argument_list>(<argument><expr><name>maxsize</name></expr></argument>, <argument><expr>1024</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Send the AJP request to the remote server
     */</comment>

    <comment type="block">/* send request headers */</comment>
    <expr_stmt><expr><name>status</name> = <call><name>ajp_send_header</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00868</expr></argument>)</argument_list></call>
                      "request failed to %pI (%s)"</expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> == <name>AJP_EOVERFLOW</name></expr>)</condition><then>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return></then>
        <else>else <if>if  <condition>(<expr><name>status</name> == <name>AJP_EBAD_METHOD</name></expr>)</condition><then> <block>{
            <return>return <expr><name>HTTP_NOT_IMPLEMENTED</name></expr>;</return>
        }</block></then> <else>else <block>{
            <comment type="block">/*
             * This is only non fatal when the method is idempotent. In this
             * case we can dare to retry it with a different worker if we are
             * a balancer member.
             */</comment>
            <if>if <condition>(<expr><call><name>is_idempotent</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> == <name>METHOD_IDEMPOTENT</name></expr>)</condition><then> <block>{
                <return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
            }</block></then></if>
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></else></if></else></if>
    }</block></then></if>

    <comment type="block">/* allocate an AJP message to store the data of the buckets */</comment>
    <expr_stmt><expr><name>bufsiz</name> = <name>maxsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>ajp_alloc_data_msg</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>buff</name></expr></argument>, <argument><expr>&amp;<name>bufsiz</name></expr></argument>, <argument><expr>&amp;<name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* We had a failure: Close connection to backend */</comment>
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00869</expr></argument>)</argument_list></call>
                      "ajp_alloc_data_msg failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* read the first bloc of data */</comment>
    <expr_stmt><expr><name>input_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tenc</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>tenc</name> &amp;&amp; (<call><name>strcasecmp</name><argument_list>(<argument><expr><name>tenc</name></expr></argument>, <argument><expr>"chunked"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
        <comment type="block">/* The AJP protocol does not want body data yet */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00870</expr></argument>)</argument_list></call> "request is chunked"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <comment type="block">/* Get client provided Content-Length header */</comment>
        <expr_stmt><expr><name>content_length</name> = <call><name>get_content_length</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>input_brigade</name></expr></argument>,
                                <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
                                <argument><expr><name>maxsize</name> - <name>AJP_HEADER_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <comment type="block">/* We had a failure: Close connection to backend */</comment>
            <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00871</expr></argument>)</argument_list></call>
                          "ap_get_brigade failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>ap_map_http_request_error</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_BAD_REQUEST</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <comment type="block">/* have something */</comment>
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00872</expr></argument>)</argument_list></call> "APR_BUCKET_IS_EOS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Try to send something */</comment>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00873</expr></argument>)</argument_list></call>
                      "data to read (max %" <name>APR_SIZE_T_FMT</name>
                      " at %" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>, <argument><expr><name><name>msg</name>-&gt;<name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>status</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr>&amp;<name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <comment type="block">/* We had a failure: Close connection to backend */</comment>
            <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00874</expr></argument>)</argument_list></call>
                          "apr_brigade_flatten"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00875</expr></argument>)</argument_list></call>
                      "got %" <name>APR_SIZE_T_FMT</name> " bytes of data"</expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>bufsiz</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <call><name>ajp_send_data_msg</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ajp_msg_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>"First ajp_send_data_msg: ajp_ilink_send packet dump"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <comment type="block">/* We had a failure: Close connection to backend */</comment>
                <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00876</expr></argument>)</argument_list></call>
                              "send failed to %pI (%s)"</expr></argument>,
                              <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>,
                              <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/*
                 * It is fatal when we failed to send a (part) of the request
                 * body.
                 */</comment>
                <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name> += <name>bufsiz</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>send_body</name> = 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>content_length</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00877</expr></argument>)</argument_list></call>
                          "read zero bytes, expecting"
                          " %" <name>APR_OFF_T_FMT</name> " bytes"</expr></argument>,
                          <argument><expr><name>content_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * We can only get here if the client closed the connection
             * to us without sending the body.
             * Now the connection is in the wrong state on the backend.
             * Sending an empty data msg doesn't help either as it does
             * not move this connection to the correct state on the backend
             * for later resusage by the next request again.
             * Close it to clean things up.
             */</comment>
            <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
            <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
        }</block></then></if></else></if>
    }</block></else></if>

    <comment type="block">/* read the response */</comment>
    <expr_stmt><expr><name><name>conn</name>-&gt;<name>data</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>ajp_read_header</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>,
                             <argument><expr>(<name>ajp_msg_t</name> **)&amp;(<name><name>conn</name>-&gt;<name>data</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* We had a failure: Close connection to backend */</comment>
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00878</expr></argument>)</argument_list></call>
                      "read response failed from %pI (%s)"</expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* If we had a successful cping/cpong and then a timeout
         * we assume it is a request that cause a back-end timeout,
         * but doesn't affect the whole worker.
         */</comment>
        <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>HTTP_GATEWAY_TIME_OUT</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/*
         * This is only non fatal when we have not sent (parts) of a possible
         * request body so far (we do not store it and thus cannot send it
         * again) and the method is idempotent. In this case we can dare to
         * retry it with a different worker if we are a balancer member.
         */</comment>
        <if>if <condition>(<expr>!<name>send_body</name> &amp;&amp; (<call><name>is_idempotent</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> == <name>METHOD_IDEMPOTENT</name>)</expr>)</condition><then> <block>{
            <return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* parse the response */</comment>
    <expr_stmt><expr><name>result</name> = <call><name>ajp_parse_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>output_brigade</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Prepare apr_pollfd_t struct for possible later check if there is currently
     * data available from the backend (do not flush response to client)
     * or not (flush response to client)
     */</comment>
    <expr_stmt><expr><name>conn_poll</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_pollfd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn_poll</name>-&gt;<name>reqevents</name></name> = <name>APR_POLLIN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn_poll</name>-&gt;<name>desc_type</name></name> = <name>APR_POLL_SOCKET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conn_poll</name>-&gt;<name>desc</name>.<name>s</name></name> = <name><name>conn</name>-&gt;<name>sock</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>bufsiz</name> = <name>maxsize</name></expr>;</expr_stmt>
    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{
            <case>case <expr><name>CMD_AJP13_GET_BODY_CHUNK</name></expr>:
                <if>if <condition>(<expr><name>havebody</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_LAST</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="block">/* This is the end */</comment>
                        <expr_stmt><expr><name>bufsiz</name> = 0</expr>;</expr_stmt>
                        <expr_stmt><expr><name>havebody</name> = 0</expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00879</expr></argument>)</argument_list></call>
                                      "APR_BUCKET_IS_EOS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>input_brigade</name></expr></argument>,
                                                <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
                                                <argument><expr><name>APR_BLOCK_READ</name></expr></argument>,
                                                <argument><expr><name>maxsize</name> - <name>AJP_HEADER_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00880</expr></argument>)</argument_list></call>
                                          "ap_get_brigade failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>rv</name> = <name>HTTP_REQUEST_TIME_OUT</name></expr>;</expr_stmt>
                            }</block></then>
                            <else>else <if>if <condition>(<expr><name>status</name> == <name>AP_FILTER_ERROR</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>rv</name> = <name>AP_FILTER_ERROR</name></expr>;</expr_stmt>
                            }</block></then></if></else></if>
                            <expr_stmt><expr><name>client_failed</name> = 1</expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                        <expr_stmt><expr><name>bufsiz</name> = <name>maxsize</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>status</name> = <call><name>apr_brigade_flatten</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>,
                                                     <argument><expr>&amp;<name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00881</expr></argument>)</argument_list></call>
                                         "apr_brigade_flatten failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rv</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>client_failed</name> = 1</expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if>
                    }</block></else></if>

                    <expr_stmt><expr><call><name>ajp_msg_reset</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="block">/* will go in ajp_send_data_msg */</comment>
                    <expr_stmt><expr><name>status</name> = <call><name>ajp_send_data_msg</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>bufsiz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ajp_msg_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>"ajp_send_data_msg after CMD_AJP13_GET_BODY_CHUNK: ajp_ilink_send packet dump"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00882</expr></argument>)</argument_list></call>
                                      "ajp_send_data_msg failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                    <expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>transferred</name></name> += <name>bufsiz</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="block">/*
                     * something is wrong TC asks for more body but we are
                     * already at the end of the body data
                     */</comment>
                    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00883</expr></argument>)</argument_list></call>
                                  "ap_proxy_ajp_request error read after end"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            </case><case>case <expr><name>CMD_AJP13_SEND_HEADERS</name></expr>:
                <if>if <condition>(<expr><name>headers_sent</name></expr>)</condition><then> <block>{
                    <comment type="block">/* Do not send anything to the client.
                     * Backend already send us the headers.
                     */</comment>
                    <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00884</expr></argument>)</argument_list></call>
                                  "Backend sent headers twice."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <comment type="block">/* AJP13_SEND_HEADERS: process them */</comment>
                <expr_stmt><expr><name>status</name> = <call><name>ajp_parse_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>status</name></name> == 401) &amp;&amp; <name><name>conf</name>-&gt;<name>error_override</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>wa</name> <init>= <expr>"WWW-Authenticate"</expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr>(<name>buf</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>wa</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>wa</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00885</expr></argument>)</argument_list></call>
                                      "ap_proxy_ajp_request: origin server "
                                      "sent 401 without WWW-Authenticate header"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if></else></if>
                <expr_stmt><expr><name>headers_sent</name> = 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>CMD_AJP13_SEND_BODY_CHUNK</name></expr>:
                <comment type="block">/* AJP13_SEND_BODY_CHUNK: piece of data */</comment>
                <expr_stmt><expr><name>status</name> = <call><name>ajp_parse_data</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>, <argument><expr>&amp;<name>send_body_chunk_buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <comment type="block">/* If we are overriding the errors, we can't put the content
                     * of the page into the brigade.
                     */</comment>
                    <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>error_override</name></name> || !<call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="block">/* AJP13_SEND_BODY_CHUNK with zero length
                         * is explicit flush message
                         */</comment>
                        <if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><name>headers_sent</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>
                            <else>else <block>{
                                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00886</expr></argument>)</argument_list></call>
                                              "Ignoring flush message "
                                              "received before headers"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></else></if>
                        }</block></then>
                        <else>else <block>{
                            <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

                            <comment type="block">/* Handle the case where the error document is itself reverse
                             * proxied and was successful. We must maintain any previous
                             * error status so that an underlying error (eg HTTP_NOT_FOUND)
                             * doesn't become an HTTP_OK.
                             */</comment>
                            <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>error_override</name></name> &amp;&amp; !<call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call>
                                    &amp;&amp; <call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name>original_status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>original_status</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>original_status_line</name></expr>;</expr_stmt>
                            }</block></then></if>

                            <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>send_body_chunk_buff</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
                                                        <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if>if <condition>(<expr>(<name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name> == <name>flush_on</name>) ||
                                ((<name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_packets</name></name> == <name>flush_auto</name>) &amp;&amp;
                                ((<name>rv</name> = <call><name>apr_poll</name><argument_list>(<argument><expr><name>conn_poll</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>conn_poll_fd</name></expr></argument>,
                                                 <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>flush_wait</name></name></expr></argument>)</argument_list></call>)
                                                 != <name>APR_SUCCESS</name>) &amp;&amp;
                                  <call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>bb_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>bb_len</name> != -1</expr>)</condition><then>
                                <expr_stmt><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>read</name></name> += <name>bb_len</name></expr>;</expr_stmt></then></if>
                        }</block></else></if>
                        <if>if <condition>(<expr><name>headers_sent</name></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>,
                                                <argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00887</expr></argument>)</argument_list></call>
                                              "error processing body.%s"</expr></argument>,
                                              <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> ?
                                              " Client aborted connection." : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><name>client_failed</name> = 1</expr>;</expr_stmt>
                            }</block></then></if>
                            <expr_stmt><expr><name>data_sent</name> = 1</expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                    }</block></then></if>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            </case><case>case <expr><name>CMD_AJP13_END_RESPONSE</name></expr>:
                <comment type="block">/* If we are overriding the errors, we must not send anything to
                 * the client, especially as the brigade already contains headers.
                 * So do nothing here, and it will be cleaned up below.
                 */</comment>
                <expr_stmt><expr><name>status</name> = <call><name>ajp_parse_reuse</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>data</name></name></expr></argument>, <argument><expr>&amp;<name>conn_reuse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                }</block></then></if>
                <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>error_override</name></name> || !<call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>,
                                        <argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00888</expr></argument>)</argument_list></call>
                                      "error processing end"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>client_failed</name> = 1</expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="block">/* XXX: what about flush here? See mod_jk */</comment>
                    <expr_stmt><expr><name>data_sent</name> = 1</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>request_ended</name> = 1</expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>

        <comment type="block">/*
         * If connection has been aborted by client: Stop working.
         * Pretend we are done (data_sent) to avoid further processing.
         */</comment>
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02821</expr></argument>)</argument_list></call>
                          "client connection aborted"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* no response yet (or ever), set status for access log */</comment>
            <if>if <condition>(<expr>!<name>headers_sent</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_BAD_REQUEST</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>client_failed</name> = 1</expr>;</expr_stmt>
            <comment type="block">/* return DONE */</comment>
            <expr_stmt><expr><name>data_sent</name> = 1</expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <comment type="block">/*
         * We either have finished successfully or we failed.
         * So bail out
         */</comment>
        <if>if <condition>(<expr>(<name>result</name> == <name>CMD_AJP13_END_RESPONSE</name>)
                || <name>backend_failed</name> || <name>client_failed</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <comment type="block">/* read the response */</comment>
        <expr_stmt><expr><name>status</name> = <call><name>ajp_read_header</name><argument_list>(<argument><expr><name><name>conn</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>,
                                 <argument><expr>(<name>ajp_msg_t</name> **)&amp;(<name><name>conn</name>-&gt;<name>data</name></name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00889</expr></argument>)</argument_list></call>
                          "ajp_read_header failed"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>result</name> = <call><name>ajp_parse_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conn</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>input_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Clear output_brigade to remove possible buckets that remained there
     * after an error.
     */</comment>
    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>backend_failed</name> || <name>client_failed</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00890</expr></argument>)</argument_list></call>
                      "Processing of request failed backend: %i, client: %i"</expr></argument>,
                      <argument><expr><name>backend_failed</name></expr></argument>, <argument><expr><name>client_failed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* We had a failure: Close connection to backend */</comment>
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>data_sent</name></expr>)</condition><then> <block>{
            <comment type="block">/* Return DONE to avoid error messages being added to the stream */</comment>
            <expr_stmt><expr><name>rv</name> = <name>DONE</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>request_ended</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00891</expr></argument>)</argument_list></call>
                      "Processing of request didn't terminate cleanly"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* We had a failure: Close connection to backend */</comment>
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>backend_failed</name> = 1</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>data_sent</name></expr>)</condition><then> <block>{
            <comment type="block">/* Return DONE to avoid error messages being added to the stream */</comment>
            <expr_stmt><expr><name>rv</name> = <name>DONE</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>conn_reuse</name></expr>)</condition><then> <block>{
        <comment type="block">/* Our backend signalled connection close */</comment>
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00892</expr></argument>)</argument_list></call>
                      "got response from %pI (%s)"</expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>error_override</name></name> &amp;&amp; <call><name>ap_is_HTTP_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* clear r-&gt;status for override error, otherwise ErrorDocument
             * thinks that this is a recursive error, and doesn't find the
             * custom error page
             */</comment>
            <expr_stmt><expr><name>rv</name> = <name><name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
            <comment type="block">/*
             * prevent proxy_handler() from treating this as an
             * internal error.
             */</comment>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-error-override"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>rv</name> = <name>OK</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if></else></if></else></if>

    <if>if <condition>(<expr><name>backend_failed</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00893</expr></argument>)</argument_list></call>
                      "dialog to %pI (%s) failed"</expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>,
                      <argument><expr><name><name>conn</name>-&gt;<name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * If we already send data, signal a broken backend connection
         * upwards in the chain.
         */</comment>
        <if>if <condition>(<expr><name>data_sent</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_proxy_backend_broke</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <if>if <condition>(<expr>!<name>send_body</name> &amp;&amp; (<call><name>is_idempotent</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> == <name>METHOD_IDEMPOTENT</name>)</expr>)</condition><then> <block>{
            <comment type="block">/*
             * This is only non fatal when we have not send (parts) of a possible
             * request body so far (we do not store it and thus cannot send it
             * again) and the method is idempotent. In this case we can dare to
             * retry it with a different worker if we are a balancer member.
             */</comment>
            <expr_stmt><expr><name>rv</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>rv</name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>client_failed</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>= <expr>(<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name>) ? <name>APLOG_DEBUG</name> : <name>APLOG_ERR</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02822</expr></argument>)</argument_list></call>
                      "dialog with client %pI failed"</expr></argument>,
                      <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>client_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> == <name>OK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <name>HTTP_BAD_REQUEST</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

    <comment type="block">/*
     * Ensure that we sent an EOS bucket thru the filter chain, if we already
     * have sent some data. Maybe ap_proxy_backend_broke was called and added
     * one to the brigade already (no longer making it empty). So we should
     * not do this in this case.
     */</comment>
    <if>if <condition>(<expr><name>data_sent</name> &amp;&amp; !<name><name>r</name>-&gt;<name>eos_sent</name></name> &amp;&amp; !<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name>
            &amp;&amp; <call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* If we have added something to the brigade above, send it */</comment>
    <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call>
        &amp;&amp; <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <name>AP_FILTER_ERROR</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>output_brigade</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-nokeepalive"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This handles ajp:// URLs
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_ajp_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
                             <param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
                             <param><decl><type><name>char</name> *</type><name>url</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>,
                             <param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>server_portstr</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>origin</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>backend</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name> <init>= <expr>"AJP"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>retry</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                 <argument><expr>&amp;<name>proxy_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name> <init>= <expr><name><name>r</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>uri</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"ajp:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00894</expr></argument>)</argument_list></call> "declining URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>uri</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>uri</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00895</expr></argument>)</argument_list></call> "serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* create space for state information */</comment>
    <expr_stmt><expr><name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr>&amp;<name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
                                         <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>backend</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>backend</name>-&gt;<name>is_ssl</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name>retry</name> = 0</expr>;</expr_stmt>
    <while>while <condition>(<expr><name>retry</name> &lt; 2</expr>)</condition> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>locurl</name> <init>= <expr><name>url</name></expr></init></decl>;</decl_stmt>
        <comment type="block">/* Step One: Determine Who To Connect To */</comment>
        <expr_stmt><expr><name>status</name> = <call><name>ap_proxy_determine_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>,
                                               <argument><expr><name>uri</name></expr></argument>, <argument><expr>&amp;<name>locurl</name></expr></argument>, <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>,
                                               <argument><expr><name>server_portstr</name></expr></argument>,
                                               <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>server_portstr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>status</name> != <name>OK</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <comment type="block">/* Step Two: Make the Connection */</comment>
        <if>if <condition>(<expr><call><name>ap_proxy_check_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>0</expr></argument>,
                                      <argument><expr><name>PROXY_CHECK_CONN_EMPTY</name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>,
                                            <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00896</expr></argument>)</argument_list></call>
                          "failed to make connection to backend: %s"</expr></argument>,
                          <argument><expr><name><name>backend</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <comment type="block">/* Handle CPING/CPONG */</comment>
        <if>if <condition>(<expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout_set</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <call><name>ajp_handle_cping_cpong</name><argument_list>(<argument><expr><name><name>backend</name>-&gt;<name>sock</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>,
                                            <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>ping_timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * In case the CPING / CPONG failed for the first time we might be
             * just out of luck and got a faulty backend connection, but the
             * backend might be healthy nevertheless. So ensure that the backend
             * TCP connection gets closed and try it once again.
             */</comment>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>backend</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00897</expr></argument>)</argument_list></call>
                              "cping/cpong failed to %pI (%s)"</expr></argument>,
                              <argument><expr><name><name>worker</name>-&gt;<name>cp</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>worker</name>-&gt;<name>s</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>retry</name>++</expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
        }</block></then></if>
        <comment type="block">/* Step Three: Process the Request */</comment>
        <expr_stmt><expr><name>status</name> = <call><name>ap_proxy_ajp_request</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>, <argument><expr><name>dconf</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>locurl</name></expr></argument>,
                                      <argument><expr><name>server_portstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></while>

    <comment type="block">/* Do not close the socket */</comment>
    <expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name>scheme</name></expr></argument>, <argument><expr><name>backend</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_proxy_http_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_ajp_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_ajp_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_ajp</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,                       <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* create per-server config structure */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* command apr_table_t */</comment>
    <expr><name>ap_proxy_http_register_hook</name></expr> <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>

</unit>
