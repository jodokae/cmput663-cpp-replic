<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/debugging/mod_dumpio.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * Originally written @ Covalent by Jim Jagielski
 */</comment>

<comment type="block">/*
 * mod_dumpio.c:
 *  Think of this as a filter sniffer for Apache 2.x. It logs
 *  all filter data right before and after it goes out on the
 *  wire (BUT right before SSL encoded or after SSL decoded).
 *  It can produce a *huge* amount of data.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>dumpio_module</name></decl> ;</decl_stmt>

<typedef>typedef <type><struct>struct <name>dumpio_conf_t</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>enable_input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>enable_output</name></decl>;</decl_stmt>
}</block></struct></type> <name>dumpio_conf_t</name>;</typedef>

<comment type="block">/* consider up to 80 additional characters, and factor the longest
 * line length of all \xNN sequences; log_error cannot record more
 * than MAX_STRING_LEN characters.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpio_MAX_STRING_LEN</name></cpp:macro> <cpp:value>(MAX_STRING_LEN / 4 - 80)</cpp:value></cpp:define>

<comment type="block">/*
 * Workhorse function: simply log to the current error_log
 * info about the data in the bucket as well as the data itself
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpit</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>f</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                  <argument><expr>"mod_dumpio:  %s (%s-%s): %" <name>APR_SIZE_T_FMT</name> " bytes"</expr></argument>,
                  <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
                  <argument><expr>(<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>) ? "metadata" : "data"</expr></argument>,
                  <argument><expr><name><name>b</name>-&gt;<name>type</name>-&gt;<name>name</name></name></expr></argument>,
                  <argument><expr><name><name>b</name>-&gt;<name>length</name></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

    <if>if <condition>(<expr>!(<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>)</expr>)</condition><then>
    <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
        <decl_stmt><decl><type><name>char</name></type> <name><name>xlatebuf</name><index>[<expr><name>dumpio_MAX_STRING_LEN</name> + 1</expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>nbytes</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>nbytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then>
        <block>{
            <while>while <condition>(<expr><name>nbytes</name></expr>)</condition>
            <block>{
                <decl_stmt><decl><type><name>apr_size_t</name></type> <name>logbytes</name> <init>= <expr><name>nbytes</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>logbytes</name> &gt; <name>dumpio_MAX_STRING_LEN</name></expr>)</condition><then>
                    <expr_stmt><expr><name>logbytes</name> = <name>dumpio_MAX_STRING_LEN</name></expr>;</expr_stmt></then></if>
                <expr_stmt><expr><name>nbytes</name> -= <name>logbytes</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>xlatebuf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>logbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_xlate_proto_from_ascii</name><argument_list>(<argument><expr><name>xlatebuf</name></expr></argument>, <argument><expr><name>logbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>xlatebuf</name><index>[<expr><name>logbytes</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                              <argument><expr>"mod_dumpio:  %s (%s-%s): %s"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
                              <argument><expr>(<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>) ? "metadata" : "data"</expr></argument>,
                              <argument><expr><name><name>b</name>-&gt;<name>type</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>xlatebuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <comment type="block">/* XXX: Seriously flawed; we do not pay attention to embedded
                 * \0's in the request body, these should be escaped; however,
                 * the logging function already performs a significant amount
                 * of escaping, and so any escaping would be double-escaped.
                 * The coding solution is to throw away the current logic
                 * within ap_log_error, and introduce new vformatter %-escapes
                 * for escaping text, and for binary text (fixed len strings).
                 */</comment>
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                              <argument><expr>"mod_dumpio:  %s (%s-%s): %.*s"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
                              <argument><expr>(<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>) ? "metadata" : "data"</expr></argument>,
                              <argument><expr><name><name>b</name>-&gt;<name>type</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>logbytes</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name>buf</name> += <name>logbytes</name></expr>;</expr_stmt>
            }</block></while>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                          <argument><expr>"mod_dumpio:  %s (%s-%s): %s"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
                          <argument><expr>(<call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>) ? "metadata" : "data"</expr></argument>,
                          <argument><expr><name><name>b</name>-&gt;<name>type</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"error reading data"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>whichmode</name><parameter_list>( <param><type><name>mode</name></type></param> )</parameter_list></cpp:macro> \
 <cpp:value>( (( mode ) == AP_MODE_READBYTES) ? "readbytes" : \
   (( mode ) == AP_MODE_GETLINE) ? "getline" : \
   (( mode ) == AP_MODE_EATCRLF) ? "eatcrlf" : \
   (( mode ) == AP_MODE_SPECULATIVE) ? "speculative" : \
   (( mode ) == AP_MODE_EXHAUSTIVE) ? "exhaustive" : \
   (( mode ) == AP_MODE_INIT) ? "init" : "unknown" \
 )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dumpio_input_filter</name> <parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
    <param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>, <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>f</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                  <argument><expr>"mod_dumpio: %s [%s-%s] %" <name>APR_OFF_T_FMT</name> " readbytes"</expr></argument>,
                  <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>,
                  <argument><expr><call><name>whichmode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr>((<name>block</name>) == <name>APR_BLOCK_READ</name>) ? "blocking" : "nonblocking"</expr></argument>,
                  <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>ret</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>ret</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
          <expr_stmt><expr><call><name>dumpit</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr>"mod_dumpio: %s - %d"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></else></if>

    <return>return <expr><name>APR_SUCCESS</name></expr> ;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dumpio_output_filter</name> <parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>f</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE7</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"mod_dumpio: %s"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
        <comment type="block">/*
         * If we ever see an EOS, make sure to FLUSH.
         */</comment>
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>flush</name> <init>= <expr><call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>dumpit</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr> ;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dumpio_pre_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>csd</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ptr</name> = (<name>dumpio_conf_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                 <argument><expr>&amp;<name>dumpio_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>ptr</name>-&gt;<name>enable_input</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"DUMPIO_IN"</expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name><name>ptr</name>-&gt;<name>enable_output</name></name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"DUMPIO_OUT"</expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpio_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
<comment type="block">/*
 * We know that SSL is CONNECTION + 5
 */</comment>
  <expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr>"DUMPIO_OUT"</expr></argument>, <argument><expr><name>dumpio_output_filter</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONNECTION</name> + 3</expr></argument>)</argument_list></call></expr> ;</expr_stmt>

  <expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr>"DUMPIO_IN"</expr></argument>, <argument><expr><name>dumpio_input_filter</name></expr></argument>,
        <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_CONNECTION</name> + 3</expr></argument>)</argument_list></call></expr> ;</expr_stmt>

  <expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>dumpio_pre_conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>dumpio_create_sconfig</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>ptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ptr</name>-&gt;<name>enable_input</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ptr</name>-&gt;<name>enable_output</name></name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>ptr</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dumpio_enable_input</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                              <argument><expr>&amp;<name>dumpio_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ptr</name>-&gt;<name>enable_input</name></name> = <name>arg</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dumpio_enable_output</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>dumpio_conf_t</name> *</type><name>ptr</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                              <argument><expr>&amp;<name>dumpio_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ptr</name>-&gt;<name>enable_output</name></name> = <name>arg</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>dumpio_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"DumpIOInput"</expr></argument>, <argument><expr><name>dumpio_enable_input</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                 <argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"Enable I/O Dump on Input Data"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"DumpIOOutput"</expr></argument>, <argument><expr><name>dumpio_enable_output</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                 <argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"Enable I/O Dump on Output Data"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>dumpio</name></expr></argument>)</argument_list></call> = <block>{
        <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
        <expr><name>NULL</name></expr>,                   <comment type="block">/* create per-dir    config structures */</comment>
        <expr><name>NULL</name></expr>,                   <comment type="block">/* merge  per-dir    config structures */</comment>
        <expr><name>dumpio_create_sconfig</name></expr>,  <comment type="block">/* create per-server config structures */</comment>
        <expr><name>NULL</name></expr>,                   <comment type="block">/* merge  per-server config structures */</comment>
        <expr><name>dumpio_cmds</name></expr>,            <comment type="block">/* table of config file commands       */</comment>
        <expr><name>dumpio_register_hooks</name></expr>   <comment type="block">/* register hooks                      */</comment>
}</block></expr>;</expr_stmt>
</unit>
