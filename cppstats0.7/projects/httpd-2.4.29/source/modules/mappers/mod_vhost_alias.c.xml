<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/mappers/mod_vhost_alias.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_vhost_alias.c: support for dynamically configured mass virtual hosting
 *
 * Copyright (c) 1998-1999 Demon Internet Ltd.
 *
 * This software was submitted by Demon Internet to the Apache Software Foundation
 * in May 1999. Future revisions and derivatives of this source code
 * must acknowledge Demon Internet as the original contributor of
 * this module. All other licensing and usage conditions are those
 * of the Apache Software Foundation.
 *
 * Originally written by Tony Finch &lt;fanf@demon.net&gt; &lt;dot@dotat.at&gt;.
 *
 * Implementation ideas were taken from mod_alias.c. The overall
 * concept is derived from the OVERRIDE_DOC_ROOT/OVERRIDE_CGIDIR
 * patch to Apache 1.3b3 and a similar feature in Demon's thttpd,
 * both written by James Grinter &lt;jrg@blodwen.demon.co.uk&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>  <comment type="block">/* for ap_hook_translate_name */</comment>


<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>vhost_alias_module</name></decl>;</decl_stmt>


<comment type="block">/*
 * basic configuration things
 * we abbreviate "mod_vhost_alias" to "mva" for shorter names
 */</comment>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>VHOST_ALIAS_UNSET</name></decl>, <decl><name>VHOST_ALIAS_NONE</name></decl>, <decl><name>VHOST_ALIAS_NAME</name></decl>, <decl><name>VHOST_ALIAS_IP</name></decl>
}</block></enum></type> <name>mva_mode_e</name>;</typedef>

<comment type="block">/*
 * Per-server module config record.
 */</comment>
<typedef>typedef <type><struct>struct <name>mva_sconf_t</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>doc_root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cgi_root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mva_mode_e</name></type> <name>doc_root_mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mva_mode_e</name></type> <name>cgi_root_mode</name></decl>;</decl_stmt>
}</block></struct></type> <name>mva_sconf_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>mva_create_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>mva_sconf_t</name> *</type><name>conf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = (<name>mva_sconf_t</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mva_sconf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>doc_root</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_root</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>doc_root_mode</name></name> = <name>VHOST_ALIAS_UNSET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_root_mode</name></name> = <name>VHOST_ALIAS_UNSET</name></expr>;</expr_stmt>
    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>mva_merge_server_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parentv</name></decl></param>, <param><decl><type><name>void</name> *</type><name>childv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>mva_sconf_t</name> *</type><name>parent</name> <init>= <expr>(<name>mva_sconf_t</name> *) <name>parentv</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mva_sconf_t</name> *</type><name>child</name> <init>= <expr>(<name>mva_sconf_t</name> *) <name>childv</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mva_sconf_t</name> *</type><name>conf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = (<name>mva_sconf_t</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>child</name>-&gt;<name>doc_root_mode</name></name> == <name>VHOST_ALIAS_UNSET</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>doc_root_mode</name></name> = <name><name>parent</name>-&gt;<name>doc_root_mode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>doc_root</name></name> = <name><name>parent</name>-&gt;<name>doc_root</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>doc_root_mode</name></name> = <name><name>child</name>-&gt;<name>doc_root_mode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>doc_root</name></name> = <name><name>child</name>-&gt;<name>doc_root</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name><name>child</name>-&gt;<name>cgi_root_mode</name></name> == <name>VHOST_ALIAS_UNSET</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_root_mode</name></name> = <name><name>parent</name>-&gt;<name>cgi_root_mode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_root</name></name> = <name><name>parent</name>-&gt;<name>cgi_root</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_root_mode</name></name> = <name><name>child</name>-&gt;<name>cgi_root_mode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>cgi_root</name></name> = <name><name>child</name>-&gt;<name>cgi_root</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>


<comment type="block">/*
 * These are just here to tell us what vhost_alias_set should do.
 * We don't put anything into them; we just use the cell addresses.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>vhost_alias_set_doc_root_ip</name></decl>,
    <decl><type ref="prev"/><name>vhost_alias_set_cgi_root_ip</name></decl>,
    <decl><type ref="prev"/><name>vhost_alias_set_doc_root_name</name></decl>,
    <decl><type ref="prev"/><name>vhost_alias_set_cgi_root_name</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>vhost_alias_set</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>map</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>mva_sconf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mva_mode_e</name></type> <name>mode</name></decl>, *<decl><type ref="prev"/><name>pmode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pmap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = (<name>mva_sconf_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                <argument><expr>&amp;<name>vhost_alias_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* there ought to be a better way of doing this */</comment>
    <if>if <condition>(<expr>&amp;<name>vhost_alias_set_doc_root_ip</name> == <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name>VHOST_ALIAS_IP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmap</name> = &amp;<name><name>conf</name>-&gt;<name>doc_root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmode</name> = &amp;<name><name>conf</name>-&gt;<name>doc_root_mode</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>&amp;<name>vhost_alias_set_cgi_root_ip</name> == <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name>VHOST_ALIAS_IP</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmap</name> = &amp;<name><name>conf</name>-&gt;<name>cgi_root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmode</name> = &amp;<name><name>conf</name>-&gt;<name>cgi_root_mode</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>&amp;<name>vhost_alias_set_doc_root_name</name> == <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name>VHOST_ALIAS_NAME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmap</name> = &amp;<name><name>conf</name>-&gt;<name>doc_root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmode</name> = &amp;<name><name>conf</name>-&gt;<name>doc_root_mode</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>&amp;<name>vhost_alias_set_cgi_root_name</name> == <name><name>cmd</name>-&gt;<name>info</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name>VHOST_ALIAS_NAME</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmap</name> = &amp;<name><name>conf</name>-&gt;<name>cgi_root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pmode</name> = &amp;<name><name>conf</name>-&gt;<name>cgi_root_mode</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr>"INTERNAL ERROR: unknown command info"</expr>;</return>
    }</block></else></if></else></if></else></if></else></if>

    <if>if <condition>(<expr>!<call><name>ap_os_is_path_absolute</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>map</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>"format string must be an absolute path, or 'none'"</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr>*<name>pmap</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>pmode</name> = <name>VHOST_ALIAS_NONE</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* sanity check */</comment>
    <expr_stmt><expr><name>p</name> = <name>map</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>*<name>p</name> != '\0'</expr>)</condition> <block>{
        <if>if <condition>(<expr>*<name>p</name>++ != '%'</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* we just found a '%' */</comment>
        <if>if <condition>(<expr>*<name>p</name> == 'p' || *<name>p</name> == '%'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* optional dash */</comment>
        <if>if <condition>(<expr>*<name>p</name> == '-'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* digit N */</comment>
        <if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return <expr>"syntax error in format string"</expr>;</return>
        }</block></else></if>
        <comment type="block">/* optional plus */</comment>
        <if>if <condition>(<expr>*<name>p</name> == '+'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* do we end here? */</comment>
        <if>if <condition>(<expr>*<name>p</name> != '.'</expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        <comment type="block">/* optional dash */</comment>
        <if>if <condition>(<expr>*<name>p</name> == '-'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* digit M */</comment>
        <if>if <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <return>return <expr>"syntax error in format string"</expr>;</return>
        }</block></else></if>
        <comment type="block">/* optional plus */</comment>
        <if>if <condition>(<expr>*<name>p</name> == '+'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>p</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr>*<name>pmap</name> = <name>map</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>pmode</name> = <name>mode</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>mva_commands</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VirtualScriptAlias"</expr></argument>, <argument><expr><name>vhost_alias_set</name></expr></argument>,
                  <argument><expr>&amp;<name>vhost_alias_set_cgi_root_name</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"how to create a ScriptAlias based on the host"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VirtualDocumentRoot"</expr></argument>, <argument><expr><name>vhost_alias_set</name></expr></argument>,
                  <argument><expr>&amp;<name>vhost_alias_set_doc_root_name</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"how to create the DocumentRoot based on the host"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VirtualScriptAliasIP"</expr></argument>, <argument><expr><name>vhost_alias_set</name></expr></argument>,
                  <argument><expr>&amp;<name>vhost_alias_set_cgi_root_ip</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"how to create a ScriptAlias based on the host"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"VirtualDocumentRootIP"</expr></argument>, <argument><expr><name>vhost_alias_set</name></expr></argument>,
                  <argument><expr>&amp;<name>vhost_alias_set_doc_root_ip</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"how to create the DocumentRoot based on the host"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * This really wants to be a nested function
 * but C is too feeble to support them.
 */</comment>
<function><type><specifier>static</specifier> <name>APR_INLINE</name> <name>void</name></type> <name>vhost_alias_checkspace</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>,
                                             <param><decl><type><name>char</name> **</type><name>pdest</name></decl></param>, <param><decl><type><name>int</name></type> <name>size</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* XXX: what if size &gt; HUGE_STRING_LEN? */</comment>
    <if>if <condition>(<expr>*<name>pdest</name> + <name>size</name> &gt; <name>buf</name> + <name>HUGE_STRING_LEN</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>**<name>pdest</name> = '\0'</expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr>*<name>pdest</name> = <name>buf</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vhost_alias_interpolate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>map</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* 0..9 9..0 */</comment>
    <enum>enum <block>{ <decl><name>MAXDOTS</name> <init>= <expr>19</expr></init></decl> }</block>;</enum>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>dots</name><index>[<expr><name>MAXDOTS</name>+1</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ndots</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>docroot</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>, <decl><type ref="prev"/><name>Np</name></decl>, <decl><type ref="prev"/><name>Mp</name></decl>, <decl><type ref="prev"/><name>Nd</name></decl>, <decl><type ref="prev"/><name>Md</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start</name></decl>, *<decl><type ref="prev"/><name>end</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ndots</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dots</name><index>[<expr><name>ndots</name>++</expr>]</index></name> = <name>name</name>-1</expr>;</expr_stmt> <comment type="block">/* slightly naughty */</comment>
    <for>for (<init><expr><name>p</name> = <name>name</name></expr>;</init> <condition><expr>*<name>p</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>) <block>{
        <if>if <condition>(<expr>*<name>p</name> == '.' &amp;&amp; <name>ndots</name> &lt; <name>MAXDOTS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>dots</name><index>[<expr><name>ndots</name>++</expr>]</index></name> = <name>p</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name><name>dots</name><index>[<expr><name>ndots</name></expr>]</index></name> = <name>p</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>dest</name> = <name>buf</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>*<name>map</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>*<name>map</name> != '%'</expr>)</condition><then> <block>{
            <comment type="block">/* normal characters */</comment>
            <expr_stmt><expr><call><name>vhost_alias_checkspace</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>dest</name>++ = *<name>map</name>++</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* we are in a format specifier */</comment>
        <expr_stmt><expr>++<name>map</name></expr>;</expr_stmt>
        <comment type="block">/* %% -&gt; % */</comment>
        <if>if <condition>(<expr>*<name>map</name> == '%'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>map</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>vhost_alias_checkspace</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>dest</name>++ = '%'</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* port number */</comment>
        <if>if <condition>(<expr>*<name>map</name> == 'p'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>map</name></expr>;</expr_stmt>
            <comment type="block">/* no. of decimal digits in a short plus one */</comment>
            <expr_stmt><expr><call><name>vhost_alias_checkspace</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name> += <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* deal with %-N+.-M+ -- syntax is already checked */</comment>
        <expr_stmt><expr><name>M</name> = 0</expr>;</expr_stmt>   <comment type="block">/* value */</comment>
        <expr_stmt><expr><name>Np</name> = <name>Mp</name> = 0</expr>;</expr_stmt> <comment type="block">/* is there a plus? */</comment>
        <expr_stmt><expr><name>Nd</name> = <name>Md</name> = 0</expr>;</expr_stmt> <comment type="block">/* is there a dash? */</comment>
        <if>if <condition>(<expr>*<name>map</name> == '-'</expr>)</condition><then> <expr_stmt><expr>++<name>map</name></expr>, <expr><name>Nd</name> = 1</expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>N</name> = *<name>map</name>++ - '0'</expr>;</expr_stmt>
        <if>if <condition>(<expr>*<name>map</name> == '+'</expr>)</condition><then> <expr_stmt><expr>++<name>map</name></expr>, <expr><name>Np</name> = 1</expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr>*<name>map</name> == '.'</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>map</name></expr>;</expr_stmt>
            <if>if <condition>(<expr>*<name>map</name> == '-'</expr>)</condition><then> <block>{
                <expr_stmt><expr>++<name>map</name></expr>, <expr><name>Md</name> = 1</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>M</name> = *<name>map</name>++ - '0'</expr>;</expr_stmt>
            <if>if <condition>(<expr>*<name>map</name> == '+'</expr>)</condition><then> <block>{
                <expr_stmt><expr>++<name>map</name></expr>, <expr><name>Mp</name> = 1</expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <comment type="block">/* note that N and M are one-based indices, not zero-based */</comment>
        <expr_stmt><expr><name>start</name> = <name><name>dots</name><index>[<expr>0</expr>]</index></name>+1</expr>;</expr_stmt> <comment type="block">/* ptr to the first character */</comment>
        <expr_stmt><expr><name>end</name> = <name><name>dots</name><index>[<expr><name>ndots</name></expr>]</index></name></expr>;</expr_stmt> <comment type="block">/* ptr to the character after the last one */</comment>
        <if>if <condition>(<expr><name>N</name> != 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>N</name> &gt; <name>ndots</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>start</name> = "_"</expr>;</expr_stmt>
                <expr_stmt><expr><name>end</name> = <name>start</name>+1</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr>!<name>Nd</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>start</name> = <name><name>dots</name><index>[<expr><name>N</name>-1</expr>]</index></name>+1</expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>Np</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>end</name> = <name><name>dots</name><index>[<expr><name>N</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr>!<name>Np</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>start</name> = <name><name>dots</name><index>[<expr><name>ndots</name>-<name>N</name></expr>]</index></name>+1</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>end</name> = <name><name>dots</name><index>[<expr><name>ndots</name>-<name>N</name>+1</expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>M</name> != 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>M</name> &gt; <name>end</name> - <name>start</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>start</name> = "_"</expr>;</expr_stmt>
                <expr_stmt><expr><name>end</name> = <name>start</name>+1</expr>;</expr_stmt>
            }</block></then>
            <else>else <if>if <condition>(<expr>!<name>Md</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>start</name> = <name>start</name>+<name>M</name>-1</expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>Mp</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>end</name> = <name>start</name>+1</expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr>!<name>Mp</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>start</name> = <name>end</name>-<name>M</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>end</name> = <name>end</name>-<name>M</name>+1</expr>;</expr_stmt>
            }</block></else></if></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>vhost_alias_checkspace</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>dest</name></expr></argument>, <argument><expr><name>end</name> - <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>p</name> = <name>start</name></expr>;</init> <condition><expr><name>p</name> &lt; <name>end</name></expr>;</condition> <incr><expr>++<name>p</name></expr></incr>) <block>{
            <expr_stmt><expr>*<name>dest</name>++ = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></while>
    <comment type="block">/* no double slashes */</comment>
    <if>if <condition>(<expr><name>dest</name> - <name>buf</name> &gt; 0 &amp;&amp; <name><name>dest</name><index>[<expr>-1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
        <expr_stmt><expr>--<name>dest</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>*<name>dest</name> = '\0'</expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then>
        <expr_stmt><expr><name>docroot</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>docroot</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>docroot</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_context_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>docroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_set_document_root</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>docroot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mva_translate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>mva_sconf_t</name> *</type><name>conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>, *<decl><type ref="prev"/><name>map</name></decl>, *<decl><type ref="prev"/><name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mva_mode_e</name></type> <name>mode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cgi</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>conf</name> = (<name>mva_sconf_t</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                              <argument><expr>&amp;<name>vhost_alias_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cgi</name> = <name>NULL</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>cgi_root</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cgi</name> = <call><name>strstr</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"cgi-bin/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cgi</name> &amp;&amp; (<name>cgi</name> != <name><name>r</name>-&gt;<name>uri</name></name> + <call><name>strspn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cgi</name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>cgi</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name><name>conf</name>-&gt;<name>cgi_root_mode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>map</name> = <name><name>conf</name>-&gt;<name>cgi_root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>uri</name> = <name>cgi</name> + <call><name>strlen</name><argument_list>(<argument><expr>"cgi-bin"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mode</name> = <name><name>conf</name>-&gt;<name>doc_root_mode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>map</name> = <name><name>conf</name>-&gt;<name>doc_root</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>uri</name> = <name><name>r</name>-&gt;<name>uri</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></else></if></else></if>

    <if>if <condition>(<expr><name>mode</name> == <name>VHOST_ALIAS_NAME</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>mode</name> == <name>VHOST_ALIAS_IP</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>r</name>-&gt;<name>connection</name>-&gt;<name>local_ip</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></else></if></else></if>

    <comment type="block">/* ### There is an optimization available here to determine the
     * absolute portion of the path from the server config phase,
     * through the first % segment, and note that portion of the path
     * canonical_path buffer.
     */</comment>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>canonical_filename</name></name> = ""</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vhost_alias_interpolate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>cgi</name></expr>)</condition><then> <block>{
        <comment type="block">/* see is_scriptaliased() in mod_cgi */</comment>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>handler</name></name> = "cgi-script"</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"alias-forced-type"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_set_context_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"/cgi-bin"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszPre</name><index>[]</index></name><init>=<expr><block>{ <expr>"mod_alias.c"</expr>,<expr>"mod_userdir.c"</expr>,<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>mva_translate</name></expr></argument>, <argument><expr><name>aszPre</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>vhost_alias</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir config creater */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>mva_create_server_config</name></expr>,   <comment type="block">/* server config */</comment>
    <expr><name>mva_merge_server_config</name></expr>,    <comment type="block">/* merge server configs */</comment>
    <expr><name>mva_commands</name></expr>,               <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>

</unit>
