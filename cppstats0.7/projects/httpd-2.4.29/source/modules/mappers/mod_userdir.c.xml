<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/mappers/mod_userdir.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_userdir... implement the UserDir command.  Broken away from the
 * Alias stuff for a couple of good and not-so-good reasons:
 *
 * 1) It shows a real minimal working example of how to do something like
 *    this.
 * 2) I know people who are actually interested in changing this *particular*
 *    aspect of server functionality without changing the rest of it.  That's
 *    what this whole modular arrangement is supposed to be good at...
 *
 * Modified by Alexei Kosut to support the following constructs
 * (server running at www.foo.com, request for /~bar/one/two.html)
 *
 * UserDir public_html      -&gt; ~bar/public_html/one/two.html
 * UserDir /usr/web         -&gt; /usr/web/bar/one/two.html
 * UserDir /home/ * /www     -&gt; /home/bar/www/one/two.html
 *  NOTE: theses ^ ^ space only added allow it to work in a comment, ignore
 * UserDir http://x/users   -&gt; (302) http://x/users/bar/one/two.html
 * UserDir http://x/ * /y     -&gt; (302) http://x/bar/y/one/two.html
 *  NOTE: here also ^ ^
 *
 * In addition, you can use multiple entries, to specify alternate
 * user directories (a la Directory Index). For example:
 *
 * UserDir public_html /usr/web http://www.xyz.com/users
 *
 * Modified by Ken Coar to provide for the following:
 *
 * UserDir disable[d] username ...
 * UserDir enable[d] username ...
 *
 * If "disabled" has no other arguments, *all* ~&lt;username&gt; references are
 * disabled, except those explicitly turned on with the "enabled" keyword.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_user.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_UNISTD_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>NETWARE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_UNIX_SUEXEC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SUEXEC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unixd.h"</cpp:file></cpp:include>        <comment type="block">/* Contains the suexec_identity hook used on Unix */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * The default directory in user's home dir
 * In the default install, the module is disabled
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DEFAULT_USER_DIR</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_USER_DIR</name></cpp:macro> <cpp:value>NULL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DEFAULT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_ENABLE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>O_DISABLE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>userdir_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>globally_disabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>userdir</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>enabled_users</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>disabled_users</name></decl>;</decl_stmt>
}</block></struct></type> <name>userdir_config</name>;</typedef>

<comment type="block">/*
 * Server config for this module: global disablement flag, a list of usernames
 * ineligible for UserDir access, a list of those immune to global (but not
 * explicit) disablement, and the replacement string for all others.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_userdir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>userdir_config</name> *</type><name>newcfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>newcfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>newcfg</name>-&gt;<name>globally_disabled</name></name> = <name>O_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newcfg</name>-&gt;<name>userdir</name></name> = <name>DEFAULT_USER_DIR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newcfg</name>-&gt;<name>enabled_users</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>newcfg</name>-&gt;<name>disabled_users</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>newcfg</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_userdir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>userdir_config</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>userdir_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>userdir_config</name> *</type><name>base</name> <init>= <expr><name>basev</name></expr></init>, *<name>overrides</name> <init>= <expr><name>overridesv</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>globally_disabled</name></name> = (<name><name>overrides</name>-&gt;<name>globally_disabled</name></name> != <name>O_DEFAULT</name>) ?
                             <name><name>overrides</name>-&gt;<name>globally_disabled</name></name> :
                             <name><name>base</name>-&gt;<name>globally_disabled</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>userdir</name></name> = (<name><name>overrides</name>-&gt;<name>userdir</name></name> != <name>DEFAULT_USER_DIR</name>) ?
                   <name><name>overrides</name>-&gt;<name>userdir</name></name> : <name><name>base</name>-&gt;<name>userdir</name></name></expr>;</expr_stmt>

    <comment type="block">/* not merged */</comment>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>enabled_users</name></name> = <name><name>overrides</name>-&gt;<name>enabled_users</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>disabled_users</name></name> = <name><name>overrides</name>-&gt;<name>disabled_users</name></name></expr>;</expr_stmt>

    <return>return <expr><name>cfg</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_user_dir</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>userdir_config</name> *</type><name>s_cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                 <argument><expr>&amp;<name>userdir_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>username</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>usernames</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>kw</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>&amp;<name>usernames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>usertable</name></decl>;</decl_stmt>

    <comment type="block">/* Since we are a raw argument, it is possible for us to be called with
     * zero arguments.  So that we aren't ambiguous, flat out reject this.
     */</comment>
    <if>if <condition>(<expr>*<name>kw</name> == '\0'</expr>)</condition><then> <block>{
        <return>return <expr>"UserDir requires an argument."</expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Let's do the comparisons once.
     */</comment>
    <if>if <condition>(<expr>(!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr>"disable"</expr></argument>)</argument_list></call>) || (!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr>"disabled"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <comment type="block">/*
         * If there are no usernames specified, this is a global disable - we
         * need do no more at this point than record the fact.
         */</comment>
        <if>if <condition>(<expr>!*<name>usernames</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>s_cfg</name>-&gt;<name>globally_disabled</name></name> = <name>O_DISABLE</name></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>usertable</name> = <name><name>s_cfg</name>-&gt;<name>disabled_users</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>(!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr>"enable"</expr></argument>)</argument_list></call>) || (!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>kw</name></expr></argument>, <argument><expr>"enabled"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!*<name>usernames</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>s_cfg</name>-&gt;<name>globally_disabled</name></name> = <name>O_ENABLE</name></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>usertable</name> = <name><name>s_cfg</name>-&gt;<name>enabled_users</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/*
         * If the first (only?) value isn't one of our keywords, just copy
         * the string to the userdir string.
         */</comment>
        <expr_stmt><expr><name><name>s_cfg</name>-&gt;<name>userdir</name></name> = <name>arg</name></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></else></if></else></if>
    <comment type="block">/*
     * Now we just take each word in turn from the command line and add it to
     * the appropriate table.
     */</comment>
    <while>while <condition>(<expr>*<name>usernames</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>username</name> = <call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>usernames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>usertable</name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>userdir_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"UserDir"</expr></argument>, <argument><expr><name>set_user_dir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                     <argument><expr>"the public subdirectory in users' home directories, or "
                     "'disabled', or 'disabled username username...', or "
                     "'enabled username username...'"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>translate_userdir</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_conf_vector_t</name> *</type><name>server_conf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>userdir_config</name> *</type><name>s_cfg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>userdirs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>user</name></decl>, *<decl><type ref="prev"/><name>dname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>redirect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>statbuf</name></decl>;</decl_stmt>

    <comment type="block">/*
     * If the URI doesn't match our basic pattern, we've nothing to do with
     * it.
     */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>uri</name><index>[<expr>0</expr>]</index></name> != '/' || <name><name>r</name>-&gt;<name>uri</name><index>[<expr>1</expr>]</index></name> != '~'</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>server_conf</name> = <name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s_cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name>server_conf</name></expr></argument>, <argument><expr>&amp;<name>userdir_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>userdirs</name> = <name><name>s_cfg</name>-&gt;<name>userdir</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>userdirs</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>dname</name> = <name><name>r</name>-&gt;<name>uri</name></name> + 2</expr>;</expr_stmt>
    <expr_stmt><expr><name>user</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>dname</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * The 'dname' funny business involves backing it up to capture the '/'
     * delimiting the "/~user" part from the rest of the URL, in case there
     * was one (the case where there wasn't being just "GET /~user HTTP/1.0",
     * for which we don't want to tack on a '/' onto the filename).
     */</comment>

    <if>if <condition>(<expr><name><name>dname</name><index>[<expr>-1</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
        <expr_stmt><expr>--<name>dname</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * If there's no username, it's not for us.  Ignore . and .. as well.
     */</comment>
    <if>if <condition>(<expr><name><name>user</name><index>[<expr>0</expr>]</index></name> == '\0' ||
        (<name><name>user</name><index>[<expr>1</expr>]</index></name> == '.' &amp;&amp; (<name><name>user</name><index>[<expr>2</expr>]</index></name> == '\0' ||
                            (<name><name>user</name><index>[<expr>2</expr>]</index></name> == '.' &amp;&amp; <name><name>user</name><index>[<expr>3</expr>]</index></name> == '\0')))</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/*
     * Nor if there's an username but it's in the disabled list.
     */</comment>
    <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>s_cfg</name>-&gt;<name>disabled_users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/*
     * If there's a global interdiction on UserDirs, check to see if this
     * name is one of the Blessed.
     */</comment>
    <if>if <condition>(<expr><name><name>s_cfg</name>-&gt;<name>globally_disabled</name></name> == <name>O_DISABLE</name>
        &amp;&amp; <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>s_cfg</name>-&gt;<name>enabled_users</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Special cases all checked, onward to normal substitution processing.
     */</comment>

    <while>while <condition>(<expr>*<name>userdirs</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>userdir</name> <init>= <expr><call><name>ap_getword_conf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>userdirs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>filename</name> <init>= <expr><name>NULL</name></expr></init>, *<name>prefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_absolute</name> <init>= <expr><call><name>ap_os_is_path_absolute</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>userdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>userdir</name></expr></argument>, <argument><expr>'*'</expr></argument>)</argument_list></call></expr>)</condition><then>
            <expr_stmt><expr><name>prefix</name> = <call><name>ap_getword</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>userdir</name></expr></argument>, <argument><expr>'*'</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <if>if <condition>(<expr><name><name>userdir</name><index>[<expr>0</expr>]</index></name> == '\0' || <name>is_absolute</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>prefix</name></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DRIVE_LETTERS</name></cpp:ifdef>
                <comment type="block">/*
                 * Crummy hack. Need to figure out whether we have been
                 * redirected to a URL or to a file on some drive. Since I
                 * know of no protocols that are a single letter, ignore
                 * a : as the first or second character, and assume a file
                 * was specified
                 */</comment>
                <if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>prefix</name> + 2</expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> &amp;&amp; !<name>is_absolute</name></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DRIVE_LETTERS */</comment>
                <block>{
                    <expr_stmt><expr><name>redirect</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>userdir</name></expr></argument>,
                                           <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
                }</block></then>
                <else>else
                    <expr_stmt><expr><name>filename</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>userdir</name></expr></argument>,
                                           <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></then></if>
            }</block></then>
            <else>else
                <expr_stmt><expr><name>filename</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>userdir</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>prefix</name> &amp;&amp; <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>redirect</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
        }</block></then>
        <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_USER</name></expr></cpp:if>
            <decl_stmt><decl><type><name>char</name> *</type><name>homedir</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name>apr_uid_homepath_get</name><argument_list>(<argument><expr>&amp;<name>homedir</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>filename</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>homedir</name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>userdir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <return>return <expr><name>DECLINED</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if></else></if>

        <comment type="block">/*
         * Now see if it exists, or we're at the last entry. If we are at the
         * last entry, then use the filename generated (if there is one)
         * anyway, in the hope that some handler might handle it. This can be
         * used, for example, to run a CGI script for the user.
         */</comment>
        <if>if <condition>(<expr><name>filename</name> &amp;&amp; (!*<name>userdirs</name>
                      || ((<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>statbuf</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>,
                                         <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>
                                             || <name>rv</name> == <name>APR_INCOMPLETE</name>))</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_set_context_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>,
                                                  <argument><expr><name>dname</name> - <name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* XXX: Does this walk us around FollowSymLink rules?
             * When statbuf contains info on r-&gt;filename we can save a syscall
             * by copying it to r-&gt;finfo
             */</comment>
            <if>if <condition>(<expr>*<name>userdirs</name> &amp;&amp; <name><name>dname</name><index>[<expr>0</expr>]</index></name> == 0</expr>)</condition><then>
                <expr_stmt><expr><name><name>r</name>-&gt;<name>finfo</name></name> = <name>statbuf</name></expr>;</expr_stmt></then></if>

            <comment type="block">/* For use in the get_suexec_identity phase */</comment>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"mod_userdir_user"</expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then></if>
    }</block></while>

    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SUEXEC</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>ap_unix_identity_t</name> *</type><name>get_suexec_id_doer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_unix_identity_t</name> *</type><name>ugid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_USER</name></expr></cpp:if>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>username</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"mod_userdir_user"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>username</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>ugid</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ugid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>apr_uid_get</name><argument_list>(<argument><expr>&amp;<name><name>ugid</name>-&gt;<name>uid</name></name></expr></argument>, <argument><expr>&amp;<name><name>ugid</name>-&gt;<name>gid</name></name></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>ugid</name>-&gt;<name>userdir</name></name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>ugid</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_UNIX_SUEXEC */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszPre</name><index>[]</index></name><init>=<expr><block>{ <expr>"mod_alias.c"</expr>,<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>aszSucc</name><index>[]</index></name><init>=<expr><block>{ <expr>"mod_vhost_alias.c"</expr>,<expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>translate_userdir</name></expr></argument>,<argument><expr><name>aszPre</name></expr></argument>,<argument><expr><name>aszSucc</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_UNIX_SUEXEC</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_hook_get_suexec_identity</name><argument_list>(<argument><expr><name>get_suexec_id_doer</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>userdir</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir config creater */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>create_userdir_config</name></expr>,      <comment type="block">/* server config */</comment>
    <expr><name>merge_userdir_config</name></expr>,       <comment type="block">/* merge server config */</comment>
    <expr><name>userdir_cmds</name></expr>,               <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
