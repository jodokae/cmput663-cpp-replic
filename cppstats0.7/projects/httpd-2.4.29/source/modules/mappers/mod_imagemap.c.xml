<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/mappers/mod_imagemap.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * This imagemap module started as a port of the original imagemap.c
 * written by Rob McCool (11/13/93 robm@ncsa.uiuc.edu).
 * This version includes the mapping algorithms found in version 1.3
 * of imagemap.c.
 *
 * Contributors to this code include:
 *
 * Kevin Hughes, kevinh@pulua.hcc.hawaii.edu
 *
 * Eric Haines, erich@eye.com
 * "macmartinized" polygon code copyright 1992 by Eric Haines, erich@eye.com
 *
 * Randy Terbush, randy@zyzzyva.com
 * port to Apache module format, "base_uri" and support for relative URLs
 *
 * James H. Cloos, Jr., cloos@jhcloos.com
 * Added point datatype, using code in NCSA's version 1.8 imagemap.c
 * program, as distributed with version 1.4.1 of their server.
 * The point code is originally added by Craig Milo Rogers, Rogers@ISI.Edu
 *
 * Nathan Kurz, nate@tripod.com
 * Rewrite/reorganization.  New handling of default, base and relative URLs.
 * New Configuration directives:
 *    ImapMenu {none, formatted, semiformatted, unformatted}
 *    ImapDefault {error, nocontent, referer, menu, URL}
 *    ImapBase {map, referer, URL}
 * Support for creating non-graphical menu added.  (backwards compatible):
 *    Old:  directive URL [x,y ...]
 *    New:  directive URL "Menu text" [x,y ...]
 *     or:  directive URL x,y ... "Menu text"
 * Map format and menu concept courtesy Joshua Bell, jsbell@acs.ucalgary.ca.
 *
 * Mark Cox, mark@ukweb.com, Allow relative URLs even when no base specified
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STDIO</name></cpp:macro></cpp:define>          <comment type="block">/* for sscanf() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_MAGIC_TYPE</name></cpp:macro> <cpp:value>"application/x-httpd-imap"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXVERTS</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_MENU_DEFAULT</name></cpp:macro> <cpp:value>"formatted"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_DEFAULT_DEFAULT</name></cpp:macro> <cpp:value>"nocontent"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IMAP_BASE_DEFAULT</name></cpp:macro> <cpp:value>"map"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>imagemap_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>imap_menu</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>imap_default</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>imap_base</name></decl>;</decl_stmt>
}</block></struct></type> <name>imap_conf_rec</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_imap_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>icr</name> <init>=
    <expr>(<name>imap_conf_rec</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>icr</name>-&gt;<name>imap_menu</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>icr</name>-&gt;<name>imap_default</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>icr</name>-&gt;<name>imap_base</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>icr</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_imap_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>new</name> <init>= <expr>(<name>imap_conf_rec</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>base</name> <init>= <expr>(<name>imap_conf_rec</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>add</name> <init>= <expr>(<name>imap_conf_rec</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>imap_menu</name></name> = <name><name>add</name>-&gt;<name>imap_menu</name></name> ? <name><name>add</name>-&gt;<name>imap_menu</name></name> : <name><name>base</name>-&gt;<name>imap_menu</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>imap_default</name></name> = <name><name>add</name>-&gt;<name>imap_default</name></name> ? <name><name>add</name>-&gt;<name>imap_default</name></name>
                                          : <name><name>base</name>-&gt;<name>imap_default</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>imap_base</name></name> = <name><name>add</name>-&gt;<name>imap_base</name></name> ? <name><name>add</name>-&gt;<name>imap_base</name></name> : <name><name>base</name>-&gt;<name>imap_base</name></name></expr>;</expr_stmt>

    <return>return <expr><name>new</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>imap_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ImapMenu"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_INDEXES</name></expr></argument>,
                  <argument><expr>"the type of menu generated: none, formatted, semiformatted, "
                  "unformatted"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ImapDefault"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>, <argument><expr><name>imap_default</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_INDEXES</name></expr></argument>,
                  <argument><expr>"the action taken if no match: error, nocontent, referer, "
                  "menu, URL"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ImapBase"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>imap_conf_rec</name></expr></argument>, <argument><expr><name>imap_base</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_INDEXES</name></expr></argument>,
                  <argument><expr>"the base for all URL's: map, referer, URL (or start of)"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pointinrect</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>coords</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name><name>max</name><index>[<expr>2</expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>min</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> &gt; <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>max</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>max</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr>0</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> &gt; <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>max</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>max</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr>1</expr>]</index></name> = <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr>((<name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> &gt;= <name><name>min</name><index>[<expr>0</expr>]</index></name> &amp;&amp; <name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> &lt;= <name><name>max</name><index>[<expr>0</expr>]</index></name>) &amp;&amp;
            (<name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> &gt;= <name><name>min</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> &lt;= <name><name>max</name><index>[<expr>1</expr>]</index></name>))</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pointincircle</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>coords</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>radius1</name></decl>, <decl><type ref="prev"/><name>radius2</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>radius1</name> = ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>))
        + ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>1</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>))</expr>;</expr_stmt>

    <expr_stmt><expr><name>radius2</name> = ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name>))
        + ((<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>X</name></expr>]</index></name>) * (<name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> - <name><name>point</name><index>[<expr><name>X</name></expr>]</index></name>))</expr>;</expr_stmt>

    <return>return <expr>(<name>radius2</name> &lt;= <name>radius1</name>)</expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmin</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(b):(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fmax</name><parameter_list>(<param><type><name>a</name></type></param>,<param><type><name>b</name></type></param>)</parameter_list></cpp:macro> <cpp:value>(((a)&gt;(b))?(a):(b))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pointinpoly</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>pgon</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>numverts</name></decl>, <decl><type ref="prev"/><name>crossings</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name><name>point</name><index>[<expr><name>X</name></expr>]</index></name></expr></init>, <name>y</name> <init>= <expr><name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for (<init><expr><name>numverts</name> = 0</expr>;</init> <condition><expr><name>numverts</name> &lt; <name>MAXVERTS</name> &amp;&amp; <name><name>pgon</name><index>[<expr><name>numverts</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> != -1</expr>;</condition>
        <incr><expr><name>numverts</name>++</expr></incr>) <block>{
        <comment type="block">/* just counting the vertexes */</comment>
    }</block></for>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>numverts</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>x1</name><init>=<expr><name><name>pgon</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y1</name><init>=<expr><name><name>pgon</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>x2</name><init>=<expr><name><name>pgon</name><index>[<expr>(<name>i</name> + 1) % <name>numverts</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>y2</name><init>=<expr><name><name>pgon</name><index>[<expr>(<name>i</name> + 1) % <name>numverts</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>d</name><init>=<expr>(<name>y</name> - <name>y1</name>) * (<name>x2</name> - <name>x1</name>) - (<name>x</name> - <name>x1</name>) * (<name>y2</name> - <name>y1</name>)</expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>(<name>y1</name> &gt;= <name>y</name>) != (<name>y2</name> &gt;= <name>y</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>crossings</name> +=<name>y2</name> - <name>y1</name> &gt;= 0 ? <name>d</name> &gt;= 0 : <name>d</name> &lt;= 0</expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr>!<name>d</name> &amp;&amp; <call><name>fmin</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call> &lt;= <name>x</name> &amp;&amp; <name>x</name> &lt;= <call><name>fmax</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name>fmin</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call> &lt;= <name>y</name> &amp;&amp; <name>y</name> &lt;= <call><name>fmax</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>crossings</name> &amp; 0x01</expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>is_closer</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>double</name></type> <name><name>point</name><index>[<expr>2</expr>]</index></name></decl></param>, <param><decl><type><name>double</name></type> <name><name>coords</name><index>[<expr><name>MAXVERTS</name></expr>]</index><index>[<expr>2</expr>]</index></name></decl></param>,
                     <param><decl><type><name>double</name> *</type><name>closest</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>double</name></type> <name>dist_squared</name> <init>= <expr>((<name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>)
                           * (<name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name>))
                          + ((<name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>)
                             * (<name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> - <name><name>coords</name><index>[<expr>0</expr>]</index><index>[<expr><name>Y</name></expr>]</index></name>))</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>point</name><index>[<expr><name>X</name></expr>]</index></name> &lt; 0 || <name><name>point</name><index>[<expr><name>Y</name></expr>]</index></name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr>(0)</expr>;</return>          <comment type="block">/* don't mess around with negative coordinates */</comment>
    }</block></then></if>

    <if>if <condition>(<expr>*<name>closest</name> &lt; 0 || <name>dist_squared</name> &lt; *<name>closest</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>closest</name> = <name>dist_squared</name></expr>;</expr_stmt>
        <return>return <expr>(1)</expr>;</return>          <comment type="block">/* if this is the first point or is the closest yet
                                set 'closest' equal to this distance^2 */</comment>
    }</block></then></if>

    <return>return <expr>(0)</expr>;</return>              <comment type="block">/* if it's not the first or closest */</comment>

}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_x_coord</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>               <comment type="block">/* we want it non-null */</comment>
    <decl_stmt><decl><type><name>double</name></type> <name>x_coord</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>        <comment type="block">/* -1 is returned if no coordinate is given */</comment>

    <if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr>(-1)</expr>;</return>            <comment type="block">/* in case we aren't passed anything */</comment>
    }</block></then></if>

    <while>while <condition>(<expr>*<name>args</name> &amp;&amp; !<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>args</name></expr></argument>)</argument_list></call> &amp;&amp; *<name>args</name> != ','</expr>)</condition> <block>{
        <expr_stmt><expr><name>args</name>++</expr>;</expr_stmt>                 <comment type="block">/* jump to the first digit, but not past
                                   a comma or end */</comment>
    }</block></while>

    <expr_stmt><expr><name>x_coord</name> = <call><name>strtod</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>endptr</name> &gt; <name>args</name></expr>)</condition><then> <block>{        <comment type="block">/* if a conversion was made */</comment>
        <return>return <expr>(<name>x_coord</name>)</expr>;</return>
    }</block></then></if>

    <return>return <expr>(-1)</expr>;</return>                <comment type="block">/* else if no conversion was made,
                                   or if no args was given */</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>get_y_coord</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>endptr</name></decl>;</decl_stmt>               <comment type="block">/* we want it non-null */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>start_of_y</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>y_coord</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>        <comment type="block">/* -1 is returned on error */</comment>

    <if>if <condition>(<expr><name>args</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr>(-1)</expr>;</return>            <comment type="block">/* in case we aren't passed anything */</comment>
    }</block></then></if>

    <expr_stmt><expr><name>start_of_y</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* the comma */</comment>

    <if>if <condition>(<expr><name>start_of_y</name></expr>)</condition><then> <block>{

        <expr_stmt><expr><name>start_of_y</name>++</expr>;</expr_stmt>           <comment type="block">/* start looking at the character after
                                   the comma */</comment>

        <while>while <condition>(<expr>*<name>start_of_y</name> &amp;&amp; !<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>start_of_y</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
            <expr_stmt><expr><name>start_of_y</name>++</expr>;</expr_stmt>       <comment type="block">/* jump to the first digit, but not
                                   past the end */</comment>
        }</block></while>

        <expr_stmt><expr><name>y_coord</name> = <call><name>strtod</name><argument_list>(<argument><expr><name>start_of_y</name></expr></argument>, <argument><expr>&amp;<name>endptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>endptr</name> &gt; <name>start_of_y</name></expr>)</condition><then> <block>{
            <return>return <expr>(<name>y_coord</name>)</expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr>(-1)</expr>;</return>                <comment type="block">/* if no conversion was made, or
                                   no comma was found in args */</comment>
}</block></function>


<comment type="block">/* See if string has a "quoted part", and if so set *quoted_part to
 * the first character of the quoted part, then hammer a \0 onto the
 * trailing quote, and set *string to point at the first character
 * past the second quote.
 *
 * Otherwise set *quoted_part to NULL, and leave *string alone.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>read_quoted</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>string</name></decl></param>, <param><decl><type><name>char</name> **</type><name>quoted_part</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>strp</name> <init>= <expr>*<name>string</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* assume there's no quoted part */</comment>
    <expr_stmt><expr>*<name>quoted_part</name> = <name>NULL</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>strp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><name>strp</name>++</expr>;</expr_stmt>                 <comment type="block">/* go along string until non-whitespace */</comment>
    }</block></while>

    <if>if <condition>(<expr>*<name>strp</name> == '"'</expr>)</condition><then> <block>{         <comment type="block">/* if that character is a double quote */</comment>
        <expr_stmt><expr><name>strp</name>++</expr>;</expr_stmt>                 <comment type="block">/* step over it */</comment>
        <expr_stmt><expr>*<name>quoted_part</name> = <name>strp</name></expr>;</expr_stmt>    <comment type="block">/* note where the quoted part begins */</comment>

        <while>while <condition>(<expr>*<name>strp</name> &amp;&amp; *<name>strp</name> != '"'</expr>)</condition> <block>{
            <expr_stmt><expr>++<name>strp</name></expr>;</expr_stmt>             <comment type="block">/* skip the quoted portion */</comment>
        }</block></while>

        <expr_stmt><expr>*<name>strp</name> = '\0'</expr>;</expr_stmt>           <comment type="block">/* end the string with a NUL */</comment>

        <expr_stmt><expr><name>strp</name>++</expr>;</expr_stmt>                 <comment type="block">/* step over the last double quote */</comment>
        <expr_stmt><expr>*<name>string</name> = <name>strp</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<comment type="block">/*
 * returns the mapped URL or NULL.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>imap_url</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>value</name></decl></param>)</parameter_list>
<block>{
<comment type="block">/* translates a value into a URL. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>slen</name></decl>, <decl><type ref="prev"/><name>clen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>string_pos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string_pos_const</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>directory</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>referer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>my_base</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"map"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"menu"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>      <comment type="block">/* these are handled elsewhere,
                                                so just copy them */</comment>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"referer"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>referer</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>referer</name> &amp;&amp; *<name>referer</name></expr>)</condition><then> <block>{
            <return>return <expr><name>referer</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <comment type="block">/* XXX:  This used to do *value = '\0'; ... which is totally bogus
             * because it hammers the passed in value, which can be a string
             * constant, or part of a config, or whatever.  Total garbage.
             * This works around that without changing the rest of this
             * code much
             */</comment>
            <expr_stmt><expr><name>value</name> = ""</expr>;</expr_stmt>      <comment type="block">/* if 'referer' but no referring page,
                                null the value */</comment>
        }</block></else></if>
    }</block></then></if>

    <expr_stmt><expr><name>string_pos_const</name> = <name>value</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>apr_isalpha</name><argument_list>(<argument><expr>*<name>string_pos_const</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><name>string_pos_const</name>++</expr>;</expr_stmt>           <comment type="block">/* go along the URL from the map
                                         until a non-letter */</comment>
    }</block></while>
    <if>if <condition>(<expr>*<name>string_pos_const</name> == ':'</expr>)</condition><then> <block>{
        <comment type="block">/* if letters and then a colon (like http:) */</comment>
        <comment type="block">/* it's an absolute URL, so use it! */</comment>
        <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>base</name> || !*<name>base</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>value</name> &amp;&amp; *<name>value</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="block">/* no base: use what is given */</comment>
        }</block></then></if>
        <comment type="block">/* no base, no value: pick a simple default */</comment>
        <return>return <expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* must be a relative URL to be combined with base */</comment>
    <if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>base</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> == <name>NULL</name> &amp;&amp; (!<call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"../"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call>
        || !<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00677</expr></argument>)</argument_list></call>
                    "invalid base directive in map file: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>my_base</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>string_pos</name> = <name>my_base</name></expr>;</expr_stmt>
    <while>while <condition>(<expr>*<name>string_pos</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>*<name>string_pos</name> == '/' &amp;&amp; *(<name>string_pos</name> + 1) == '/'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>string_pos</name> += 2</expr>;</expr_stmt>    <comment type="block">/* if there are two slashes, jump over them */</comment>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr>*<name>string_pos</name> == '/'</expr>)</condition><then> <block>{       <comment type="block">/* the first single slash */</comment>
            <if>if <condition>(<expr><name><name>value</name><index>[<expr>0</expr>]</index></name> == '/'</expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
            }</block></then>                   <comment type="block">/* if the URL from the map starts from root,
                                   end the base URL string at the first single
                                   slash */</comment>
            <else>else <block>{
                <expr_stmt><expr><name>directory</name> = <name>string_pos</name></expr>;</expr_stmt>         <comment type="block">/* save the start of
                                                   the directory portion */</comment>

                <expr_stmt><expr><name>string_pos</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>string_pos</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* now reuse
                                                           string_pos */</comment>
                <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>   <comment type="block">/* step over that last slash */</comment>
                <expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
            }</block></else></if>                   <comment type="block">/* but if the map url is relative, leave the
                                   slash on the base (if there is one) */</comment>
            <break>break;</break>
        }</block></then></if>
        <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>           <comment type="block">/* until we get to the end of my_base without
                                   finding a slash by itself */</comment>
    }</block></while>

    <while>while <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"../"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>".."</expr></argument>)</argument_list></call></expr>)</condition> <block>{

        <if>if <condition>(<expr><name>directory</name> &amp;&amp; (<name>slen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{

            <comment type="block">/* for each '..',  knock a directory off the end
               by ending the string right at the last slash.
               But only consider the directory portion: don't eat
               into the server name.  And only try if a directory
               portion was found */</comment>

            <expr_stmt><expr><name>clen</name> = <name>slen</name> - 1</expr>;</expr_stmt>

            <while>while <condition>(<expr>(<name>slen</name> - <name>clen</name>) == 1</expr>)</condition> <block>{

                <if>if <condition>(<expr>(<name>string_pos</name> = <call><name>strrchr</name><argument_list>(<argument><expr><name>directory</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>clen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>clen</name> == 0</expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
            }</block></while>

            <expr_stmt><expr><name>value</name> += 2</expr>;</expr_stmt>         <comment type="block">/* jump over the '..' that we found in the
                                   value */</comment>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>directory</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00678</expr></argument>)</argument_list></call>
                        "invalid directory name in map file: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if></else></if>

        <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"/../"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> || !<call><name>strcmp</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr>"/.."</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>value</name>++</expr>;</expr_stmt>            <comment type="block">/* step over the '/' if there are more '..'
                                   to do.  This way, we leave the starting
                                   '/' on value after the last '..', but get
                                   rid of it otherwise */</comment>
        }</block></then></if>

    }</block></while>                           <comment type="block">/* by this point, value does not start
                                   with '..' */</comment>

    <if>if <condition>(<expr><name>value</name> &amp;&amp; *<name>value</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>my_base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>my_base</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_reply</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>redirect</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>redirect</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* they actually requested an error! */</comment>
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>redirect</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* tell the client to keep the page it has */</comment>
        <return>return <expr><name>HTTP_NO_CONTENT</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>redirect</name> &amp;&amp; *<name>redirect</name></expr>)</condition><then> <block>{
        <comment type="block">/* must be a URL, so redirect to it */</comment>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_MOVED_TEMPORARILY</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_header</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>menu</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>DOCTYPE_HTML_3_2</name></expr></argument>, <argument><expr>"&lt;html&gt;&lt;head&gt;\n&lt;title&gt;Menu for "</expr></argument>,
              <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr>"&lt;/title&gt;\n&lt;/head&gt;&lt;body&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;h1&gt;Menu for "</expr></argument>,
                  <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr>"&lt;/h1&gt;\n&lt;hr /&gt;\n\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_blank</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>menu</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;br /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_comment</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>menu</name></decl></param>, <param><decl><type><name>char</name> *</type><name>comment</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* comments are ignored in the 'formatted' form */</comment>
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* print just a newline if 'formatted' */</comment>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call> &amp;&amp; *<name>comment</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call> &amp;&amp; *<name>comment</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>comment</name></expr></argument>, <argument><expr>"\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_default</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>menu</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>ehref</name></decl>, *<decl><type ref="prev"/><name>etext</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return;</return>                 <comment type="block">/* don't print such lines, these aren't
                                   really href's */</comment>
    }</block></then></if>

    <expr_stmt><expr><name>ehref</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>etext</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt;(Default) &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
                     <argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt;(Default) &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
               <argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_directive</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>menu</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>href</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>ehref</name></decl>, *<decl><type ref="prev"/><name>etext</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>href</name></expr></argument>, <argument><expr>"nocontent"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return;</return>                 <comment type="block">/* don't print such lines, as this isn't
                                   really an href */</comment>
    }</block></then></if>

    <expr_stmt><expr><name>ehref</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>href</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>etext</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"formatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt;          &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
               <argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"semiformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;pre&gt;          &lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>,
               <argument><expr>"&lt;/a&gt;&lt;/pre&gt;\n"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>menu</name></expr></argument>, <argument><expr>"unformatted"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\""</expr></argument>, <argument><expr><name>ehref</name></expr></argument>, <argument><expr>"\"&gt;"</expr></argument>, <argument><expr><name>etext</name></expr></argument>, <argument><expr>"&lt;/a&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>menu_footer</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n&lt;/body&gt;\n&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* finish the menu */</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_handler_internal</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>input</name><index>[<expr><name>MAX_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>directive</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>href_text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>base</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>redirect</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>mapdflt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>closest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>closest_yet</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name><name>testpoint</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>pointarray</name><index>[<expr><name>MAXVERTS</name> + 1</expr>]</index><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vertex</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> *</type><name>string_pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>showmenu</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>imap_conf_rec</name> *</type><name>icr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name> *</type><name>imap_menu</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>imap_default</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>imap_base</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ap_configfile_t</name> *</type><name>imap</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>icr</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>imagemap_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>imap_menu</name> = <name><name>icr</name>-&gt;<name>imap_menu</name></name> ? <name><name>icr</name>-&gt;<name>imap_menu</name></name> : <name>IMAP_MENU_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>imap_default</name> = <name><name>icr</name>-&gt;<name>imap_default</name></name>
      ?  <name><name>icr</name>-&gt;<name>imap_default</name></name> : <name>IMAP_DEFAULT_DEFAULT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>imap_base</name> = <name><name>icr</name>-&gt;<name>imap_base</name></name> ? <name><name>icr</name>-&gt;<name>imap_base</name></name> : <name>IMAP_BASE_DEFAULT</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>status</name> = <call><name>ap_pcfg_openfile</name><argument_list>(<argument><expr>&amp;<name>imap</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>base</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>imap_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* set base according
                                                    to default */</comment>
    <if>if <condition>(<expr>!<name>base</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>mapdflt</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>imap_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* and default to
                                                    global default */</comment>
    <if>if <condition>(<expr>!<name>mapdflt</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> = <call><name>get_x_coord</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> = <call><name>get_y_coord</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>(<name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> == -1 || <name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> == -1) ||
        (<name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> == 0 &amp;&amp; <name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> == 0)</expr>)</condition><then> <block>{
        <comment type="block">/* if either is -1 or if both are zero (new Lynx) */</comment>
        <comment type="block">/* we don't have valid coordinates */</comment>
        <expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> = -1</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>testpoint</name><index>[<expr><name>Y</name></expr>]</index></name> = -1</expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>imap_menu</name></expr></argument>, <argument><expr>"none"</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>showmenu</name> = 1</expr>;</expr_stmt>       <comment type="block">/* show the menu _unless_ ImapMenu is
                                   'none' or 'no' */</comment>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{             <comment type="block">/* send start of imagemap menu if
                                   we're going to */</comment>
        <expr_stmt><expr><call><name>menu_header</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <while>while <condition>(<expr>!<call><name>ap_cfg_getline</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr>!<name><name>input</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>menu_blank</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>input</name><index>[<expr>0</expr>]</index></name> == '#'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>menu_comment</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>, <argument><expr><name>input</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>                       <comment type="block">/* blank lines and comments are ignored
                                   if we aren't printing a menu */</comment>

        <comment type="block">/* find the first two space delimited fields, recall that
         * ap_cfg_getline has removed leading/trailing whitespace.
         *
         * note that we're tokenizing as we go... if we were to use the
         * ap_getword() class of functions we would end up allocating extra
         * memory for every line of the map file
         */</comment>
        <expr_stmt><expr><name>string_pos</name> = <name>input</name></expr>;</expr_stmt>
        <if>if <condition>(<expr>!*<name>string_pos</name></expr>)</condition><then> <block>{   <comment type="block">/* need at least two fields */</comment>
            <goto>goto <name>need_2_fields</name>;</goto>
        }</block></then></if>

        <expr_stmt><expr><name>directive</name> = <name>string_pos</name></expr>;</expr_stmt>
        <while>while <condition>(<expr>*<name>string_pos</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{   <comment type="block">/* past directive */</comment>
            <expr_stmt><expr>++<name>string_pos</name></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr>!*<name>string_pos</name></expr>)</condition><then> <block>{   <comment type="block">/* need at least two fields */</comment>
            <goto>goto <name>need_2_fields</name>;</goto>
        }</block></then></if>
        <expr_stmt><expr>*<name>string_pos</name>++ = '\0'</expr>;</expr_stmt>

        <if>if <condition>(<expr>!*<name>string_pos</name></expr>)</condition><then> <block>{   <comment type="block">/* need at least two fields */</comment>
            <goto>goto <name>need_2_fields</name>;</goto>
        }</block></then></if>
        <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{ <comment type="block">/* past whitespace */</comment>
            <expr_stmt><expr>++<name>string_pos</name></expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><name>value</name> = <name>string_pos</name></expr>;</expr_stmt>
        <while>while <condition>(<expr>*<name>string_pos</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{   <comment type="block">/* past value */</comment>
            <expr_stmt><expr>++<name>string_pos</name></expr>;</expr_stmt>
        }</block></while>
        <if>if <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>string_pos</name>++ = '\0'</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="block">/* end of input, don't advance past it */</comment>
            <expr_stmt><expr>*<name>string_pos</name> = '\0'</expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr>!<call><name>strncasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"base"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{       <comment type="block">/* base, base_uri */</comment>
            <expr_stmt><expr><name>base</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>base</name></expr>)</condition><then> <block>{
                <goto>goto <name>menu_bail</name>;</goto>
            }</block></then></if>
            <continue>continue;</continue>           <comment type="block">/* base is never printed to a menu */</comment>
        }</block></then></if>

        <expr_stmt><expr><call><name>read_quoted</name><argument_list>(<argument><expr>&amp;<name>string_pos</name></expr></argument>, <argument><expr>&amp;<name>href_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"default"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{        <comment type="block">/* default */</comment>
            <expr_stmt><expr><name>mapdflt</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>mapdflt</name></expr>)</condition><then> <block>{
                <goto>goto <name>menu_bail</name>;</goto>
            }</block></then></if>
            <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{     <comment type="block">/* print the default if there's a menu */</comment>
                <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>mapdflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
                    <goto>goto <name>menu_bail</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><call><name>menu_default</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>,
                             <argument><expr><name>href_text</name> ? <name>href_text</name> : <name>mapdflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name>vertex</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr><name>vertex</name> &lt; <name>MAXVERTS</name> &amp;&amp;
               <call><name>sscanf</name><argument_list>(<argument><expr><name>string_pos</name></expr></argument>, <argument><expr>"%lf%*[, ]%lf"</expr></argument>,
                      <argument><expr>&amp;<name><name>pointarray</name><index>[<expr><name>vertex</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>pointarray</name><index>[<expr><name>vertex</name></expr>]</index><index>[<expr><name>Y</name></expr>]</index></name></expr></argument>)</argument_list></call> == 2</expr>)</condition> <block>{
            <comment type="block">/* Now skip what we just read... we can't use ANSIism %n */</comment>
            <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{      <comment type="block">/* past whitespace */</comment>
                <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
            }</block></while>
            <while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{      <comment type="block">/* and the 1st number */</comment>
                <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>       <comment type="block">/* skip the ',' */</comment>
            <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{      <comment type="block">/* past any more whitespace */</comment>
                <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
            }</block></while>
            <while>while <condition>(<expr><call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>string_pos</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{      <comment type="block">/* 2nd number */</comment>
                <expr_stmt><expr><name>string_pos</name>++</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>vertex</name>++</expr>;</expr_stmt>
        }</block></while>                       <comment type="block">/* so long as there are more vertices to
                                   read, and we have room, read them in.
                                   We start where we left off of the last
                                   sscanf, not at the beginning. */</comment>

        <expr_stmt><expr><name><name>pointarray</name><index>[<expr><name>vertex</name></expr>]</index><index>[<expr><name>X</name></expr>]</index></name> = -1</expr>;</expr_stmt>     <comment type="block">/* signals the end of vertices */</comment>

        <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>href_text</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>read_quoted</name><argument_list>(<argument><expr>&amp;<name>string_pos</name></expr></argument>, <argument><expr>&amp;<name>href_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* href text could
                                                             be here instead */</comment>
            }</block></then></if>
            <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
                <goto>goto <name>menu_bail</name>;</goto>
            }</block></then></if>
            <expr_stmt><expr><call><name>menu_directive</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>imap_menu</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>,
                           <argument><expr><name>href_text</name> ? <name>href_text</name> : <name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* note that we don't make it past here if we are making a menu */</comment>

        <if>if <condition>(<expr><name><name>testpoint</name><index>[<expr><name>X</name></expr>]</index></name> == -1 || <name><name>pointarray</name><index>[<expr>0</expr>]</index><index>[<expr><name>X</name></expr>]</index></name> == -1</expr>)</condition><then> <block>{
            <continue>continue;</continue>           <comment type="block">/* don't try the following tests if testpoints
                                   are invalid, or if there are no
                                   coordinates */</comment>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"poly"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{   <comment type="block">/* poly */</comment>

            <if>if <condition>(<expr><call><name>pointinpoly</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
                }</block></then></if>
                <return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"circle"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{         <comment type="block">/* circle */</comment>

            <if>if <condition>(<expr><call><name>pointincircle</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
                }</block></then></if>
                <return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"rect"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{   <comment type="block">/* rect */</comment>

            <if>if <condition>(<expr><call><name>pointinrect</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
                    <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
                }</block></then></if>
                <return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>directive</name></expr></argument>, <argument><expr>"point"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{  <comment type="block">/* point */</comment>

            <if>if <condition>(<expr><call><name>is_closer</name><argument_list>(<argument><expr><name>testpoint</name></expr></argument>, <argument><expr><name>pointarray</name></expr></argument>, <argument><expr>&amp;<name>closest_yet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>closest</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <continue>continue;</continue>
        }</block></then></if>                       <comment type="block">/* move on to next line whether it's
                                   closest or not */</comment>

    }</block></while>                           <comment type="block">/* nothing matched, so we get another line! */</comment>

    <expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* we are done with the map file; close it */</comment>

    <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>menu_footer</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* finish the menu and we are done */</comment>
        <return>return <expr><name>OK</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>closest</name></expr>)</condition><then> <block>{             <comment type="block">/* if a 'point' directive has been seen */</comment>
        <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>closest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>mapdflt</name></expr>)</condition><then> <block>{             <comment type="block">/* a default should be defined, even if
                                  only 'nocontent' */</comment>
        <expr_stmt><expr><name>redirect</name> = <call><name>imap_url</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><name>mapdflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>redirect</name></expr>)</condition><then> <block>{
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></then></if>
        <return>return <expr>(<call><name>imap_reply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>redirect</name></expr></argument>)</argument_list></call>)</expr>;</return>
    }</block></then></if>

    <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>        <comment type="block">/* If we make it this far,
                                                 we failed. They lose! */</comment>

<label><name>need_2_fields</name>:</label>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00679</expr></argument>)</argument_list></call>
                "map file %s, line %d syntax error: requires at "
                "least two fields"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>imap</name>-&gt;<name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* fall through */</comment>
<label><name>menu_bail</name>:</label>
    <expr_stmt><expr><call><name>ap_cfg_closefile</name><argument_list>(<argument><expr><name>imap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>showmenu</name></expr>)</condition><then> <block>{
        <comment type="block">/* There's not much else we can do ... we've already sent the headers
         * to the client.
         */</comment>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n\n[an internal server error occured]\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>menu_footer</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>OK</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>imap_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Optimization: skip the allocation of large local variables on the
     * stack (in imap_handler_internal()) on requests that aren't using
     * imagemaps
     */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name> || (<call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>,<argument><expr><name>IMAP_MAGIC_TYPE</name></expr></argument>)</argument_list></call>
                                      &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"imap-file"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then>
    <else>else <block>{
        <return>return <expr><call><name>imap_handler_internal</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>imap_handler</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>imagemap</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_imap_dir_config</name></expr>,     <comment type="block">/* dir config creater */</comment>
    <expr><name>merge_imap_dir_configs</name></expr>,     <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge server config */</comment>
    <expr><name>imap_cmds</name></expr>,                  <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
