<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/mappers/mod_speling.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WANT_BASENAME_MATCH</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>

<comment type="block">/* mod_speling.c - by Alexei Kosut &lt;akosut@organic.com&gt; June, 1996
 *
 * This module is transparent, and simple. It attempts to correct
 * misspellings of URLs that users might have entered, namely by checking
 * capitalizations. If it finds a match, it sends a redirect.
 *
 * Sep-1999 Hugo Haas &lt;hugo@w3.org&gt;
 * o Added a CheckCaseOnly option to check only miscapitalized words.
 *
 * 08-Aug-1997 &lt;Martin.Kraemer@Mch.SNI.De&gt;
 * o Upgraded module interface to apache_1.3a2-dev API (more NULL's in
 *   speling_module).
 * o Integrated tcsh's "spelling correction" routine which allows one
 *   misspelling (character insertion/omission/typo/transposition).
 *   Rewrote it to ignore case as well. This ought to catch the majority
 *   of misspelled requests.
 * o Commented out the second pass where files' suffixes are stripped.
 *   Given the better hit rate of the first pass, this rather ugly
 *   (request index.html, receive index.db ?!?!) solution can be
 *   omitted.
 * o wrote a "kind of" html page for mod_speling
 *
 * Activate it with "CheckSpelling On"
 */</comment>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>speling_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>case_only</name></decl>;</decl_stmt>
}</block></struct></type> <name>spconfig</name>;</typedef>

<comment type="block">/*
 * Create a configuration specific to this module for a server or directory
 * location, and fill it with the default settings.
 *
 * The API says that in the absence of a merge function, the record for the
 * closest ancestor is used exclusively.  That's what we want, so we don't
 * bother to have such a function.
 */</comment>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>mkconfig</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>spconfig</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>spconfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>enabled</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfg</name>-&gt;<name>case_only</name></name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>cfg</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * Respond to a callback to create configuration record for a server or
 * vhost environment.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_mconfig_for_server</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>mkconfig</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * Respond to a callback to create a config record for a specific directory.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_mconfig_for_directory</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>mkconfig</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * Define the directives specific to this module.  This structure is referenced
 * later by the 'module' structure.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>speling_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CheckSpelling"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>spconfig</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
                 <argument><expr>"whether or not to fix miscapitalized/misspelled requests"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"CheckCaseOnly"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                  <argument><expr>(<name>void</name>*)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>spconfig</name></expr></argument>, <argument><expr><name>case_only</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_OPTIONS</name></expr></argument>,
                 <argument><expr>"whether or not to fix only miscapitalized requests"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>SP_IDENTICAL</name> <init>= <expr>0</expr></init></decl>,
    <decl><name>SP_MISCAPITALIZED</name> <init>= <expr>1</expr></init></decl>,
    <decl><name>SP_TRANSPOSITION</name> <init>= <expr>2</expr></init></decl>,
    <decl><name>SP_MISSINGCHAR</name> <init>= <expr>3</expr></init></decl>,
    <decl><name>SP_EXTRACHAR</name> <init>= <expr>4</expr></init></decl>,
    <decl><name>SP_SIMPLETYPO</name> <init>= <expr>5</expr></init></decl>,
    <decl><name>SP_VERYDIFFERENT</name> <init>= <expr>6</expr></init></decl>
}</block></enum></type> <name>sp_reason</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>sp_reason_str</name><index>[]</index></name> <init>=
<expr><block>{
    <expr>"identical"</expr>,
    <expr>"miscapitalized"</expr>,
    <expr>"transposed characters"</expr>,
    <expr>"character missing"</expr>,
    <expr>"extra character"</expr>,
    <expr>"mistyped character"</expr>,
    <expr>"common basename"</expr>,
}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sp_reason</name></type> <name>quality</name></decl>;</decl_stmt>
}</block></struct></type> <name>misspelled_file</name>;</typedef>

<comment type="block">/*
 * spdist() is taken from Kernighan &amp; Pike,
 *  _The_UNIX_Programming_Environment_
 * and adapted somewhat to correspond better to psychological reality.
 * (Note the changes to the return values)
 *
 * According to Pollock and Zamora, CACM April 1984 (V. 27, No. 4),
 * page 363, the correct order for this is:
 * OMISSION = TRANSPOSITION &gt; INSERTION &gt; SUBSTITUTION
 * thus, it was exactly backwards in the old version. -- PWP
 *
 * This routine was taken out of tcsh's spelling correction code
 * (tcsh-6.07.04) and re-converted to apache data types ("char" type
 * instead of tcsh's NLS'ed "Char"). Plus it now ignores the case
 * during comparisons, so is a "approximate strcasecmp()".
 * NOTE that is still allows only _one_ real "typo",
 * it does NOT try to correct multiple errors.
 */</comment>

<function><type><specifier>static</specifier> <name>sp_reason</name></type> <name>spdist</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>t</name></decl></param>)</parameter_list>
<block>{
    <for>for (<init>;</init> <condition><expr><call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>t</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>t</name>++</expr>, <expr><name>s</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr>*<name>t</name> == '\0'</expr>)</condition><then> <block>{
            <return>return <expr><name>SP_MISCAPITALIZED</name></expr>;</return>   <comment type="block">/* exact match (sans case) */</comment>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr>*<name>s</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>*<name>t</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <name><name>t</name><index>[<expr>1</expr>]</index></name> &amp;&amp; <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>s</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>t</name></expr></argument>)</argument_list></call> == <call><name>apr_tolower</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call>
                &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name> + 2</expr></argument>, <argument><expr><name>t</name> + 2</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <return>return <expr><name>SP_TRANSPOSITION</name></expr>;</return>        <comment type="block">/* transposition */</comment>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name> + 1</expr></argument>, <argument><expr><name>t</name> + 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                <return>return <expr><name>SP_SIMPLETYPO</name></expr>;</return>   <comment type="block">/* 1 char mismatch */</comment>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name> + 1</expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name>SP_EXTRACHAR</name></expr>;</return>        <comment type="block">/* extra character */</comment>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr>*<name>t</name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name> + 1</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <return>return <expr><name>SP_MISSINGCHAR</name></expr>;</return>  <comment type="block">/* missing character */</comment>
    }</block></then></if>
    <return>return <expr><name>SP_VERYDIFFERENT</name></expr>;</return>    <comment type="block">/* distance too large to fix. */</comment>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sort_by_quality</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>left</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>rite</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr>((<name>misspelled_file</name> *) <name>left</name>)-&gt;<name>quality</name></expr></argument>)</argument_list></call>
        - <call>(<name>int</name>) <argument_list>(<argument><expr>((<name>misspelled_file</name> *) <name>rite</name>)-&gt;<name>quality</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_speling</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>spconfig</name> *</type><name>cfg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>good</name></decl>, *<decl><type ref="prev"/><name>bad</name></decl>, *<decl><type ref="prev"/><name>postgood</name></decl>, *<decl><type ref="prev"/><name>url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>dirent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>filoc</name></decl>, <decl><type ref="prev"/><name>dotloc</name></decl>, <decl><type ref="prev"/><name>urlen</name></decl>, <decl><type ref="prev"/><name>pglen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>candidates</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dir_t</name>          *</type><name>dir</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cfg</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>speling_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>cfg</name>-&gt;<name>enabled</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* We only want to worry about GETs */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* We've already got a file of some kind or another */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Not a file request */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name> || !<name><name>r</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* This is a sub request - don't mess with it */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * The request should end up looking like this:
     * r-&gt;uri: /correct-url/mispelling/more
     * r-&gt;filename: /correct-file/mispelling r-&gt;path_info: /more
     *
     * So we do this in steps. First break r-&gt;filename into two pieces
     */</comment>

    <expr_stmt><expr><name>filoc</name> = <call><name>ap_rind</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*
     * Don't do anything if the request doesn't contain a slash, or
     * requests "/"
     */</comment>
    <if>if <condition>(<expr><name>filoc</name> == -1 || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>"/"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* good = /correct-file */</comment>
    <expr_stmt><expr><name>good</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>filoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* bad = mispelling */</comment>
    <expr_stmt><expr><name>bad</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name> + <name>filoc</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* postgood = mispelling/more */</comment>
    <expr_stmt><expr><name>postgood</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>urlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pglen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>postgood</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check to see if the URL pieces add up */</comment>
    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>postgood</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name> + (<name>urlen</name> - <name>pglen</name>)</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* url = /correct-url */</comment>
    <expr_stmt><expr><name>url</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr>(<name>urlen</name> - <name>pglen</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now open the directory and do ourselves a check... */</comment>
    <if>if <condition>(<expr><call><name>apr_dir_open</name><argument_list>(<argument><expr>&amp;<name>dir</name></expr></argument>, <argument><expr><name>good</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* Oops, not a directory... */</comment>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>candidates</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>misspelled_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>dotloc</name> = <call><name>ap_ind</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dotloc</name> == -1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>dotloc</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>bad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <while>while <condition>(<expr><call><name>apr_dir_read</name><argument_list>(<argument><expr>&amp;<name>dirent</name></expr></argument>, <argument><expr><name>APR_FINFO_DIRENT</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>sp_reason</name></type> <name>q</name></decl>;</decl_stmt>

        <comment type="block">/*
         * If we end up with a "fixed" URL which is identical to the
         * requested one, we must have found a broken symlink or some such.
         * Do _not_ try to redirect this, it causes a loop!
         */</comment>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then>

        <comment type="block">/*
         * miscapitalization errors are checked first (like, e.g., lower case
         * file, upper case request)
         */</comment>
        <else>else <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>misspelled_file</name> *</type><name>sp_new</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>sp_new</name> = (<name>misspelled_file</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sp_new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sp_new</name>-&gt;<name>quality</name></name> = <name>SP_MISCAPITALIZED</name></expr>;</expr_stmt>
        }</block></then>

        <comment type="block">/*
         * simple typing errors are checked next (like, e.g.,
         * missing/extra/transposed char)
         */</comment>
        <else>else <if>if <condition>(<expr>(<name><name>cfg</name>-&gt;<name>case_only</name></name> == 0)
                 &amp;&amp; ((<name>q</name> = <call><name>spdist</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call>) != <name>SP_VERYDIFFERENT</name>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>misspelled_file</name> *</type><name>sp_new</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>sp_new</name> = (<name>misspelled_file</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sp_new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sp_new</name>-&gt;<name>quality</name></name> = <name>q</name></expr>;</expr_stmt>
        }</block></then>

        <comment type="block">/*
         * The spdist() should have found the majority of the misspelled
         * requests.  It is of questionable use to continue looking for
         * files with the same base name, but potentially of totally wrong
         * type (index.html &lt;-&gt; index.db).
         * I would propose to not set the WANT_BASENAME_MATCH define.
         *      08-Aug-1997 &lt;Martin.Kraemer@Mch.SNI.De&gt;
         *
         * However, Alexei replied giving some reasons to add it anyway:
         * &gt; Oh, by the way, I remembered why having the
         * &gt; extension-stripping-and-matching stuff is a good idea:
         * &gt;
         * &gt; If you're using MultiViews, and have a file named foobar.html,
         * &gt; which you refer to as "foobar", and someone tried to access
         * &gt; "Foobar", mod_speling won't find it, because it won't find
         * &gt; anything matching that spelling. With the extension-munging,
         * &gt; it would locate "foobar.html". Not perfect, but I ran into
         * &gt; that problem when I first wrote the module.
         */</comment>
        <else>else <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WANT_BASENAME_MATCH</name></cpp:ifdef>
            <comment type="block">/*
             * Okay... we didn't find anything. Now we take out the hard-core
             * power tools. There are several cases here. Someone might have
             * entered a wrong extension (.htm instead of .html or vice
             * versa) or the document could be negotiated. At any rate, now
             * we just compare stuff before the first dot. If it matches, we
             * figure we got us a match. This can result in wrong things if
             * there are files of different content types but the same prefix
             * (e.g. foo.gif and foo.html) This code will pick the first one
             * it finds. Better than a Not Found, though.
             */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>entloc</name> <init>= <expr><call><name>ap_ind</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>entloc</name> == -1</expr>)</condition><then> <block>{
                <expr_stmt><expr><name>entloc</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr>(<name>dotloc</name> == <name>entloc</name>)
                &amp;&amp; !<call><name>strncasecmp</name><argument_list>(<argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>, <argument><expr><name>dotloc</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>misspelled_file</name> *</type><name>sp_new</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>sp_new</name> = (<name>misspelled_file</name> *) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>candidates</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sp_new</name>-&gt;<name>name</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dirent</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sp_new</name>-&gt;<name>quality</name></name> = <name>SP_VERYDIFFERENT</name></expr>;</expr_stmt>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if></else></if></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>apr_dir_close</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>candidates</name>-&gt;<name>nelts</name></name> != 0</expr>)</condition><then> <block>{
        <comment type="block">/* Wow... we found us a mispelling. Construct a fixed url */</comment>
        <decl_stmt><decl><type><name>char</name> *</type><name>nuri</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ref</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>misspelled_file</name> *</type><name>variant</name> <init>= <expr>(<name>misspelled_file</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>ref</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Referer"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>candidates</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name></expr></argument>,
              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>misspelled_file</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>sort_by_quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/*
         * Conditions for immediate redirection:
         *     a) the first candidate was not found by stripping the suffix
         * AND b) there exists only one candidate OR the best match is not
         *        ambiguous
         * then return a redirection right away.
         */</comment>
        <if>if <condition>(<expr><name><name>variant</name><index>[<expr>0</expr>]</index></name>.<name>quality</name> != <name>SP_VERYDIFFERENT</name>
            &amp;&amp; (<name><name>candidates</name>-&gt;<name>nelts</name></name> == 1
                || <name><name>variant</name><index>[<expr>0</expr>]</index></name>.<name>quality</name> != <name><name>variant</name><index>[<expr>1</expr>]</index></name>.<name>quality</name>)</expr>)</condition><then> <block>{

            <expr_stmt><expr><name>nuri</name> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>,
                                                     <argument><expr><name><name>variant</name><index>[<expr>0</expr>]</index></name>.<name>name</name></expr></argument>,
                                                     <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name></expr>)</condition><then>
                <expr_stmt><expr><name>nuri</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nuri</name></expr></argument>, <argument><expr>"?"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>,
                          <argument><expr><call><name>ap_construct_url</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>nuri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>,
                          <argument><expr><name>r</name></expr></argument>,
                          <argument><expr><name>ref</name> ? <call><name>APLOGNO</name><argument_list>(<argument><expr>03224</expr></argument>)</argument_list></call> "Fixed spelling: %s to %s from %s"
                              : <call><name>APLOGNO</name><argument_list>(<argument><expr>03225</expr></argument>)</argument_list></call> "Fixed spelling: %s to %s%s"</expr></argument>,
                          <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name>nuri</name></expr></argument>,
                          <argument><expr>(<name>ref</name> ? <name>ref</name> : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>HTTP_MOVED_PERMANENTLY</name></expr>;</return>
        }</block></then>
        <comment type="block">/*
         * Otherwise, a "[300] Multiple Choices" list with the variants is
         * returned.
         */</comment>
        <else>else <block>{
            <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>sub_pool</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>t</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>v</name></decl>;</decl_stmt>


            <if>if <condition>(<expr><name><name>r</name>-&gt;<name/></name>main == <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>notes</name> = <name><name>r</name>-&gt;<name>notes</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>p</name> = <name><name>r</name>-&gt;<name/></name>main-&gt;<name>pool</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>notes</name> = <name><name>r</name>-&gt;<name/></name>main-&gt;<name>notes</name></expr>;</expr_stmt>
            }</block></else></if>

            <if>if <condition>(<expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>sub_pool</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then>
                <return>return <expr><name>DECLINED</name></expr>;</return></then></if>

            <expr_stmt><expr><name>t</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name> * 8 + 8</expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name> * 5</expr></argument>,
                              <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* Generate the response text. */</comment>

            <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
                          "The document name you requested (&lt;code&gt;"</expr>;</expr_stmt>
            <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
                           "&lt;/code&gt;) could not be found on this server.\n"
                           "However, we found documents with names similar "
                           "to the one you requested.&lt;p&gt;"
                           "Available documents:\n&lt;ul&gt;\n"</expr>;</expr_stmt>

            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>candidates</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
                <decl_stmt><decl><type><name>char</name> *</type><name>vuri</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>reason</name></decl>;</decl_stmt>

                <expr_stmt><expr><name>reason</name> = <name><name>sp_reason_str</name><index>[<expr><call>(<name>int</name>) <argument_list>(<argument><expr><name><name>variant</name><index>[<expr><name>i</name></expr>]</index></name>.<name>quality</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
                <comment type="block">/* The format isn't very neat... */</comment>
                <expr_stmt><expr><name>vuri</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name><name>variant</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>path_info</name></name></expr></argument>,
                                  <argument><expr>(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> != <name>NULL</name>) ? "?" : ""</expr></argument>,
                                  <argument><expr>(<name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> != <name>NULL</name>)
                                      ? <name><name>r</name>-&gt;<name>parsed_uri</name>.<name>query</name></name> : ""</expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = "\""</expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>vuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = "\";\""</expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = <name>reason</name></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> = "\""</expr>;</expr_stmt>

                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "&lt;li&gt;&lt;a href=\""</expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_uri</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>vuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "\"&gt;"</expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>vuri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "&lt;/a&gt; ("</expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <name>reason</name></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = ")\n"</expr>;</expr_stmt>

                <comment type="block">/*
                 * when we have printed the "close matches" and there are
                 * more "distant matches" (matched by stripping the suffix),
                 * then we insert an additional separator text to suggest
                 * that the user LOOK CLOSELY whether these are really the
                 * files she wanted.
                 */</comment>
                <if>if <condition>(<expr><name>i</name> &gt; 0 &amp;&amp; <name>i</name> &lt; <name><name>candidates</name>-&gt;<name>nelts</name></name> - 1
                    &amp;&amp; <name><name>variant</name><index>[<expr><name>i</name></expr>]</index></name>.<name>quality</name> != <name>SP_VERYDIFFERENT</name>
                    &amp;&amp; <name><name>variant</name><index>[<expr><name>i</name> + 1</expr>]</index></name>.<name>quality</name> == <name>SP_VERYDIFFERENT</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
                                   "&lt;/ul&gt;\nFurthermore, the following related "
                                   "documents were found:\n&lt;ul&gt;\n"</expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = "&lt;/ul&gt;\n"</expr>;</expr_stmt>

            <comment type="block">/* If we know there was a referring page, add a note: */</comment>
            <if>if <condition>(<expr><name>ref</name> != <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
                               "Please consider informing the owner of the "
                               "referring page &lt;tt&gt;"</expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> =
                               "&lt;/tt&gt; about the broken link.\n"</expr>;</expr_stmt>
            }</block></then></if>


            <comment type="block">/* Pass our apr_table_t to http_protocol.c (see mod_negotiation): */</comment>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>notes</name></expr></argument>, <argument><expr>"variant-list"</expr></argument>, <argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>apr_table_mergen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"VARIANTS"</expr></argument>,
                            <argument><expr><call><name>apr_array_pstrcat</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr>','</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>sub_pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
                         <argument><expr><name>ref</name> ? <call><name>APLOGNO</name><argument_list>(<argument><expr>03226</expr></argument>)</argument_list></call> "Spelling fix: %s: %d candidates from %s"
                             : <call><name>APLOGNO</name><argument_list>(<argument><expr>03227</expr></argument>)</argument_list></call> "Spelling fix: %s: %d candidates%s"</expr></argument>,
                         <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>, <argument><expr><name><name>candidates</name>-&gt;<name>nelts</name></name></expr></argument>,
                         <argument><expr>(<name>ref</name> ? <name>ref</name> : "")</expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>HTTP_MULTIPLE_CHOICES</name></expr>;</return>
        }</block></else></if>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>check_speling</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>speling</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_mconfig_for_directory</name></expr>,  <comment type="block">/* create per-dir config */</comment>
    <expr><name>NULL</name></expr>,                          <comment type="block">/* merge per-dir config */</comment>
    <expr><name>create_mconfig_for_server</name></expr>,     <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                          <comment type="block">/* merge server config */</comment>
    <expr><name>speling_cmds</name></expr>,                  <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>                 <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
