<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/mod_proxy_http2.c"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nghttp2/nghttp2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mod_proxy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_http2.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_proxy_http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_proxy_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_proxy_session.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2MIN</name><parameter_list>(<param><type><name>x</name></type></param>,<param><type><name>y</name></type></param>)</parameter_list></cpp:macro> <cpp:value>((x) &lt; (y) ? (x) : (y))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>proxy_http2</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,              <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>NULL</name></expr>,              <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>NULL</name></expr>,              <comment type="block">/* create per-server config structure */</comment>
    <expr><name>NULL</name></expr>,              <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>NULL</name></expr>,              <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hook</name></expr>      <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>

<comment type="block">/* Optional functions from mod_http2 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> (*<name>is_h2</name>)<parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> (*<name>req_engine_push</name>)<parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, 
                                       <param><decl><type><name>http2_req_engine_init</name> *</type><name>einit</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> (*<name>req_engine_pull</name>)<parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>, 
                                       <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>, 
                                       <param><decl><type><name>int</name></type> <name>capacity</name></decl></param>, 
                                       <param><decl><type><name>request_rec</name> **</type><name>pr</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> (*<name>req_engine_done</name>)<parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>r_conn</name></decl></param>,
                               <param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>)</parameter_list>;</function_decl>
                                       
<typedef>typedef <type><struct>struct <name>h2_proxy_ctx</name> <block>{
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>owner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>rbase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>server_portstr</name><index>[<expr>32</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_conn_rec</name> *</type><name>p_conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>engine_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>engine_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>engine_pool</name></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>req_buffer_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_proxy_fifo</name> *</type><name>requests</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>unsigned</name> <name>standalone</name> : 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>is_ssl</name> : 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>flushall</name> : 1</expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>r_status</name></decl>;</decl_stmt>     <comment type="block">/* status of our first request work */</comment>
    <decl_stmt><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl>;</decl_stmt> <comment type="block">/* current http2 session against backend */</comment>
}</block></struct></type> <name>h2_proxy_ctx</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_proxy_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                                <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>void</name> *</type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>init_key</name> <init>= <expr>"mod_proxy_http2_init_counter"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nghttp2_info</name> *</type><name>ngh2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>plog</name></expr>;</expr_stmt><expr_stmt><expr>(<name>void</name>)<name>ptemp</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>apr_pool_userdata_get</name><argument_list>(<argument><expr>&amp;<name>data</name></expr></argument>, <argument><expr><name>init_key</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>( <expr><name>data</name> == <name>NULL</name></expr> )</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_userdata_set</name><argument_list>(<argument><expr>(const <name>void</name> *)1</expr></argument>, <argument><expr><name>init_key</name></expr></argument>,
                              <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>, <argument><expr><name><name>s</name>-&gt;<name>process</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>ngh2</name> = <call><name>nghttp2_version</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03349</expr></argument>)</argument_list></call>
                 "mod_proxy_http2 (v%s, nghttp2 %s), initializing..."</expr></argument>,
                 <argument><expr><name>MOD_HTTP2_VERSION</name></expr></argument>, <argument><expr><name>ngh2</name>? <name><name>ngh2</name>-&gt;<name>version_str</name></name> : "unknown"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>is_h2</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_is_h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>req_engine_push</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_req_engine_push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>req_engine_pull</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_req_engine_pull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>req_engine_done</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>http2_req_engine_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* we need all of them */</comment>
    <if>if <condition>(<expr>!<name>req_engine_push</name> || !<name>req_engine_pull</name> || !<name>req_engine_done</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>req_engine_push</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>req_engine_pull</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>req_engine_done</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * canonicalize the url into the request, if it is meant for us.
 * slightly modified copy from mod_http
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_http2_canon</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>url</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>host</name></decl>, *<decl><type ref="prev"/><name>path</name></decl>, <decl><type ref="prev"/><name><name>sport</name><index>[<expr>7</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>search</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>http_scheme</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_port_t</name></type> <name>port</name></decl>, <decl><type ref="prev"/><name>def_port</name></decl>;</decl_stmt>

    <comment type="block">/* ap_port_of_scheme() */</comment>
    <if>if <condition>(<expr><call><name>ap_cstr_casecmpn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"h2c:"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>url</name> += 4</expr>;</expr_stmt>
        <expr_stmt><expr><name>scheme</name> = "h2c"</expr>;</expr_stmt>
        <expr_stmt><expr><name>http_scheme</name> = "http"</expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>ap_cstr_casecmpn</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>"h2:"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>url</name> += 3</expr>;</expr_stmt>
        <expr_stmt><expr><name>scheme</name> = "h2"</expr>;</expr_stmt>
        <expr_stmt><expr><name>http_scheme</name> = "https"</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></else></if></else></if>
    <expr_stmt><expr><name>port</name> = <name>def_port</name> = <call><name>ap_proxy_port_of_scheme</name><argument_list>(<argument><expr><name>http_scheme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
                  <argument><expr>"HTTP2: canonicalising URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* do syntatic check.
     * We break the URL into host, port, path, search
     */</comment>
    <expr_stmt><expr><name>err</name> = <call><name>ap_proxy_canon_netloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name>url</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>host</name></expr></argument>, <argument><expr>&amp;<name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03350</expr></argument>)</argument_list></call>
                      "error parsing URL %s: %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * now parse path/search args, according to rfc1738:
     * process the path.
     *
     * In a reverse proxy, our URL has been processed, so canonicalise
     * unless proxy-nocanon is set to say it's raw
     * In a forward proxy, we have and MUST NOT MANGLE the original.
     */</comment>
    <switch>switch <condition>(<expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr>)</condition> <block>{
    <default>default: <comment type="block">/* wtf are we doing here? */</comment>
    </default><case>case <expr><name>PROXYREQ_REVERSE</name></expr>:
        <if>if <condition>(<expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-nocanon"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>   <comment type="block">/* this is the raw path */</comment>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>path</name> = <call><name>ap_proxy_canonenc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr>(<name>int</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>,
                                     <argument><expr><name>enc_path</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>proxyreq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>search</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <break>break;</break>
    </case><case>case <expr><name>PROXYREQ_PROXY</name></expr>:
        <expr_stmt><expr><name>path</name> = <name>url</name></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>

    <if>if <condition>(<expr><name>path</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_BAD_REQUEST</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>port</name> != <name>def_port</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name>sport</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr>":%d"</expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>sport</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{ <comment type="block">/* if literal IPv6 address */</comment>
        <expr_stmt><expr><name>host</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"["</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr>"]"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>filename</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy:"</expr></argument>, <argument><expr><name>scheme</name></expr></argument>, <argument><expr>"://"</expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>sport</name></expr></argument>,
            <argument><expr>"/"</expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr>(<name>search</name>) ? "?" : ""</expr></argument>, <argument><expr>(<name>search</name>) ? <name>search</name> : ""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>out_consumed</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>baton</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>bytes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name> <init>= <expr><name>baton</name></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>session</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>h2_proxy_session_update_window</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>proxy_engine_init</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>, 
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl></param>, 
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
                                        <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, 
                                        <param><decl><type><name>apr_size_t</name></type> <name>req_buffer_size</name></decl></param>,
                                        <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                        <param><decl><type><name>http2_output_consumed</name> **</type><name>pconsumed</name></decl></param>,
                                        <param><decl><type><name>void</name> **</type><name>pctx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>conn_config</name></name></expr></argument>, 
                                             <argument><expr>&amp;<name>proxy_http2_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03368</expr></argument>)</argument_list></call>
                      "h2_proxy_session, engine init, no ctx found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine</name></name> = <name>engine</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name> = <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine_type</name></name> = <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine_pool</name></name> = <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>req_buffer_size</name></name> = <name>req_buffer_size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>capacity</name></name> = <call><name>H2MIN</name><argument_list>(<argument><expr>100</expr></argument>, <argument><expr><call><name>h2_proxy_fifo_capacity</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr>*<name>pconsumed</name> = <name>out_consumed</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>pctx</name> = <name>ctx</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>add_request</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>session</name>-&gt;<name>user_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>url</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>url</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_PROXY_REQ_URL_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"proxy-source-port"</expr></argument>, <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"%hu"</expr></argument>,
                   <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>connection</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>h2_proxy_session_submit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>url</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>standalone</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03351</expr></argument>)</argument_list></call>
                      "pass request body failed to %pI (%s) from %s (%s)"</expr></argument>,
                      <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>addr</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>hostname</name></name> ? 
                      <name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>hostname</name></name>: ""</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>client_ip</name></name></expr></argument>, 
                      <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>remote_host</name></name> ? <name><name>session</name>-&gt;<name>c</name>-&gt;<name>remote_host</name></name>: ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>request_done</name><parameter_list>(<param><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                         <param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>touched</name></decl></param>)</parameter_list>
<block>{   
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>task_id</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_TASK_ID_NOTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                  <argument><expr>"h2_proxy_session(%s): request done %s, touched=%d"</expr></argument>,
                  <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name>task_id</name></expr></argument>, <argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name>touched</name></expr>)</condition><then> <block>{
            <comment type="block">/* untouched request, need rescheduling */</comment>
            <expr_stmt><expr><name>status</name> = <call><name>h2_proxy_fifo_push</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                          <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03369</expr></argument>)</argument_list></call>
                          "h2_proxy_session(%s): rescheduled request %s"</expr></argument>,
                          <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name>task_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>uri</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>uri</name> = <call><name>apr_uri_unparse</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>r</name>-&gt;<name>parsed_uri</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                          <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03471</expr></argument>)</argument_list></call> "h2_proxy_session(%s): request %s -&gt; %s "
                          "not complete, cannot repeat"</expr></argument>, 
                          <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name>task_id</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>r</name> == <name><name>ctx</name>-&gt;<name>rbase</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>r_status</name></name> = ((<name>status</name> == <name>APR_SUCCESS</name>)? <name>APR_SUCCESS</name>
                         : <name>HTTP_SERVICE_UNAVAILABLE</name>)</expr>;</expr_stmt>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>req_engine_done</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>engine</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, 
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03370</expr></argument>)</argument_list></call>
                      "h2_proxy_session(%s): finished request %s"</expr></argument>,
                      <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name>task_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>req_engine_done</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>engine</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>    

<function><type><specifier>static</specifier> <name>void</name></type> <name>session_req_done</name><parameter_list>(<param><decl><type><name>h2_proxy_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                             <param><decl><type><name>apr_status_t</name></type> <name>status</name></decl></param>, <param><decl><type><name>int</name></type> <name>touched</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>request_done</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>user_data</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>touched</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>next_request</name><parameter_list>(<param><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>int</name></type> <name>before_leave</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>h2_proxy_fifo_count</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>req_engine_pull</name> &amp;&amp; <name><name>ctx</name>-&gt;<name>engine</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>status</name> = <call><name>req_engine_pull</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>engine</name></name></expr></argument>, <argument><expr><name>before_leave</name>? 
                                 <name>APR_BLOCK_READ</name>: <name>APR_NONBLOCK_READ</name></expr></argument>, 
                                 <argument><expr><name><name>ctx</name>-&gt;<name>capacity</name></name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> &amp;&amp; <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                          <argument><expr>"h2_proxy_engine(%s): pulled request (%s) %s"</expr></argument>, 
                          <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, 
                          <argument><expr><name>before_leave</name>? "before leave" : "regular"</expr></argument>, 
                          <argument><expr><name><name>r</name>-&gt;<name>the_request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_proxy_fifo_push</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>? <name>APR_SUCCESS</name> : <name>status</name></expr>;</return>
    }</block></then></if></else></if>
    <return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>proxy_engine_run</name><parameter_list>(<param><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h2_front</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    
    <comment type="block">/* Step Four: Send the Request in a new HTTP/2 stream and
     * loop until we got the response or encounter errors.
     */</comment>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                  <argument><expr>"eng(%s): setup session"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>h2_front</name> = <name>is_h2</name>? <call><name>is_h2</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name></name> = <call><name>h2_proxy_session_setup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>conf</name></name></expr></argument>,
                                          <argument><expr><name>h2_front</name></expr></argument>, <argument><expr>30</expr></argument>, 
                                          <argument><expr><call><name>h2_proxy_log2</name><argument_list>(<argument><expr>(<name>int</name>)<name><name>ctx</name>-&gt;<name>req_buffer_size</name></name></expr></argument>)</argument_list></call></expr></argument>, 
                                          <argument><expr><name>session_req_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>session</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03372</expr></argument>)</argument_list></call> "session unavailable"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03373</expr></argument>)</argument_list></call>
                  "eng(%s): run session %s"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>user_data</name></name> = <name>ctx</name></expr>;</expr_stmt>
    
    <while>while <condition>(<expr>!<name><name>ctx</name>-&gt;<name>owner</name>-&gt;<name>aborted</name></name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>APR_SUCCESS</name> == <call><name>h2_proxy_fifo_try_pull</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>, <argument><expr>(<name>void</name>**)&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>add_request</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr><name>status</name> = <call><name>h2_proxy_session_process</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_status_t</name></type> <name>s2</name></decl>;</decl_stmt>
            <comment type="block">/* ongoing processing, call again */</comment>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>remote_max_concurrent</name></name> &gt; 0
                &amp;&amp; <name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>remote_max_concurrent</name></name> != <name><name>ctx</name>-&gt;<name>capacity</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ctx</name>-&gt;<name>capacity</name></name> = <call><name>H2MIN</name><argument_list>(<argument><expr>(<name>int</name>)<name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>remote_max_concurrent</name></name></expr></argument>, 
                                      <argument><expr><call><name>h2_proxy_fifo_capacity</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>s2</name> = <call><name>next_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>s2</name> == <name>APR_ECONNABORTED</name></expr>)</condition><then> <block>{
                <comment type="block">/* master connection gone */</comment>
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                              <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03374</expr></argument>)</argument_list></call> "eng(%s): pull request"</expr></argument>, 
                              <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block">/* give notice that we're leaving and cancel all ongoing
                 * streams. */</comment>
                <expr_stmt><expr><call><name>next_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt> 
                <expr_stmt><expr><call><name>h2_proxy_session_cancel_all</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>h2_proxy_session_process</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>status</name> = <name><name>ctx</name>-&gt;<name>r_status</name></name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <if>if <condition>(<expr>(<call><name>h2_proxy_fifo_count</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>)</argument_list></call> == 0) 
                &amp;&amp; <call><name>h2_proxy_ihash_empty</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>streams</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <comment type="block">/* end of processing, maybe error */</comment>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                          <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03375</expr></argument>)</argument_list></call> "eng(%s): end of session %s"</expr></argument>, 
                          <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/*
             * Any open stream of that session needs to
             * a) be reopened on the new session iff safe to do so
             * b) reported as done (failed) otherwise
             */</comment>
            <expr_stmt><expr><call><name>h2_proxy_session_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>session</name></name></expr></argument>, <argument><expr><name>session_req_done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></else></if>
    }</block></while>
    
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name>-&gt;<name>user_data</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>session</name></name> = <name>NULL</name></expr>;</expr_stmt>
    
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>push_request_somewhere</name><parameter_list>(<param><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>engine_type</name></decl>, *<decl><type ref="prev"/><name>hostname</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>hostname</name> = (<name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>ssl_hostname</name></name>? 
                <name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>ssl_hostname</name></name> : <name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>hostname</name></name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name>engine_type</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"proxy_http2 %s%s"</expr></argument>, <argument><expr><name>hostname</name></expr></argument>, 
                               <argument><expr><name><name>ctx</name>-&gt;<name>server_portstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name> &amp;&amp; <name>req_engine_push</name> &amp;&amp; <name>r</name> &amp;&amp; <name>is_h2</name> &amp;&amp; <call><name>is_h2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* If we are have req_engine capabilities, push the handling of this
         * request (e.g. slave connection) to a proxy_http2 engine which 
         * uses the same backend. We may be called to create an engine 
         * ourself. */</comment>
        <if>if <condition>(<expr><call><name>req_engine_push</name><argument_list>(<argument><expr><name>engine_type</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>proxy_engine_init</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>engine</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
                <comment type="block">/* request has been assigned to an engine in another thread */</comment>
                <return>return <expr><name>SUSPENDED</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>
    
    <if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>engine</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* No engine was available or has been initialized, handle this
         * request just by ourself. */</comment>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"eng-proxy-%ld"</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine_type</name></name> = <name>engine_type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine_pool</name></name> = <name><name>ctx</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>req_buffer_size</name></name> = (32*1024)</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>standalone</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, 
                      <argument><expr>"h2_proxy_http2(%ld): setup standalone engine for type %s"</expr></argument>, 
                      <argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>engine_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, 
                      <argument><expr>"H2: hosting engine %s"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>engine_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><call><name>h2_proxy_fifo_push</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>proxy_http2_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, 
                               <param><decl><type><name>proxy_worker</name> *</type><name>worker</name></decl></param>,
                               <param><decl><type><name>proxy_server_conf</name> *</type><name>conf</name></decl></param>,
                               <param><decl><type><name>char</name> *</type><name>url</name></decl></param>, 
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxyname</name></decl></param>,
                               <param><decl><type><name>apr_port_t</name></type> <name>proxyport</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>locurl</name> <init>= <expr><name>url</name></expr></init>, *<name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_ssl</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_proxy_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uri_t</name></type> <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>reconnects</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    
    <comment type="block">/* find the scheme */</comment>
    <if>if <condition>(<expr>(<name><name>url</name><index>[<expr>0</expr>]</index></name> != 'h' &amp;&amp; <name><name>url</name><index>[<expr>0</expr>]</index></name> != 'H') || <name><name>url</name><index>[<expr>1</expr>]</index></name> != '2'</expr>)</condition><then> <block>{
       <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>u</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>u</name> == <name>NULL</name> || <name><name>u</name><index>[<expr>1</expr>]</index></name> != '/' || <name><name>u</name><index>[<expr>2</expr>]</index></name> != '/' || <name><name>u</name><index>[<expr>3</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
       <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>slen</name> = (<name>u</name> - <name>url</name>)</expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>slen</name></expr>)</condition> <block>{
        <case>case <expr>2</expr>:
            <expr_stmt><expr><name>proxy_func</name> = "H2"</expr>;</expr_stmt>
            <expr_stmt><expr><name>is_ssl</name> = 1</expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr>3</expr>:
            <if>if <condition>(<expr><name><name>url</name><index>[<expr>2</expr>]</index></name> != 'c' &amp;&amp; <name><name>url</name><index>[<expr>2</expr>]</index></name> != 'C'</expr>)</condition><then> <block>{
                <return>return <expr><name>DECLINED</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>proxy_func</name> = "H2C"</expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <return>return <expr><name>DECLINED</name></expr>;</return>
    </default>}</block></switch>
    
    <expr_stmt><expr><name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>owner</name></name>      = <name><name>r</name>-&gt;<name>connection</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>pool</name></name>       = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>rbase</name></name>      = <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>server</name></name>     = <name><name>r</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>proxy_func</name></name> = <name>proxy_func</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>is_ssl</name></name>     = <name>is_ssl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>worker</name></name>     = <name>worker</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>conf</name></name>       = <name>conf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>flushall</name></name>   = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr>"proxy-flushall"</expr></argument>)</argument_list></call>? 1 : 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>r_status</name></name>   = <name>HTTP_SERVICE_UNAVAILABLE</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>h2_proxy_fifo_set_create</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>100</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>owner</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_http2_module</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* scheme says, this is for us. */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>rbase</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_PROXY_REQ_URL_NOTE</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>rbase</name></name></expr></argument>, 
                  <argument><expr>"H2: serving URL %s"</expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<label><name>run_connect</name>:</label>    
    <comment type="block">/* Get a proxy_conn_rec from the worker, might be a new one, might
     * be one still open from another request, or it might fail if the
     * worker is stopped or in error. */</comment>
    <if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_acquire_connection</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proxy_func</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>,
                                              <argument><expr><name><name>ctx</name>-&gt;<name>worker</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>is_ssl</name></name> = <name><name>ctx</name>-&gt;<name>is_ssl</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>is_ssl</name></name> &amp;&amp; <name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* If there are some metadata on the connection (e.g. TLS alert),
         * let mod_ssl detect them, and create a new connection below.
         */</comment> 
        <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmp_bb</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>tmp_bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>rbase</name>-&gt;<name>pool</name></name></expr></argument>, 
                                    <argument><expr><name><name>ctx</name>-&gt;<name>rbase</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>connection</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>tmp_bb</name></expr></argument>,
                                <argument><expr><name>AP_MODE_SPECULATIVE</name></expr></argument>, <argument><expr><name>APR_NONBLOCK_READ</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>tmp_bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>   

    <comment type="block">/* Step One: Determine the URL to connect to (might be a proxy),
     * initialize the backend accordingly and determine the server 
     * port string we can expect in responses. */</comment>
    <if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_determine_connection</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>rbase</name></name></expr></argument>, <argument><expr><name>conf</name></expr></argument>, <argument><expr><name>worker</name></expr></argument>, 
                                                <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>, <argument><expr>&amp;<name>uri</name></expr></argument>, <argument><expr>&amp;<name>locurl</name></expr></argument>, 
                                                <argument><expr><name>proxyname</name></expr></argument>, <argument><expr><name>proxyport</name></expr></argument>, 
                                                <argument><expr><name><name>ctx</name>-&gt;<name>server_portstr</name></name></expr></argument>,
                                                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>server_portstr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
        <goto>goto <name>cleanup</name>;</goto>
    }</block></then></if>
    
    <comment type="block">/* If we are not already hosting an engine, try to push the request 
     * to an already existing engine or host a new engine here. */</comment>
    <if>if <condition>(<expr><name>r</name> &amp;&amp; !<name><name>ctx</name>-&gt;<name>engine</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>r_status</name></name> = <call><name>push_request_somewhere</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> = <name>NULL</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>r_status</name></name> == <name>SUSPENDED</name></expr>)</condition><then> <block>{
            <comment type="block">/* request was pushed to another thread, leave processing here */</comment>
            <goto>goto <name>cleanup</name>;</goto>
        }</block></then></if>
    }</block></then></if>
    
    <comment type="block">/* Step Two: Make the Connection (or check that an already existing
     * socket is still usable). On success, we have a socket connected to
     * backend-&gt;hostname. */</comment>
    <if>if <condition>(<expr><call><name>ap_proxy_connect_backend</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proxy_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>worker</name></name></expr></argument>, 
                                 <argument><expr><name><name>ctx</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03352</expr></argument>)</argument_list></call>
                      "H2: failed to make connection to backend: %s"</expr></argument>,
                      <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>reconnect</name>;</goto>
    }</block></then></if>
    
    <comment type="block">/* Step Three: Create conn_rec for the socket we have open now. */</comment>
    <if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>connection</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>status</name> = <call><name>ap_proxy_connection_create</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proxy_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>,
                                                 <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                                                 <argument><expr><name><name>ctx</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call>) != <name>OK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03353</expr></argument>)</argument_list></call>
                          "setup new connection: is_ssl=%d %s %s %s"</expr></argument>, 
                          <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>is_ssl</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>ssl_hostname</name></name></expr></argument>, 
                          <argument><expr><name>locurl</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>reconnect</name>;</goto>
        }</block></then></if>
        
        <if>if <condition>(<expr>!<name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>data</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* New conection: set a note on the connection what CN is
             * requested and what protocol we want */</comment>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>ssl_hostname</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                              <argument><expr>"set SNI to %s for (%s)"</expr></argument>, 
                              <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>ssl_hostname</name></name></expr></argument>, 
                              <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>connection</name>-&gt;<name>notes</name></name></expr></argument>,
                               <argument><expr>"proxy-request-hostname"</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>ssl_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>is_ssl</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>connection</name>-&gt;<name>notes</name></name></expr></argument>,
                               <argument><expr>"proxy-request-alpn-protos"</expr></argument>, <argument><expr>"h2"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

<label><name>run_session</name>:</label>
    <expr_stmt><expr><name>status</name> = <call><name>proxy_engine_run</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* session and connection still ok */</comment>
        <if>if <condition>(<expr><call><name>next_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <comment type="block">/* more requests, run again */</comment>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03376</expr></argument>)</argument_list></call>
                          "run_session, again"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>run_session</name>;</goto>
        }</block></then></if>
        <comment type="block">/* done */</comment>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>engine</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

<label><name>reconnect</name>:</label>
    <if>if <condition>(<expr><call><name>next_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* Still more to do, tear down old conn and start over */</comment>
        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
            <comment type="block">/*only in trunk so far */</comment>
            <comment type="block">/*proxy_run_detach_backend(r, ctx-&gt;p_conn);*/</comment>
            <expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proxy_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>++<name>reconnects</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>reconnects</name> &lt; 5 &amp;&amp; !<name><name>ctx</name>-&gt;<name>owner</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
            <goto>goto <name>run_connect</name>;</goto>
        }</block></then></if> 
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10023</expr></argument>)</argument_list></call>
                      "giving up after %d reconnects, %d requests todo"</expr></argument>,
                      <argument><expr><name>reconnects</name></expr></argument>, <argument><expr><call><name>h2_proxy_fifo_count</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
<label><name>cleanup</name>:</label>
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <comment type="block">/* close socket when errors happened or session shut down (EOF) */</comment>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>p_conn</name>-&gt;<name>close</name></name> = 1</expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/*only in trunk so far */</comment>
        <comment type="block">/*proxy_run_detach_backend(ctx-&gt;rbase, ctx-&gt;p_conn);*/</comment>
        <expr_stmt><expr><call><name>ap_proxy_release_connection</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>proxy_func</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>p_conn</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Any requests will still have need to fail */</comment>
    <while>while <condition>(<expr><name>APR_SUCCESS</name> == <call><name>h2_proxy_fifo_try_pull</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>requests</name></name></expr></argument>, <argument><expr>(<name>void</name>**)&amp;<name>r</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>request_done</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>HTTP_SERVICE_UNAVAILABLE</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    
    <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>owner</name>-&gt;<name>conn_config</name></name></expr></argument>, <argument><expr>&amp;<name>proxy_http2_module</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>owner</name></name></expr></argument>, 
                  <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03377</expr></argument>)</argument_list></call> "leaving handler"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>ctx</name>-&gt;<name>r_status</name></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>h2_proxy_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>proxy_hook_scheme_handler</name><argument_list>(<argument><expr><name>proxy_http2_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>proxy_hook_canon_handler</name><argument_list>(<argument><expr><name>proxy_http2_canon</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

</unit>
