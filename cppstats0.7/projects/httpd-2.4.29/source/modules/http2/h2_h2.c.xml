<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_h2.c"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_optional.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_optional_hooks.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_connection.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_protocol.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_request.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_http2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_beam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_http2.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>h2_tls_protos</name><index>[]</index></name> <init>= <expr><block>{
    <expr>"h2"</expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>h2_clear_protos</name><index>[]</index></name> <init>= <expr><block>{
    <expr>"h2c"</expr>, <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>H2_MAGIC_TOKEN</name> <init>= <expr>"PRI * HTTP/2.0\r\n\r\nSM\r\n\r\n"</expr></init></decl>;</decl_stmt>

<comment type="block">/*******************************************************************************
 * The optional mod_ssl functions we need. 
 */</comment>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_engine_disable</name></expr></argument>)</argument_list></call> *<name>opt_ssl_engine_disable</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call> *<name>opt_ssl_is_https</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><name>APR_OPTIONAL_FN_TYPE</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call> *<name>opt_ssl_var_lookup</name></expr>;</expr_stmt>


<comment type="block">/*******************************************************************************
 * HTTP/2 error stuff
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>h2_err_descr</name><index>[]</index></name> <init>= <expr><block>{
    <expr>"no error"</expr>,                    <comment type="block">/* 0x0 */</comment>
    <expr>"protocol error"</expr>,
    <expr>"internal error"</expr>,
    <expr>"flow control error"</expr>,
    <expr>"settings timeout"</expr>,
    <expr>"stream closed"</expr>,               <comment type="block">/* 0x5 */</comment>
    <expr>"frame size error"</expr>,
    <expr>"refused stream"</expr>,
    <expr>"cancel"</expr>,
    <expr>"compression error"</expr>,
    <expr>"connect error"</expr>,               <comment type="block">/* 0xa */</comment>
    <expr>"enhance your calm"</expr>,
    <expr>"inadequate security"</expr>,
    <expr>"http/1.1 required"</expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> *</type><name>h2_h2_err_description</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>h2_error</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>h2_error</name> &lt; (<sizeof>sizeof<argument_list>(<argument><expr><name>h2_err_descr</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>h2_err_descr</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof>)</expr>)</condition><then> <block>{
        <return>return <expr><name><name>h2_err_descr</name><index>[<expr><name>h2_error</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <return>return <expr>"unknown http/2 error code"</expr>;</return>
}</block></function>

<comment type="block">/*******************************************************************************
 * Check connection security requirements of RFC 7540
 */</comment>

<comment type="block">/*
 * Black Listed Ciphers from RFC 7549 Appendix A
 *
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>RFC7540_names</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* ciphers with NULL encrpytion */</comment>
    <expr>"NULL-MD5"</expr>,                         <comment type="block">/* TLS_NULL_WITH_NULL_NULL */</comment>
    <comment type="block">/* same */</comment>                          <comment type="block">/* TLS_RSA_WITH_NULL_MD5 */</comment>
    <expr>"NULL-SHA"</expr>,                         <comment type="block">/* TLS_RSA_WITH_NULL_SHA */</comment>
    <expr>"NULL-SHA256"</expr>,                      <comment type="block">/* TLS_RSA_WITH_NULL_SHA256 */</comment>
    <expr>"PSK-NULL-SHA"</expr>,                     <comment type="block">/* TLS_PSK_WITH_NULL_SHA */</comment>
    <expr>"DHE-PSK-NULL-SHA"</expr>,                 <comment type="block">/* TLS_DHE_PSK_WITH_NULL_SHA */</comment>
    <expr>"RSA-PSK-NULL-SHA"</expr>,                 <comment type="block">/* TLS_RSA_PSK_WITH_NULL_SHA */</comment>
    <expr>"PSK-NULL-SHA256"</expr>,                  <comment type="block">/* TLS_PSK_WITH_NULL_SHA256 */</comment>
    <expr>"PSK-NULL-SHA384"</expr>,                  <comment type="block">/* TLS_PSK_WITH_NULL_SHA384 */</comment>
    <expr>"DHE-PSK-NULL-SHA256"</expr>,              <comment type="block">/* TLS_DHE_PSK_WITH_NULL_SHA256 */</comment>
    <expr>"DHE-PSK-NULL-SHA384"</expr>,              <comment type="block">/* TLS_DHE_PSK_WITH_NULL_SHA384 */</comment>
    <expr>"RSA-PSK-NULL-SHA256"</expr>,              <comment type="block">/* TLS_RSA_PSK_WITH_NULL_SHA256 */</comment>
    <expr>"RSA-PSK-NULL-SHA384"</expr>,              <comment type="block">/* TLS_RSA_PSK_WITH_NULL_SHA384 */</comment>
    <expr>"ECDH-ECDSA-NULL-SHA"</expr>,              <comment type="block">/* TLS_ECDH_ECDSA_WITH_NULL_SHA */</comment>
    <expr>"ECDHE-ECDSA-NULL-SHA"</expr>,             <comment type="block">/* TLS_ECDHE_ECDSA_WITH_NULL_SHA */</comment>
    <expr>"ECDH-RSA-NULL-SHA"</expr>,                <comment type="block">/* TLS_ECDH_RSA_WITH_NULL_SHA */</comment>
    <expr>"ECDHE-RSA-NULL-SHA"</expr>,               <comment type="block">/* TLS_ECDHE_RSA_WITH_NULL_SHA */</comment>
    <expr>"AECDH-NULL-SHA"</expr>,                   <comment type="block">/* TLS_ECDH_anon_WITH_NULL_SHA */</comment>
    <expr>"ECDHE-PSK-NULL-SHA"</expr>,               <comment type="block">/* TLS_ECDHE_PSK_WITH_NULL_SHA */</comment>
    <expr>"ECDHE-PSK-NULL-SHA256"</expr>,            <comment type="block">/* TLS_ECDHE_PSK_WITH_NULL_SHA256 */</comment>
    <expr>"ECDHE-PSK-NULL-SHA384"</expr>,            <comment type="block">/* TLS_ECDHE_PSK_WITH_NULL_SHA384 */</comment>
    
    <comment type="block">/* DES/3DES ciphers */</comment>
    <expr>"PSK-3DES-EDE-CBC-SHA"</expr>,             <comment type="block">/* TLS_PSK_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"DHE-PSK-3DES-EDE-CBC-SHA"</expr>,         <comment type="block">/* TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"RSA-PSK-3DES-EDE-CBC-SHA"</expr>,         <comment type="block">/* TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"ECDH-ECDSA-DES-CBC3-SHA"</expr>,          <comment type="block">/* TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-DES-CBC3-SHA"</expr>,         <comment type="block">/* TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"ECDH-RSA-DES-CBC3-SHA"</expr>,            <comment type="block">/* TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"ECDHE-RSA-DES-CBC3-SHA"</expr>,           <comment type="block">/* TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"AECDH-DES-CBC3-SHA"</expr>,               <comment type="block">/* TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"SRP-3DES-EDE-CBC-SHA"</expr>,             <comment type="block">/* TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"SRP-RSA-3DES-EDE-CBC-SHA"</expr>,         <comment type="block">/* TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"SRP-DSS-3DES-EDE-CBC-SHA"</expr>,         <comment type="block">/* TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"ECDHE-PSK-3DES-EDE-CBC-SHA"</expr>,       <comment type="block">/* TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"DES-CBC-SHA"</expr>,                      <comment type="block">/* TLS_RSA_WITH_DES_CBC_SHA */</comment>
    <expr>"DES-CBC3-SHA"</expr>,                     <comment type="block">/* TLS_RSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"DHE-DSS-DES-CBC3-SHA"</expr>,             <comment type="block">/* TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"DHE-RSA-DES-CBC-SHA"</expr>,              <comment type="block">/* TLS_DHE_RSA_WITH_DES_CBC_SHA */</comment>
    <expr>"DHE-RSA-DES-CBC3-SHA"</expr>,             <comment type="block">/* TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"ADH-DES-CBC-SHA"</expr>,                  <comment type="block">/* TLS_DH_anon_WITH_DES_CBC_SHA */</comment>
    <expr>"ADH-DES-CBC3-SHA"</expr>,                 <comment type="block">/* TLS_DH_anon_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"EXP-DH-DSS-DES-CBC-SHA"</expr>,           <comment type="block">/* TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA */</comment>
    <expr>"DH-DSS-DES-CBC-SHA"</expr>,               <comment type="block">/* TLS_DH_DSS_WITH_DES_CBC_SHA */</comment>
    <expr>"DH-DSS-DES-CBC3-SHA"</expr>,              <comment type="block">/* TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"EXP-DH-RSA-DES-CBC-SHA"</expr>,           <comment type="block">/* TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA */</comment>
    <expr>"DH-RSA-DES-CBC-SHA"</expr>,               <comment type="block">/* TLS_DH_RSA_WITH_DES_CBC_SHA */</comment>
    <expr>"DH-RSA-DES-CBC3-SHA"</expr>,              <comment type="block">/* TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA */</comment>

    <comment type="block">/* blacklisted EXPORT ciphers */</comment>
    <expr>"EXP-RC4-MD5"</expr>,                      <comment type="block">/* TLS_RSA_EXPORT_WITH_RC4_40_MD5 */</comment>
    <expr>"EXP-RC2-CBC-MD5"</expr>,                  <comment type="block">/* TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5 */</comment>
    <expr>"EXP-DES-CBC-SHA"</expr>,                  <comment type="block">/* TLS_RSA_EXPORT_WITH_DES40_CBC_SHA */</comment>
    <expr>"EXP-DHE-DSS-DES-CBC-SHA"</expr>,          <comment type="block">/* TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA */</comment>
    <expr>"EXP-DHE-RSA-DES-CBC-SHA"</expr>,          <comment type="block">/* TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA */</comment>
    <expr>"EXP-ADH-DES-CBC-SHA"</expr>,              <comment type="block">/* TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA */</comment>
    <expr>"EXP-ADH-RC4-MD5"</expr>,                  <comment type="block">/* TLS_DH_anon_EXPORT_WITH_RC4_40_MD5 */</comment>

    <comment type="block">/* blacklisted RC4 encryption */</comment>
    <expr>"RC4-MD5"</expr>,                          <comment type="block">/* TLS_RSA_WITH_RC4_128_MD5 */</comment>
    <expr>"RC4-SHA"</expr>,                          <comment type="block">/* TLS_RSA_WITH_RC4_128_SHA */</comment>
    <expr>"ADH-RC4-MD5"</expr>,                      <comment type="block">/* TLS_DH_anon_WITH_RC4_128_MD5 */</comment>
    <expr>"KRB5-RC4-SHA"</expr>,                     <comment type="block">/* TLS_KRB5_WITH_RC4_128_SHA */</comment>
    <expr>"KRB5-RC4-MD5"</expr>,                     <comment type="block">/* TLS_KRB5_WITH_RC4_128_MD5 */</comment>
    <expr>"EXP-KRB5-RC4-SHA"</expr>,                 <comment type="block">/* TLS_KRB5_EXPORT_WITH_RC4_40_SHA */</comment>
    <expr>"EXP-KRB5-RC4-MD5"</expr>,                 <comment type="block">/* TLS_KRB5_EXPORT_WITH_RC4_40_MD5 */</comment>
    <expr>"PSK-RC4-SHA"</expr>,                      <comment type="block">/* TLS_PSK_WITH_RC4_128_SHA */</comment>
    <expr>"DHE-PSK-RC4-SHA"</expr>,                  <comment type="block">/* TLS_DHE_PSK_WITH_RC4_128_SHA */</comment>
    <expr>"RSA-PSK-RC4-SHA"</expr>,                  <comment type="block">/* TLS_RSA_PSK_WITH_RC4_128_SHA */</comment>
    <expr>"ECDH-ECDSA-RC4-SHA"</expr>,               <comment type="block">/* TLS_ECDH_ECDSA_WITH_RC4_128_SHA */</comment>
    <expr>"ECDHE-ECDSA-RC4-SHA"</expr>,              <comment type="block">/* TLS_ECDHE_ECDSA_WITH_RC4_128_SHA */</comment>
    <expr>"ECDH-RSA-RC4-SHA"</expr>,                 <comment type="block">/* TLS_ECDH_RSA_WITH_RC4_128_SHA */</comment>
    <expr>"ECDHE-RSA-RC4-SHA"</expr>,                <comment type="block">/* TLS_ECDHE_RSA_WITH_RC4_128_SHA */</comment>
    <expr>"AECDH-RC4-SHA"</expr>,                    <comment type="block">/* TLS_ECDH_anon_WITH_RC4_128_SHA */</comment>
    <expr>"ECDHE-PSK-RC4-SHA"</expr>,                <comment type="block">/* TLS_ECDHE_PSK_WITH_RC4_128_SHA */</comment>

    <comment type="block">/* blacklisted AES128 encrpytion ciphers */</comment>
    <expr>"AES128-SHA256"</expr>,                    <comment type="block">/* TLS_RSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"DH-DSS-AES128-SHA"</expr>,                <comment type="block">/* TLS_DH_DSS_WITH_AES_128_CBC_SHA */</comment>
    <expr>"DH-RSA-AES128-SHA"</expr>,                <comment type="block">/* TLS_DH_RSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"DHE-DSS-AES128-SHA"</expr>,               <comment type="block">/* TLS_DHE_DSS_WITH_AES_128_CBC_SHA */</comment>
    <expr>"DHE-RSA-AES128-SHA"</expr>,               <comment type="block">/* TLS_DHE_RSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"ADH-AES128-SHA"</expr>,                   <comment type="block">/* TLS_DH_anon_WITH_AES_128_CBC_SHA */</comment>
    <expr>"AES128-SHA256"</expr>,                    <comment type="block">/* TLS_RSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"DH-DSS-AES128-SHA256"</expr>,             <comment type="block">/* TLS_DH_DSS_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"DH-RSA-AES128-SHA256"</expr>,             <comment type="block">/* TLS_DH_RSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"DHE-DSS-AES128-SHA256"</expr>,            <comment type="block">/* TLS_DHE_DSS_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"DHE-RSA-AES128-SHA256"</expr>,            <comment type="block">/* TLS_DHE_RSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"ECDH-ECDSA-AES128-SHA"</expr>,            <comment type="block">/* TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-AES128-SHA"</expr>,           <comment type="block">/* TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"ECDH-RSA-AES128-SHA"</expr>,              <comment type="block">/* TLS_ECDH_RSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"ECDHE-RSA-AES128-SHA"</expr>,             <comment type="block">/* TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"AECDH-AES128-SHA"</expr>,                 <comment type="block">/* TLS_ECDH_anon_WITH_AES_128_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-AES128-SHA256"</expr>,        <comment type="block">/* TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"ECDH-ECDSA-AES128-SHA256"</expr>,         <comment type="block">/* TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-RSA-AES128-SHA256"</expr>,          <comment type="block">/* TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"ECDH-RSA-AES128-SHA256"</expr>,           <comment type="block">/* TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"ADH-AES128-SHA256"</expr>,                <comment type="block">/* TLS_DH_anon_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"PSK-AES128-CBC-SHA"</expr>,               <comment type="block">/* TLS_PSK_WITH_AES_128_CBC_SHA */</comment>
    <expr>"DHE-PSK-AES128-CBC-SHA"</expr>,           <comment type="block">/* TLS_DHE_PSK_WITH_AES_128_CBC_SHA */</comment>
    <expr>"RSA-PSK-AES128-CBC-SHA"</expr>,           <comment type="block">/* TLS_RSA_PSK_WITH_AES_128_CBC_SHA */</comment>
    <expr>"PSK-AES128-CBC-SHA256"</expr>,            <comment type="block">/* TLS_PSK_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"DHE-PSK-AES128-CBC-SHA256"</expr>,        <comment type="block">/* TLS_DHE_PSK_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"RSA-PSK-AES128-CBC-SHA256"</expr>,        <comment type="block">/* TLS_RSA_PSK_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-PSK-AES128-CBC-SHA"</expr>,         <comment type="block">/* TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA */</comment>
    <expr>"ECDHE-PSK-AES128-CBC-SHA256"</expr>,      <comment type="block">/* TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256 */</comment>
    <expr>"AES128-CCM"</expr>,                       <comment type="block">/* TLS_RSA_WITH_AES_128_CCM */</comment>
    <expr>"AES128-CCM8"</expr>,                      <comment type="block">/* TLS_RSA_WITH_AES_128_CCM_8 */</comment>
    <expr>"PSK-AES128-CCM"</expr>,                   <comment type="block">/* TLS_PSK_WITH_AES_128_CCM */</comment>
    <expr>"PSK-AES128-CCM8"</expr>,                  <comment type="block">/* TLS_PSK_WITH_AES_128_CCM_8 */</comment>
    <expr>"AES128-GCM-SHA256"</expr>,                <comment type="block">/* TLS_RSA_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"DH-RSA-AES128-GCM-SHA256"</expr>,         <comment type="block">/* TLS_DH_RSA_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"DH-DSS-AES128-GCM-SHA256"</expr>,         <comment type="block">/* TLS_DH_DSS_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"ADH-AES128-GCM-SHA256"</expr>,            <comment type="block">/* TLS_DH_anon_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"PSK-AES128-GCM-SHA256"</expr>,            <comment type="block">/* TLS_PSK_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"RSA-PSK-AES128-GCM-SHA256"</expr>,        <comment type="block">/* TLS_RSA_PSK_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"ECDH-ECDSA-AES128-GCM-SHA256"</expr>,     <comment type="block">/* TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"ECDH-RSA-AES128-GCM-SHA256"</expr>,       <comment type="block">/* TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256 */</comment>
    <expr>"SRP-AES-128-CBC-SHA"</expr>,              <comment type="block">/* TLS_SRP_SHA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"SRP-RSA-AES-128-CBC-SHA"</expr>,          <comment type="block">/* TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA */</comment>
    <expr>"SRP-DSS-AES-128-CBC-SHA"</expr>,          <comment type="block">/* TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA */</comment>
    
    <comment type="block">/* blacklisted AES256 encrpytion ciphers */</comment>
    <expr>"AES256-SHA"</expr>,                       <comment type="block">/* TLS_RSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"DH-DSS-AES256-SHA"</expr>,                <comment type="block">/* TLS_DH_DSS_WITH_AES_256_CBC_SHA */</comment>
    <expr>"DH-RSA-AES256-SHA"</expr>,                <comment type="block">/* TLS_DH_RSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"DHE-DSS-AES256-SHA"</expr>,               <comment type="block">/* TLS_DHE_DSS_WITH_AES_256_CBC_SHA */</comment>
    <expr>"DHE-RSA-AES256-SHA"</expr>,               <comment type="block">/* TLS_DHE_RSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"ADH-AES256-SHA"</expr>,                   <comment type="block">/* TLS_DH_anon_WITH_AES_256_CBC_SHA */</comment>
    <expr>"AES256-SHA256"</expr>,                    <comment type="block">/* TLS_RSA_WITH_AES_256_CBC_SHA256 */</comment>
    <expr>"DH-DSS-AES256-SHA256"</expr>,             <comment type="block">/* TLS_DH_DSS_WITH_AES_256_CBC_SHA256 */</comment>
    <expr>"DH-RSA-AES256-SHA256"</expr>,             <comment type="block">/* TLS_DH_RSA_WITH_AES_256_CBC_SHA256 */</comment>
    <expr>"DHE-DSS-AES256-SHA256"</expr>,            <comment type="block">/* TLS_DHE_DSS_WITH_AES_256_CBC_SHA256 */</comment>
    <expr>"DHE-RSA-AES256-SHA256"</expr>,            <comment type="block">/* TLS_DHE_RSA_WITH_AES_256_CBC_SHA256 */</comment>
    <expr>"ADH-AES256-SHA256"</expr>,                <comment type="block">/* TLS_DH_anon_WITH_AES_256_CBC_SHA256 */</comment>
    <expr>"ECDH-ECDSA-AES256-SHA"</expr>,            <comment type="block">/* TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-AES256-SHA"</expr>,           <comment type="block">/* TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"ECDH-RSA-AES256-SHA"</expr>,              <comment type="block">/* TLS_ECDH_RSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"ECDHE-RSA-AES256-SHA"</expr>,             <comment type="block">/* TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"AECDH-AES256-SHA"</expr>,                 <comment type="block">/* TLS_ECDH_anon_WITH_AES_256_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-AES256-SHA384"</expr>,        <comment type="block">/* TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"ECDH-ECDSA-AES256-SHA384"</expr>,         <comment type="block">/* TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"ECDHE-RSA-AES256-SHA384"</expr>,          <comment type="block">/* TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"ECDH-RSA-AES256-SHA384"</expr>,           <comment type="block">/* TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"PSK-AES256-CBC-SHA"</expr>,               <comment type="block">/* TLS_PSK_WITH_AES_256_CBC_SHA */</comment>
    <expr>"DHE-PSK-AES256-CBC-SHA"</expr>,           <comment type="block">/* TLS_DHE_PSK_WITH_AES_256_CBC_SHA */</comment>
    <expr>"RSA-PSK-AES256-CBC-SHA"</expr>,           <comment type="block">/* TLS_RSA_PSK_WITH_AES_256_CBC_SHA */</comment>
    <expr>"PSK-AES256-CBC-SHA384"</expr>,            <comment type="block">/* TLS_PSK_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"DHE-PSK-AES256-CBC-SHA384"</expr>,        <comment type="block">/* TLS_DHE_PSK_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"RSA-PSK-AES256-CBC-SHA384"</expr>,        <comment type="block">/* TLS_RSA_PSK_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"ECDHE-PSK-AES256-CBC-SHA"</expr>,         <comment type="block">/* TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA */</comment>
    <expr>"ECDHE-PSK-AES256-CBC-SHA384"</expr>,      <comment type="block">/* TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384 */</comment>
    <expr>"SRP-AES-256-CBC-SHA"</expr>,              <comment type="block">/* TLS_SRP_SHA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"SRP-RSA-AES-256-CBC-SHA"</expr>,          <comment type="block">/* TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA */</comment>
    <expr>"SRP-DSS-AES-256-CBC-SHA"</expr>,          <comment type="block">/* TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA */</comment>
    <expr>"AES256-CCM"</expr>,                       <comment type="block">/* TLS_RSA_WITH_AES_256_CCM */</comment>
    <expr>"AES256-CCM8"</expr>,                      <comment type="block">/* TLS_RSA_WITH_AES_256_CCM_8 */</comment>
    <expr>"PSK-AES256-CCM"</expr>,                   <comment type="block">/* TLS_PSK_WITH_AES_256_CCM */</comment>
    <expr>"PSK-AES256-CCM8"</expr>,                  <comment type="block">/* TLS_PSK_WITH_AES_256_CCM_8 */</comment>
    <expr>"AES256-GCM-SHA384"</expr>,                <comment type="block">/* TLS_RSA_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"DH-RSA-AES256-GCM-SHA384"</expr>,         <comment type="block">/* TLS_DH_RSA_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"DH-DSS-AES256-GCM-SHA384"</expr>,         <comment type="block">/* TLS_DH_DSS_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"ADH-AES256-GCM-SHA384"</expr>,            <comment type="block">/* TLS_DH_anon_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"PSK-AES256-GCM-SHA384"</expr>,            <comment type="block">/* TLS_PSK_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"RSA-PSK-AES256-GCM-SHA384"</expr>,        <comment type="block">/* TLS_RSA_PSK_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"ECDH-ECDSA-AES256-GCM-SHA384"</expr>,     <comment type="block">/* TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384 */</comment>
    <expr>"ECDH-RSA-AES256-GCM-SHA384"</expr>,       <comment type="block">/* TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384 */</comment>
    
    <comment type="block">/* blacklisted CAMELLIA128 encrpytion ciphers */</comment>
    <expr>"CAMELLIA128-SHA"</expr>,                  <comment type="block">/* TLS_RSA_WITH_CAMELLIA_128_CBC_SHA */</comment>
    <expr>"DH-DSS-CAMELLIA128-SHA"</expr>,           <comment type="block">/* TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA */</comment>
    <expr>"DH-RSA-CAMELLIA128-SHA"</expr>,           <comment type="block">/* TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA */</comment>
    <expr>"DHE-DSS-CAMELLIA128-SHA"</expr>,          <comment type="block">/* TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA */</comment>
    <expr>"DHE-RSA-CAMELLIA128-SHA"</expr>,          <comment type="block">/* TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA */</comment>
    <expr>"ADH-CAMELLIA128-SHA"</expr>,              <comment type="block">/* TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-CAMELLIA128-SHA256"</expr>,   <comment type="block">/* TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"ECDH-ECDSA-CAMELLIA128-SHA256"</expr>,    <comment type="block">/* TLS_ECDH_ECDSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-RSA-CAMELLIA128-SHA256"</expr>,     <comment type="block">/* TLS_ECDHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"ECDH-RSA-CAMELLIA128-SHA256"</expr>,      <comment type="block">/* TLS_ECDH_RSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"PSK-CAMELLIA128-SHA256"</expr>,           <comment type="block">/* TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"DHE-PSK-CAMELLIA128-SHA256"</expr>,       <comment type="block">/* TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"RSA-PSK-CAMELLIA128-SHA256"</expr>,       <comment type="block">/* TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-PSK-CAMELLIA128-SHA256"</expr>,     <comment type="block">/* TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"CAMELLIA128-GCM-SHA256"</expr>,           <comment type="block">/* TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"DH-RSA-CAMELLIA128-GCM-SHA256"</expr>,    <comment type="block">/* TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"DH-DSS-CAMELLIA128-GCM-SHA256"</expr>,    <comment type="block">/* TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"ADH-CAMELLIA128-GCM-SHA256"</expr>,       <comment type="block">/* TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"ECDH-ECDSA-CAMELLIA128-GCM-SHA256"</expr>,<comment type="block">/* TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"ECDH-RSA-CAMELLIA128-GCM-SHA256"</expr>,  <comment type="block">/* TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"PSK-CAMELLIA128-GCM-SHA256"</expr>,       <comment type="block">/* TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"RSA-PSK-CAMELLIA128-GCM-SHA256"</expr>,   <comment type="block">/* TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256 */</comment>
    <expr>"CAMELLIA128-SHA256"</expr>,               <comment type="block">/* TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"DH-DSS-CAMELLIA128-SHA256"</expr>,        <comment type="block">/* TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"DH-RSA-CAMELLIA128-SHA256"</expr>,        <comment type="block">/* TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"DHE-DSS-CAMELLIA128-SHA256"</expr>,       <comment type="block">/* TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"DHE-RSA-CAMELLIA128-SHA256"</expr>,       <comment type="block">/* TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    <expr>"ADH-CAMELLIA128-SHA256"</expr>,           <comment type="block">/* TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256 */</comment>
    
    <comment type="block">/* blacklisted CAMELLIA256 encrpytion ciphers */</comment>
    <expr>"CAMELLIA256-SHA"</expr>,                  <comment type="block">/* TLS_RSA_WITH_CAMELLIA_256_CBC_SHA */</comment>
    <expr>"DH-RSA-CAMELLIA256-SHA"</expr>,           <comment type="block">/* TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA */</comment>
    <expr>"DH-DSS-CAMELLIA256-SHA"</expr>,           <comment type="block">/* TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA */</comment>
    <expr>"DHE-DSS-CAMELLIA256-SHA"</expr>,          <comment type="block">/* TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA */</comment>
    <expr>"DHE-RSA-CAMELLIA256-SHA"</expr>,          <comment type="block">/* TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA */</comment>
    <expr>"ADH-CAMELLIA256-SHA"</expr>,              <comment type="block">/* TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA */</comment>
    <expr>"ECDHE-ECDSA-CAMELLIA256-SHA384"</expr>,   <comment type="block">/* TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"ECDH-ECDSA-CAMELLIA256-SHA384"</expr>,    <comment type="block">/* TLS_ECDH_ECDSA_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"ECDHE-RSA-CAMELLIA256-SHA384"</expr>,     <comment type="block">/* TLS_ECDHE_RSA_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"ECDH-RSA-CAMELLIA256-SHA384"</expr>,      <comment type="block">/* TLS_ECDH_RSA_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"PSK-CAMELLIA256-SHA384"</expr>,           <comment type="block">/* TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"DHE-PSK-CAMELLIA256-SHA384"</expr>,       <comment type="block">/* TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"RSA-PSK-CAMELLIA256-SHA384"</expr>,       <comment type="block">/* TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"ECDHE-PSK-CAMELLIA256-SHA384"</expr>,     <comment type="block">/* TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384 */</comment>
    <expr>"CAMELLIA256-SHA256"</expr>,               <comment type="block">/* TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256 */</comment>
    <expr>"DH-DSS-CAMELLIA256-SHA256"</expr>,        <comment type="block">/* TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256 */</comment>
    <expr>"DH-RSA-CAMELLIA256-SHA256"</expr>,        <comment type="block">/* TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256 */</comment>
    <expr>"DHE-DSS-CAMELLIA256-SHA256"</expr>,       <comment type="block">/* TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256 */</comment>
    <expr>"DHE-RSA-CAMELLIA256-SHA256"</expr>,       <comment type="block">/* TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256 */</comment>
    <expr>"ADH-CAMELLIA256-SHA256"</expr>,           <comment type="block">/* TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256 */</comment>
    <expr>"CAMELLIA256-GCM-SHA384"</expr>,           <comment type="block">/* TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"DH-RSA-CAMELLIA256-GCM-SHA384"</expr>,    <comment type="block">/* TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"DH-DSS-CAMELLIA256-GCM-SHA384"</expr>,    <comment type="block">/* TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"ADH-CAMELLIA256-GCM-SHA384"</expr>,       <comment type="block">/* TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"ECDH-ECDSA-CAMELLIA256-GCM-SHA384"</expr>,<comment type="block">/* TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"ECDH-RSA-CAMELLIA256-GCM-SHA384"</expr>,  <comment type="block">/* TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"PSK-CAMELLIA256-GCM-SHA384"</expr>,       <comment type="block">/* TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    <expr>"RSA-PSK-CAMELLIA256-GCM-SHA384"</expr>,   <comment type="block">/* TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384 */</comment>
    
    <comment type="block">/* The blacklisted ARIA encrpytion ciphers */</comment>
    <expr>"ARIA128-SHA256"</expr>,                   <comment type="block">/* TLS_RSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ARIA256-SHA384"</expr>,                   <comment type="block">/* TLS_RSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"DH-DSS-ARIA128-SHA256"</expr>,            <comment type="block">/* TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"DH-DSS-ARIA256-SHA384"</expr>,            <comment type="block">/* TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"DH-RSA-ARIA128-SHA256"</expr>,            <comment type="block">/* TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"DH-RSA-ARIA256-SHA384"</expr>,            <comment type="block">/* TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"DHE-DSS-ARIA128-SHA256"</expr>,           <comment type="block">/* TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"DHE-DSS-ARIA256-SHA384"</expr>,           <comment type="block">/* TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"DHE-RSA-ARIA128-SHA256"</expr>,           <comment type="block">/* TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"DHE-RSA-ARIA256-SHA384"</expr>,           <comment type="block">/* TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ADH-ARIA128-SHA256"</expr>,               <comment type="block">/* TLS_DH_anon_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ADH-ARIA256-SHA384"</expr>,               <comment type="block">/* TLS_DH_anon_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ECDHE-ECDSA-ARIA128-SHA256"</expr>,       <comment type="block">/* TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-ECDSA-ARIA256-SHA384"</expr>,       <comment type="block">/* TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ECDH-ECDSA-ARIA128-SHA256"</expr>,        <comment type="block">/* TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ECDH-ECDSA-ARIA256-SHA384"</expr>,        <comment type="block">/* TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ECDHE-RSA-ARIA128-SHA256"</expr>,         <comment type="block">/* TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-RSA-ARIA256-SHA384"</expr>,         <comment type="block">/* TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ECDH-RSA-ARIA128-SHA256"</expr>,          <comment type="block">/* TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ECDH-RSA-ARIA256-SHA384"</expr>,          <comment type="block">/* TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ARIA128-GCM-SHA256"</expr>,               <comment type="block">/* TLS_RSA_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"ARIA256-GCM-SHA384"</expr>,               <comment type="block">/* TLS_RSA_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"DH-DSS-ARIA128-GCM-SHA256"</expr>,        <comment type="block">/* TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"DH-DSS-ARIA256-GCM-SHA384"</expr>,        <comment type="block">/* TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"DH-RSA-ARIA128-GCM-SHA256"</expr>,        <comment type="block">/* TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"DH-RSA-ARIA256-GCM-SHA384"</expr>,        <comment type="block">/* TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"ADH-ARIA128-GCM-SHA256"</expr>,           <comment type="block">/* TLS_DH_anon_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"ADH-ARIA256-GCM-SHA384"</expr>,           <comment type="block">/* TLS_DH_anon_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"ECDH-ECDSA-ARIA128-GCM-SHA256"</expr>,    <comment type="block">/* TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"ECDH-ECDSA-ARIA256-GCM-SHA384"</expr>,    <comment type="block">/* TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"ECDH-RSA-ARIA128-GCM-SHA256"</expr>,      <comment type="block">/* TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"ECDH-RSA-ARIA256-GCM-SHA384"</expr>,      <comment type="block">/* TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"PSK-ARIA128-SHA256"</expr>,               <comment type="block">/* TLS_PSK_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"PSK-ARIA256-SHA384"</expr>,               <comment type="block">/* TLS_PSK_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"DHE-PSK-ARIA128-SHA256"</expr>,           <comment type="block">/* TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"DHE-PSK-ARIA256-SHA384"</expr>,           <comment type="block">/* TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"RSA-PSK-ARIA128-SHA256"</expr>,           <comment type="block">/* TLS_RSA_PSK_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"RSA-PSK-ARIA256-SHA384"</expr>,           <comment type="block">/* TLS_RSA_PSK_WITH_ARIA_256_CBC_SHA384 */</comment>
    <expr>"ARIA128-GCM-SHA256"</expr>,               <comment type="block">/* TLS_PSK_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"ARIA256-GCM-SHA384"</expr>,               <comment type="block">/* TLS_PSK_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"RSA-PSK-ARIA128-GCM-SHA256"</expr>,       <comment type="block">/* TLS_RSA_PSK_WITH_ARIA_128_GCM_SHA256 */</comment>
    <expr>"RSA-PSK-ARIA256-GCM-SHA384"</expr>,       <comment type="block">/* TLS_RSA_PSK_WITH_ARIA_256_GCM_SHA384 */</comment>
    <expr>"ECDHE-PSK-ARIA128-SHA256"</expr>,         <comment type="block">/* TLS_ECDHE_PSK_WITH_ARIA_128_CBC_SHA256 */</comment>
    <expr>"ECDHE-PSK-ARIA256-SHA384"</expr>,         <comment type="block">/* TLS_ECDHE_PSK_WITH_ARIA_256_CBC_SHA384 */</comment>

    <comment type="block">/* blacklisted SEED encryptions */</comment>
    <expr>"SEED-SHA"</expr>,                         <comment type="block">/*TLS_RSA_WITH_SEED_CBC_SHA */</comment>
    <expr>"DH-DSS-SEED-SHA"</expr>,                  <comment type="block">/* TLS_DH_DSS_WITH_SEED_CBC_SHA */</comment>
    <expr>"DH-RSA-SEED-SHA"</expr>,                  <comment type="block">/* TLS_DH_RSA_WITH_SEED_CBC_SHA */</comment>
    <expr>"DHE-DSS-SEED-SHA"</expr>,                 <comment type="block">/* TLS_DHE_DSS_WITH_SEED_CBC_SHA */</comment>
    <expr>"DHE-RSA-SEED-SHA"</expr>,                 <comment type="block">/* TLS_DHE_RSA_WITH_SEED_CBC_SHA */</comment>               
    <expr>"ADH-SEED-SHA"</expr>,                     <comment type="block">/* TLS_DH_anon_WITH_SEED_CBC_SHA */</comment>

    <comment type="block">/* blacklisted KRB5 ciphers */</comment>
    <expr>"KRB5-DES-CBC-SHA"</expr>,                 <comment type="block">/* TLS_KRB5_WITH_DES_CBC_SHA */</comment>
    <expr>"KRB5-DES-CBC3-SHA"</expr>,                <comment type="block">/* TLS_KRB5_WITH_3DES_EDE_CBC_SHA */</comment>
    <expr>"KRB5-IDEA-CBC-SHA"</expr>,                <comment type="block">/* TLS_KRB5_WITH_IDEA_CBC_SHA */</comment>
    <expr>"KRB5-DES-CBC-MD5"</expr>,                 <comment type="block">/* TLS_KRB5_WITH_DES_CBC_MD5 */</comment>
    <expr>"KRB5-DES-CBC3-MD5"</expr>,                <comment type="block">/* TLS_KRB5_WITH_3DES_EDE_CBC_MD5 */</comment>
    <expr>"KRB5-IDEA-CBC-MD5"</expr>,                <comment type="block">/* TLS_KRB5_WITH_IDEA_CBC_MD5 */</comment>
    <expr>"EXP-KRB5-DES-CBC-SHA"</expr>,             <comment type="block">/* TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA */</comment>
    <expr>"EXP-KRB5-DES-CBC-MD5"</expr>,             <comment type="block">/* TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5 */</comment>
    <expr>"EXP-KRB5-RC2-CBC-SHA"</expr>,             <comment type="block">/* TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA */</comment>
    <expr>"EXP-KRB5-RC2-CBC-MD5"</expr>,             <comment type="block">/* TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5 */</comment>
  
    <comment type="block">/* blacklisted exoticas */</comment>
    <expr>"DHE-DSS-CBC-SHA"</expr>,                  <comment type="block">/* TLS_DHE_DSS_WITH_DES_CBC_SHA */</comment>
    <expr>"IDEA-CBC-SHA"</expr>,                     <comment type="block">/* TLS_RSA_WITH_IDEA_CBC_SHA */</comment>
    
    <comment type="block">/* not really sure if the following names are correct */</comment>
    <expr>"SSL3_CK_SCSV"</expr>,                     <comment type="block">/* TLS_EMPTY_RENEGOTIATION_INFO_SCSV */</comment>
    <expr>"SSL3_CK_FALLBACK_SCSV"</expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>RFC7540_names_LEN</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>RFC7540_names</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>RFC7540_names</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <name>apr_hash_t</name> *</type><name>BLCNames</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cipher_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_hash_t</name> *</type><name>hash</name> <init>= <expr><call><name>apr_hash_make</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>source</name> = "rfc7540"</expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>RFC7540_names_LEN</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><name><name>RFC7540_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <expr_stmt><expr><name>BLCNames</name> = <name>hash</name></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cipher_is_blacklisted</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cipher</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>psource</name></decl></param>)</parameter_list>
<block>{   
    <expr_stmt><expr>*<name>psource</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name>BLCNames</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>!!*<name>psource</name></expr>;</return>
}</block></function>

<comment type="block">/*******************************************************************************
 * Hooks for processing incoming connections:
 * - process_conn take over connection in case of h2
 */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_process_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_pre_close_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_post_read_req</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_late_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * Once per lifetime init, retrieve optional functions
 */</comment>
<function><type><name>apr_status_t</name></type> <name>h2_h2_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr>(<name>void</name>)<name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>"h2_h2, child_init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>opt_ssl_engine_disable</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_engine_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>opt_ssl_is_https</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_is_https</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>opt_ssl_var_lookup</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_var_lookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr>!<name>opt_ssl_is_https</name> || !<name>opt_ssl_var_lookup</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>,
                     <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02951</expr></argument>)</argument_list></call> "mod_ssl does not seem to be enabled"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>cipher_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>h2_h2_is_tls</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><name>opt_ssl_is_https</name> &amp;&amp; <call><name>opt_ssl_is_https</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>h2_is_acceptable_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>require_all</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>is_tls</name> <init>= <expr><call><name>h2_h2_is_tls</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>cfg</name> <init>= <expr><call><name>h2_config_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>is_tls</name> &amp;&amp; <call><name>h2_config_geti</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_MODERN_TLS_ONLY</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
        <comment type="block">/* Check TLS connection for modern TLS parameters, as defined in
         * RFC 7540 and https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility
         */</comment>
        <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name><name>c</name>-&gt;<name>pool</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>val</name></decl>;</decl_stmt>
        
        <if>if <condition>(<expr>!<name>opt_ssl_var_lookup</name></expr>)</condition><then> <block>{
            <comment type="block">/* unable to check */</comment>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        
        <comment type="block">/* Need Tlsv1.2 or higher, rfc 7540, ch. 9.2
         */</comment>
        <expr_stmt><expr><name>val</name> = <call><name>opt_ssl_var_lookup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>char</name>*)"SSL_PROTOCOL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>val</name> &amp;&amp; *<name>val</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>"TLS"</expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> 
                || !<call><name>strcmp</name><argument_list>(<argument><expr>"TLSv1"</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> 
                || !<call><name>strcmp</name><argument_list>(<argument><expr>"TLSv1.1"</expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03050</expr></argument>)</argument_list></call>
                              "h2_h2(%ld): tls protocol not suitable: %s"</expr></argument>, 
                              <argument><expr>(<name>long</name>)<name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>require_all</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03051</expr></argument>)</argument_list></call>
                          "h2_h2(%ld): tls protocol is indetermined"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if></else></if>

        <comment type="block">/* Check TLS cipher blacklist
         */</comment>
        <expr_stmt><expr><name>val</name> = <call><name>opt_ssl_var_lookup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>char</name>*)"SSL_CIPHER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>val</name> &amp;&amp; *<name>val</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>source</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>cipher_is_blacklisted</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03052</expr></argument>)</argument_list></call>
                              "h2_h2(%ld): tls cipher %s blacklisted by %s"</expr></argument>, 
                              <argument><expr>(<name>long</name>)<name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>require_all</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03053</expr></argument>)</argument_list></call>
                          "h2_h2(%ld): tls cipher is indetermined"</expr></argument>, <argument><expr>(<name>long</name>)<name><name>c</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if></else></if>
    }</block></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>h2_allows_h2_direct</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>cfg</name> <init>= <expr><call><name>h2_config_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_tls</name> <init>= <expr><call><name>h2_h2_is_tls</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>needed_protocol</name> <init>= <expr><name>is_tls</name>? "h2" : "h2c"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h2_direct</name> <init>= <expr><call><name>h2_config_geti</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_DIRECT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name>h2_direct</name> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>h2_direct</name> = <name>is_tls</name>? 0 : 1</expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>(<name>h2_direct</name> 
            &amp;&amp; <call><name>ap_is_allowed_protocol</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>needed_protocol</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>h2_allows_h2_upgrade</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>cfg</name> <init>= <expr><call><name>h2_config_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h2_upgrade</name> <init>= <expr><call><name>h2_config_geti</name><argument_list>(<argument><expr><name>cfg</name></expr></argument>, <argument><expr><name>H2_CONF_UPGRADE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <return>return <expr><name>h2_upgrade</name> &gt; 0 || (<name>h2_upgrade</name> &lt; 0 &amp;&amp; !<call><name>h2_h2_is_tls</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<comment type="block">/*******************************************************************************
 * Register various hooks
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name><name>mod_ssl</name><index>[]</index></name>        <init>= <expr><block>{ <expr>"mod_ssl.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>* <specifier>const</specifier></type> <name><name>mod_reqtimeout</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_reqtimeout.c"</expr>, <expr><name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>h2_h2_register_hooks</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Our main processing needs to run quite late. Definitely after mod_ssl,
     * as we need its connection filters, but also before reqtimeout as its
     * method of timeouts is specific to HTTP/1.1 (as of now).
     * The core HTTP/1 processing run as REALLY_LAST, so we will have
     * a chance to take over before it.
     */</comment>
    <expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>h2_h2_process_conn</name></expr></argument>, 
                               <argument><expr><name>mod_ssl</name></expr></argument>, <argument><expr><name>mod_reqtimeout</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* One last chance to properly say goodbye if we have not done so
     * already. */</comment>
    <expr_stmt><expr><call><name>ap_hook_pre_close_connection</name><argument_list>(<argument><expr><name>h2_h2_pre_close_conn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mod_ssl</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* With "H2SerializeHeaders On", we install the filter in this hook
     * that parses the response. This needs to happen before any other post
     * read function terminates the request with an error. Otherwise we will
     * never see the response.
     */</comment>
    <expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>h2_h2_post_read_req</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_REALLY_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>h2_h2_late_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* special bucket type transfer through a h2_bucket_beam */</comment>
    <expr_stmt><expr><call><name>h2_register_bucket_beamer</name><argument_list>(<argument><expr><name>h2_bucket_headers_beam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>h2_register_bucket_beamer</name><argument_list>(<argument><expr><name>h2_bucket_observer_beam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>h2_h2_process_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>ctx</name> = <call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"h2_h2, process_conn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>h2_ctx_is_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* our stream pseudo connection */</comment>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"h2_h2, task, declined"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    
    <if>if <condition>(<expr>!<name>ctx</name> &amp;&amp; <name><name>c</name>-&gt;<name>keepalives</name></name> == 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proto</name> <init>= <expr><call><name>ap_get_protocol</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <if>if <condition>(<expr><call><name>APLOGctrace1</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"h2_h2, process_conn, "
                          "new connection using protocol '%s', direct=%d, "
                          "tls acceptable=%d"</expr></argument>, <argument><expr><name>proto</name></expr></argument>, <argument><expr><call><name>h2_allows_h2_direct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, 
                          <argument><expr><call><name>h2_is_acceptable_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>AP_PROTOCOL_HTTP1</name></expr></argument>, <argument><expr><name>proto</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name>h2_allows_h2_direct</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> 
            &amp;&amp; <call><name>h2_is_acceptable_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* Fresh connection still is on http/1.1 and H2Direct is enabled. 
             * Otherwise connection is in a fully acceptable state.
             * -&gt; peek at the first 24 incoming bytes
             */</comment>
            <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>temp</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> *</type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name></decl>;</decl_stmt>
            
            <expr_stmt><expr><name>temp</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,
                                    <argument><expr><name>AP_MODE_SPECULATIVE</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr>24</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03054</expr></argument>)</argument_list></call>
                              "h2_h2, error reading 24 bytes speculative"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>DECLINED</name></expr>;</return>
            }</block></then></if>
            
            <expr_stmt><expr><call><name>apr_brigade_pflatten</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr>&amp;<name>s</name></expr></argument>, <argument><expr>&amp;<name>slen</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>slen</name> &gt;= 24) &amp;&amp; !<call><name>memcmp</name><argument_list>(<argument><expr><name>H2_MAGIC_TOKEN</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>24</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                              <argument><expr>"h2_h2, direct mode detected"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ctx</name> = <call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name>h2_ctx_protocol_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>h2_h2_is_tls</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>? "h2" : "h2c"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                              <argument><expr>"h2_h2, not detected in %d bytes: %s"</expr></argument>, 
                              <argument><expr>(<name>int</name>)<name>slen</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            
            <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"process_conn"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<call><name>h2_ctx_session_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <call><name>h2_conn_setup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"conn_setup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>h2_ctx_clear</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>status</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><call><name>h2_conn_run</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr>"h2_h2, declined"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_pre_close_conn</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl>;</decl_stmt>

    <comment type="block">/* slave connection? */</comment>
    <if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>ctx</name> = <call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>ctx</name></expr>)</condition><then> <block>{
        <comment type="block">/* If the session has been closed correctly already, we will not
         * find a h2_ctx here. The presence indicates that the session
         * is still ongoing. */</comment>
        <return>return <expr><call><name>h2_conn_pre_close</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_push</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>tag</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>h2_config</name> *</type><name>conf</name> <init>= <expr><call><name>h2_config_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>expecting_100</name></name> 
        &amp;&amp; <name>conf</name> &amp;&amp; <name><name>conf</name>-&gt;<name>push_list</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>push_list</name>-&gt;<name>nelts</name></name> &gt; 0</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>old_status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>old_line</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, 
                      <argument><expr>"%s, early announcing %d resources for push"</expr></argument>,
                      <argument><expr><name>tag</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>push_list</name>-&gt;<name>nelts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>push_list</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
            <decl_stmt><decl><type><name>h2_push_res</name> *</type><name>push</name> <init>= <expr>&amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>push_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>h2_push_res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Link"</expr></argument>, 
                           <argument><expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"&lt;%s&gt;; rel=preload%s"</expr></argument>, 
                                        <argument><expr><name><name>push</name>-&gt;<name>uri_ref</name></name></expr></argument>, <argument><expr><name><name>push</name>-&gt;<name>critical</name></name>? "; critical" : ""</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>old_status</name> = <name><name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>old_line</name> = <name><name>r</name>-&gt;<name>status_line</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = 103</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = "103 Early Hints"</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_send_interim_response</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>old_status</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status_line</name></name> = <name>old_line</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_post_read_req</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* slave connection? */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type>struct <name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* This hook will get called twice on internal redirects. Take care
         * that we manipulate filters only once. */</comment>
        <if>if <condition>(<expr><name>task</name> &amp;&amp; !<name><name>task</name>-&gt;<name>filters_set</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, 
                          <argument><expr>"h2_task(%s): adding request filters"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block">/* setup the correct filters to process the request for h2 */</comment>
            <expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"H2_REQUEST"</expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <comment type="block">/* replace the core http filter that formats response headers
             * in HTTP/1 with our own that collects status and headers */</comment>
            <expr_stmt><expr><call><name>ap_remove_output_filter_byhandle</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr>"HTTP_HEADER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"H2_RESPONSE"</expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <for>for (<init><expr><name>f</name> = <name><name>r</name>-&gt;<name>input_filters</name></name></expr>;</init> <condition><expr><name>f</name></expr>;</condition> <incr><expr><name>f</name> = <name><name>f</name>-&gt;<name>next</name></name></expr></incr>) <block>{
                <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr>"H2_SLAVE_IN"</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>f</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name>ap_add_output_filter</name><argument_list>(<argument><expr>"H2_TRAILERS_OUT"</expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>task</name>-&gt;<name>filters_set</name></name> = 1</expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_h2_late_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* slave connection? */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>master</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type>struct <name>h2_task</name> *</type><name>task</name> <init>= <expr><call><name>h2_ctx_get_task</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>task</name></expr>)</condition><then> <block>{
            <comment type="block">/* check if we copy vs. setaside files in this location */</comment>
            <expr_stmt><expr><name><name>task</name>-&gt;<name>output</name>.<name>copy_files</name></name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><call><name>h2_config_rget</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, 
                                                     <argument><expr><name>H2_CONF_COPY_FILES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>task</name>-&gt;<name>output</name>.<name>copy_files</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>c</name></name></expr></argument>,
                              <argument><expr>"h2_slave_out(%s): copy_files on"</expr></argument>, <argument><expr><name><name>task</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>h2_beam_on_file_beam</name><argument_list>(<argument><expr><name><name>task</name>-&gt;<name>output</name>.<name>beam</name></name></expr></argument>, <argument><expr><name>h2_beam_no_files</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>check_push</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"late_fixup"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

</unit>
