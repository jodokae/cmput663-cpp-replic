<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_session.c"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_thread_cond.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_base64.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;apr_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ap_mpm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;httpd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_core.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_config.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;http_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;scoreboard.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mpm_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_beam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_bucket_eos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_ctx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_h2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_mplx.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_push.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_headers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_task.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2_workers.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dispatch_master</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_read</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>block</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>transit</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>, 
                    <param><decl><type><name>h2_session_state</name></type> <name>nstate</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>on_stream_state_enter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>on_stream_state_event</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>on_stream_event</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_session_status_from_apr_status</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>rv</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_NO_ERROR</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_ERR_WOULDBLOCK</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_ERR_EOF</name></expr>;</return>
    }</block></then></if></else></if></else></if>
    <return>return <expr><name>NGHTTP2_ERR_PROTO</name></expr>;</return>
}</block></function>

<function><type><name>h2_stream</name> *</type><name>h2_session_stream_get</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>nghttp2_session_get_stream_user_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_event</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_session_event_t</name></type> <name>ev</name></decl></param>, 
                             <param><decl><type><name>int</name></type> <name>err</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>h2_session_event</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_session_event_t</name></type> <name>ev</name></decl></param>, 
                             <param><decl><type><name>int</name></type> <name>err</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rst_unprocessed_stream</name><parameter_list>(<param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>unprocessed</name> <init>= <expr>(!<call><name>h2_stream_was_closed</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call>
                       &amp;&amp; (<call><name>H2_STREAM_CLIENT_INITIATED</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call>? 
                           (!<name><name>stream</name>-&gt;<name>session</name>-&gt;<name>local</name>.<name>accepting</name></name>
                            &amp;&amp; <name><name>stream</name>-&gt;<name>id</name></name> &gt; <name><name>stream</name>-&gt;<name>session</name>-&gt;<name>local</name>.<name>accepted_max</name></name>)
                            : 
                           (!<name><name>stream</name>-&gt;<name>session</name>-&gt;<name>remote</name>.<name>accepting</name></name>
                            &amp;&amp; <name><name>stream</name>-&gt;<name>id</name></name> &gt; <name><name>stream</name>-&gt;<name>session</name>-&gt;<name>remote</name>.<name>accepted_max</name></name>))
                       )</expr></init></decl>;</decl_stmt> 
    <if>if <condition>(<expr><name>unprocessed</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_ERR_NO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_unprocessed_streams</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>h2_mplx_stream_do</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name>rst_unprocessed_stream</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>h2_stream</name> *</type><name>h2_session_open_stream</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>stream_id</name></decl></param>,
                                         <param><decl><type><name>int</name></type> <name>initiated_on</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_stream</name> *</type> <name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>stream_pool</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>stream_pool</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>stream_pool</name></expr></argument>, <argument><expr>"h2_stream"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>stream</name> = <call><name>h2_stream_create</name><argument_list>(<argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>stream_pool</name></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                              <argument><expr><name><name>session</name>-&gt;<name>monitor</name></name></expr></argument>, <argument><expr><name>initiated_on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>nghttp2_session_set_stream_user_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>stream</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Determine the importance of streams when scheduling tasks.
 * - if both stream depend on the same one, compare weights
 * - if one stream is closer to the root, prioritize that one
 * - if both are on the same level, use the weight of their root
 *   level ancestors
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>spri_cmp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sid1</name></decl></param>, <param><decl><type><name>nghttp2_stream</name> *</type><name>s1</name></decl></param>, 
                    <param><decl><type><name>int</name></type> <name>sid2</name></decl></param>, <param><decl><type><name>nghttp2_stream</name> *</type><name>s2</name></decl></param>, <param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nghttp2_stream</name> *</type><name>p1</name></decl>, *<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>p1</name> = <call><name>nghttp2_stream_get_parent</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p2</name> = <call><name>nghttp2_stream_get_parent</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>p1</name> == <name>p2</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int32_t</name></type> <name>w1</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>w1</name> = <call><name>nghttp2_stream_get_weight</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>w2</name> = <call><name>nghttp2_stream_get_weight</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>w2</name> - <name>w1</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>p1</name></expr>)</condition><then> <block>{
        <comment type="block">/* stream 1 closer to root */</comment>
        <return>return <expr>-1</expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>p2</name></expr>)</condition><then> <block>{
        <comment type="block">/* stream 2 closer to root */</comment>
        <return>return <expr>1</expr>;</return>
    }</block></then></if></else></if></else></if>
    <return>return <expr><call><name>spri_cmp</name><argument_list>(<argument><expr><name>sid1</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>sid2</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stream_pri_cmp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>sid1</name></decl></param>, <param><decl><type><name>int</name></type> <name>sid2</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nghttp2_stream</name> *</type><name>s1</name></decl>, *<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>s1</name> = <call><name>nghttp2_session_find_stream</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>sid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s2</name> = <call><name>nghttp2_session_find_stream</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>sid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>s1</name> == <name>s2</name></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>s1</name></expr>)</condition><then> <block>{
        <return>return <expr>1</expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>s2</name></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if></else></if></else></if>
    <return>return <expr><call><name>spri_cmp</name><argument_list>(<argument><expr><name>sid1</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>sid2</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * Callback when nghttp2 wants to send bytes back to the client.
 */</comment>
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>send_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>,
                       <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>data</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>,
                       <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>ngh2</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>flags</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_write</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>length</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_ERR_WOULDBLOCK</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03062</expr></argument>)</argument_list></call>
                  "h2_session: send error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>h2_session_status_from_apr_status</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_invalid_frame_recv_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
                                    <param><decl><type><name>int</name></type> <name>error</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>ngh2</name></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>h2_util_frame_print</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03063</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"recv invalid FRAME[%s], frames=%ld/%ld (r/s)"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name>buffer</name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>frames_received</name></name></expr></argument>,
                     <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>frames_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_data_chunk_recv_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>,
                                 <param><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>data</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_EINVAL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type> <name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>h2_stream_recv_DATA</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03064</expr></argument>)</argument_list></call>
                      "h2_stream(%ld-%d): on_data_chunk for unknown stream"</expr></argument>,
                      <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</expr_stmt>
    }</block></else></if>
    
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* count this as consumed explicitly as no one will read it */</comment>
        <expr_stmt><expr><call><name>nghttp2_session_consume</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_stream_close_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></param>,
                              <param><decl><type><name>uint32_t</name></type> <name>error_code</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    
    <expr_stmt><expr>(<name>void</name>)<name>ngh2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>error_code</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03065</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, 
                          <argument><expr>"closing with err=%d %s"</expr></argument>)</argument_list></call></expr></argument>, 
                          <argument><expr>(<name>int</name>)<name>error_code</name></expr></argument>, <argument><expr><call><name>h2_h2_err_description</name><argument_list>(<argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>error_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_begin_headers_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>, <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>s</name></decl>;</decl_stmt>
    
    <comment type="block">/* We may see HEADERs at the start of a stream or after all DATA
     * streams to carry trailers. */</comment>
    <expr_stmt><expr>(<name>void</name>)<name>ngh2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block>{
        <comment type="block">/* nop */</comment>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>s</name> = <call><name>h2_session_open_stream</name><argument_list>(<argument><expr><name>userp</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>s</name>? 0 : <name>NGHTTP2_ERR_START_STREAM_NOT_ALLOWED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_header_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>namelen</name></decl></param>,
                        <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>valuelen</name></decl></param>,
                        <param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>,
                        <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type> <name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    
    <expr_stmt><expr>(<name>void</name>)<name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02920</expr></argument>)</argument_list></call> 
                      "h2_stream(%ld-%d): on_header unknown stream"</expr></argument>,
                      <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>status</name> = <call><name>h2_stream_add_header</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>,
                                  <argument><expr>(const <name>char</name> *)<name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; !<call><name>h2_stream_is_ready</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_ERR_TEMPORAL_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/**
 * nghttp2 session has received a complete frame. Most, it uses
 * for processing of internal state. HEADER and DATA frames however
 * we need to handle ourself.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame_recv_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ng2s</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>h2_util_frame_print</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03066</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"recv FRAME[%s], frames=%ld/%ld (r/s)"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name>buffer</name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>frames_received</name></name></expr></argument>,
                     <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>frames_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr>++<name><name>session</name>-&gt;<name>frames_received</name></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>frame</name>-&gt;<name>hd</name>.<name>type</name></name></expr>)</condition> <block>{
        <case>case <expr><name>NGHTTP2_HEADERS</name></expr>:
            <comment type="block">/* This can be HEADERS for a new stream, defining the request,
             * or HEADER may come after DATA at the end of a stream as in
             * trailers */</comment>
            <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <call><name>h2_stream_recv_frame</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NGHTTP2_HEADERS</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        </case><case>case <expr><name>NGHTTP2_DATA</name></expr>:
            <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,  
                              <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02923</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, 
                              <argument><expr>"DATA, len=%ld, flags=%d"</expr></argument>)</argument_list></call></expr></argument>, 
                              <argument><expr>(<name>long</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>length</name></name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name>h2_stream_recv_frame</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NGHTTP2_DATA</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        </case><case>case <expr><name>NGHTTP2_PRIORITY</name></expr>:
            <expr_stmt><expr><name><name>session</name>-&gt;<name>reprioritize</name></name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr>"h2_stream(%ld-%d): PRIORITY frame "
                          " weight=%d, dependsOn=%d, exclusive=%d"</expr></argument>, 
                          <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>,
                          <argument><expr><name><name>frame</name>-&gt;<name>priority</name>.<name>pri_spec</name>.<name>weight</name></name></expr></argument>,
                          <argument><expr><name><name>frame</name>-&gt;<name>priority</name>.<name>pri_spec</name>.<name>stream_id</name></name></expr></argument>,
                          <argument><expr><name><name>frame</name>-&gt;<name>priority</name>.<name>pri_spec</name>.<name>exclusive</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>NGHTTP2_WINDOW_UPDATE</name></expr>:
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr>"h2_stream(%ld-%d): WINDOW_UPDATE incr=%d"</expr></argument>, 
                          <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>,
                          <argument><expr><name><name>frame</name>-&gt;<name>window_update</name>.<name>window_size_increment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>NGHTTP2_RST_STREAM</name></expr>:
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03067</expr></argument>)</argument_list></call>
                          "h2_stream(%ld-%d): RST_STREAM by client, errror=%d"</expr></argument>,
                          <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>,
                          <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>rst_stream</name>.<name>error_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>stream</name> &amp;&amp; <name><name>stream</name>-&gt;<name>initiated_on</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr>++<name><name>session</name>-&gt;<name>pushes_reset</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr>++<name><name>session</name>-&gt;<name>streams_reset</name></name></expr>;</expr_stmt>
            }</block></else></if>
            <break>break;</break>
        </case><case>case <expr><name>NGHTTP2_GOAWAY</name></expr>:
            <if>if <condition>(<expr><name><name>frame</name>-&gt;<name>goaway</name>.<name>error_code</name></name> == 0 
                &amp;&amp; <name><name>frame</name>-&gt;<name>goaway</name>.<name>last_stream_id</name></name> == ((1u &lt;&lt; 31) - 1)</expr>)</condition><then> <block>{
                <comment type="block">/* shutdown notice. Should not come from a client... */</comment>
                <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>accepting</name></name> = 0</expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>accepted_max</name></name> = <name><name>frame</name>-&gt;<name>goaway</name>.<name>last_stream_id</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_REMOTE_GOAWAY</name></expr></argument>, 
                               <argument><expr><name><name>frame</name>-&gt;<name>goaway</name>.<name>error_code</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <break>break;</break>
        </case><default>default:
            <if>if <condition>(<expr><call><name>APLOGctrace2</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
                
                <expr_stmt><expr><call><name>h2_util_frame_print</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>,
                                    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                              <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"on_frame_rcv %s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
    </default>}</block></switch>
    <return>return <expr>(<name>APR_SUCCESS</name> == <name>rv</name>)? 0 : <name>NGHTTP2_ERR_PROTO</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h2_session_continue_data</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>h2_mplx_has_master_events</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name>h2_conn_io_needs_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>
    <return>return <expr>1</expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>immortal_zeros</name><index>[<expr><name>H2_MAX_PADLEN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_send_data_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, 
                           <param><decl><type><name>nghttp2_frame</name> *</type><name>frame</name></decl></param>, 
                           <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>framehd</name></decl></param>, 
                           <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>, 
                           <param><decl><type><name>nghttp2_data_source</name> *</type><name>source</name></decl></param>, 
                           <param><decl><type><name>void</name> *</type><name>userp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>userp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stream_id</name> <init>= <expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>padlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>(<name>void</name>)<name>ngh2</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>source</name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<call><name>h2_session_continue_data</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_ERR_WOULDBLOCK</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>frame</name>-&gt;<name>data</name>.<name>padlen</name></name> &gt; <name>H2_MAX_PADLEN</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NGHTTP2_ERR_PROTO</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>padlen</name> = (<name>unsigned</name> <name>char</name>)<name><name>frame</name>-&gt;<name>data</name>.<name>padlen</name></name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_NOTFOUND</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02924</expr></argument>)</argument_list></call> 
                      "h2_stream(%ld-%d): send_data, stream not found"</expr></argument>,
                      <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                  <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"send_data_cb for %ld bytes"</expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr>(<name>long</name>)<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  
    <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_write</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>framehd</name></expr></argument>, <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>padlen</name> &amp;&amp; <name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_write</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)&amp;<name>padlen</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"writing frame header"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>status</name> = <call><name>h2_stream_read_to</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"send_data_cb, reading stream"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>len</name> != <name>length</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"send_data_cb, wanted %ld bytes, "
                      "got %ld from stream"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>long</name>)<name>length</name></expr></argument>, <argument><expr>(<name>long</name>)<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then></if></else></if>
    
    <if>if <condition>(<expr><name>padlen</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr><name>immortal_zeros</name></expr></argument>, <argument><expr><name>padlen</name></expr></argument>, 
                                       <argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_pass</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>stream</name>-&gt;<name>out_data_frames</name></name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stream</name>-&gt;<name>out_data_octets</name></name> += <name>length</name></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,  
                      <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02925</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"failed send_data_cb"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on_frame_send_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, 
                            <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stream_id</name> <init>= <expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr>++<name><name>session</name>-&gt;<name>frames_sent</name></name></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>frame</name>-&gt;<name>hd</name>.<name>type</name></name></expr>)</condition> <block>{
        <case>case <expr><name>NGHTTP2_PUSH_PROMISE</name></expr>:
            <comment type="block">/* PUSH_PROMISE we report on the promised stream */</comment>
            <expr_stmt><expr><name>stream_id</name> = <name><name>frame</name>-&gt;<name>push_promise</name>.<name>promised_stream_id</name></name></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:    
            <break>break;</break>
    </default>}</block></switch>
    
    <if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>h2_util_frame_print</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03068</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"sent FRAME[%s], frames=%ld/%ld (r/s)"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name>buffer</name></expr></argument>, <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>frames_received</name></name></expr></argument>,
                     <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>frames_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>h2_stream_send_frame</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>type</name></name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>H2_NG2_INVALID_HEADER_CB</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>on_invalid_header_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ngh2</name></decl></param>, 
                                <param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>, 
                                <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>namelen</name></decl></param>, 
                                <param><decl><type><specifier>const</specifier> <name>uint8_t</name> *</type><name>value</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>valuelen</name></decl></param>, 
                                <param><decl><type><name>uint8_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>void</name> *</type><name>user_data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>user_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03456</expr></argument>)</argument_list></call>
                      "h2_stream(%ld-%d): invalid header '%s: %s'"</expr></argument>, 
                      <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>,
                      <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>name</name></expr></argument>, <argument><expr><name>namelen</name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name> *)<name>value</name></expr></argument>, <argument><expr><name>valuelen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>frame</name>-&gt;<name>hd</name>.<name>stream_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NGH2_SET_CALLBACK</name><parameter_list>(<param><type><name>callbacks</name></type></param>, <param><type><name>name</name></type></param>, <param><type><name>fn</name></type></param>)</parameter_list></cpp:macro>\
<cpp:value>nghttp2_session_callbacks_set_##name##_callback(callbacks, fn)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>init_callbacks</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>nghttp2_session_callbacks</name> **</type><name>pcb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><call><name>nghttp2_session_callbacks_new</name><argument_list>(<argument><expr><name>pcb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02926</expr></argument>)</argument_list></call> "nghttp2_session_callbacks_new: %s"</expr></argument>,
                      <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>send</name></expr></argument>, <argument><expr><name>send_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_frame_recv</name></expr></argument>, <argument><expr><name>on_frame_recv_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_invalid_frame_recv</name></expr></argument>, <argument><expr><name>on_invalid_frame_recv_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_data_chunk_recv</name></expr></argument>, <argument><expr><name>on_data_chunk_recv_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_stream_close</name></expr></argument>, <argument><expr><name>on_stream_close_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_begin_headers</name></expr></argument>, <argument><expr><name>on_begin_headers_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_header</name></expr></argument>, <argument><expr><name>on_header_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>send_data</name></expr></argument>, <argument><expr><name>on_send_data_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_frame_send</name></expr></argument>, <argument><expr><name>on_frame_send_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>H2_NG2_INVALID_HEADER_CB</name></cpp:ifdef>
    <expr_stmt><expr><call><name>NGH2_SET_CALLBACK</name><argument_list>(<argument><expr>*<name>pcb</name></expr></argument>, <argument><expr><name>on_invalid_header</name></expr></argument>, <argument><expr><name>on_invalid_header_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_shutdown_notice</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>local</name>.<name>accepting</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>nghttp2_submit_shutdown_notice</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>accepting</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03457</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, <argument><expr>"sent shutdown notice"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_shutdown</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>error</name></decl></param>, 
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>, <param><decl><type><name>int</name></type> <name>force_close</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>local</name>.<name>shutdown</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>msg</name> &amp;&amp; <name>error</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>msg</name> = <call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <if>if <condition>(<expr><name>error</name> || <name>force_close</name></expr>)</condition><then> <block>{
        <comment type="block">/* not a graceful shutdown, we want to leave... 
         * Do not start further streams that are waiting to be scheduled. 
         * Find out the max stream id that we habe been processed or
         * are still actively working on.
         * Remove all streams greater than this number without submitting
         * a RST_STREAM frame, since that should be clear from the GOAWAY
         * we send. */</comment>
        <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>accepted_max</name></name> = <call><name>h2_mplx_shutdown</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>error</name></name> = <name>error</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* graceful shutdown. we will continue processing all streams
         * we have, but no longer accept new ones. Report the max stream
         * we have received and discard all new ones. */</comment>
    }</block></else></if>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>accepting</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>shutdown</name></name> = 1</expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>c</name>-&gt;<name>aborted</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>nghttp2_submit_goaway</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, 
                              <argument><expr><name><name>session</name>-&gt;<name>local</name>.<name>accepted_max</name></name></expr></argument>, 
                              <argument><expr><name>error</name></expr></argument>, <argument><expr>(<name>uint8_t</name>*)<name>msg</name></expr></argument>, <argument><expr><name>msg</name>? <call><name>strlen</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call>:0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = <call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03069</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                                  <argument><expr>"sent GOAWAY, err=%d, msg=%s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>msg</name>? <name>msg</name> : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_LOCAL_GOAWAY</name></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_cleanup</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>trigger</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                  <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"pool_cleanup"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name> != <name>H2_SESSION_ST_DONE</name>
        &amp;&amp; <name><name>session</name>-&gt;<name>state</name></name> != <name>H2_SESSION_ST_INIT</name></expr>)</condition><then> <block>{
        <comment type="block">/* Not good. The connection is being torn down and we have
         * not sent a goaway. This is considered a protocol error and
         * the client has to assume that any streams "in flight" may have
         * been processed and are not safe to retry.
         * As clients with idle connection may only learn about a closed
         * connection when sending the next request, this has the effect
         * that at least this one request will fail.
         */</comment>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03199</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"connection disappeared without proper "
                      "goodbye, clients will be confused, should not happen"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>trigger</name></expr></argument>, <argument><expr><name>H2_SESSION_ST_CLEANUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>h2_mplx_release_and_join</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>iowait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>mplx</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nghttp2_session_del</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>ngh2</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>h2_ctx_clear</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_pool_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_ctx</name> *</type><name>ctx</name> <init>= <expr><call><name>h2_ctx_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name>ctx</name> &amp;&amp; (<name>session</name> = <call><name>h2_ctx_session_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <comment type="block">/* if the session is still there, now is the last chance
         * to perform cleanup. Normally, cleanup should have happened
         * earlier in the connection pre_close. Main reason is that
         * any ongoing requests on slave connections might still access
         * data which has, at this time, already been freed. An example
         * is mod_ssl that uses request hooks. */</comment>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10020</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"session cleanup triggered by pool cleanup. "
                      "this should have happened earlier already."</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>session_cleanup</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"pool cleanup"</expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_create_int</name><parameter_list>(<param><decl><type><name>h2_session</name> **</type><name>psession</name></decl></param>,
                                          <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
                                          <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                          <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, 
                                          <param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>nghttp2_session_callbacks</name> *</type><name>callbacks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nghttp2_option</name> *</type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_allocator_t</name> *</type><name>allocator</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>mutex</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>psession</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_allocator_create</name><argument_list>(<argument><expr>&amp;<name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_allocator_max_free_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>ap_max_mem_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name>pool</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>pool</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_allocator_destroy</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_pool_tag</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>"h2_session"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_allocator_owner_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name>mutex</name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_allocator_mutex_set</name><argument_list>(<argument><expr><name>allocator</name></expr></argument>, <argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>session</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_session</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>session</name></expr>)</condition><then> <block>{
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr>*<name>psession</name> = <name>session</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>id</name></name> = <name><name>c</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>c</name></name> = <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>s</name></name> = <call><name>h2_ctx_server_get</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>pool</name></name> = <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>config</name></name> = <call><name>h2_config_sget</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>workers</name></name> = <name>workers</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>state</name></name> = <name>H2_SESSION_ST_INIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>accepting</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>accepting</name></name> = 1</expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>max_stream_count</name></name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, 
                                               <argument><expr><name>H2_CONF_MAX_STREAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>max_stream_mem</name></name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, 
                                             <argument><expr><name>H2_CONF_STREAM_MAX_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>status</name> = <call><name>apr_thread_cond_create</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>iowait</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>in_pending</name></name> = <call><name>h2_iq_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>max_stream_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>in_pending</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>session</name>-&gt;<name>in_process</name></name> = <call><name>h2_iq_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>max_stream_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>in_process</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>monitor</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>h2_stream_monitor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>monitor</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>monitor</name>-&gt;<name>ctx</name></name> = <name>session</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>monitor</name>-&gt;<name>on_state_enter</name></name> = <name>on_stream_state_enter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>monitor</name>-&gt;<name>on_state_event</name></name> = <name>on_stream_state_event</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>monitor</name>-&gt;<name>on_event</name></name> = <name>on_stream_event</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>mplx</name></name> = <call><name>h2_mplx_create</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, 
                                   <argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* connection input filter that feeds the session */</comment>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>cin</name></name> = <call><name>h2_filter_cin_create</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_add_input_filter</name><argument_list>(<argument><expr>"H2_IN"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>cin</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>h2_conn_io_init</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>bbtmp</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>status</name> = <call><name>init_callbacks</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>&amp;<name>callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02927</expr></argument>)</argument_list></call> 
                      "nghttp2: error in init_callbacks"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_option_new</name><argument_list>(<argument><expr>&amp;<name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02928</expr></argument>)</argument_list></call> "nghttp2_option_new: %s"</expr></argument>, 
                      <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>nghttp2_option_set_peer_max_concurrent_streams</name><argument_list>(
                                                   <argument><expr><name>options</name></expr></argument>, <argument><expr>(<name>uint32_t</name>)<name><name>session</name>-&gt;<name>max_stream_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* We need to handle window updates ourself, otherwise we
     * get flooded by nghttp2. */</comment>
    <expr_stmt><expr><call><name>nghttp2_option_set_no_auto_window_update</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_session_server_new2</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>callbacks</name></expr></argument>,
                                     <argument><expr><name>session</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nghttp2_session_callbacks_del</name><argument_list>(<argument><expr><name>callbacks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>nghttp2_option_del</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02929</expr></argument>)</argument_list></call> "nghttp2_session_server_new: %s"</expr></argument>,
                      <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_ENOMEM</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>n</name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>H2_CONF_PUSH_DIARY_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>push_diary</name></name> = <call><name>h2_push_diary_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><call><name>APLOGcdebug</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03200</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                                  <argument><expr>"created, max_streams=%d, stream_mem=%d, "
                                  "workers_limit=%d, workers_max=%d, "
                                  "push_diary(type=%d,N=%d)"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>max_stream_count</name></name></expr></argument>, 
                      <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>max_stream_mem</name></name></expr></argument>,
                      <argument><expr><name><name>session</name>-&gt;<name>mplx</name>-&gt;<name>limit_active</name></name></expr></argument>, 
                      <argument><expr><name><name>session</name>-&gt;<name>mplx</name>-&gt;<name>max_active</name></name></expr></argument>, 
                      <argument><expr><name><name>session</name>-&gt;<name>push_diary</name>-&gt;<name>dtype</name></name></expr></argument>, 
                      <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>push_diary</name>-&gt;<name>N</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>apr_pool_pre_cleanup_register</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>session_pool_cleanup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>h2_session_create</name><parameter_list>(<param><decl><type><name>h2_session</name> **</type><name>psession</name></decl></param>, 
                               <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>h2_session_create_int</name><argument_list>(<argument><expr><name>psession</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>h2_session_rcreate</name><parameter_list>(<param><decl><type><name>h2_session</name> **</type><name>psession</name></decl></param>, 
                                <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>h2_session_create_int</name><argument_list>(<argument><expr><name>psession</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_start</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name> *</type><name>rv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>nghttp2_settings_entry</name></type> <name><name>settings</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>slen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>win_size</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Start the conversation by submitting our SETTINGS frame */</comment>
    <expr_stmt><expr>*<name>rv</name> = 0</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>r</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>, *<decl><type ref="prev"/><name>cs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>dlen</name></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name>h2_stream</name> *</type> <name>stream</name></decl>;</decl_stmt>

        <comment type="block">/* 'h2c' mode: we should have a 'HTTP2-Settings' header with
         * base64 encoded client settings. */</comment>
        <expr_stmt><expr><name>s</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"HTTP2-Settings"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EINVAL</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>r</name></name></expr></argument>,
                          <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02931</expr></argument>)</argument_list></call> 
                          "HTTP2-Settings header missing in request"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_EINVAL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>cs</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dlen</name> = <call><name>h2_util_base64url_decode</name><argument_list>(<argument><expr>&amp;<name>cs</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr><call><name>APLOGrdebug</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>h2_util_hex_dump</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>128</expr></argument>, <argument><expr>(<name>char</name>*)<name>cs</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03070</expr></argument>)</argument_list></call>
                          "upgrading h2c session with HTTP2-Settings: %s -&gt; %s (%d)"</expr></argument>,
                          <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>(<name>int</name>)<name>dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <expr_stmt><expr>*<name>rv</name> = <call><name>nghttp2_session_upgrade</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr>(<name>uint8_t</name>*)<name>cs</name></expr></argument>, <argument><expr><name>dlen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>*<name>rv</name> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <name>APR_EINVAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>r</name></name></expr></argument>,
                          <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02932</expr></argument>)</argument_list></call> "nghttp2_session_upgrade: %s"</expr></argument>, 
                          <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr>*<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
        
        <comment type="block">/* Now we need to auto-open stream 1 for the request we got. */</comment>
        <expr_stmt><expr><name>stream</name> = <call><name>h2_session_open_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>r</name></name></expr></argument>,
                          <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02933</expr></argument>)</argument_list></call> "open stream 1: %s"</expr></argument>, 
                          <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr>*<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
        
        <expr_stmt><expr><name>status</name> = <call><name>h2_stream_set_request_rec</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>slen</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>settings</name><index>[<expr><name>slen</name></expr>]</index></name>.<name>settings_id</name> = <name>NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>settings</name><index>[<expr><name>slen</name></expr>]</index></name>.<name>value</name> = (<name>uint32_t</name>)<name><name>session</name>-&gt;<name>max_stream_count</name></name></expr>;</expr_stmt>
    <expr_stmt><expr>++<name>slen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>win_size</name> = <call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>H2_CONF_WIN_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>win_size</name> != <name>H2_INITIAL_WINDOW_SIZE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>settings</name><index>[<expr><name>slen</name></expr>]</index></name>.<name>settings_id</name> = <name>NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>settings</name><index>[<expr><name>slen</name></expr>]</index></name>.<name>value</name> = <name>win_size</name></expr>;</expr_stmt>
        <expr_stmt><expr>++<name>slen</name></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03201</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                  <argument><expr>"start, INITIAL_WINDOW_SIZE=%ld, MAX_CONCURRENT_STREAMS=%d"</expr></argument>)</argument_list></call></expr></argument>, 
                  <argument><expr>(<name>long</name>)<name>win_size</name></expr></argument>, <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>max_stream_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>rv</name> = <call><name>nghttp2_submit_settings</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,
                                  <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>rv</name> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02935</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"nghttp2_submit_settings: %s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr>*<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* use maximum possible value for connection window size. We are only
         * interested in per stream flow control. which have the initial window
         * size configured above.
         * Therefore, for our use, the connection window can only get in the
         * way. Example: if we allow 100 streams with a 32KB window each, we
         * buffer up to 3.2 MB of data. Unless we do separate connection window
         * interim updates, any smaller connection window will lead to blocking
         * in DATA flow.
         */</comment>
        <expr_stmt><expr>*<name>rv</name> = <call><name>nghttp2_submit_window_update</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>,
                                           <argument><expr>0</expr></argument>, <argument><expr><name>NGHTTP2_MAX_WINDOW_SIZE</name> - <name>win_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>*<name>rv</name> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02970</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>,
                          <argument><expr>"nghttp2_submit_window_update: %s"</expr></argument>)</argument_list></call></expr></argument>, 
                          <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr>*<name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        }</block></then></if>
    }</block></else></if>
    
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function_decl><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>on_stream_headers</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>,  
                                      <param><decl><type><name>h2_headers</name> *</type><name>headers</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>eos</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>stream_data_cb</name><parameter_list>(<param><decl><type><name>nghttp2_session</name> *</type><name>ng2s</name></decl></param>,
                              <param><decl><type><name>int32_t</name></type> <name>stream_id</name></decl></param>,
                              <param><decl><type><name>uint8_t</name> *</type><name>buf</name></decl></param>,
                              <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>,
                              <param><decl><type><name>uint32_t</name> *</type><name>data_flags</name></decl></param>,
                              <param><decl><type><name>nghttp2_data_source</name> *</type><name>source</name></decl></param>,
                              <param><decl><type><name>void</name> *</type><name>puser</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr>(<name>h2_session</name> *)<name>puser</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>nread</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <comment type="block">/* The session wants to send more DATA for the stream. We need
     * to find out how much of the requested length we can send without
     * blocking.
     * Indicate EOS when we encounter it or DEFERRED if the stream
     * should be suspended. Beware of trailers.
     */</comment>
 
    <expr_stmt><expr>(<name>void</name>)<name>ng2s</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>source</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02937</expr></argument>)</argument_list></call> 
                      "h2_stream(%ld-%d): data_cb, stream not found"</expr></argument>,
                      <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>(<name>int</name>)<name>stream_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>status</name> = <call><name>h2_stream_out_prepare</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>&amp;<name>nread</name></expr></argument>, <argument><expr>&amp;<name>eos</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>nread</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"prepared no_copy, len=%ld, eos=%d"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr>(<name>long</name>)<name>nread</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>data_flags</name> |=  <name>NGHTTP2_DATA_FLAG_NO_COPY</name></expr>;</expr_stmt>
    }</block></then></if>
    
    <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
        <case>case <expr><name>APR_SUCCESS</name></expr>:
            <break>break;</break>
            
        </case><case>case <expr><name>APR_ECONNRESET</name></expr>:
        </case><case>case <expr><name>APR_ECONNABORTED</name></expr>:
            <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
            
        </case><case>case <expr><name>APR_EAGAIN</name></expr>:
            <comment type="block">/* If there is no data available, our session will automatically
             * suspend this stream and not ask for more data until we resume
             * it. Remember at our h2_stream that we need to do this.
             */</comment>
            <expr_stmt><expr><name>nread</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03071</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"suspending"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NGHTTP2_ERR_DEFERRED</name></expr>;</return>
            
        </case><default>default:
            <expr_stmt><expr><name>nread</name> = 0</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                          <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02938</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"reading data"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NGHTTP2_ERR_CALLBACK_FAILURE</name></expr>;</return>
    </default>}</block></switch>
    
    <if>if <condition>(<expr><name>eos</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>data_flags</name> |= <name>NGHTTP2_DATA_FLAG_EOF</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>(<name>ssize_t</name>)<name>nread</name></expr>;</return>
}</block></function>

<function><type>struct <name>h2_stream</name> *</type><name>h2_session_push</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>is</name></decl></param>,
                                  <param><decl><type><name>h2_push</name> *</type><name>push</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_ngheader</name> *</type><name>ngh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nid</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>status</name> = <call><name>h2_req_create_ngheader</name><argument_list>(<argument><expr>&amp;<name>ngh</name></expr></argument>, <argument><expr><name><name>is</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>push</name>-&gt;<name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>nid</name> = <call><name>nghttp2_submit_push_promise</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>is</name>-&gt;<name>id</name></name></expr></argument>, 
                                          <argument><expr><name><name>ngh</name>-&gt;<name>nv</name></name></expr></argument>, <argument><expr><name><name>ngh</name>-&gt;<name>nvlen</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> || <name>nid</name> &lt;= 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03075</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is</name></expr></argument>, 
                      <argument><expr>"submitting push promise fail: %s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>++<name><name>session</name>-&gt;<name>pushes_promised</name></name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03076</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>is</name></expr></argument>, <argument><expr>"SERVER_PUSH %d for %s %s on %d"</expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name>nid</name></expr></argument>, <argument><expr><name><name>push</name>-&gt;<name>req</name>-&gt;<name>method</name></name></expr></argument>, <argument><expr><name><name>push</name>-&gt;<name>req</name>-&gt;<name>path</name></name></expr></argument>, <argument><expr><name><name>is</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  
    <expr_stmt><expr><name>stream</name> = <call><name>h2_session_open_stream</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>nid</name></expr></argument>, <argument><expr><name><name>is</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>stream</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03077</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, 
                      <argument><expr>"failed to create stream obj %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* kill the push_promise */</comment>
        <expr_stmt><expr><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, <argument><expr><name>nid</name></expr></argument>,
                                  <argument><expr><name>NGHTTP2_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><call><name>h2_session_set_prio</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>push</name>-&gt;<name>priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>h2_stream_set_request</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>push</name>-&gt;<name>req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>++<name><name>session</name>-&gt;<name>unsent_promises</name></name></expr>;</expr_stmt>
    <return>return <expr><name>stream</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>valid_weight</name><parameter_list>(<param><decl><type><name>float</name></type> <name>f</name></decl></param>)</parameter_list> 
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr>(<name>int</name>)<name>f</name></expr></init></decl>;</decl_stmt>
    <return>return <expr>(<name>w</name> &lt; <name>NGHTTP2_MIN_WEIGHT</name>? <name>NGHTTP2_MIN_WEIGHT</name> : 
            (<name>w</name> &gt; <name>NGHTTP2_MAX_WEIGHT</name>)? <name>NGHTTP2_MAX_WEIGHT</name> : <name>w</name>)</expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>h2_session_set_prio</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, 
                                 <param><decl><type><specifier>const</specifier> <name>h2_priority</name> *</type><name>prio</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>H2_NG2_CHANGE_PRIO</name></cpp:ifdef>
    <decl_stmt><decl><type><name>nghttp2_stream</name> *</type><name>s_grandpa</name></decl>, *<decl><type ref="prev"/><name>s_parent</name></decl>, *<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><name>prio</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* we treat this as a NOP */</comment>
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>s</name> = <call><name>nghttp2_session_find_stream</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>s</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"lookup of nghttp2_stream failed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EINVAL</name></expr>;</return>
    }</block></then></if>
    
    <expr_stmt><expr><name>s_parent</name> = <call><name>nghttp2_stream_get_parent</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>s_parent</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>nghttp2_priority_spec</name></type> <name>ps</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>id_parent</name></decl>, <decl><type ref="prev"/><name>id_grandpa</name></decl>, <decl><type ref="prev"/><name>w_parent</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ptype</name> <init>= <expr>"AFTER"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>h2_dependency</name></type> <name>dep</name> <init>= <expr><name><name>prio</name>-&gt;<name>dependency</name></name></expr></init></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>id_parent</name> = <call><name>nghttp2_stream_get_stream_id</name><argument_list>(<argument><expr><name>s_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>s_grandpa</name> = <call><name>nghttp2_stream_get_parent</name><argument_list>(<argument><expr><name>s_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>s_grandpa</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>id_grandpa</name> = <call><name>nghttp2_stream_get_stream_id</name><argument_list>(<argument><expr><name>s_grandpa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="block">/* parent of parent does not exist, 
             * only possible if parent == root */</comment>
            <expr_stmt><expr><name>dep</name> = <name>H2_DEPENDANT_AFTER</name></expr>;</expr_stmt>
        }</block></else></if>
        
        <switch>switch <condition>(<expr><name>dep</name></expr>)</condition> <block>{
            <case>case <expr><name>H2_DEPENDANT_INTERLEAVED</name></expr>:
                <comment type="block">/* PUSHed stream is to be interleaved with initiating stream.
                 * It is made a sibling of the initiating stream and gets a
                 * proportional weight [1, MAX_WEIGHT] of the initiaing
                 * stream weight.
                 */</comment>
                <expr_stmt><expr><name>ptype</name> = "INTERLEAVED"</expr>;</expr_stmt>
                <expr_stmt><expr><name>w_parent</name> = <call><name>nghttp2_stream_get_weight</name><argument_list>(<argument><expr><name>s_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>w</name> = <call><name>valid_weight</name><argument_list>(<argument><expr><call><name>w_parent</name> * <argument_list>(<argument><expr>(<name>float</name>)<name><name>prio</name>-&gt;<name>weight</name></name> / <name>NGHTTP2_MAX_WEIGHT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>nghttp2_priority_spec_init</name><argument_list>(<argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr><name>id_grandpa</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
                
            </case><case>case <expr><name>H2_DEPENDANT_BEFORE</name></expr>:
                <comment type="block">/* PUSHed stream os to be sent BEFORE the initiating stream.
                 * It gets the same weight as the initiating stream, replaces
                 * that stream in the dependency tree and has the initiating
                 * stream as child.
                 */</comment>
                <expr_stmt><expr><name>ptype</name> = "BEFORE"</expr>;</expr_stmt>
                <expr_stmt><expr><name>w</name> = <name>w_parent</name> = <call><name>nghttp2_stream_get_weight</name><argument_list>(<argument><expr><name>s_parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>nghttp2_priority_spec_init</name><argument_list>(<argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>w_parent</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>id_grandpa</name> = <call><name>nghttp2_stream_get_stream_id</name><argument_list>(<argument><expr><name>s_grandpa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_session_change_stream_priority</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>id_parent</name></expr></argument>, <argument><expr>&amp;<name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>rv</name> &lt; 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03202</expr></argument>)</argument_list></call>
                                  "h2_stream(%ld-%d): PUSH BEFORE, weight=%d, "
                                  "depends=%d, returned=%d"</expr></argument>,
                                  <argument><expr><name><name>session</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name>id_parent</name></expr></argument>, <argument><expr><name><name>ps</name>.<name>weight</name></name></expr></argument>, <argument><expr><name><name>ps</name>.<name>stream_id</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name>nghttp2_priority_spec_init</name><argument_list>(<argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr><name>id_grandpa</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
                
            </case><case>case <expr><name>H2_DEPENDANT_AFTER</name></expr>:
                <comment type="block">/* The PUSHed stream is to be sent after the initiating stream.
                 * Give if the specified weight and let it depend on the intiating
                 * stream.
                 */</comment>
                <comment type="block">/* fall through, it's the default */</comment>
            </case><default>default:
                <expr_stmt><expr><call><name>nghttp2_priority_spec_init</name><argument_list>(<argument><expr>&amp;<name>ps</name></expr></argument>, <argument><expr><name>id_parent</name></expr></argument>, <argument><expr><call><name>valid_weight</name><argument_list>(<argument><expr><name><name>prio</name>-&gt;<name>weight</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>


        <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_session_change_stream_priority</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr>&amp;<name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr>""<call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03203</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, 
                      <argument><expr>"PUSH %s, weight=%d, depends=%d, returned=%d"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name>ptype</name></expr></argument>, <argument><expr><name><name>ps</name>.<name>weight</name></name></expr></argument>, <argument><expr><name><name>ps</name>.<name>stream_id</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = (<name>rv</name> &lt; 0)? <name>APR_EGENERAL</name> : <name>APR_SUCCESS</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr>(<name>void</name>)<name>session</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>stream</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>prio</name></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<name>valid_weight</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>h2_session_push_enabled</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* iff we can and they can and want */</comment>
    <return>return <expr>(<name><name>session</name>-&gt;<name>remote</name>.<name>accepting</name></name> <comment type="block">/* remote GOAWAY received */</comment>
            &amp;&amp; <call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>H2_CONF_PUSH</name></expr></argument>)</argument_list></call>
            &amp;&amp; <call><name>nghttp2_session_get_remote_settings</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, 
                   <argument><expr><name>NGHTTP2_SETTINGS_ENABLE_PUSH</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_send</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>saved_timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_socket_t</name> *</type><name>socket</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>socket</name> = <call><name>ap_get_conn_socket</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>socket</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_socket_timeout_get</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr>&amp;<name>saved_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_session_send</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>socket</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_socket_timeout_set</name><argument_list>(<argument><expr><name>socket</name></expr></argument>, <argument><expr><name>saved_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>have_written</name></name> = 1</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != 0 &amp;&amp; <name>rv</name> != <name>NGHTTP2_ERR_WOULDBLOCK</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_PROTO_ERROR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    
    <expr_stmt><expr><name><name>session</name>-&gt;<name>unsent_promises</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>session</name>-&gt;<name>unsent_submits</name></name> = 0</expr>;</expr_stmt>
    
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * headers for the stream are ready.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>on_stream_headers</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>,  
                                      <param><decl><type><name>h2_headers</name> *</type><name>headers</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>eos</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"on_headers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>headers</name>-&gt;<name>status</name></name> &lt; 100</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>headers</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>leave</name>;</goto>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>has_response</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>h2_ngheader</name> *</type><name>nh</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><name>status</name> = <call><name>h2_res_create_ngtrailer</name><argument_list>(<argument><expr>&amp;<name>nh</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03072</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"submit %d trailers"</expr></argument>)</argument_list></call></expr></argument>, 
                      <argument><expr>(<name>int</name>)<name><name>nh</name>-&gt;<name>nvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_submit_trailer</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, 
                                        <argument><expr><name><name>nh</name>-&gt;<name>nv</name></name></expr></argument>, <argument><expr><name><name>nh</name>-&gt;<name>nvlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10024</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid trailers"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <goto>goto <name>leave</name>;</goto>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>nghttp2_data_provider</name></type> <name>provider</name></decl>, *<decl><type ref="prev"/><name>pprovider</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>h2_ngheader</name> *</type><name>ngh</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name></decl>;</decl_stmt>
        
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03073</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"submit response %d, REMOTE_WINDOW_SIZE=%u"</expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name><name>headers</name>-&gt;<name>status</name></name></expr></argument>,
                      <argument><expr>(<name>unsigned</name> <name>int</name>)<call><name>nghttp2_session_get_stream_remote_window_size</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <if>if <condition>(<expr>!<name>eos</name> || <name>len</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>provider</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>provider</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>provider</name>.<name>source</name>.<name>fd</name></name> = <name><name>stream</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>provider</name>.<name>read_callback</name></name> = <name>stream_data_cb</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pprovider</name> = &amp;<name>provider</name></expr>;</expr_stmt>
        }</block></then></if>
        
        <comment type="block">/* If this stream is not a pushed one itself,
         * and HTTP/2 server push is enabled here,
         * and the response HTTP status is not sth &gt;= 400,
         * and the remote side has pushing enabled,
         * -&gt; find and perform any pushes on this stream
         *    *before* we submit the stream response itself.
         *    This helps clients avoid opening new streams on Link
         *    headers that get pushed right afterwards.
         * 
         * *) the response code is relevant, as we do not want to 
         *    make pushes on 401 or 403 codes and friends. 
         *    And if we see a 304, we do not push either
         *    as the client, having this resource in its cache, might
         *    also have the pushed ones as well.
         */</comment>
        <if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>initiated_on</name></name>
            &amp;&amp; !<name><name>stream</name>-&gt;<name>has_response</name></name>
            &amp;&amp; <name><name>stream</name>-&gt;<name>request</name></name> &amp;&amp; <name><name>stream</name>-&gt;<name>request</name>-&gt;<name>method</name></name>
            &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr>"GET"</expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>request</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call>
            &amp;&amp; (<name><name>headers</name>-&gt;<name>status</name></name> &lt; 400)
            &amp;&amp; (<name><name>headers</name>-&gt;<name>status</name></name> != 304)
            &amp;&amp; <call><name>h2_session_push_enabled</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            
            <expr_stmt><expr><call><name>h2_stream_submit_pushes</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>pref_priority</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>stream</name>-&gt;<name>pref_priority</name></name> = <call><name>h2_stream_get_priority</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>h2_session_set_prio</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pref_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>note</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>headers</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>H2_FILTER_DEBUG_NOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>note</name> &amp;&amp; !<call><name>strcmp</name><argument_list>(<argument><expr>"on"</expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int32_t</name></type> <name>connFlowIn</name></decl>, <decl><type ref="prev"/><name>connFlowOut</name></decl>;</decl_stmt>

            <expr_stmt><expr><name>connFlowIn</name> = <call><name>nghttp2_session_get_effective_local_window_size</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <expr_stmt><expr><name>connFlowOut</name> = <call><name>nghttp2_session_get_remote_window_size</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>headers</name> = <call><name>h2_headers_copy</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>headers</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"conn-flow-in"</expr></argument>, 
                           <argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>connFlowIn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>headers</name>-&gt;<name>headers</name></name></expr></argument>, <argument><expr>"conn-flow-out"</expr></argument>, 
                           <argument><expr><call><name>apr_itoa</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>connFlowOut</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        
        <if>if <condition>(<expr><name><name>headers</name>-&gt;<name>status</name></name> == 103 
            &amp;&amp; !<call><name>h2_config_geti</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>config</name></name></expr></argument>, <argument><expr><name>H2_CONF_EARLY_HINTS</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* suppress sending this to the client, it might have triggered 
             * pushes and served its purpose nevertheless */</comment>
            <expr_stmt><expr><name>rv</name> = 0</expr>;</expr_stmt>
            <goto>goto <name>leave</name>;</goto>
        }</block></then></if>
        
        <expr_stmt><expr><name>status</name> = <call><name>h2_res_create_ngheader</name><argument_list>(<argument><expr>&amp;<name>ngh</name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_submit_response</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>,
                                         <argument><expr><name><name>ngh</name>-&gt;<name>nv</name></name></expr></argument>, <argument><expr><name><name>ngh</name>-&gt;<name>nvlen</name></name></expr></argument>, <argument><expr><name>pprovider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stream</name>-&gt;<name>has_response</name></name> = <call><name>h2_headers_are_response</name><argument_list>(<argument><expr><name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>session</name>-&gt;<name>have_written</name></name> = 1</expr>;</expr_stmt>
            
            <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>initiated_on</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr>++<name><name>session</name>-&gt;<name>pushes_submitted</name></name></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr>++<name><name>session</name>-&gt;<name>responses_submitted</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>10025</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"invalid response"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NGHTTP2_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if></else></if>
    
<label><name>leave</name>:</label>
    <if>if <condition>(<expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_PROTO_ERROR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02940</expr></argument>)</argument_list></call> "submit_response: %s"</expr></argument>, 
                      <argument><expr><call><name>nghttp2_strerror</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <expr_stmt><expr>++<name><name>session</name>-&gt;<name>unsent_submits</name></name></expr>;</expr_stmt>
    
    <comment type="block">/* Unsent push promises are written immediately, as nghttp2
     * 1.5.0 realizes internal stream data structures only on 
     * send and we might need them for other submits. 
     * Also, to conserve memory, we send at least every 10 submits
     * so that nghttp2 does not buffer all outbound items too 
     * long.
     */</comment>
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name> 
        &amp;&amp; (<name><name>session</name>-&gt;<name>unsent_promises</name></name> || <name><name>session</name>-&gt;<name>unsent_submits</name></name> &gt; 10)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>h2_session_send</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * A stream was resumed as new response/output data arrived.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>on_stream_resume</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_EAGAIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_headers</name> *</type><name>headers</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"on_resume"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
<label><name>send_headers</name>:</label>
    <expr_stmt><expr><name>headers</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>h2_stream_out_prepare</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr>&amp;<name>eos</name></expr></argument>, <argument><expr>&amp;<name>headers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"prepared len=%ld, eos=%d"</expr></argument>)</argument_list></call></expr></argument>, 
                  <argument><expr>(<name>long</name>)<name>len</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>headers</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>on_stream_headers</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>eos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> || <name><name>stream</name>-&gt;<name>rst_error</name></name></expr>)</condition><then> <block>{
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
        <goto>goto <name>send_headers</name>;</goto>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
        <comment type="block">/* we have DATA to send */</comment>
        <if>if <condition>(<expr>!<name><name>stream</name>-&gt;<name>has_response</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* but no response */</comment>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                          <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03466</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, 
                          <argument><expr>"no response, RST_STREAM"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_ERR_PROTOCOL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
        }</block></then></if> 
        <expr_stmt><expr><name>rv</name> = <call><name>nghttp2_session_resume_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>session</name>-&gt;<name>have_written</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><call><name>nghttp2_is_fatal</name><argument_list>(<argument><expr><name>rv</name></expr></argument>)</argument_list></call>?
                      <name>APLOG_ERR</name> : <name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,  
                      <argument><expr><call><name>H2_STRM_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02936</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr>"resumed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_in_flush</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
    
    <while>while <condition>(<expr>(<name>id</name> = <call><name>h2_iq_shift</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>in_process</name></name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
        <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name> <init>= <expr><call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>!<name><name>stream</name>-&gt;<name>scheduled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>h2_stream_prep_processing</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>h2_mplx_process</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>stream_pri_cmp</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name>h2_stream_rst</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>H2_ERR_INTERNAL_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></while>

    <while>while <condition>(<expr>(<name>id</name> = <call><name>h2_iq_shift</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>in_pending</name></name></expr></argument>)</argument_list></call>) &gt; 0</expr>)</condition> <block>{
        <decl_stmt><decl><type><name>h2_stream</name> *</type><name>stream</name> <init>= <expr><call><name>h2_session_stream_get</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>stream</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>h2_stream_flush_input</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_read</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>readlen</name></decl></param>, <param><decl><type><name>int</name></type> <name>block</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>, <decl><type ref="prev"/><name>rstatus</name> <init>= <expr><name>APR_EAGAIN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>read_start</name> <init>= <expr><name><name>session</name>-&gt;<name>io</name>.<name>bytes_read</name></name></expr></init></decl>;</decl_stmt>
    
    <while>while <condition>(<expr>1</expr>)</condition> <block>{
        <comment type="block">/* H2_IN filter handles all incoming data against the session.
         * We just pull at the filter chain to make it happen */</comment>
        <expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>,
                                <argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>, <argument><expr><name>AP_MODE_READBYTES</name></expr></argument>,
                                <argument><expr><name>block</name>? <name>APR_BLOCK_READ</name> : <name>APR_NONBLOCK_READ</name></expr></argument>,
                                <argument><expr><call><name>H2MAX</name><argument_list>(<argument><expr><name>APR_BUCKET_BUFF_SIZE</name></expr></argument>, <argument><expr><name>readlen</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* get rid of any possible data we do not expect to get */</comment>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
            <case>case <expr><name>APR_SUCCESS</name></expr>:
                <comment type="block">/* successful read, reset our idle timers */</comment>
                <expr_stmt><expr><name>rstatus</name> = <name>APR_SUCCESS</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>block</name></expr>)</condition><then> <block>{
                    <comment type="block">/* successful blocked read, try unblocked to
                     * get more. */</comment>
                    <expr_stmt><expr><name>block</name> = 0</expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
            </case><case>case <expr><name>APR_EAGAIN</name></expr>:
                <return>return <expr><name>rstatus</name></expr>;</return>
            </case><case>case <expr><name>APR_TIMEUP</name></expr>:
                <return>return <expr><name>status</name></expr>;</return>
            </case><default>default:
                <if>if <condition>(<expr><name><name>session</name>-&gt;<name>io</name>.<name>bytes_read</name></name> == <name>read_start</name></expr>)</condition><then> <block>{
                    <comment type="block">/* first attempt failed */</comment>
                    <if>if <condition>(<expr><call><name>APR_STATUS_IS_ETIMEDOUT</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                        || <call><name>APR_STATUS_IS_ECONNABORTED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                        || <call><name>APR_STATUS_IS_ECONNRESET</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                        || <call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                        || <call><name>APR_STATUS_IS_EBADF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <comment type="block">/* common status for a client that has left */</comment>
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"input gone"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <comment type="block">/* uncommon status, log on INFO so that we see this */</comment>
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02950</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                                      <argument><expr>"error reading, terminating"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <return>return <expr><name>status</name></expr>;</return>
                }</block></then></if>
                <comment type="block">/* subsequent failure after success(es), return initial
                 * status. */</comment>
                <return>return <expr><name>rstatus</name></expr>;</return>
        </default>}</block></switch>
        <if>if <condition>(<expr>(<name><name>session</name>-&gt;<name>io</name>.<name>bytes_read</name></name> - <name>read_start</name>) &gt; <name>readlen</name></expr>)</condition><then> <block>{
            <comment type="block">/* read enough in one go, give write a chance */</comment>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                          <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"read enough, returning"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></while>
    <return>return <expr><name>rstatus</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>h2_session_read</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>block</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>session_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>max_stream_mem</name></name>
                                       * <call><name>H2MAX</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>open_streams</name></name></expr></argument>)</argument_list></call></expr></argument>, 
                                       <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>h2_session_in_flush</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>StateNames</name><index>[]</index></name> <init>= <expr><block>{
    <expr>"INIT"</expr>,      <comment type="block">/* H2_SESSION_ST_INIT */</comment>
    <expr>"DONE"</expr>,      <comment type="block">/* H2_SESSION_ST_DONE */</comment>
    <expr>"IDLE"</expr>,      <comment type="block">/* H2_SESSION_ST_IDLE */</comment>
    <expr>"BUSY"</expr>,      <comment type="block">/* H2_SESSION_ST_BUSY */</comment>
    <expr>"WAIT"</expr>,      <comment type="block">/* H2_SESSION_ST_WAIT */</comment>
    <expr>"CLEANUP"</expr>,   <comment type="block">/* H2_SESSION_ST_CLEANUP */</comment>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> *</type><name>h2_session_state_str</name><parameter_list>(<param><decl><type><name>h2_session_state</name></type> <name>state</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>state</name> &gt;= (<sizeof>sizeof<argument_list>(<argument><expr><name>StateNames</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name><name>StateNames</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></sizeof>)</expr>)</condition><then> <block>{
        <return>return <expr>"unknown"</expr>;</return>
    }</block></then></if>
    <return>return <expr><name><name>StateNames</name><index>[<expr><name>state</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>update_child_status</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Assume that we also change code/msg when something really happened and
     * avoid updating the scoreboard in between */</comment>
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>last_status_code</name></name> != <name>status</name> 
        || <name><name>session</name>-&gt;<name>last_status_msg</name></name> != <name>msg</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_snprintf</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>status</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>session</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                     <argument><expr>"%s, streams: %d/%d/%d/%d/%d (open/recv/resp/push/rst)"</expr></argument>, 
                     <argument><expr><name>msg</name>? <name>msg</name> : "-"</expr></argument>,
                     <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>open_streams</name></name></expr></argument>, 
                     <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>remote</name>.<name>emitted_count</name></name></expr></argument>,
                     <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>responses_submitted</name></name></expr></argument>,
                     <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>pushes_submitted</name></name></expr></argument>,
                     <argument><expr>(<name>int</name>)<name><name>session</name>-&gt;<name>pushes_reset</name></name> + <name><name>session</name>-&gt;<name>streams_reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_update_child_status_descr</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transit</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>action</name></decl></param>, <param><decl><type><name>h2_session_state</name></type> <name>nstate</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name> != <name>nstate</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>loglvl</name> <init>= <expr><name>APLOG_DEBUG</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>(<name><name>session</name>-&gt;<name>state</name></name> == <name>H2_SESSION_ST_BUSY</name> &amp;&amp; <name>nstate</name> == <name>H2_SESSION_ST_WAIT</name>)
            || (<name><name>session</name>-&gt;<name>state</name></name> == <name>H2_SESSION_ST_WAIT</name> &amp;&amp; <name>nstate</name> == <name>H2_SESSION_ST_BUSY</name>)</expr>)</condition><then><block>{
            <expr_stmt><expr><name>loglvl</name> = <name>APLOG_TRACE1</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>loglvl</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03078</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"transit [%s] -- %s --&gt; [%s]"</expr></argument>)</argument_list></call></expr></argument>, 
                      <argument><expr><call><name>h2_session_state_str</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>action</name></expr></argument>, 
                      <argument><expr><call><name>h2_session_state_str</name><argument_list>(<argument><expr><name>nstate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>session</name>-&gt;<name>state</name></name> = <name>nstate</name></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
            <case>case <expr><name>H2_SESSION_ST_IDLE</name></expr>:
                <expr_stmt><expr><call><name>update_child_status</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>(<name><name>session</name>-&gt;<name>open_streams</name></name> == 0? 
                                              <name>SERVER_BUSY_KEEPALIVE</name>
                                              : <name>SERVER_BUSY_READ</name>)</expr></argument>, <argument><expr>"idle"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><case>case <expr><name>H2_SESSION_ST_DONE</name></expr>:
                <expr_stmt><expr><call><name>update_child_status</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>SERVER_CLOSING</name></expr></argument>, <argument><expr>"done"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </case><default>default:
                <comment type="block">/* nop */</comment>
                <break>break;</break>
        </default>}</block></switch>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_init</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_INIT</name></expr>:
            <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"init"</expr></argument>, <argument><expr><name>H2_SESSION_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <comment type="block">/* nop */</comment>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_local_goaway</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>cleanup_unprocessed_streams</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>remote</name>.<name>shutdown</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>update_child_status</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>SERVER_CLOSING</name></expr></argument>, <argument><expr>"local goaway"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"local goaway"</expr></argument>, <argument><expr><name>H2_SESSION_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_remote_goaway</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>remote</name>.<name>shutdown</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>error</name></name> = <name>arg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>accepting</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>shutdown</name></name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cleanup_unprocessed_streams</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>update_child_status</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>SERVER_CLOSING</name></expr></argument>, <argument><expr>"remote goaway"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"remote goaway"</expr></argument>, <argument><expr><name>H2_SESSION_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_conn_error</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_INIT</name></expr>:
        </case><case>case <expr><name>H2_SESSION_ST_DONE</name></expr>:
            <comment type="block">/* just leave */</comment>
            <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"conn error"</expr></argument>, <argument><expr><name>H2_SESSION_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        
        </case><default>default:
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                          <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03401</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                          <argument><expr>"conn error -&gt; shutdown"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_proto_error</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>local</name>.<name>shutdown</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03402</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                      <argument><expr>"proto error -&gt; shutdown"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_conn_timeout</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>H2_SESSION_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>local</name>.<name>shutdown</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_no_io</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_BUSY</name></expr>:
            <comment type="block">/* Nothing to READ, nothing to WRITE on the master connection.
             * Possible causes:
             * - we wait for the client to send us sth
             * - we wait for started tasks to produce output
             * - we have finished all streams and the client has sent GO_AWAY
             */</comment>
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"NO_IO event, %d streams open"</expr></argument>)</argument_list></call></expr></argument>, 
                          <argument><expr><name><name>session</name>-&gt;<name>open_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>session</name>-&gt;<name>open_streams</name></name> &gt; 0</expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>h2_mplx_awaits_data</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="block">/* waiting for at least one stream to produce data */</comment>
                    <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io"</expr></argument>, <argument><expr><name>H2_SESSION_ST_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <comment type="block">/* we have streams open, and all are submitted and none
                     * is suspended. The only thing keeping us from WRITEing
                     * more must be the flow control.
                     * This means we only wait for WINDOW_UPDATE from the 
                     * client and can block on READ. */</comment>
                    <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io (flow wait)"</expr></argument>, <argument><expr><name>H2_SESSION_ST_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>idle_until</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call> + <name><name>session</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>keep_sync_until</name></name> = <name><name>session</name>-&gt;<name>idle_until</name></name></expr>;</expr_stmt>
                    <comment type="block">/* Make sure we have flushed all previously written output
                     * so that the client will react. */</comment>
                    <if>if <condition>(<expr><call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    }</block></then></if>
                }</block></else></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>session</name>-&gt;<name>local</name>.<name>accepting</name></name></expr>)</condition><then> <block>{
                <comment type="block">/* When we have no streams, but accept new, switch to idle */</comment>
                <decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io (keepalive)"</expr></argument>, <argument><expr><name>H2_SESSION_ST_IDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>session</name>-&gt;<name>idle_until</name></name> = (<name><name>session</name>-&gt;<name>remote</name>.<name>emitted_count</name></name>? 
                                       <name><name>session</name>-&gt;<name>s</name>-&gt;<name>keep_alive_timeout</name></name> : 
                                       <name><name>session</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name>) + <name>now</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>session</name>-&gt;<name>keep_sync_until</name></name> = <name>now</name> + <call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <comment type="block">/* We are no longer accepting new streams and there are
                 * none left. Time to leave. */</comment>
                <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no io"</expr></argument>, <argument><expr><name>H2_SESSION_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if></else></if>
            <break>break;</break>
        </case><default>default:
            <comment type="block">/* nop */</comment>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_data_read</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_IDLE</name></expr>:
        </case><case>case <expr><name>H2_SESSION_ST_WAIT</name></expr>:
            <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"data read"</expr></argument>, <argument><expr><name>H2_SESSION_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <comment type="block">/* nop */</comment>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_ngh2_done</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_DONE</name></expr>:
            <comment type="block">/* nop */</comment>
            <break>break;</break>
        </case><default>default:
            <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"nghttp2 done"</expr></argument>, <argument><expr><name>H2_SESSION_ST_DONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_mpm_stopping</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_DONE</name></expr>:
            <comment type="block">/* nop */</comment>
            <break>break;</break>
        </case><default>default:
            <expr_stmt><expr><call><name>h2_session_shutdown_notice</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>h2_session_ev_pre_close</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_stream_open</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>h2_iq_append</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>in_process</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_IDLE</name></expr>:
            <if>if <condition>(<expr><name><name>session</name>-&gt;<name>open_streams</name></name> == 1</expr>)</condition><then> <block>{
                <comment type="block">/* enter timeout, since we have a stream again */</comment>
                <expr_stmt><expr><name><name>session</name>-&gt;<name>idle_until</name></name> = (<name><name>session</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name> + <call><name>apr_time_now</name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        </case><default>default:
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ev_stream_closed</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    
    <if>if <condition>(<expr><call><name>H2_STREAM_CLIENT_INITIATED</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call>
        &amp;&amp; (<name><name>stream</name>-&gt;<name>id</name></name> &gt; <name><name>session</name>-&gt;<name>local</name>.<name>completed_max</name></name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>completed_max</name></name> = <name><name>stream</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_ST_IDLE</name></expr>:
            <if>if <condition>(<expr><name><name>session</name>-&gt;<name>open_streams</name></name> == 0</expr>)</condition><then> <block>{
                <comment type="block">/* enter keepalive timeout, since we no longer have streams */</comment>
                <expr_stmt><expr><name><name>session</name>-&gt;<name>idle_until</name></name> = (<name><name>session</name>-&gt;<name>s</name>-&gt;<name>keep_alive_timeout</name></name>
                                       + <call><name>apr_time_now</name><argument_list>()</argument_list></call>)</expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        </case><default>default:
            <break>break;</break>
    </default>}</block></switch>
    
    <comment type="block">/* The stream might have data in the buffers of the main connection.
     * We can only free the allocated resources once all had been written.
     * Send a special buckets on the connection that gets destroyed when
     * all preceding data has been handled. On its destruction, it is safe
     * to purge all resources of the stream. */</comment>
    <expr_stmt><expr><name>b</name> = <call><name>h2_bucket_eos_create</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>h2_conn_io_pass</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>bbtmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_stream_state_enter</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* stream entered a new state */</comment>
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                  <argument><expr><call><name>H2_STRM_MSG</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr>"entered state"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name><name>stream</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SS_IDLE</name></expr>: <comment type="block">/* stream was created */</comment>
            <expr_stmt><expr>++<name><name>session</name>-&gt;<name>open_streams</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>H2_STREAM_CLIENT_INITIATED</name><argument_list>(<argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr>++<name><name>session</name>-&gt;<name>remote</name>.<name>emitted_count</name></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>id</name></name> &gt; <name><name>session</name>-&gt;<name>remote</name>.<name>emitted_max</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>emitted_max</name></name> = <name><name>stream</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>local</name>.<name>accepted_max</name></name> = <name><name>stream</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name><name>stream</name>-&gt;<name>id</name></name> &gt; <name><name>session</name>-&gt;<name>local</name>.<name>emitted_max</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>++<name><name>session</name>-&gt;<name>local</name>.<name>emitted_count</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>remote</name>.<name>emitted_max</name></name> = <name><name>stream</name>-&gt;<name>id</name></name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if>
            <break>break;</break>
        </case><case>case <expr><name>H2_SS_OPEN</name></expr>: <comment type="block">/* stream has request headers */</comment>
        </case><case>case <expr><name>H2_SS_RSVD_L</name></expr>: <comment type="block">/* stream has request headers */</comment>
            <expr_stmt><expr><call><name>ev_stream_open</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SS_CLOSED_L</name></expr>: <comment type="block">/* stream output was closed */</comment>
            <break>break;</break>
        </case><case>case <expr><name>H2_SS_CLOSED_R</name></expr>: <comment type="block">/* stream input was closed */</comment>
            <break>break;</break>
        </case><case>case <expr><name>H2_SS_CLOSED</name></expr>: <comment type="block">/* stream in+out were closed */</comment>
            <expr_stmt><expr>--<name><name>session</name>-&gt;<name>open_streams</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ev_stream_closed</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SS_CLEANUP</name></expr>:
            <expr_stmt><expr><call><name>h2_mplx_stream_cleanup</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_stream_event</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, 
                                  <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ev</name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SEV_IN_DATA_PENDING</name></expr>:
            <expr_stmt><expr><call><name>h2_iq_append</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>in_pending</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <comment type="block">/* NOP */</comment>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on_stream_state_event</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>h2_stream</name> *</type><name>stream</name></decl></param>, 
                                  <param><decl><type><name>h2_stream_event_t</name></type> <name>ev</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>h2_session</name> *</type><name>session</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>ev</name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SEV_CANCELLED</name></expr>:
            <if>if <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name> != <name>H2_SESSION_ST_DONE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>nghttp2_submit_rst_stream</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>, <argument><expr><name>NGHTTP2_FLAG_NONE</name></expr></argument>, 
                                          <argument><expr><name><name>stream</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>stream</name>-&gt;<name>rst_error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
        </case><default>default:
            <comment type="block">/* NOP */</comment>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dispatch_event</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>h2_session_event_t</name></type> <name>ev</name></decl></param>, 
                      <param><decl><type><name>int</name></type> <name>arg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
    <switch>switch <condition>(<expr><name>ev</name></expr>)</condition> <block>{
        <case>case <expr><name>H2_SESSION_EV_INIT</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_init</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>            
        </case><case>case <expr><name>H2_SESSION_EV_LOCAL_GOAWAY</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_local_goaway</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_REMOTE_GOAWAY</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_remote_goaway</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_CONN_ERROR</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_conn_error</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_PROTO_ERROR</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_proto_error</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_CONN_TIMEOUT</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_conn_timeout</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_NO_IO</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_no_io</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_DATA_READ</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_data_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_NGH2_DONE</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_ngh2_done</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_MPM_STOPPING</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_mpm_stopping</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><case>case <expr><name>H2_SESSION_EV_PRE_CLOSE</name></expr>:
            <expr_stmt><expr><call><name>h2_session_ev_pre_close</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </case><default>default:
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                          <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"unknown event %d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </default>}</block></switch>
}</block></function>

<comment type="block">/* trigger window updates, stream resumes and submits */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dispatch_master</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>status</name> = <call><name>h2_mplx_dispatch_master_events</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, 
                                            <argument><expr><name>on_stream_resume</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"no master event available"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"dispatch error"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, 
                       <argument><expr><name>H2_ERR_INTERNAL_ERROR</name></expr></argument>, <argument><expr>"dispatch error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MAX_WAIT_MICROS</name> <init>= <expr>200 * 1000</expr></init></decl>;</decl_stmt>

<function><type><name>apr_status_t</name></type> <name>h2_session_process</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>async</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>session</name>-&gt;<name>c</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>, <decl><type ref="prev"/><name>mpm_state</name></decl>, <decl><type ref="prev"/><name>trace</name> <init>= <expr><call><name>APLOGctrace3</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"process start, async=%d"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
                  
    <while>while <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name> != <name>H2_SESSION_ST_DONE</name></expr>)</condition> <block>{
        <expr_stmt><expr><name><name>session</name>-&gt;<name>have_read</name></name> = <name><name>session</name>-&gt;<name>have_written</name></name> = 0</expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>session</name>-&gt;<name>local</name>.<name>accepting</name></name> 
            &amp;&amp; !<call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MPM_STATE</name></expr></argument>, <argument><expr>&amp;<name>mpm_state</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mpm_state</name> == <name>AP_MPMQ_STOPPING</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_MPM_STOPPING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        
        <expr_stmt><expr><name><name>session</name>-&gt;<name>status</name><index>[<expr>0</expr>]</index></name> = '\0'</expr>;</expr_stmt>
        
        <switch>switch <condition>(<expr><name><name>session</name>-&gt;<name>state</name></name></expr>)</condition> <block>{
            <case>case <expr><name>H2_SESSION_ST_INIT</name></expr>:
                <expr_stmt><expr><call><name>ap_update_child_status_from_conn</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<call><name>h2_is_acceptable_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>update_child_status</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, 
                                        <argument><expr>"inadequate security"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                        <argument><expr><name>NGHTTP2_INADEQUATE_SECURITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> 
                <else>else <block>{
                    <expr_stmt><expr><call><name>update_child_status</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr>"init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status</name> = <call><name>h2_session_start</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>&amp;<name>rv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, 
                                  <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03079</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                                  <argument><expr>"started on %s:%d"</expr></argument>)</argument_list></call></expr></argument>, 
                                  <argument><expr><name><name>session</name>-&gt;<name>s</name>-&gt;<name>server_hostname</name></name></expr></argument>,
                                  <argument><expr><name><name>c</name>-&gt;<name>local_addr</name>-&gt;<name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                       <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_INIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
                
            </case><case>case <expr><name>H2_SESSION_ST_IDLE</name></expr>:
                <comment type="block">/* We trust our connection into the default timeout/keepalive
                 * handling of the core filters/mpm iff:
                 * - keep_sync_until is not set
                 * - we have an async mpm
                 * - we have no open streams to process
                 * - we are not sitting on a Upgrade: request
                 * - we already have seen at least one request
                 */</comment>
                <if>if <condition>(<expr>!<name><name>session</name>-&gt;<name>keep_sync_until</name></name> &amp;&amp; <name>async</name> &amp;&amp; !<name><name>session</name>-&gt;<name>open_streams</name></name>
                    &amp;&amp; !<name><name>session</name>-&gt;<name>r</name></name> &amp;&amp; <name><name>session</name>-&gt;<name>remote</name>.<name>emitted_count</name></name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                      <argument><expr>"nonblock read, %d streams open"</expr></argument>)</argument_list></call></expr></argument>, 
                                      <argument><expr><name><name>session</name>-&gt;<name>open_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status</name> = <call><name>h2_session_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    
                    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>session</name>-&gt;<name>have_read</name></name> = 1</expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_DATA_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_EAGAIN</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> 
                        || <call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name><name>session</name>-&gt;<name>idle_until</name></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                           <argument><expr><name>H2_SESSION_EV_CONN_TIMEOUT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <expr_stmt><expr><name>status</name> = <name>APR_EAGAIN</name></expr>;</expr_stmt>
                            <goto>goto <name>out</name>;</goto>
                        }</block></else></if>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03403</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                                      <argument><expr>"no data, error"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                       <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if>
                }</block></then>
                <else>else <block>{
                    <comment type="block">/* make certain, we send everything before we idle */</comment>
                    <expr_stmt><expr><call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                      <argument><expr>"sync, stutter 1-sec, %d streams open"</expr></argument>)</argument_list></call></expr></argument>, 
                                      <argument><expr><name><name>session</name>-&gt;<name>open_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <comment type="block">/* We wait in smaller increments, using a 1 second timeout.
                     * That gives us the chance to check for MPMQ_STOPPING often. 
                     */</comment>
                    <expr_stmt><expr><name>status</name> = <call><name>h2_mplx_idle</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>status</name> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_DATA_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, 
                                       <argument><expr><name>H2_ERR_ENHANCE_YOUR_CALM</name></expr></argument>, <argument><expr>"less is more"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if></else></if>
                    <expr_stmt><expr><call><name>h2_filter_cin_timeout_set</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>cin</name></name></expr></argument>, <argument><expr><call><name>apr_time_from_sec</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status</name> = <call><name>h2_session_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>session</name>-&gt;<name>have_read</name></name> = 1</expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_DATA_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name>status</name> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
                        <comment type="block">/* nothing to read */</comment>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>apr_time_t</name></type> <name>now</name> <init>= <expr><call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>now</name> &gt; <name><name>session</name>-&gt;<name>keep_sync_until</name></name></expr>)</condition><then> <block>{
                            <comment type="block">/* if we are on an async mpm, now is the time that
                             * we may dare to pass control to it. */</comment>
                            <expr_stmt><expr><name><name>session</name>-&gt;<name>keep_sync_until</name></name> = 0</expr>;</expr_stmt>
                        }</block></then></if>
                        <if>if <condition>(<expr><name>now</name> &gt; <name><name>session</name>-&gt;<name>idle_until</name></name></expr>)</condition><then> <block>{
                            <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                              <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                              <argument><expr>"keepalive timeout"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                            <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                           <argument><expr><name>H2_SESSION_EV_CONN_TIMEOUT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"timeout"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{                        
                            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                          <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                          <argument><expr>"keepalive, %f sec left"</expr></argument>)</argument_list></call></expr></argument>,
                                          <argument><expr>(<name><name>session</name>-&gt;<name>idle_until</name></name> - <name>now</name>) / 1000000.0f</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if></else></if>
                        <comment type="block">/* continue reading handling */</comment>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ECONNABORTED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                             || <call><name>APR_STATUS_IS_ECONNRESET</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                             || <call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
                             || <call><name>APR_STATUS_IS_EBADF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"input gone"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, 
                                      <argument><expr>"(1 sec timeout) read failed"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"error"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if></else></if></else></if>
                }</block></else></if>
                <break>break;</break>
                
            </case><case>case <expr><name>H2_SESSION_ST_BUSY</name></expr>:
                <if>if <condition>(<expr><call><name>nghttp2_session_want_read</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>h2_filter_cin_timeout_set</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>cin</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>s</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status</name> = <call><name>h2_session_read</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>session</name>-&gt;<name>have_read</name></name> = 1</expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_DATA_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><name>status</name> == <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
                        <comment type="block">/* nothing to read */</comment>
                    }</block></then>
                    <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_TIMEOUT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if></else></if></else></if>
                }</block></then></if>

                <expr_stmt><expr><name>status</name> = <call><name>dispatch_master</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name> &amp;&amp; <name>status</name> != <name>APR_EAGAIN</name></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                
                <if>if <condition>(<expr><call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_update_child_status</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>c</name>-&gt;<name>sbh</name></name></expr></argument>, <argument><expr><name>SERVER_BUSY_WRITE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>status</name> = <call><name>h2_session_send</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>status</name> = <call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, 
                                       <argument><expr><name>H2_ERR_INTERNAL_ERROR</name></expr></argument>, <argument><expr>"writing"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></then></if>
                
                <if>if <condition>(<expr><name><name>session</name>-&gt;<name>have_read</name></name> || <name><name>session</name>-&gt;<name>have_written</name></name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>session</name>-&gt;<name>wait_us</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>session</name>-&gt;<name>wait_us</name></name> = 0</expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else>else <if>if <condition>(<expr>!<call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_NO_IO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></else></if>
                <break>break;</break>
                
            </case><case>case <expr><name>H2_SESSION_ST_WAIT</name></expr>:
                <if>if <condition>(<expr><name><name>session</name>-&gt;<name>wait_us</name></name> &lt;= 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>wait_us</name></name> = 10</expr>;</expr_stmt>
                    <if>if <condition>(<expr><call><name>h2_conn_io_flush</name><argument_list>(<argument><expr>&amp;<name><name>session</name>-&gt;<name>io</name></name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></then>
                <else>else <block>{
                    <comment type="block">/* repeating, increase timer for graceful backoff */</comment>
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>wait_us</name></name> = <call><name>H2MIN</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>wait_us</name></name>*2</expr></argument>, <argument><expr><name>MAX_WAIT_MICROS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                  <argument><expr>"h2_session: wait for data, %ld micros"</expr></argument>, 
                                  <argument><expr>(<name>long</name>)<name><name>session</name>-&gt;<name>wait_us</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>status</name> = <call><name>h2_mplx_out_trywait</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>wait_us</name></name></expr></argument>, 
                                             <argument><expr><name><name>session</name>-&gt;<name>iowait</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>session</name>-&gt;<name>wait_us</name></name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_DATA_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_TIMEUP</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <comment type="block">/* go back to checking all inputs again */</comment>
                    <expr_stmt><expr><call><name>transit</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"wait cycle"</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>local</name>.<name>shutdown</name></name>? 
                            <name>H2_SESSION_ST_DONE</name> : <name>H2_SESSION_ST_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <if>if <condition>(<expr><call><name>APR_STATUS_IS_ECONNRESET</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> 
                         || <call><name>APR_STATUS_IS_ECONNABORTED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                  <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03404</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                                  <argument><expr>"waiting on conditional"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>h2_session_shutdown</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_ERR_INTERNAL_ERROR</name></expr></argument>, 
                                        <argument><expr>"cond wait error"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if></else></if></else></if>
                <break>break;</break>
                
            </case><default>default:
                <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                              <argument><expr><call><name>H2_SSSN_LOG</name><argument_list>(<argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03080</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>session</name></expr></argument>, 
                              <argument><expr>"unknown state"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_PROTO_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </default>}</block></switch>

        <if>if <condition>(<expr>!<call><name>nghttp2_session_want_read</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call> 
                 &amp;&amp; !<call><name>nghttp2_session_want_write</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>ngh2</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_NGH2_DONE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        }</block></then></if>
        <if>if <condition>(<expr><name><name>session</name>-&gt;<name>reprioritize</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>h2_mplx_reprioritize</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>mplx</name></name></expr></argument>, <argument><expr><name>stream_pri_cmp</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>session</name>-&gt;<name>reprioritize</name></name> = 0</expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    
<label><name>out</name>:</label>
    <if>if <condition>(<expr><name>trace</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>( <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE3</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"process returns"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    }</block></then></if>
    
    <if>if <condition>(<expr>(<name><name>session</name>-&gt;<name>state</name></name> != <name>H2_SESSION_ST_DONE</name>)
        &amp;&amp; (<call><name>APR_STATUS_IS_EOF</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
            || <call><name>APR_STATUS_IS_ECONNRESET</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> 
            || <call><name>APR_STATUS_IS_ECONNABORTED</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_CONN_ERROR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>(<name><name>session</name>-&gt;<name>state</name></name> == <name>H2_SESSION_ST_DONE</name>)? <name>APR_EOF</name> : <name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>h2_session_pre_close</name><parameter_list>(<param><decl><type><name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>int</name></type> <name>async</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE1</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>session</name>-&gt;<name>c</name></name></expr></argument>, 
                  <argument><expr><call><name>H2_SSSN_MSG</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"pre_close"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dispatch_event</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><name>H2_SESSION_EV_PRE_CLOSE</name></expr></argument>, <argument><expr>0</expr></argument>, 
        <argument><expr>(<name><name>session</name>-&gt;<name>state</name></name> == <name>H2_SESSION_ST_IDLE</name>)? "timeout" : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>session_cleanup</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr>"pre_close"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* no one should hold a reference to this session any longer and
         * the h2_ctx was removed from the connection.
         * Take the pool (and thus all subpools etc. down now, instead of
         * during cleanup of main connection pool. */</comment>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>session</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>
</unit>
