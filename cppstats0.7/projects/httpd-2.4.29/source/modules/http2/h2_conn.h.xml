<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_conn.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_conn__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_conn__</name></cpp:macro></cpp:define>

<struct_decl>struct <name>h2_ctx</name>;</struct_decl>
<struct_decl>struct <name>h2_task</name>;</struct_decl>

<comment type="block">/**
 * Setup the connection and our context for HTTP/2 processing
 *
 * @param ctx the http2 context to setup
 * @param c the connection HTTP/2 is starting on
 * @param r the upgrade request that still awaits an answer, optional
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_setup</name><parameter_list>(<param><decl><type>struct <name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Run the HTTP/2 connection in synchronous fashion. 
 * Return when the HTTP/2 session is done
 * and the connection will close or a fatal error occurred.
 *
 * @param ctx the http2 context to run
 * @return APR_SUCCESS when session is done.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_run</name><parameter_list>(<param><decl><type>struct <name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * The connection is about to close. If we have not send a GOAWAY
 * yet, this is the last chance.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_pre_close</name><parameter_list>(<param><decl><type>struct <name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Initialize this child process for h2 connection work,
 * to be called once during child init before multi processing
 * starts.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>


<typedef>typedef <type><enum>enum <block>{
    <decl><name>H2_MPM_UNKNOWN</name></decl>,
    <decl><name>H2_MPM_WORKER</name></decl>,
    <decl><name>H2_MPM_EVENT</name></decl>,
    <decl><name>H2_MPM_PREFORK</name></decl>,
    <decl><name>H2_MPM_MOTORZ</name></decl>,
    <decl><name>H2_MPM_SIMPLE</name></decl>,
    <decl><name>H2_MPM_NETWARE</name></decl>,
    <decl><name>H2_MPM_WINNT</name></decl>,
}</block></enum></type> <name>h2_mpm_type_t</name>;</typedef>

<comment type="block">/* Returns the type of MPM module detected */</comment>
<function_decl><type><name>h2_mpm_type_t</name></type> <name>h2_conn_mpm_type</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>h2_conn_mpm_name</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_mpm_supported</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>conn_rec</name> *</type><name>h2_slave_create</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>master</name></decl></param>, <param><decl><type><name>int</name></type> <name>slave_id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>parent</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_slave_destroy</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_slave_run_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>, <param><decl><type><name>apr_socket_t</name> *</type><name>csd</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_slave_run_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>slave</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_conn__) */</comment>
</unit>
