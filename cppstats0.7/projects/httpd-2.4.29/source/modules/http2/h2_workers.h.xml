<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_workers.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_workers__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_workers__</name></cpp:macro></cpp:define>

<comment type="block">/* Thread pool specific to executing h2_tasks. Has a minimum and maximum 
 * number of workers it creates. Starts with minimum workers and adds
 * some on load, reduces the number again when idle.
 *
 */</comment>
<struct_decl>struct <name>apr_thread_mutex_t</name>;</struct_decl>
<struct_decl>struct <name>apr_thread_cond_t</name>;</struct_decl>
<struct_decl>struct <name>h2_mplx</name>;</struct_decl>
<struct_decl>struct <name>h2_request</name>;</struct_decl>
<struct_decl>struct <name>h2_task</name>;</struct_decl>
<struct_decl>struct <name>h2_fifo</name>;</struct_decl>

<struct_decl>struct <name>h2_slot</name>;</struct_decl>

<typedef>typedef <type>struct <name>h2_workers</name></type> <name>h2_workers</name>;</typedef>

<struct>struct <name>h2_workers</name> <block>{
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>next_worker_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>min_workers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_workers</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_idle_secs</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>aborted</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dynamic</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>apr_threadattr_t</name> *</type><name>thread_attr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nslots</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>h2_slot</name> *</type><name>slots</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>apr_uint32_t</name></type> <name>worker_count</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type>struct <name>h2_slot</name> *</type><name>free</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>h2_slot</name> *</type><name>idle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>h2_slot</name> *</type><name>zombies</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type>struct <name>h2_fifo</name> *</type><name>mplxs</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type>struct <name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/* Create a worker pool with the given minimum and maximum number of
 * threads.
 */</comment>
<function_decl><type><name>h2_workers</name> *</type><name>h2_workers_create</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                              <param><decl><type><name>int</name></type> <name>min_size</name></decl></param>, <param><decl><type><name>int</name></type> <name>max_size</name></decl></param>, <param><decl><type><name>int</name></type> <name>idle_secs</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Registers a h2_mplx for task scheduling. If this h2_mplx runs
 * out of tasks, it will be automatically be unregistered. Should
 * new tasks arrive, it needs to be registered again.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_workers_register</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>, <param><decl><type>struct <name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Remove a h2_mplx from the worker registry.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_workers_unregister</name><parameter_list>(<param><decl><type><name>h2_workers</name> *</type><name>workers</name></decl></param>, <param><decl><type>struct <name>h2_mplx</name> *</type><name>m</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_workers__) */</comment>
</unit>
