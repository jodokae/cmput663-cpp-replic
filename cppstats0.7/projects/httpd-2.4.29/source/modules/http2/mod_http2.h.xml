<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/mod_http2.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__MOD_HTTP2_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MOD_HTTP2_H__</name></cpp:macro></cpp:define>

<comment type="block">/** The http2_var_lookup() optional function retrieves HTTP2 environment
 * variables. */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>char</name> *</expr></argument>, 
                        <argument><expr><name>http2_var_lookup</name></expr></argument>, <argument><expr>(<name>apr_pool_t</name> *, <name>server_rec</name> *,
                                           <name>conn_rec</name> *, <name>request_rec</name> *,  <name>char</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/** An optional function which returns non-zero if the given connection
 * or its master connection is using HTTP/2. */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>int</name></expr></argument>, 
                        <argument><expr><name>http2_is_h2</name></expr></argument>, <argument><expr>(<name>conn_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/*******************************************************************************
 * HTTP/2 request engines
 ******************************************************************************/</comment>
 
<struct_decl>struct <name>apr_thread_cond_t</name>;</struct_decl>

<typedef>typedef <type>struct <name>h2_req_engine</name></type> <name>h2_req_engine</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>http2_output_consumed</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_off_t</name></type> <name>consumed</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * Initialize a h2_req_engine. The structure will be passed in but
 * only the name and master are set. The function should initialize
 * all fields.
 * @param engine the allocated, partially filled structure
 * @param r      the first request to process, or NULL
 */</comment>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>http2_req_engine_init</name><parameter_list>(<param><decl><type><name>h2_req_engine</name> *</type><name>engine</name></decl></param>, 
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl></param>, 
                                           <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>type</name></decl></param>,
                                           <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, 
                                           <param><decl><type><name>apr_size_t</name></type> <name>req_buffer_size</name></decl></param>,
                                           <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                           <param><decl><type><name>http2_output_consumed</name> **</type><name>pconsumed</name></decl></param>,
                                           <param><decl><type><name>void</name> **</type><name>pbaton</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * Push a request to an engine with the specified name for further processing.
 * If no such engine is available, einit is not NULL, einit is called 
 * with a new engine record and the caller is responsible for running the
 * new engine instance.
 * @param engine_type the type of the engine to add the request to
 * @param r           the request to push to an engine for processing
 * @param einit       an optional initialization callback for a new engine 
 *                    of the requested type, should no instance be available.
 *                    By passing a non-NULL callback, the caller is willing
 *                    to init and run a new engine itself.
 * @return APR_SUCCESS iff slave was successfully added to an engine
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, 
                        <argument><expr><name>http2_req_engine_push</name></expr></argument>, <argument><expr>(const <name>char</name> *<name>engine_type</name>, 
                                                <name>request_rec</name> *<name>r</name>,
                                                <name>http2_req_engine_init</name> *<name>einit</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * Get a new request for processing in this engine.
 * @param engine      the engine which is done processing the slave
 * @param block       if call should block waiting for request to come
 * @param capacity    how many parallel requests are acceptable
 * @param pr          the request that needs processing or NULL
 * @return APR_SUCCESS if new request was assigned
 *         APR_EAGAIN  if no new request is available
 *         APR_EOF          if engine may shut down, as no more request will be scheduled
 *         APR_ECONNABORTED if the engine needs to shut down immediately
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, 
                        <argument><expr><name>http2_req_engine_pull</name></expr></argument>, <argument><expr>(<name>h2_req_engine</name> *<name>engine</name>, 
                                                <name>apr_read_type_e</name> <name>block</name>,
                                                <name>int</name> <name>capacity</name>,
                                                <name>request_rec</name> **<name>pr</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, 
                        <argument><expr><name>http2_req_engine_done</name></expr></argument>, <argument><expr>(<name>h2_req_engine</name> *<name>engine</name>, 
                                                <name>conn_rec</name> *<name>rconn</name>,
                                                <name>apr_status_t</name> <name>status</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
