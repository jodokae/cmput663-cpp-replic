<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_conn_io.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_conn_io__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_conn_io__</name></cpp:macro></cpp:define>

<struct_decl>struct <name>h2_config</name>;</struct_decl>
<struct_decl>struct <name>h2_session</name>;</struct_decl>

<comment type="block">/* h2_io is the basic handler of a httpd connection. It keeps two brigades,
 * one for input, one for output and works with the installed connection
 * filters.
 * The read is done via a callback function, so that input can be processed
 * directly without copying.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>output</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>is_tls</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>cooldown_usecs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>warmup_size</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>write_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>last_write</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>bytes_read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>bytes_written</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>buffer_output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>flush_threshold</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>is_flushed</name> : 1</expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>char</name> *</type><name>scratch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>ssize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>slen</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_conn_io</name>;</typedef>

<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_io_init</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, 
                             <param><decl><type><specifier>const</specifier> struct <name>h2_config</name> *</type><name>cfg</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Append data to the buffered output.
 * @param buf the data to append
 * @param length the length of the data to append
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_io_write</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>,
                         <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name></decl></param>,
                         <param><decl><type><name>size_t</name></type> <name>length</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_io_pass</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Pass any buffered data on to the connection output filters.
 * @param io the connection io
 * @param flush if a flush bucket should be appended to any output
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_conn_io_flush</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Check if the buffered amount of data needs flushing.
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_conn_io_needs_flush</name><parameter_list>(<param><decl><type><name>h2_conn_io</name> *</type><name>io</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_conn_io__) */</comment>
</unit>
