<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_headers.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_headers__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_headers__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>

<struct_decl>struct <name>h2_bucket_beam</name>;</struct_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>apr_bucket_type_t</name></type> <name>h2_bucket_type_headers</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H2_BUCKET_IS_HEADERS</name><parameter_list>(<param><type><name>e</name></type></param>)</parameter_list></cpp:macro>     <cpp:value>(e-&gt;type == &amp;h2_bucket_type_headers)</cpp:value></cpp:define>

<function_decl><type><name>apr_bucket</name> *</type> <name>h2_bucket_headers_make</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>, <param><decl><type><name>h2_headers</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl> 

<function_decl><type><name>apr_bucket</name> *</type> <name>h2_bucket_headers_create</name><parameter_list>(<param><decl><type><name>apr_bucket_alloc_t</name> *</type><name>list</name></decl></param>, 
                                       <param><decl><type><name>h2_headers</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
                                       
<function_decl><type><name>h2_headers</name> *</type><name>h2_bucket_headers_get</name><parameter_list>(<param><decl><type><name>apr_bucket</name> *</type><name>b</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_bucket</name> *</type><name>h2_bucket_headers_beam</name><parameter_list>(<param><decl><type>struct <name>h2_bucket_beam</name> *</type><name>beam</name></decl></param>,
                                    <param><decl><type><name>apr_bucket_brigade</name> *</type><name>dest</name></decl></param>,
                                    <param><decl><type><specifier>const</specifier> <name>apr_bucket</name> *</type><name>src</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Create the headers from the given status and headers
 * @param status the headers status
 * @param header the headers of the headers
 * @param notes  the notes carried by the headers
 * @param pool the memory pool to use
 */</comment>
<function_decl><type><name>h2_headers</name> *</type><name>h2_headers_create</name><parameter_list>(<param><decl><type><name>int</name></type> <name>status</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>header</name></decl></param>, 
                              <param><decl><type><name>apr_table_t</name> *</type><name>notes</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Create the headers from the given request_rec.
 * @param r the request record which was processed
 * @param status the headers status
 * @param header the headers of the headers
 * @param pool the memory pool to use
 */</comment>
<function_decl><type><name>h2_headers</name> *</type><name>h2_headers_rcreate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>status</name></decl></param>, 
                                 <param><decl><type><name>apr_table_t</name> *</type><name>header</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Clone the headers into another pool. This will not copy any
 * header strings.
 */</comment>
<function_decl><type><name>h2_headers</name> *</type><name>h2_headers_copy</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>h2_headers</name> *</type><name>h</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Create the headers for the given error.
 * @param stream_id id of the stream to create the headers for
 * @param type the error code
 * @param req the original h2_request
 * @param pool the memory pool to use
 */</comment>
<function_decl><type><name>h2_headers</name> *</type><name>h2_headers_die</name><parameter_list>(<param><decl><type><name>apr_status_t</name></type> <name>type</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> struct <name>h2_request</name> *</type><name>req</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>h2_headers_are_response</name><parameter_list>(<param><decl><type><name>h2_headers</name> *</type><name>headers</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_headers__) */</comment>
</unit>
