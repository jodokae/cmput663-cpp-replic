<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_ctx.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_ctx__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_ctx__</name></cpp:macro></cpp:define>

<struct_decl>struct <name>h2_session</name>;</struct_decl>
<struct_decl>struct <name>h2_task</name>;</struct_decl>
<struct_decl>struct <name>h2_config</name>;</struct_decl>

<comment type="block">/**
 * The h2 module context associated with a connection. 
 *
 * It keeps track of the different types of connections:
 * - those from clients that use HTTP/2 protocol
 * - those from clients that do not use HTTP/2
 * - those created by ourself to perform work on HTTP/2 streams
 */</comment>
<typedef>typedef <type><struct>struct <name>h2_ctx</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>protocol</name></decl>;</decl_stmt>           <comment type="block">/* the protocol negotiated */</comment>
    <decl_stmt><decl><type>struct <name>h2_session</name> *</type><name>session</name></decl>;</decl_stmt>     <comment type="block">/* the session established */</comment>
    <decl_stmt><decl><type>struct <name>h2_task</name> *</type><name>task</name></decl>;</decl_stmt>           <comment type="block">/* the h2_task executing or NULL */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hostname</name></decl>;</decl_stmt>           <comment type="block">/* hostname negotiated via SNI, optional */</comment>
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>             <comment type="block">/* httpd server config selected. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> struct <name>h2_config</name> *</type><name>config</name></decl>;</decl_stmt> <comment type="block">/* effective config in this context */</comment>
}</block></struct></type> <name>h2_ctx</name>;</typedef>

<comment type="block">/**
 * Get (or create) a h2 context record for this connection.
 * @param c the connection to look at
 * @param create != 0 iff missing context shall be created
 * @return h2 context of this connection
 */</comment>
<function_decl><type><name>h2_ctx</name> *</type><name>h2_ctx_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>create</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_ctx_clear</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>h2_ctx</name> *</type><name>h2_ctx_rget</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>h2_ctx</name> *</type><name>h2_ctx_create_for</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type>struct <name>h2_task</name> *</type><name>task</name></decl></param>)</parameter_list>;</function_decl>


<comment type="block">/* Set the h2 protocol established on this connection context or
 * NULL when other protocols are in place.
 */</comment>
<function_decl><type><name>h2_ctx</name> *</type><name>h2_ctx_protocol_set</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proto</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Set the server_rec relevant for this context.
 */</comment>
<function_decl><type><name>h2_ctx</name> *</type><name>h2_ctx_server_set</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>server_rec</name> *</type><name>h2_ctx_server_get</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type>struct <name>h2_session</name> *</type><name>h2_ctx_session_get</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_ctx_session_set</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>, <param><decl><type>struct <name>h2_session</name> *</type><name>session</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the h2 protocol negotiated for this connection, or NULL.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>h2_ctx_protocol_get</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>h2_ctx_is_task</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type>struct <name>h2_task</name> *</type><name>h2_ctx_get_task</name><parameter_list>(<param><decl><type><name>h2_ctx</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type>struct <name>h2_task</name> *</type><name>h2_ctx_cget_task</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type>struct <name>h2_task</name> *</type><name>h2_ctx_rget_task</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_ctx__) */</comment>
</unit>
