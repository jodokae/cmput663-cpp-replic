<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_push.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_push__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_push__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2.h"</cpp:file></cpp:include>

<struct_decl>struct <name>h2_request</name>;</struct_decl>
<struct_decl>struct <name>h2_headers</name>;</struct_decl>
<struct_decl>struct <name>h2_ngheader</name>;</struct_decl>
<struct_decl>struct <name>h2_session</name>;</struct_decl>
<struct_decl>struct <name>h2_stream</name>;</struct_decl>

<typedef>typedef <type><struct>struct <name>h2_push</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> struct <name>h2_request</name> *</type><name>req</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_priority</name> *</type><name>priority</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_push</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
    <decl><name>H2_PUSH_DIGEST_APR_HASH</name></decl>,
    <decl><name>H2_PUSH_DIGEST_SHA256</name></decl>
}</block></enum></type> <name>h2_push_digest_type</name>;</typedef>

<typedef>typedef <type>struct <name>h2_push_diary</name></type> <name>h2_push_diary</name>;</typedef>

<typedef>typedef <function_decl><type><name>void</name></type> <name>h2_push_digest_calc</name><parameter_list>(<param><decl><type><name>h2_push_diary</name> *</type><name>diary</name></decl></param>, <param><decl><type><name>apr_uint64_t</name> *</type><name>phash</name></decl></param>, <param><decl><type><name>h2_push</name> *</type><name>push</name></decl></param>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>h2_push_diary</name> <block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name>  *</type><name>entries</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>NMax</name></decl>;</decl_stmt> <comment type="block">/* Maximum for N, should size change be necessary */</comment>
    <decl_stmt><decl><type><name>int</name></type>         <name>N</name></decl>;</decl_stmt>    <comment type="block">/* Current maximum number of entries, power of 2 */</comment>
    <decl_stmt><decl><type><name>apr_uint64_t</name></type>         <name>mask</name></decl>;</decl_stmt> <comment type="block">/* mask for relevant bits */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>         <name>mask_bits</name></decl>;</decl_stmt> <comment type="block">/* number of relevant bits */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>          *</type><name>authority</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_push_digest_type</name></type>  <name>dtype</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>h2_push_digest_calc</name> *</type><name>dcalc</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/**
 * Determine the list of h2_push'es to send to the client on behalf of
 * the given request/response pair.
 *
 * @param p the pool to use
 * @param req the requst from the client
 * @param res the response from the server
 * @return array of h2_push addresses or NULL
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type><name>h2_push_collect</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, 
                                    <param><decl><type><specifier>const</specifier> struct <name>h2_request</name> *</type><name>req</name></decl></param>, 
                                    <param><decl><type><name>int</name></type> <name>push_policy</name></decl></param>, 
                                    <param><decl><type><specifier>const</specifier> struct <name>h2_headers</name> *</type><name>res</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Create a new push diary for the given maximum number of entries.
 * 
 * @param p the pool to use
 * @param N the max number of entries, rounded up to 2^x
 * @return the created diary, might be NULL of max_entries is 0
 */</comment>
<function_decl><type><name>h2_push_diary</name> *</type><name>h2_push_diary_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>N</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Filters the given pushes against the diary and returns only those pushes
 * that were newly entered in the diary.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type><name>h2_push_diary_update</name><parameter_list>(<param><decl><type>struct <name>h2_session</name> *</type><name>session</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>pushes</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Collect pushes for the given request/response pair, enter them into the
 * diary and return those pushes newly entered.
 */</comment>
<function_decl><type><name>apr_array_header_t</name> *</type><name>h2_push_collect_update</name><parameter_list>(<param><decl><type>struct <name>h2_stream</name> *</type><name>stream</name></decl></param>, 
                                           <param><decl><type><specifier>const</specifier> struct <name>h2_request</name> *</type><name>req</name></decl></param>, 
                                           <param><decl><type><specifier>const</specifier> struct <name>h2_headers</name> *</type><name>res</name></decl></param>)</parameter_list>;</function_decl>
<comment type="block">/**
 * Get a cache digest as described in 
 * https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/
 * from the contents of the push diary.
 * 
 * @param diary the diary to calculdate the digest from
 * @param p the pool to use
 * @param authority the authority to get the data for, use NULL/"*" for all
 * @param pdata on successful return, the binary cache digest
 * @param plen on successful return, the length of the binary data
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_push_diary_digest_get</name><parameter_list>(<param><decl><type><name>h2_push_diary</name> *</type><name>diary</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, 
                                      <param><decl><type><name>int</name></type> <name>maxP</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl></param>, 
                                      <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>pdata</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>plen</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Initialize the push diary by a cache digest as described in 
 * https://datatracker.ietf.org/doc/draft-kazuho-h2-cache-digest/
 * .
 * @param diary the diary to set the digest into
 * @param authority the authority to set the data for
 * @param data the binary cache digest
 * @param len the length of the cache digest
 * @return APR_EINVAL if digest was not successfully parsed
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_push_diary_digest_set</name><parameter_list>(<param><decl><type><name>h2_push_diary</name> *</type><name>diary</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl></param>, 
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_push_diary_digest64_set</name><parameter_list>(<param><decl><type><name>h2_push_diary</name> *</type><name>diary</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl></param>, 
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data64url</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_push__) */</comment>
</unit>
