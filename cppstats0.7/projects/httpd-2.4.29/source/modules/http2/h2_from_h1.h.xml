<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_from_h1.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_from_h1__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_from_h1__</name></cpp:macro></cpp:define>

<comment type="block">/**
 * h2_from_h1 parses a HTTP/1.1 response into
 * - response status
 * - a list of header values
 * - a series of bytes that represent the response body alone, without
 *   any meta data, such as inserted by chunked transfer encoding.
 *
 * All data is allocated from the stream memory pool. 
 *
 * Again, see comments in h2_request: ideally we would take the headers
 * and status from the httpd structures instead of parsing them here, but
 * we need to have all handlers and filters involved in request/response
 * processing, so this seems to be the way for now.
 */</comment>
<struct_decl>struct <name>h2_headers</name>;</struct_decl>
<struct_decl>struct <name>h2_task</name>;</struct_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_from_h1_parse_response</name><parameter_list>(<param><decl><type>struct <name>h2_task</name> *</type><name>task</name></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, 
                                       <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_filter_headers_out</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_filter_request_in</name><parameter_list>(<param><decl><type><name>ap_filter_t</name>*</type> <name>f</name></decl></param>,
                                  <param><decl><type><name>apr_bucket_brigade</name>*</type> <name>brigade</name></decl></param>,
                                  <param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
                                  <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
                                  <param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_filter_trailers_out</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_from_h1__) */</comment>
</unit>
