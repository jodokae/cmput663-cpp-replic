<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_h2.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_h2__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_h2__</name></cpp:macro></cpp:define>

<comment type="block">/**
 * List of ALPN protocol identifiers that we support in cleartext
 * negotiations. NULL terminated.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>h2_clear_protos</name><index>[]</index></name></decl>;</decl_stmt>

<comment type="block">/**
 * List of ALPN protocol identifiers that we support in TLS encrypted 
 * negotiations. NULL terminated.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>h2_tls_protos</name><index>[]</index></name></decl>;</decl_stmt>

<comment type="block">/**
 * Provide a user readable description of the HTTP/2 error code-
 * @param h2_error http/2 error code, as in rfc 7540, ch. 7
 * @return textual description of code or that it is unknown.
 */</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>h2_h2_err_description</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>int</name></type> <name>h2_error</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
 * One time, post config initialization.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_h2_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Is the connection a TLS connection?
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_h2_is_tls</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* Register apache hooks for h2 protocol
 */</comment>
<function_decl><type><name>void</name></type> <name>h2_h2_register_hooks</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Check if the given connection fulfills the requirements as configured.
 * @param c the connection
 * @param require_all != 0 iff any missing connection properties make
 *    the test fail. For example, a cipher might not have been selected while
 *    the handshake is still ongoing.
 * @return != 0 iff connection requirements are met
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_is_acceptable_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>int</name></type> <name>require_all</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Check if the "direct" HTTP/2 mode of protocol handling is enabled
 * for the given connection.
 * @param c the connection to check
 * @return != 0 iff direct mode is enabled
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_allows_h2_direct</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Check if the "Upgrade" HTTP/1.1 mode of protocol switching is enabled
 * for the given connection.
 * @param c the connection to check
 * @return != 0 iff Upgrade switching is enabled
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_allows_h2_upgrade</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_h2__) */</comment>
</unit>
