<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http2/h2_proxy_util.h"><comment type="block">/* Copyright 2015 greenbytes GmbH (https://www.greenbytes.de)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__mod_h2__h2_proxy_util__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__mod_h2__h2_proxy_util__</name></cpp:macro></cpp:define>

<comment type="block">/*******************************************************************************
 * some debugging/format helpers
 ******************************************************************************/</comment>
<struct_decl>struct <name>h2_proxy_request</name>;</struct_decl>
<struct_decl>struct <name>nghttp2_frame</name>;</struct_decl>

<function_decl><type><name>int</name></type> <name>h2_proxy_util_frame_print</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>nghttp2_frame</name> *</type><name>frame</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>maxlen</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * ihash - hash for structs with int identifier
 ******************************************************************************/</comment>
<typedef>typedef <type>struct <name>h2_proxy_ihash_t</name></type> <name>h2_proxy_ihash_t</name>;</typedef>
<typedef>typedef <function_decl><type><name>int</name></type> <name>h2_proxy_ihash_iter_t</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * Create a hash for structures that have an identifying int member.
 * @param pool the pool to use
 * @param offset_of_int the offsetof() the int member in the struct
 */</comment>
<function_decl><type><name>h2_proxy_ihash_t</name> *</type><name>h2_proxy_ihash_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>offset_of_int</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>h2_proxy_ihash_count</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_proxy_ihash_empty</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>h2_proxy_ihash_get</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Iterate over the hash members (without defined order) and invoke
 * fn for each member until 0 is returned.
 * @param ih the hash to iterate over
 * @param fn the function to invoke on each member
 * @param ctx user supplied data passed into each iteration call
 * @return 0 if one iteration returned 0, otherwise != 0
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_proxy_ihash_iter</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>h2_proxy_ihash_iter_t</name> *</type><name>fn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>h2_proxy_ihash_add</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_proxy_ihash_remove</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_proxy_ihash_remove_val</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>void</name> *</type><name>val</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>h2_proxy_ihash_clear</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>size_t</name></type> <name>h2_proxy_ihash_shift</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>void</name> **</type><name>buffer</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>max</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>size_t</name></type> <name>h2_proxy_ihash_ishift</name><parameter_list>(<param><decl><type><name>h2_proxy_ihash_t</name> *</type><name>ih</name></decl></param>, <param><decl><type><name>int</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>max</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * iqueue - sorted list of int with user defined ordering
 ******************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>h2_proxy_iqueue</name> <block>{
    <decl_stmt><decl><type><name>int</name> *</type><name>elts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nelts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nalloc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_proxy_iqueue</name>;</typedef>

<comment type="block">/**
 * Comparator for two int to determine their order.
 *
 * @param i1 first int to compare
 * @param i2 second int to compare
 * @param ctx provided user data
 * @return value is the same as for strcmp() and has the effect:
 *    == 0: s1 and s2 are treated equal in ordering
 *     &lt; 0: s1 should be sorted before s2
 *     &gt; 0: s2 should be sorted before s1
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> <name>h2_proxy_iq_cmp</name><parameter_list>(<param><decl><type><name>int</name></type> <name>i1</name></decl></param>, <param><decl><type><name>int</name></type> <name>i2</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * Allocate a new queue from the pool and initialize.
 * @param id the identifier of the queue
 * @param pool the memory pool
 */</comment>
<function_decl><type><name>h2_proxy_iqueue</name> *</type><name>h2_proxy_iq_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>int</name></type> <name>capacity</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Return != 0 iff there are no tasks in the queue.
 * @param q the queue to check
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_proxy_iq_empty</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Return the number of int in the queue.
 * @param q the queue to get size on
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_proxy_iq_count</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Add a stream id to the queue. 
 *
 * @param q the queue to append the task to
 * @param sid the stream id to add
 * @param cmp the comparator for sorting
 * @param ctx user data for comparator 
 */</comment>
<function_decl><type><name>void</name></type> <name>h2_proxy_iq_add</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>, <param><decl><type><name>int</name></type> <name>sid</name></decl></param>, <param><decl><type><name>h2_proxy_iq_cmp</name> *</type><name>cmp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Remove the stream id from the queue. Return != 0 iff task
 * was found in queue.
 * @param q the task queue
 * @param sid the stream id to remove
 * @return != 0 iff task was found in queue
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_proxy_iq_remove</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>, <param><decl><type><name>int</name></type> <name>sid</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Remove all entries in the queue.
 */</comment>
<function_decl><type><name>void</name></type> <name>h2_proxy_iq_clear</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Sort the stream idqueue again. Call if the task ordering
 * has changed.
 *
 * @param q the queue to sort
 * @param cmp the comparator for sorting
 * @param ctx user data for the comparator 
 */</comment>
<function_decl><type><name>void</name></type> <name>h2_proxy_iq_sort</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>, <param><decl><type><name>h2_proxy_iq_cmp</name> *</type><name>cmp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ctx</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Get the first stream id from the queue or NULL if the queue is empty. 
 * The task will be removed.
 *
 * @param q the queue to get the first task from
 * @return the first stream id of the queue, 0 if empty
 */</comment>
<function_decl><type><name>int</name></type> <name>h2_proxy_iq_shift</name><parameter_list>(<param><decl><type><name>h2_proxy_iqueue</name> *</type><name>q</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * common helpers
 ******************************************************************************/</comment>
<comment type="block">/* h2_proxy_log2(n) iff n is a power of 2 */</comment>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>h2_proxy_log2</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * HTTP/2 header helpers
 ******************************************************************************/</comment>
<function_decl><type><name>void</name></type> <name>h2_proxy_util_camel_case_header</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>s</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_proxy_res_ignore_header</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * nghttp2 helpers
 ******************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>h2_proxy_ngheader</name> <block>{
    <decl_stmt><decl><type><name>nghttp2_nv</name> *</type><name>nv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>nvlen</name></decl>;</decl_stmt>
}</block></struct></type> <name>h2_proxy_ngheader</name>;</typedef>
<function_decl><type><name>h2_proxy_ngheader</name> *</type><name>h2_proxy_util_nghd_make_req</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, 
                                               <param><decl><type><specifier>const</specifier> struct <name>h2_proxy_request</name> *</type><name>req</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * h2_proxy_request helpers
 ******************************************************************************/</comment>
<typedef>typedef <type>struct <name>h2_proxy_request</name></type> <name>h2_proxy_request</name>;</typedef>

<struct>struct <name>h2_proxy_request</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl>;</decl_stmt> <comment type="block">/* pseudo header values, see ch. 8.1.2.3 */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl>;</decl_stmt>
    
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_time</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>chunked</name> : 1</expr>;</expr_stmt>   <comment type="block">/* iff requst body needs to be forwarded as chunked */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>serialize</name> : 1</expr>;</expr_stmt> <comment type="block">/* iff this request is written in HTTP/1.1 serialization */</comment>
}</block>;</struct>

<function_decl><type><name>h2_proxy_request</name> *</type><name>h2_proxy_req_create</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>int</name></type> <name>serialize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_req_make</name><parameter_list>(<param><decl><type><name>h2_proxy_request</name> *</type><name>req</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>method</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>scheme</name></decl></param>, 
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>authority</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>path</name></decl></param>, 
                               <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * reverse mapping for link headers
 ******************************************************************************/</comment>
<function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>h2_proxy_link_reverse_map</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                                      <param><decl><type><name>proxy_dir_conf</name> *</type><name>conf</name></decl></param>, 
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>real_server_uri</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>proxy_server_uri</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*******************************************************************************
 * FIFO queue
 ******************************************************************************/</comment>

<comment type="block">/**
 * A thread-safe FIFO queue with some extra bells and whistles, if you
 * do not need anything special, better use 'apr_queue'.
 */</comment>
<typedef>typedef <type>struct <name>h2_proxy_fifo</name></type> <name>h2_proxy_fifo</name>;</typedef>

<comment type="block">/**
 * Create a FIFO queue that can hold up to capacity elements. Elements can
 * appear several times.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_create</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> **</type><name>pfifo</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>int</name></type> <name>capacity</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Create a FIFO set that can hold up to capacity elements. Elements only
 * appear once. Pushing an element already present does not change the
 * queue and is successful.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_set_create</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> **</type><name>pfifo</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>, <param><decl><type><name>int</name></type> <name>capacity</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_term</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_interrupt</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>h2_proxy_fifo_capacity</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>h2_proxy_fifo_count</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Push en element into the queue. Blocks if there is no capacity left.
 * 
 * @param fifo the FIFO queue
 * @param elem the element to push
 * @return APR_SUCCESS on push, APR_EAGAIN on try_push on a full queue,
 *         APR_EEXIST when in set mode and elem already there.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_push</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>, <param><decl><type><name>void</name> *</type><name>elem</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_try_push</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>, <param><decl><type><name>void</name> *</type><name>elem</name></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_pull</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>, <param><decl><type><name>void</name> **</type><name>pelem</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_try_pull</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>, <param><decl><type><name>void</name> **</type><name>pelem</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/**
 * Remove the elem from the queue, will remove multiple appearances.
 * @param elem  the element to remove
 * @return APR_SUCCESS iff &gt; 0 elems were removed, APR_EAGAIN otherwise.
 */</comment>
<function_decl><type><name>apr_status_t</name></type> <name>h2_proxy_fifo_remove</name><parameter_list>(<param><decl><type><name>h2_proxy_fifo</name> *</type><name>fifo</name></decl></param>, <param><decl><type><name>void</name> *</type><name>elem</name></decl></param>)</parameter_list>;</function_decl>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(__mod_h2__h2_proxy_util__) */</comment>
</unit>
