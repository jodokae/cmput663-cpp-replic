<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/arch/netware/libprews.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*------------------------------------------------------------------
  These functions are to be called when the shared NLM starts and
  stops.  By using these functions instead of defining a main()
  and calling ExitThread(TSR_THREAD, 0), the load time of the
  shared NLM is faster and memory size reduced.

  You may also want to override these in your own Apache module
  to do any cleanup other than the mechanism Apache modules
  provide.
------------------------------------------------------------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netware.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WINSOCK</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;novsock2.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>_NonAppStart</name>
<parameter_list>(
    <param><decl><type><name>void</name>        *</type><name>NLMHandle</name></decl></param>,
    <param><decl><type><name>void</name>        *</type><name>errorScreen</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>cmdLine</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>loadDirPath</name></decl></param>,
    <param><decl><type><name>size_t</name></type>      <name>uninitializedDataLength</name></decl></param>,
    <param><decl><type><name>void</name>        *</type><name>NLMFileHandle</name></decl></param>,
    <param><function_decl><type><name>int</name></type>         (*<name>readRoutineP</name>)<parameter_list>( <param><decl><type><name>int</name></type> <name>conn</name></decl></param>, <param><decl><type><name>void</name> *</type><name>fileHandle</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>offset</name></decl></param>,
                    <param><decl><type><name>size_t</name></type> <name>nbytes</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>bytesRead</name></decl></param>, <param><decl><type><name>void</name> *</type><name>buffer</name></decl></param> )</parameter_list></function_decl></param>,
    <param><decl><type><name>size_t</name></type>      <name>customDataOffset</name></decl></param>,
    <param><decl><type><name>size_t</name></type>      <name>customDataSize</name></decl></param>,
    <param><decl><type><name>int</name></type>         <name>messageCount</name></decl></param>,
    <param><decl><type><specifier>const</specifier> <name>char</name>  **</type><name>messages</name></decl></param>
)</parameter_list>
<block>{
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(cmdLine)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(loadDirPath)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(uninitializedDataLength)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(NLMFileHandle)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(readRoutineP)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(customDataOffset)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(customDataSize)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(messageCount)</cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> unused(messages)</cpp:pragma>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WINSOCK</name></cpp:ifdef>
    <decl_stmt><decl><type><name>WSADATA</name></type> <name>wsaData</name></decl>;</decl_stmt>

    <return>return <expr><call><name>WSAStartup</name><argument_list>(<argument><expr>(<name>WORD</name>) <call><name>MAKEWORD</name><argument_list>(<argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>wsaData</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return <expr>0</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>void</name></type> <name>_NonAppStop</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WINSOCK</name></cpp:ifdef>
    <expr_stmt><expr><call><name>WSACleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <return>return;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>int</name></type>  <name>_NonAppCheckUnload</name><parameter_list>( <param><decl><type><name>void</name></type></decl></param> )</parameter_list>
<block>{
    <return>return <expr>0</expr>;</return>
}</block></function>
</unit>
