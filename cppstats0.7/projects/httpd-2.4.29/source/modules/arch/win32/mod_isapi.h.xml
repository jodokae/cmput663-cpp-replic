<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/arch/win32/mod_isapi.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file mod_isapi.h
 * @brief ISAPI module extension to Apache
 *
 * @defgroup MOD_ISAPI mod_isapi
 * @ingroup  APACHE_MODS
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MOD_ISAPI_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_ISAPI_H</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* The Version Information storage passed to a module on startup
 * via the GetExtensionVersion() entry point.
 */</comment>
<typedef>typedef <type><struct>struct <name>HSE_VERSION_INFO</name> <block>{
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwExtensionVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>         <name><name>lpszExtensionDesc</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>HSE_VERSION_INFO</name>;</typedef>

<comment type="block">/* The startup entry point that must be exported by every ISAPI handler
 */</comment>
<function_decl><type><name>int</name> <name>APR_THREAD_FUNC</name></type> <name>GetExtensionVersion</name><parameter_list>(<param><decl><type><name>HSE_VERSION_INFO</name> *</type><name>ver_info</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name> *<name>PFN_GETEXTENSIONVERSION</name>)<parameter_list>(<param><decl><type><name>HSE_VERSION_INFO</name> *</type><name>ver_info</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Our internal 'HCONN' representation, always opaque to the user.
 */</comment>
<typedef>typedef <type>struct <name>isapi_cid</name></type> <name>isapi_cid</name>;</typedef>
<typedef>typedef <type>struct <name>isapi_cid</name> *</type><name>HCONN</name>;</typedef>

<comment type="block">/* Prototypes of the essential functions exposed by mod_isapi
 * for the module to communicate with Apache.
 */</comment>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
                *<name>PFN_GETSERVERVARIABLE</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type>         <name>cid</name></decl></param>,
                                        <param><decl><type><name>char</name>         *</type><name>variable_name</name></decl></param>,
                                        <param><decl><type><name>void</name>         *</type><name>buf_data</name></decl></param>,
                                        <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
                *<name>PFN_WRITECLIENT</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type>         <name>cid</name></decl></param>,
                                  <param><decl><type><name>void</name>         *</type><name>buf_data</name></decl></param>,
                                  <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>,
                                  <param><decl><type><name>apr_uint32_t</name></type>  <name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
                *<name>PFN_READCLIENT</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type>         <name>cid</name></decl></param>,
                                 <param><decl><type><name>void</name>         *</type><name>buf_data</name></decl></param>,
                                 <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name>
                *<name>PFN_SERVERSUPPORTFUNCTION</name>)<parameter_list>(<param><decl><type><name>HCONN</name></type>         <name>cid</name></decl></param>,
                                            <param><decl><type><name>apr_uint32_t</name></type>  <name>HSE_code</name></decl></param>,
                                            <param><decl><type><name>void</name>         *</type><name>buf_data</name></decl></param>,
                                            <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>,
                                            <param><decl><type><name>apr_uint32_t</name> *</type><name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* The ecb structure is passed on each invocation of the module
 */</comment>
<typedef>typedef <type><struct>struct <name>EXTENSION_CONTROL_BLOCK</name> <block>{
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>   <name>cbSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>   <name>dwVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HCONN</name></type>          <name>ConnID</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>   <name>dwHttpStatusCode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>           <name><name>lpszLogData</name><index>[<expr>80</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>          *</type><name>lpszMethod</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>          *</type><name>lpszQueryString</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>          *</type><name>lpszPathInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>          *</type><name>lpszPathTranslated</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>   <name>cbTotalBytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>   <name>cbAvailable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>lpbData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>          *</type><name>lpszContentType</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PFN_GETSERVERVARIABLE</name></type>     <name>GetServerVariable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_WRITECLIENT</name></type>           <name>WriteClient</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_READCLIENT</name></type>            <name>ReadClient</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_SERVERSUPPORTFUNCTION</name></type> <name>ServerSupportFunction</name></decl>;</decl_stmt>
}</block></struct></type> <name>EXTENSION_CONTROL_BLOCK</name>;</typedef>

<comment type="block">/* Status/Headers structure to pass to HSE_SEND_HEADER_EX,
 * an MS extension to ServerSupportFunction
 */</comment>
<typedef>typedef <type><struct>struct <name>HSE_SEND_HEADER_EX_INFO</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>pszStatus</name></decl>;</decl_stmt> <comment type="block">/* HTTP status text, such as "200 OK" */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type> <name>pszHeader</name></decl>;</decl_stmt> <comment type="block">/* HTTP header lines text, such as
                             *   "Content-type: text/plain\r\n"
                             *   "Content-Language: en\r\n"
                             * Note that (in spite of cchFoo lengths below)
                             * NULL characters will interfere in headers.
                             */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchStatus</name></decl>;</decl_stmt> <comment type="block">/* length of pszStatus text */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchHeader</name></decl>;</decl_stmt> <comment type="block">/* length of pszHeader text */</comment>
    <decl_stmt><decl><type><name>int</name></type>          <name>fKeepConn</name></decl>;</decl_stmt> <comment type="block">/* Ignored: used to set keep-alive status,
                             * but Apache follows the client's negotiated
                             * HTTP contract to decide.
                             */</comment>
}</block></struct></type> <name>HSE_SEND_HEADER_EX_INFO</name>;</typedef>

<comment type="block">/* Our only 'supported' MS extended flag bit for TransmitFile,
 * HSE_IO_SEND_HEADERS indicates that Status+Headers are present
 * in the pszStatusCode member of the HSE_TF_INFO structure.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_SEND_HEADERS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<comment type="block">/* The remaining flags are MS extended flag bits that bear little
 * relation to Apache; the rules that the Apache server obeys follow
 * its own design and HTTP protocol filter rules.
 *
 * We do not support async, however, we fake it.  If HSE_IO_SYNC is
 * not passed, and a completion context was defined, we will invoke the
 * completion function immediately following the transfer, and then
 * return to the caller.  If HSE_IO_SYNC is passed, there is no call
 * necessary to the completion context.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_SYNC</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_ASYNC</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_DISCONNECT_AFTER_SEND</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_IO_NODELAY</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<comment type="block">/* The Completion function prototype.  This callback may be fixed with
 * the HSE_REQ_IO_COMPLETION ServerSupportFunction call, or overridden
 * for the HSE_REQ_TRANSMIT_FILE call.
 */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (<name>APR_THREAD_FUNC</name> *<name>PFN_HSE_IO_COMPLETION</name>)
                                  <parameter_list>(<param><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl></param>,
                                   <param><decl><type><name>void</name>                    *</type><name>ctxt</name></decl></param>,
                                   <param><decl><type><name>apr_uint32_t</name></type>             <name>cbIO</name></decl></param>,
                                   <param><decl><type><name>apr_uint32_t</name></type>             <name>dwError</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* TransmitFile structure to pass to HSE_REQ_TRANSMIT_FILE, an MS extension
 */</comment>
<typedef>typedef <type><struct>struct <name>HSE_TF_INFO</name> <block>{
    <decl_stmt><decl><type><name>PFN_HSE_IO_COMPLETION</name></type> <name>pfnHseIO</name></decl>;</decl_stmt>      <comment type="block">/* Overrides the default setting of
                                          * HSE_REQ_IO_COMPLETION if not NULL
                                          */</comment>
    <decl_stmt><decl><type><name>void</name>                 *</type><name>pContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_os_file_t</name></type>         <name>hFile</name></decl>;</decl_stmt>         <comment type="block">/* HANDLE/fd to transmit */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>           *</type><name>pszStatusCode</name></decl>;</decl_stmt> <comment type="block">/* Ignored if HSE_IO_SEND_HEADERS is
                                          * not set.  Includes HTTP status text
                                          * plus header text lines, such as
                                          *   "200 OK\r\n"
                                          *   "Content-type: text/plain\r\n"
                                          */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>          <name>BytesToWrite</name></decl>;</decl_stmt>  <comment type="block">/* 0 is write-all */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>          <name>Offset</name></decl>;</decl_stmt>        <comment type="block">/* File Offset */</comment>
    <decl_stmt><decl><type><name>void</name>                 *</type><name>pHead</name></decl>;</decl_stmt>         <comment type="block">/* Prefix with *pHead body text */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>          <name>HeadLength</name></decl>;</decl_stmt>    <comment type="block">/* Length of *pHead body text */</comment>
    <decl_stmt><decl><type><name>void</name>                 *</type><name>pTail</name></decl>;</decl_stmt>         <comment type="block">/* Prefix with *pTail body text */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>          <name>TailLength</name></decl>;</decl_stmt>    <comment type="block">/* Length of *pTail body text */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>          <name>dwFlags</name></decl>;</decl_stmt>       <comment type="block">/* bit flags described above */</comment>
}</block></struct></type> <name>HSE_TF_INFO</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HSE_URL_MAPEX_INFO</name> <block>{
    <decl_stmt><decl><type><name>char</name></type>         <name><name>lpszPath</name><index>[<expr>260</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwFlags</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchMatchingPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>cchMatchingURL</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwReserved1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>dwReserved2</name></decl>;</decl_stmt>
}</block></struct></type> <name>HSE_URL_MAPEX_INFO</name>;</typedef>

<comment type="block">/* Original ISAPI ServerSupportFunction() HSE_code methods */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_URL_REDIRECT_RESP</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_URL</name></cpp:macro>                 <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_RESPONSE_HEADER</name></cpp:macro>     <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_DONE_WITH_SESSION</name></cpp:macro>        <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* MS Extented methods to ISAPI ServerSupportFunction() HSE_code */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_MAP_URL_TO_PATH</name></cpp:macro>          <cpp:value>1001</cpp:value></cpp:define> <comment type="block">/* Emulated */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_GET_SSPI_INFO</name></cpp:macro>            <cpp:value>1002</cpp:value></cpp:define> <comment type="block">/* Not Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_APPEND_LOG_PARAMETER</name></cpp:macro>         <cpp:value>1003</cpp:value></cpp:define> <comment type="block">/* Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_IO_COMPLETION</name></cpp:macro>            <cpp:value>1005</cpp:value></cpp:define> <comment type="block">/* Emulated */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_TRANSMIT_FILE</name></cpp:macro>            <cpp:value>1006</cpp:value></cpp:define> <comment type="block">/* Async Emulated */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_REFRESH_ISAPI_ACL</name></cpp:macro>        <cpp:value>1007</cpp:value></cpp:define> <comment type="block">/* Not Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_IS_KEEP_CONN</name></cpp:macro>             <cpp:value>1008</cpp:value></cpp:define> <comment type="block">/* Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_ASYNC_READ_CLIENT</name></cpp:macro>        <cpp:value>1010</cpp:value></cpp:define> <comment type="block">/* Emulated */</comment>
<comment type="block">/*   Added with ISAPI 4.0 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_GET_IMPERSONATION_TOKEN</name></cpp:macro>  <cpp:value>1011</cpp:value></cpp:define> <comment type="block">/* Not Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_MAP_URL_TO_PATH_EX</name></cpp:macro>       <cpp:value>1012</cpp:value></cpp:define> <comment type="block">/* Emulated */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_ABORTIVE_CLOSE</name></cpp:macro>           <cpp:value>1014</cpp:value></cpp:define> <comment type="block">/* Ignored */</comment>
<comment type="block">/*   Added after ISAPI 4.0 in IIS 5.0 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_GET_CERT_INFO_EX</name></cpp:macro>         <cpp:value>1015</cpp:value></cpp:define> <comment type="block">/* Not Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_SEND_RESPONSE_HEADER_EX</name></cpp:macro>  <cpp:value>1016</cpp:value></cpp:define> <comment type="block">/* Supported (no nulls!) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_CLOSE_CONNECTION</name></cpp:macro>         <cpp:value>1017</cpp:value></cpp:define> <comment type="block">/* Ignored */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_IS_CONNECTED</name></cpp:macro>             <cpp:value>1018</cpp:value></cpp:define> <comment type="block">/* Supported */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_REQ_EXTENSION_TRIGGER</name></cpp:macro>        <cpp:value>1020</cpp:value></cpp:define> <comment type="block">/* Not Supported */</comment>

<comment type="block">/* The request entry point that must be exported by every ISAPI handler
 */</comment>
<function_decl><type><name>apr_uint32_t</name> <name>APR_THREAD_FUNC</name></type> <name>HttpExtensionProc</name><parameter_list>(<param><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>apr_uint32_t</name></type> (<name>APR_THREAD_FUNC</name>
                        *<name>PFN_HTTPEXTENSIONPROC</name>)<parameter_list>(<param><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Allowable return values from HttpExtensionProc (apparently 0 is also
 * accepted by MS IIS, and we will respect it as Success.)
 * If the HttpExtensionProc returns HSE_STATUS_PENDING, we will create
 * a wait mutex and lock on it, until HSE_REQ_DONE_WITH_SESSION is called.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_SUCCESS</name></cpp:macro>                <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_SUCCESS_AND_KEEP_CONN</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define> <comment type="block">/* 1 vs 2 Ignored, we choose */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_PENDING</name></cpp:macro>                <cpp:value>3</cpp:value></cpp:define> <comment type="block">/* Emulated (thread lock) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_STATUS_ERROR</name></cpp:macro>                  <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/* Anticipated error code for common faults within mod_isapi itself
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_INSUFFICIENT_BUFFER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INSUFFICIENT_BUFFER</name></cpp:macro> <cpp:value>ENOBUFS</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_INVALID_INDEX</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_INDEX</name></cpp:macro> <cpp:value>EINVAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_INVALID_PARAMETER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_INVALID_PARAMETER</name></cpp:macro> <cpp:value>EINVAL</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_READ_FAULT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_READ_FAULT</name></cpp:macro> <cpp:value>EIO</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_WRITE_FAULT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_WRITE_FAULT</name></cpp:macro> <cpp:value>EIO</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_SUCCESS</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_SUCCESS</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Valid flags passed with TerminateExtension()
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_MUST_UNLOAD</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_ADVISORY_UNLOAD</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* The shutdown entry point optionally exported by an ISAPI handler, passed
 * HSE_TERM_MUST_UNLOAD or HSE_TERM_ADVISORY_UNLOAD.  The module may return
 * if passed HSE_TERM_ADVISORY_UNLOAD, and the module will remain loaded.
 * If the module returns 1 to HSE_TERM_ADVISORY_UNLOAD it is immediately
 * unloaded.  If the module is passed HSE_TERM_MUST_UNLOAD, its return value
 * is ignored.
 */</comment>
<function_decl><type><name>int</name> <name>APR_THREAD_FUNC</name></type> <name>TerminateExtension</name><parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<typedef>typedef <function_decl><type><name>int</name></type> (<name>APR_THREAD_FUNC</name> *<name>PFN_TERMINATEEXTENSION</name>)<parameter_list>(<param><decl><type><name>apr_uint32_t</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* Module may return 0 if passed HSE_TERM_ADVISORY_UNLOAD, and the module
 * will remain loaded, or 1 if it consents to being unloaded. If the module
 * is passed HSE_TERM_MUST_UNLOAD, its return value is ignored.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_MUST_UNLOAD</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HSE_TERM_ADVISORY_UNLOAD</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* !MOD_ISAPI_H */</comment>
<comment type="block">/** @} */</comment>

</unit>
