<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/arch/win32/mod_win32.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cgi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_regkey.h"</cpp:file></cpp:include>

<comment type="block">/*
 * CGI Script stuff for Win32...
 */</comment>
<typedef>typedef <type><enum>enum <block>{ <decl><name>eFileTypeUNKNOWN</name></decl>, <decl><name>eFileTypeBIN</name></decl>, <decl><name>eFileTypeEXE16</name></decl>, <decl><name>eFileTypeEXE32</name></decl>,
               <decl><name>eFileTypeSCRIPT</name></decl> }</block></enum></type> <name>file_type_e</name>;</typedef>
<typedef>typedef <type><enum>enum <block>{ <decl><name>INTERPRETER_SOURCE_UNSET</name></decl>, <decl><name>INTERPRETER_SOURCE_REGISTRY_STRICT</name></decl>,
               <decl><name>INTERPRETER_SOURCE_REGISTRY</name></decl>, <decl><name>INTERPRETER_SOURCE_SHEBANG</name></decl>
             }</block></enum></type> <name>interpreter_source_e</name>;</typedef>
<macro><name>AP_DECLARE</name><argument_list>(<argument>file_type_e</argument>)</argument_list></macro> <expr_stmt><expr><call><name>ap_get_win32_interpreter</name><argument_list>(<argument><expr>const <name>request_rec</name> *</expr></argument>,
                                                 <argument><expr><name>char</name> **<name>interpreter</name></expr></argument>,
                                                 <argument><expr><name>char</name> **<name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>win32_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* Where to find interpreter to run scripts */</comment>
    <decl_stmt><decl><type><name>interpreter_source_e</name></type> <name>script_interpreter_source</name></decl>;</decl_stmt>
}</block></struct></type> <name>win32_dir_conf</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_win32_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dir</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>win32_dir_conf</name> *</type><name>conf</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>conf</name> = (<name>win32_dir_conf</name>*)<call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>win32_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>script_interpreter_source</name></name> = <name>INTERPRETER_SOURCE_UNSET</name></expr>;</expr_stmt>
    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_win32_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>win32_dir_conf</name> *</type><name>new</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>win32_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>win32_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>win32_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>win32_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>new</name> = (<name>win32_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>win32_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>script_interpreter_source</name></name> = (<name><name>add</name>-&gt;<name>script_interpreter_source</name></name>
                                           != <name>INTERPRETER_SOURCE_UNSET</name>)
                                   ? <name><name>add</name>-&gt;<name>script_interpreter_source</name></name>
                                   : <name><name>base</name>-&gt;<name>script_interpreter_source</name></name></expr>;</expr_stmt>
    <return>return <expr><name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_interpreter_source</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dv</name></decl></param>,
                                          <param><decl><type><name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>win32_dir_conf</name> *</type><name>d</name> <init>= <expr>(<name>win32_dir_conf</name> *)<name>dv</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"registry"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>d</name>-&gt;<name>script_interpreter_source</name></name> = <name>INTERPRETER_SOURCE_REGISTRY</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"registry-strict"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>d</name>-&gt;<name>script_interpreter_source</name></name> = <name>INTERPRETER_SOURCE_REGISTRY_STRICT</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>"script"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>d</name>-&gt;<name>script_interpreter_source</name></name> = <name>INTERPRETER_SOURCE_SHEBANG</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"ScriptInterpreterSource \""</expr></argument>, <argument><expr><name>arg</name></expr></argument>,
                           <argument><expr>"\" must be \"registry\", \"registry-strict\" or "
                           "\"script\""</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if></else></if></else></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/* XXX: prep_string should translate the string into unicode,
 * such that it is compatible with whatever codepage the client
 * will read characters 80-ff.  For the moment, use the unicode
 * values 0080-00ff.  This isn't trivial, since the code page
 * varies between msdos and Windows applications.
 * For subsystem 2 [GUI] the default is the system Ansi CP.
 * For subsystem 3 [CLI] the default is the system OEM CP.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prep_string</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type> <name>str</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ch</name> <init>= <expr>*<name>str</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>ch2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>widen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>ch</name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <while>while <condition>(<expr>*<name>ch</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>*(<name>ch</name>++) &amp; 0x80</expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>widen</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <if>if <condition>(<expr>!<name>widen</name></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>widen</name> += (<name>ch</name> - *<name>str</name>) + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>ch</name> = *<name>str</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>str</name> = <name>ch2</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>widen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr>*<name>ch</name></expr>)</condition> <block>{
        <if>if <condition>(<expr>*<name>ch</name> &amp; 0x80</expr>)</condition><then> <block>{
            <comment type="block">/* sign extension won't hurt us here */</comment>
            <expr_stmt><expr>*(<name>ch2</name>++) = 0xC0 | ((*<name>ch</name> &gt;&gt; 6) &amp; 0x03)</expr>;</expr_stmt>
            <expr_stmt><expr>*(<name>ch2</name>++) = 0x80 | (*(<name>ch</name>++) &amp; 0x3f)</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr>*(<name>ch2</name>++) = *(<name>ch</name>++)</expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr>*(<name>ch2</name>++) = '\0'</expr>;</expr_stmt>
}</block></function>

<comment type="block">/* Somewhat more exciting ... figure out where the registry has stashed the
 * ExecCGI or Open command - it may be nested one level deep (or more???)
 */</comment>
<function><type><specifier>static</specifier> <name>char</name>*</type> <name>get_interpreter_from_win32_registry</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
                                                 <param><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>ext</name></decl></param>,
                                                 <param><decl><type><name>int</name></type> <name>strict</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>name_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>type_key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regkey_t</name> *</type><name>key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>execcgi_path</name><index>[]</index></name> <init>= <expr>"SHELL\\EXECCGI\\COMMAND"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>execopen_path</name><index>[]</index></name> <init>= <expr>"SHELL\\OPEN\\COMMAND"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>type_name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buffer</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>ext</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/*
     * Future optimization:
     * When the registry is successfully searched, store the strings for
     * interpreter and arguments in an ext hash to speed up subsequent look-ups
     */</comment>

    <comment type="block">/* Open the key associated with the script filetype extension */</comment>
    <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>type_key</name></expr></argument>, <argument><expr><name>AP_REGKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name>ext</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Retrieve the name of the script filetype extension */</comment>
    <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_get</name><argument_list>(<argument><expr>&amp;<name>type_name</name></expr></argument>, <argument><expr><name>type_key</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name> &amp;&amp; <name><name>type_name</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
        <comment type="block">/* Open the key associated with the script filetype extension */</comment>
        <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>name_key</name></expr></argument>, <argument><expr><name>AP_REGKEY_CLASSES_ROOT</name></expr></argument>, <argument><expr><name>type_name</name></expr></argument>,
                            <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Open the key for the script command path by:
     *
     *   1) the 'named' filetype key for ExecCGI/Command
     *   2) the extension's type key for ExecCGI/Command
     *
     * and if the strict arg is false, then continue trying:
     *
     *   3) the 'named' filetype key for Open/Command
     *   4) the extension's type key for Open/Command
     */</comment>

    <if>if <condition>(<expr><name>name_key</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>name_key</name></expr></argument>, <argument><expr><name>execcgi_path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)
                == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_get</name><argument_list>(<argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>name_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>name_key</name> || (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>type_key</name></expr></argument>, <argument><expr><name>execcgi_path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)
                == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_get</name><argument_list>(<argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>type_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>strict</name> &amp;&amp; <name>name_key</name> &amp;&amp; (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>name_key</name></expr></argument>, <argument><expr><name>execopen_path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)
                == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_get</name><argument_list>(<argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>name_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>strict</name> &amp;&amp; (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>ap_regkey_open</name><argument_list>(<argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name>type_key</name></expr></argument>, <argument><expr><name>execopen_path</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>)
                == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>ap_regkey_value_get</name><argument_list>(<argument><expr>&amp;<name>buffer</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>type_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>name_key</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>name_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_regkey_close</name><argument_list>(<argument><expr><name>type_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || !<name><name>buffer</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>buffer</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>split_argv</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>interp</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cgiprg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cgiargs</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>args</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>8</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>d</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call>+1</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ch</name> <init>= <expr><name>interp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>prgtaken</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>argtaken</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>inquo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sl</name></decl>;</decl_stmt>

    <while>while <condition>(<expr>*<name>ch</name></expr>)</condition> <block>{
        <comment type="block">/* Skip on through Deep Space */</comment>
        <if>if <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr>++<name>ch</name></expr>;</expr_stmt> <continue>continue;</continue>
        }</block></then></if>
        <comment type="block">/* One Arg */</comment>
        <if>if <condition>(<expr>((*<name>ch</name> == '$') || (*<name>ch</name> == '%')) &amp;&amp; (*(<name>ch</name> + 1) == '*')</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cgiarg</name> <init>= <expr><name>cgiargs</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>argtaken</name> = 1</expr>;</expr_stmt>
            <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
                <decl_stmt><decl><type><name>char</name> *</type><name>w</name> <init>= <expr><call><name>ap_getword_nulls</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>cgiarg</name></expr></argument>, <argument><expr>'+'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr>!*<name>w</name></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>prep_string</name><argument_list>(<argument><expr>(const <name>char</name>**)&amp;<name>w</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*<name>arg</name> = <call><name>ap_escape_shell_cmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>ch</name> += 2</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr>((*<name>ch</name> == '$') || (*<name>ch</name> == '%')) &amp;&amp; (*(<name>ch</name> + 1) == '1')</expr>)</condition><then> <block>{
            <comment type="block">/* Todo: Make short name!!! */</comment>
            <expr_stmt><expr><name>prgtaken</name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>*<name>ch</name> == '%'</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name> *</type><name>repl</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cgiprg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr>*<name>arg</name> = <name>repl</name></expr>;</expr_stmt>
                <while>while <condition>(<expr>(<name>repl</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>repl</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
                    <expr_stmt><expr>*<name>repl</name>++ = '\\'</expr>;</expr_stmt>
                }</block></while>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr>*<name>arg</name> = <name>cgiprg</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>ch</name> += 2</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr>(*<name>ch</name> == '\"') &amp;&amp; ((*(<name>ch</name> + 1) == '$')
                              || (*(<name>ch</name> + 1) == '%')) &amp;&amp; (*(<name>ch</name> + 2) == '1')
            &amp;&amp; (*(<name>ch</name> + 3) == '\"')</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>prgtaken</name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>*(<name>ch</name> + 1) == '%'</expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>char</name> *</type><name>repl</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cgiprg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr>*<name>arg</name> = <name>repl</name></expr>;</expr_stmt>
                <while>while <condition>(<expr>(<name>repl</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>repl</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
                    <expr_stmt><expr>*<name>repl</name>++ = '\\'</expr>;</expr_stmt>
                }</block></while>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr>*<name>arg</name> = <name>cgiprg</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>ch</name> += 4</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>arg</name> = <name>d</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>inquo</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr>*<name>ch</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>ch</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>inquo</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>++<name>ch</name></expr>;</expr_stmt> <break>break;</break>
            }</block></then></if>
            <comment type="block">/* Get 'em backslashes */</comment>
            <for>for (<init><expr><name>sl</name> = 0</expr>;</init> <condition><expr>*<name>ch</name> == '\\'</expr>;</condition> <incr><expr>++<name>sl</name></expr></incr>) <block>{
                <expr_stmt><expr>*<name>d</name>++ = *<name>ch</name>++</expr>;</expr_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>sl</name> &amp; 1</expr>)</condition><then> <block>{
                <comment type="block">/* last unmatched '\' + '"' sequence is a '"' */</comment>
                <if>if <condition>(<expr>*<name>ch</name> == '\"'</expr>)</condition><then> <block>{
                    <expr_stmt><expr>*(<name>d</name> - 1) = *<name>ch</name>++</expr>;</expr_stmt>
                }</block></then></if>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr>*<name>ch</name> == '\"'</expr>)</condition><then> <block>{
                <comment type="block">/* '""' sequence within quotes is a '"' */</comment>
                <if>if <condition>(<expr>*++<name>ch</name> == '\"' &amp;&amp; <name>inquo</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>*<name>d</name>++ = *<name>ch</name>++</expr>;</expr_stmt> <continue>continue;</continue>
                }</block></then></if>
                <comment type="block">/* Flip quote state */</comment>
                <expr_stmt><expr><name>inquo</name> = !<name>inquo</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>ch</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>inquo</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr>++<name>ch</name></expr>;</expr_stmt> <break>break;</break>
                }</block></then></if>
                <comment type="block">/* All other '"'s are Munched */</comment>
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="block">/* Anything else is, well, something else */</comment>
            <expr_stmt><expr>*<name>d</name>++ = *<name>ch</name>++</expr>;</expr_stmt>
        }</block></while>
        <comment type="block">/* Term that arg, already pushed on args */</comment>
        <expr_stmt><expr>*<name>d</name>++ = '\0'</expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr>!<name>prgtaken</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>arg</name> = <name>cgiprg</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>argtaken</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cgiarg</name> <init>= <expr><name>cgiargs</name></expr></init></decl>;</decl_stmt>
        <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>w</name> <init>= <expr><call><name>ap_getword_nulls</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>cgiarg</name></expr></argument>, <argument><expr>'+'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!*<name>w</name></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><call><name>ap_unescape_url</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>prep_string</name><argument_list>(<argument><expr>(const <name>char</name>**)&amp;<name>w</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>arg</name> = <call><name>ap_escape_shell_cmd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></then></if>

    <expr_stmt><expr><name>arg</name> = (const <name>char</name>**)<call><name>apr_array_push</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>arg</name> = <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>args</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ap_cgi_build_command</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> ***</type><name>argv</name></decl></param>,
                                         <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
                                         <param><decl><type><name>cgi_exec_info_t</name> *</type><name>e_info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>elts_arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(<name>apr_table_entry_t</name> *) <name><name>elts_arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>interpreter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>win32_dir_conf</name> *</type><name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>d</name> = (<name>win32_dir_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                               <argument><expr>&amp;<name>win32_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>e_info</name>-&gt;<name>cmd_type</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* We have to consider that the client gets any QUERY_ARGS
         * without any charset interpretation, use prep_string to
         * create a string of the literal QUERY_ARGS bytes.
         */</comment>
        <expr_stmt><expr>*<name>cmd</name> = <name><name>r</name>-&gt;<name>filename</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>args</name><index>[<expr>0</expr>]</index></name> &amp;&amp; !<call><name>ap_strchr_c</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>'='</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>args</name> = <name><name>r</name>-&gt;<name>args</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <comment type="block">/* Handle the complete file name, we DON'T want to follow suexec, since
     * an unrooted command is as predictable as shooting craps in Win32.
     * Notice that unlike most mime extension parsing, we have to use the
     * win32 parsing here, therefore the final extension is the only one
     * we will consider.
     */</comment>
    <expr_stmt><expr><name>ext</name> = <call><name>strrchr</name><argument_list>(<argument><expr><call><name>apr_filepath_name_get</name><argument_list>(<argument><expr>*<name>cmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>'.'</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If the file has an extension and it is not .com and not .exe and
     * we've been instructed to search the registry, then do so.
     * Let apr_proc_create do all of the .bat/.cmd dirty work.
     */</comment>
    <if>if <condition>(<expr><name>ext</name> &amp;&amp; (!<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>,<argument><expr>".exe"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>,<argument><expr>".com"</expr></argument>)</argument_list></call>
                || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>,<argument><expr>".bat"</expr></argument>)</argument_list></call> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name>ext</name></expr></argument>,<argument><expr>".cmd"</expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>interpreter</name> = ""</expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>interpreter</name> &amp;&amp; <name>ext</name>
          &amp;&amp; (<name><name>d</name>-&gt;<name>script_interpreter_source</name></name>
                     == <name>INTERPRETER_SOURCE_REGISTRY</name>
           || <name><name>d</name>-&gt;<name>script_interpreter_source</name></name>
                     == <name>INTERPRETER_SOURCE_REGISTRY_STRICT</name>)</expr>)</condition><then> <block>{
         <comment type="block">/* Check the registry */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>strict</name> <init>= <expr>(<name><name>d</name>-&gt;<name>script_interpreter_source</name></name>
                      == <name>INTERPRETER_SOURCE_REGISTRY_STRICT</name>)</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>interpreter</name> = <call><name>get_interpreter_from_win32_registry</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>ext</name></expr></argument>,
                                                          <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>interpreter</name> &amp;&amp; <name><name>e_info</name>-&gt;<name>cmd_type</name></name> != <name>APR_SHELLCMD</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>e_info</name>-&gt;<name>cmd_type</name></name> = <name>APR_PROGRAM_PATH</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
                 <argument><expr><name>strict</name> ? <call><name>APLOGNO</name><argument_list>(<argument><expr>03180</expr></argument>)</argument_list></call> "No ExecCGI verb found for files of type '%s'."
                        : <call><name>APLOGNO</name><argument_list>(<argument><expr>03181</expr></argument>)</argument_list></call> "No ExecCGI or Open verb found for files of type '%s'."</expr></argument>,
                 <argument><expr><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>interpreter</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr>1024</expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name></decl>;</decl_stmt>

        <comment type="block">/* Need to peek into the file figure out what it really is...
         * ### aught to go back and build a cache for this one of these days.
         */</comment>
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fh</name></expr></argument>, <argument><expr>*<name>cmd</name></expr></argument>, <argument><expr><name>APR_READ</name> | <name>APR_BUFFERED</name></expr></argument>,
                                 <argument><expr><name>APR_OS_DEFAULT</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02100</expr></argument>)</argument_list></call>
                          "Failed to open cgi file %s for testing"</expr></argument>, <argument><expr>*<name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_file_read</name><argument_list>(<argument><expr><name>fh</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02101</expr></argument>)</argument_list></call>
                          "Failed to read cgi file %s for testing"</expr></argument>, <argument><expr>*<name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Some twisted character [no pun intended] at MS decided that a
         * zero width joiner as the lead wide character would be ideal for
         * describing Unicode text files.  This was further convoluted to
         * another MSism that the same character mapped into utf-8, EF BB BF
         * would signify utf-8 text files.
         *
         * Since MS configuration files are all protecting utf-8 encoded
         * Unicode path, file and resource names, we already have the correct
         * WinNT encoding.  But at least eat the stupid three bytes up front.
         *
         * ### A more thorough check would also allow UNICODE text in buf, and
         * convert it to UTF-8 for invoking unicode scripts.  Those are few
         * and far between, so leave that code an enterprising soul with a need.
         */</comment>
        <if>if <condition>(<expr>(<name>bytes</name> &gt;= 3) &amp;&amp; <call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr>"\xEF\xBB\xBF"</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer</name> + 3</expr></argument>, <argument><expr><name>bytes</name> -= 3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Script or executable, that is the question...
         * we check here also for '! so that .vbs scripts can work as CGI.
         */</comment>
        <if>if <condition>(<expr>(<name>bytes</name> &gt;= 2) &amp;&amp; ((<name><name>buffer</name><index>[<expr>0</expr>]</index></name> == '#') || (<name><name>buffer</name><index>[<expr>0</expr>]</index></name> == '\''))
                         &amp;&amp; (<name><name>buffer</name><index>[<expr>1</expr>]</index></name> == '!')</expr>)</condition><then> <block>{
            <comment type="block">/* Assuming file is a script since it starts with a shebang */</comment>
            <for>for (<init><expr><name>i</name> = 2</expr>;</init> <condition><expr><name>i</name> &lt; <name>bytes</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <if>if <condition>(<expr>(<name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> == '\r') || (<name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> == '\n')</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><name>i</name> &lt; <name>bytes</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>interpreter</name> = <name>buffer</name> + 2</expr>;</expr_stmt>
                <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>interpreter</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr>++<name>interpreter</name></expr>;</expr_stmt>
                }</block></while>
                <if>if <condition>(<expr><name><name>e_info</name>-&gt;<name>cmd_type</name></name> != <name>APR_SHELLCMD</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>e_info</name>-&gt;<name>cmd_type</name></name> = <name>APR_PROGRAM_PATH</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>bytes</name> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name>IMAGE_DOS_HEADER</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
            <comment type="block">/* Not a script, is it an executable? */</comment>
            <decl_stmt><decl><type><name>IMAGE_DOS_HEADER</name> *</type><name>hdr</name> <init>= <expr>(<name>IMAGE_DOS_HEADER</name>*)<name>buffer</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>e_magic</name></name> == <name>IMAGE_DOS_SIGNATURE</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>hdr</name>-&gt;<name>e_lfarlc</name></name> &lt; 0x40</expr>)</condition><then> <block>{
                    <comment type="block">/* Ought to invoke this 16 bit exe by a stub, (cmd /c?) */</comment>
                    <expr_stmt><expr><name>interpreter</name> = ""</expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>interpreter</name> = ""</expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then></if></else></if>
    }</block></then></if>
    <if>if <condition>(<expr>!<name>interpreter</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02102</expr></argument>)</argument_list></call>
                      "%s is not executable; ensure interpreted scripts have "
                      "\"#!\" or \"'!\" first line"</expr></argument>, <argument><expr>*<name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EBADF</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>argv</name> = (const <name>char</name> **)(<call><name>split_argv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>interpreter</name></expr></argument>, <argument><expr>*<name>cmd</name></expr></argument>,
                                       <argument><expr><name>args</name></expr></argument>)</argument_list></call>-&gt;<name>elts</name>)</expr>;</expr_stmt>
    <expr_stmt><expr>*<name>cmd</name> = (*<name>argv</name>)<index>[<expr>0</expr>]</index></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>e_info</name>-&gt;<name>detached</name></name> = 1</expr>;</expr_stmt>

    <comment type="block">/* XXX: Must fix r-&gt;subprocess_env to follow utf-8 conventions from
     * the client's octets so that win32 apr_proc_create is happy.
     * The -best- way is to determine if the .exe is unicode aware
     * (using 0x0080-0x00ff) or is linked as a command or windows
     * application (following the OEM or Ansi code page in effect.)
     */</comment>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>elts_arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> &amp;&amp; *<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> &amp;&amp; *<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name>
                &amp;&amp; !(<call><name>strncmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"REMOTE_"</expr></argument>, <argument><expr>7</expr></argument>)</argument_list></call> == 0
                || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"GATEWAY_INTERFACE"</expr></argument>)</argument_list></call> == 0
                || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"REQUEST_METHOD"</expr></argument>)</argument_list></call> == 0
                || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"SERVER_ADDR"</expr></argument>)</argument_list></call> == 0
                || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"SERVER_PORT"</expr></argument>)</argument_list></call> == 0
                || <call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"SERVER_PROTOCOL"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>prep_string</name><argument_list>(<argument><expr>(const <name>char</name>**) &amp;<name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_cgi_build_command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>win32_cmds</name><index>[]</index></name> <init>= <expr><block>{
<expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ScriptInterpreterSource"</expr></argument>, <argument><expr><name>set_interpreter_source</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
              <argument><expr><name>OR_FILEINFO</name></expr></argument>,
              <argument><expr>"Where to find interpreter to run Win32 scripts "
              "(Registry or script shebang line)"</expr></argument>)</argument_list></call></expr>,
<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>win32</name></expr></argument>)</argument_list></call> = <block>{
   <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
   <expr><name>create_win32_dir_config</name></expr>,     <comment type="block">/* create per-dir config */</comment>
   <expr><name>merge_win32_dir_configs</name></expr>,     <comment type="block">/* merge per-dir config */</comment>
   <expr><name>NULL</name></expr>,                        <comment type="block">/* server config */</comment>
   <expr><name>NULL</name></expr>,                        <comment type="block">/* merge server config */</comment>
   <expr><name>win32_cmds</name></expr>,                  <comment type="block">/* command apr_table_t */</comment>
   <expr><name>register_hooks</name></expr>               <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined WIN32 */</comment>
</unit>
