<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/arch/win32/mod_isapi.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_isapi.c - Internet Server Application (ISA) module for Apache
 * by Alexei Kosut &lt;akosut@apache.org&gt;, significant overhauls and
 * redesign by William Rowe &lt;wrowe@covalent.net&gt;, and hints from many
 * other developer/users who have hit on specific flaws.
 *
 * This module implements the ISAPI Handler architecture, allowing
 * Apache to load Internet Server Applications (ISAPI extensions),
 * similar to the support in IIS, Zope, O'Reilly's WebSite and others.
 *
 * It is a complete implementation of the ISAPI 2.0 specification,
 * except for "Microsoft extensions" to the API which provide
 * asynchronous I/O.  It is further extended to include additional
 * "Microsoft extensions" through IIS 5.0, with some deficiencies
 * where one-to-one mappings don't exist.
 *
 * Refer to /manual/mod/mod_isapi.html for additional details on
 * configuration and use, but check this source for specific support
 * of the API,
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_portable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_rwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_isapi.h"</cpp:file></cpp:include>

<comment type="block">/* Retry frequency for a failed-to-load isapi .dll */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISAPI_RETRY</name></cpp:macro> <cpp:value>apr_time_from_sec(30)</cpp:value></cpp:define>

<comment type="block">/**********************************************************
 *
 *  ISAPI Module Configuration
 *
 **********************************************************/</comment>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>isapi_module</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISAPI_UNDEF</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<comment type="block">/* Our isapi per-dir config structure */</comment>
<typedef>typedef <type><struct>struct <name>isapi_dir_conf</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>read_ahead_buflen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>log_unsupported</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>log_to_errlog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>log_to_query</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fake_async</name></decl>;</decl_stmt>
}</block></struct></type> <name>isapi_dir_conf</name>;</typedef>

<typedef>typedef <type>struct <name>isapi_loaded</name></type> <name>isapi_loaded</name>;</typedef>

<function_decl><type><name>apr_status_t</name></type> <name>isapi_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fpath</name></decl></param>, <param><decl><type><name>isapi_loaded</name>**</type> <name>isa</name></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_isapi_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>dir</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>dir</name>-&gt;<name>read_ahead_buflen</name></name> = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>log_unsupported</name></name>   = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_errlog</name></name>     = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_query</name></name>      = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>fake_async</name></name>        = <name>ISAPI_UNDEF</name></expr>;</expr_stmt>

    <return>return <expr><name>dir</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_isapi_dir_configs</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>base_</name></decl></param>, <param><decl><type><name>void</name> *</type><name>add_</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>isapi_dir_conf</name> *) <name>base_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>isapi_dir_conf</name> *) <name>add_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>dir</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>dir</name>-&gt;<name>read_ahead_buflen</name></name> = (<name><name>add</name>-&gt;<name>read_ahead_buflen</name></name> == <name>ISAPI_UNDEF</name>)
                                ? <name><name>base</name>-&gt;<name>read_ahead_buflen</name></name>
                                 : <name><name>add</name>-&gt;<name>read_ahead_buflen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>log_unsupported</name></name>   = (<name><name>add</name>-&gt;<name>log_unsupported</name></name> == <name>ISAPI_UNDEF</name>)
                                ? <name><name>base</name>-&gt;<name>log_unsupported</name></name>
                                 : <name><name>add</name>-&gt;<name>log_unsupported</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_errlog</name></name>     = (<name><name>add</name>-&gt;<name>log_to_errlog</name></name> == <name>ISAPI_UNDEF</name>)
                                ? <name><name>base</name>-&gt;<name>log_to_errlog</name></name>
                                 : <name><name>add</name>-&gt;<name>log_to_errlog</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>log_to_query</name></name>      = (<name><name>add</name>-&gt;<name>log_to_query</name></name> == <name>ISAPI_UNDEF</name>)
                                ? <name><name>base</name>-&gt;<name>log_to_query</name></name>
                                 : <name><name>add</name>-&gt;<name>log_to_query</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dir</name>-&gt;<name>fake_async</name></name>        = (<name><name>add</name>-&gt;<name>fake_async</name></name> == <name>ISAPI_UNDEF</name>)
                                ? <name><name>base</name>-&gt;<name>fake_async</name></name>
                                 : <name><name>add</name>-&gt;<name>fake_async</name></name></expr>;</expr_stmt>

    <return>return <expr><name>dir</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>isapi_cmd_cachefile</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
                                       <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>fspec</name></decl>;</decl_stmt>

    <comment type="block">/* ### Just an observation ... it would be terribly cool to be
     * able to use this per-dir, relative to the directory block being
     * defined.  The hash result remains global, but shorthand of
     * &lt;Directory "c:/webapps/isapi"&gt;
     *     ISAPICacheFile myapp.dll anotherapp.dll thirdapp.dll
     * &lt;/Directory&gt;
     * would be very convienent.
     */</comment>
    <expr_stmt><expr><name>fspec</name> = <call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>fspec</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>APR_EBADPATH</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02103</expr></argument>)</argument_list></call>
                     "invalid module path, skipping %s"</expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>tmp</name></expr></argument>, <argument><expr><name>fspec</name></expr></argument>, <argument><expr><name>APR_FINFO_TYPE</name></expr></argument>,
                      <argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02104</expr></argument>)</argument_list></call>
                     "unable to stat, skipping %s"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>tmp</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02105</expr></argument>)</argument_list></call>
                     "not a regular file, skipping %s"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Load the extension as cached (with null request_rec) */</comment>
    <expr_stmt><expr><name>rv</name> = <call><name>isapi_lookup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fspec</name></expr></argument>, <argument><expr>&amp;<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02106</expr></argument>)</argument_list></call>
                     "unable to cache, skipping %s"</expr></argument>, <argument><expr><name>fspec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>isapi_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"ISAPIReadAheadBuffer"</expr></argument>, <argument><expr><name>ap_set_int_slot</name></expr></argument>,
        <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>read_ahead_buflen</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Maximum client request body to initially pass to the"
                     " ISAPI handler (default: 49152)"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPILogNotSupported"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
        <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>log_unsupported</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Log requests not supported by the ISAPI server"
                     " on or off (default: off)"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPIAppendLogToErrors"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
        <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>log_to_errlog</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Send all Append Log requests to the error log"
                     " on or off (default: off)"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPIAppendLogToQuery"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
        <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>log_to_query</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Append Log requests are concatinated to the query args"
                     " on or off (default: on)"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"ISAPIFakeAsync"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
        <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>isapi_dir_conf</name></expr></argument>, <argument><expr><name>fake_async</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>OR_FILEINFO</name></expr></argument>, <argument><expr>"Fake Asynchronous support for isapi callbacks"
                     " on or off [Experimental] (default: off)"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"ISAPICacheFile"</expr></argument>, <argument><expr><name>isapi_cmd_cachefile</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
        <argument><expr><name>RSRC_CONF</name></expr></argument>, <argument><expr>"Cache the specified ISAPI extension in-process"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/**********************************************************
 *
 *  ISAPI Module Cache handling section
 *
 **********************************************************/</comment>

<comment type="block">/* Our isapi global config values */</comment>
<struct><specifier>static</specifier> struct <name>isapi_global_conf</name> <block>{
    <decl_stmt><decl><type><name>apr_pool_t</name>         *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_thread_mutex_t</name> *</type><name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_hash_t</name>         *</type><name>hash</name></decl>;</decl_stmt>
}</block> <decl><name>loaded</name></decl>;</struct>

<comment type="block">/* Our loaded isapi module description structure */</comment>
<struct>struct <name>isapi_loaded</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>          *</type><name>filename</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_thread_rwlock_t</name> *</type><name>in_progress</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type>         <name>last_load_rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type>           <name>last_load_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dso_handle_t</name>    *</type><name>handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HSE_VERSION_INFO</name>    *</type><name>isapi_version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>         <name>report_version</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type>         <name>timeout</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_GETEXTENSIONVERSION</name></type> <name>GetExtensionVersion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_HTTPEXTENSIONPROC</name></type>   <name>HttpExtensionProc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_TERMINATEEXTENSION</name></type>  <name>TerminateExtension</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>isapi_unload</name><parameter_list>(<param><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl></param>, <param><decl><type><name>int</name></type> <name>force</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* All done with the DLL... get rid of it...
     *
     * If optionally cached, and we weren't asked to force the unload,
     * pass HSE_TERM_ADVISORY_UNLOAD, and if it returns 1, unload,
     * otherwise, leave it alone (it didn't choose to cooperate.)
     */</comment>
    <if>if <condition>(<expr>!<name><name>isa</name>-&gt;<name>handle</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>isa</name>-&gt;<name>TerminateExtension</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>force</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call>(*<name><name>isa</name>-&gt;<name>TerminateExtension</name></name>)<argument_list>(<argument><expr><name>HSE_TERM_MUST_UNLOAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<call>(*<name><name>isa</name>-&gt;<name>TerminateExtension</name></name>)<argument_list>(<argument><expr><name>HSE_TERM_ADVISORY_UNLOAD</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>cleanup_isapi</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>isa_</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>isapi_loaded</name>*</type> <name>isa</name> <init>= <expr>(<name>isapi_loaded</name>*) <name>isa_</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* We must force the module to unload, we are about
     * to lose the isapi structure's allocation entirely.
     */</comment>
    <return>return <expr><call><name>isapi_unload</name><argument_list>(<argument><expr><name>isa</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>isapi_load</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>isa</name>-&gt;<name>isapi_version</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HSE_VERSION_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* TODO: These aught to become overrideable, so that we
     * assure a given isapi can be fooled into behaving well.
     *
     * The tricky bit, they aren't really a per-dir sort of
     * config, they will always be constant across every
     * reference to the .dll no matter what context (vhost,
     * location, etc) they apply to.
     */</comment>
    <expr_stmt><expr><name><name>isa</name>-&gt;<name>report_version</name></name> = 0x500</expr>;</expr_stmt> <comment type="block">/* Revision 5.0 */</comment>
    <expr_stmt><expr><name><name>isa</name>-&gt;<name>timeout</name></name> = 300 * 1000000</expr>;</expr_stmt> <comment type="block">/* microsecs, not used */</comment>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_dso_load</name><argument_list>(<argument><expr>&amp;<name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02107</expr></argument>)</argument_list></call>
                     "failed to load %s"</expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name><name>isa</name>-&gt;<name>GetExtensionVersion</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>,
                     <argument><expr>"GetExtensionVersion"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02108</expr></argument>)</argument_list></call>
                     "missing GetExtensionVersion() in %s"</expr></argument>,
                     <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name><name>isa</name>-&gt;<name>HttpExtensionProc</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>,
                     <argument><expr>"HttpExtensionProc"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02109</expr></argument>)</argument_list></call>
                     "missing HttpExtensionProc() in %s"</expr></argument>,
                     <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* TerminateExtension() is an optional interface */</comment>
    <expr_stmt><expr><name>rv</name> = <call><name>apr_dso_sym</name><argument_list>(<argument><expr>(<name>void</name>**)&amp;<name><name>isa</name>-&gt;<name>TerminateExtension</name></name></expr></argument>, <argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>,
                     <argument><expr>"TerminateExtension"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Run GetExtensionVersion() */</comment>
    <if>if <condition>(<expr>!<call>(<name><name>isa</name>-&gt;<name>GetExtensionVersion</name></name>)<argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>isapi_version</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02110</expr></argument>)</argument_list></call>
                     "failed call to GetExtensionVersion() in %s"</expr></argument>,
                     <argument><expr><name><name>isa</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_dso_unload</name><argument_list>(<argument><expr><name><name>isa</name>-&gt;<name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>isa</name>-&gt;<name>handle</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>isa</name></expr></argument>, <argument><expr><name>cleanup_isapi</name></expr></argument>,
                              <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>isapi_lookup</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                          <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fpath</name></decl></param>, <param><decl><type><name>isapi_loaded</name>**</type> <name>isa</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>isa</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>hash</name></name></expr></argument>, <argument><expr><name>fpath</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>*<name>isa</name></expr>)</condition><then> <block>{

        <comment type="block">/* If we find this lock exists, use a set-aside copy of gainlock
         * to avoid race conditions on NULLing the in_progress variable
         * when the load has completed.  Release the global isapi hash
         * lock so other requests can proceed, then rdlock for completion
         * of loading our desired dll or wrlock if we would like to retry
         * loading the dll (because last_load_rv failed and retry is up.)
         */</comment>
        <decl_stmt><decl><type><name>apr_thread_rwlock_t</name> *</type><name>gainlock</name> <init>= <expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* gainlock is NULLed after the module loads successfully.
         * This free-threaded module can be used without any locking.
         */</comment>
        <if>if <condition>(<expr>!<name>gainlock</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>


        <if>if <condition>(<expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_thread_rwlock_rdlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call>)
                    != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <return>return <expr><name>rv</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_thread_rwlock_unlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name> + <name>ISAPI_RETRY</name></expr>)</condition><then> <block>{

            <comment type="block">/* Remember last_load_time before releasing the global
             * hash lock to avoid colliding with another thread
             * that hit this exception at the same time as our
             * retry attempt, since we unlock the global mutex
             * before attempting a write lock for this module.
             */</comment>
            <decl_stmt><decl><type><name>apr_time_t</name></type> <name>check_time</name> <init>= <expr><name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_thread_rwlock_wrlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call>)
                    != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <return>return <expr><name>rv</name></expr>;</return>
            }</block></then></if>

            <comment type="block">/* If last_load_time is unchanged, we still own this
             * retry, otherwise presume another thread provided
             * our retry (for good or ill).  Relock the global
             * hash for updating last_load_ vars, so their update
             * is always atomic to the global lock.
             */</comment>
            <if>if <condition>(<expr><name>check_time</name> == <name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name></expr>)</condition><then> <block>{

                <expr_stmt><expr><name>rv</name> = <call><name>isapi_load</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>*<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name> = <name>rv</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>apr_thread_rwlock_unlock</name><argument_list>(<argument><expr><name>gainlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* We haven't hit timeup on retry, let's grab the last_rv
         * within the hash mutex before unlocking.
         */</comment>
        <expr_stmt><expr><name>rv</name> = <name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* If the module was not found, it's time to create a hash key entry
     * before releasing the hash lock to avoid multiple threads from
     * loading the same module.
     */</comment>
    <expr_stmt><expr><name>key</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>fpath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>isa</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_loaded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>filename</name></name> = <name>key</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
        <comment type="block">/* A mutex that exists only long enough to attempt to
         * load this isapi dll, the release this module to all
         * other takers that came along during the one-time
         * load process.  Short lifetime for this lock would
         * be great, however, using r-&gt;pool is nasty if those
         * blocked on the lock haven't all unlocked before we
         * attempt to destroy.  A nastier race condition than
         * I want to deal with at this moment...
         */</comment>
        <expr_stmt><expr><call><name>apr_thread_rwlock_create</name><argument_list>(<argument><expr>&amp;<name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></argument>, <argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_thread_rwlock_wrlock</name><argument_list>(<argument><expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>hash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr>*<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now attempt to load the isapi on our own time,
     * allow other isapi processing to resume.
     */</comment>
    <expr_stmt><expr><call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>isapi_load</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr>*<name>isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_time</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name> = <name>rv</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>r</name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* Let others who are blocked on this particular
         * module resume their requests, for better or worse.
         */</comment>
        <decl_stmt><decl><type><name>apr_thread_rwlock_t</name> *</type><name>unlock</name> <init>= <expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>(*<name>isa</name>)-&gt;<name>in_progress</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_thread_rwlock_unlock</name><argument_list>(<argument><expr><name>unlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr>!<name>r</name> &amp;&amp; (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* We must leave a rwlock around for requests to retry
         * loading this dll after timeup... since we were in
         * the setup code we had avoided creating this lock.
         */</comment>
        <expr_stmt><expr><call><name>apr_thread_rwlock_create</name><argument_list>(<argument><expr>&amp;<name>(*<name>isa</name>)-&gt;<name>in_progress</name></name></expr></argument>, <argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <return>return <expr><name>(*<name>isa</name>)-&gt;<name>last_load_rv</name></name></expr>;</return>
}</block></function>

<comment type="block">/**********************************************************
 *
 *  ISAPI Module request callbacks section
 *
 **********************************************************/</comment>

<comment type="block">/* Our "Connection ID" structure */</comment>
<struct>struct <name>isapi_cid</name> <block>{
    <decl_stmt><decl><type><name>EXTENSION_CONTROL_BLOCK</name> *</type><name>ecb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isapi_dir_conf</name></type>           <name>dconf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isapi_loaded</name>            *</type><name>isa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name>             *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                      <name>headers_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                      <name>response_sent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PFN_HSE_IO_COMPLETION</name></type>    <name>completion</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>                    *</type><name>completion_arg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_thread_mutex_t</name>      *</type><name>completed</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnGetServerVariable</name><parameter_list>(<param><decl><type><name>isapi_cid</name>    *</type><name>cid</name></decl></param>,
                                                  <param><decl><type><name>char</name>         *</type><name>variable_name</name></decl></param>,
                                                  <param><decl><type><name>void</name>         *</type><name>buf_ptr</name></decl></param>,
                                                  <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf_data</name> <init>= <expr>(<name>char</name>*)<name>buf_ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>len</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>variable_name</name></expr></argument>, <argument><expr>"ALL_HTTP"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* crlf delimited, colon split, comma separated and
         * null terminated list of HTTP_ vars
         */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <for>for (<init><expr><name>len</name> = 0</expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"HTTP_"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>len</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> + 3</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>len</name> + 1</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <if>if <condition>(<expr>!<call><name>strncmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr>"HTTP_"</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(<name>buf_data</name>++) = ':'</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr>*(<name>buf_data</name>++) = '\r'</expr>;</expr_stmt>
                <expr_stmt><expr>*(<name>buf_data</name>++) = '\n'</expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>

        <expr_stmt><expr>*(<name>buf_data</name>++) = '\0'</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>variable_name</name></expr></argument>, <argument><expr>"ALL_RAW"</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <comment type="block">/* crlf delimited, colon split, comma separated and
         * null terminated list of the raw request header
         */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>apr_array_header_t</name> *</type><name>arr</name> <init>= <expr><call><name>apr_table_elts</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>apr_table_entry_t</name> *</type><name>elts</name> <init>= <expr>(const <name>apr_table_entry_t</name> *)<name><name>arr</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <for>for (<init><expr><name>len</name> = 0</expr>, <expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>len</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call> + <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call> + 4</expr>;</expr_stmt>
        }</block></for>

        <if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>len</name> + 1</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*(<name>buf_data</name>++) = ':'</expr>;</expr_stmt>
            <expr_stmt><expr>*(<name>buf_data</name>++) = ' '</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf_data</name> += <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*(<name>buf_data</name>++) = '\r'</expr>;</expr_stmt>
            <expr_stmt><expr>*(<name>buf_data</name>++) = '\n'</expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr>*(<name>buf_data</name>++) = '\0'</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <comment type="block">/* Not a special case */</comment>
    <expr_stmt><expr><name>result</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>subprocess_env</name></name></expr></argument>, <argument><expr><name>variable_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>result</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>*<name>buf_size</name> &lt; <name>len</name> + 1</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INSUFFICIENT_BUFFER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>buf_size</name> = <name>len</name> + 1</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if>

    <comment type="block">/* Not Found */</comment>
    <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnReadClient</name><parameter_list>(<param><decl><type><name>isapi_cid</name>    *</type><name>cid</name></decl></param>,
                                           <param><decl><type><name>void</name>         *</type><name>buf_data</name></decl></param>,
                                           <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &lt; *<name>buf_size</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>buf_size</name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <while>while <condition>(<expr><name>read</name> &lt; *<name>buf_size</name> &amp;&amp;
           ((<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>buf_data</name> + <name>read</name></expr></argument>,
                                       <argument><expr>*<name>buf_size</name> - <name>read</name></expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition> <block>{
        <expr_stmt><expr><name>read</name> += <name>res</name></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr>*<name>buf_size</name> = <name>read</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_READ_FAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr>(<name>res</name> &gt;= 0)</expr>;</return>
}</block></function>

<comment type="block">/* Common code invoked for both HSE_REQ_SEND_RESPONSE_HEADER and
 * the newer HSE_REQ_SEND_RESPONSE_HEADER_EX ServerSupportFunction(s)
 * as well as other functions that write responses and presume that
 * the support functions above are optional.
 *
 * Other callers trying to split headers and body bytes should pass
 * head/headlen alone (leaving stat/statlen NULL/0), so that they
 * get a proper count of bytes consumed.  The argument passed to stat
 * isn't counted as the head bytes are.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_ssize_t</name></type> <name>send_response_header</name><parameter_list>(<param><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stat</name></decl></param>,
                                        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>head</name></decl></param>,
                                        <param><decl><type><name>apr_size_t</name></type> <name>statlen</name></decl></param>,
                                        <param><decl><type><name>apr_size_t</name></type> <name>headlen</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>head_present</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>termarg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>old_status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>termch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>ate</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>head</name> || <name>headlen</name> == 0 || !*<name>head</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>head</name> = <name>stat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>stat</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>headlen</name> = <name>statlen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>statlen</name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>head_present</name> = 0</expr>;</expr_stmt> <comment type="block">/* Don't eat the header */</comment>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>stat</name> || <name>statlen</name> == 0 || !*<name>stat</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>head</name> &amp;&amp; <name>headlen</name> &amp;&amp; *<name>head</name> &amp;&amp; ((<name>stat</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>'\r'</expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call>)
                                      || (<name>stat</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>'\n'</expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call>)
                                      || (<name>stat</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>'\0'</expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call>)
                                      || (<name>stat</name> = <name>head</name> + <name>headlen</name>))</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>statlen</name> = <name>stat</name> - <name>head</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name>memchr</name><argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr>':'</expr></argument>, <argument><expr><name>statlen</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>stat</name> = "Status: 200 OK"</expr>;</expr_stmt>
                <expr_stmt><expr><name>statlen</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>flip</name> <init>= <expr><name>head</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>head</name> = <name>stat</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stat</name> = <name>flip</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>headlen</name> -= <name>statlen</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ate</name> += <name>statlen</name></expr>;</expr_stmt>
                <if>if <condition>(<expr>*<name>head</name> == '\r' &amp;&amp; <name>headlen</name></expr>)</condition><then>
                    <expr_stmt><expr>++<name>head</name></expr>, <expr>--<name>headlen</name></expr>, <expr>++<name>ate</name></expr>;</expr_stmt></then></if>
                <if>if <condition>(<expr>*<name>head</name> == '\n' &amp;&amp; <name>headlen</name></expr>)</condition><then>
                    <expr_stmt><expr>++<name>head</name></expr>, <expr>--<name>headlen</name></expr>, <expr>++<name>ate</name></expr>;</expr_stmt></then></if>
            }</block></else></if>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>stat</name> &amp;&amp; (<name>statlen</name> &gt; 0) &amp;&amp; *<name>stat</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>newstat</name></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>stat</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>stattok</name> <init>= <expr><name>stat</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>toklen</name> <init>= <expr><name>statlen</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>toklen</name> &amp;&amp; *<name>stattok</name> &amp;&amp; !<call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>stattok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr>++<name>stattok</name></expr>;</expr_stmt> <expr_stmt><expr>--<name>toklen</name></expr>;</expr_stmt>
            }</block></while>
            <while>while <condition>(<expr><name>toklen</name> &amp;&amp; <call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>stattok</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr>++<name>stattok</name></expr>;</expr_stmt> <expr_stmt><expr>--<name>toklen</name></expr>;</expr_stmt>
            }</block></while>
            <comment type="block">/* Now decide if we follow the xxx message
             * or the http/x.x xxx message format
             */</comment>
            <if>if <condition>(<expr><name>toklen</name> &amp;&amp; <call><name>apr_isdigit</name><argument_list>(<argument><expr>*<name>stattok</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>statlen</name> = <name>toklen</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stat</name> = <name>stattok</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>newstat</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>statlen</name> + 9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>newstat</name></expr></argument>, <argument><expr>"Status: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>newstat</name> + 8</expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>statlen</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stat</name> = <name>newstat</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>statlen</name> += 8</expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>head</name> || <name>headlen</name> == 0 || !*<name>head</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>head</name> = "\r\n"</expr>;</expr_stmt>
        <expr_stmt><expr><name>headlen</name> = 2</expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <if>if <condition>(<expr><name><name>head</name><index>[<expr><name>headlen</name> - 1</expr>]</index></name> &amp;&amp; <name><name>head</name><index>[<expr><name>headlen</name></expr>]</index></name></expr>)</condition><then> <block>{
            <comment type="block">/* Whoops... not NULL terminated */</comment>
            <expr_stmt><expr><name>head</name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

    <comment type="block">/* Seems IIS does not enforce the requirement for \r\n termination
     * on HSE_REQ_SEND_RESPONSE_HEADER, but we won't panic...
     * ap_scan_script_header_err_strs handles this aspect for us.
     *
     * Parse them out, or die trying
     */</comment>
    <expr_stmt><expr><name>old_status</name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>stat</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>res</name> = <call><name>ap_scan_script_header_err_strs_ex</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr>&amp;<name>termch</name></expr></argument>, <argument><expr>&amp;<name>termarg</name></expr></argument>, <argument><expr><name>stat</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>res</name> = <call><name>ap_scan_script_header_err_strs_ex</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><name>APLOG_MODULE_INDEX</name></expr></argument>, <argument><expr>&amp;<name>termch</name></expr></argument>, <argument><expr>&amp;<name>termarg</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* Set our status. */</comment>
    <if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
        <comment type="block">/* This is an immediate error result from the parser
         */</comment>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>res</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* We have a status in r-&gt;status, so let's just use it.
         * This is likely to be the Status: parsed above, and
         * may also be a delayed error result from the parser.
         * If it was filled in, status_line should also have
         * been filled in.
         */</comment>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name>
              &amp;&amp; <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> != <name>HTTP_OK</name></expr>)</condition><then> <block>{
        <comment type="block">/* Now we fall back on dwHttpStatusCode if it appears
         * ap_scan_script_header fell back on the default code.
         * Any other results set dwHttpStatusCode to the decoded
         * status value.
         */</comment>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>old_status</name></expr>)</condition><then> <block>{
        <comment type="block">/* Well... either there is no dwHttpStatusCode or it's HTTP_OK.
         * In any case, we don't have a good status to return yet...
         * Perhaps the one we came in with will be better. Let's use it,
         * if we were given one (note this is a pedantic case, it would
         * normally be covered above unless the scan script code unset
         * the r-&gt;status). Should there be a check here as to whether
         * we are setting a valid response code?
         */</comment>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>old_status</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* None of dwHttpStatusCode, the parser's r-&gt;status nor the
         * old value of r-&gt;status were helpful, and nothing was decoded
         * from Status: string passed to us.  Let's just say HTTP_OK
         * and get the data out, this was the isapi dev's oversight.
         */</comment>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name>HTTP_OK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02111</expr></argument>)</argument_list></call>
                "Could not determine HTTP response code; using %d"</expr></argument>,
                <argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></else></if>

    <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> == <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>)</condition><then> <block>{
        <return>return <expr>-1</expr>;</return>
    }</block></then></if>

    <comment type="block">/* If only Status was passed, we consumed nothing
     */</comment>
    <if>if <condition>(<expr>!<name>head_present</name></expr>)</condition><then>
        <return>return <expr>0</expr>;</return></then></if>

    <expr_stmt><expr><name><name>cid</name>-&gt;<name>headers_set</name></name> = 1</expr>;</expr_stmt>

    <comment type="block">/* If all went well, tell the caller we consumed the headers complete
     */</comment>
    <if>if <condition>(<expr>!<name>termch</name></expr>)</condition><then>
        <return>return<expr>(<name>ate</name> + <name>headlen</name>)</expr>;</return></then></if>

    <comment type="block">/* Any data left must be sent directly by the caller, all we
     * give back is the size of the headers we consumed (which only
     * happens if the parser got to the head arg, which varies based
     * on whether we passed stat+head to scan, or only head.
     */</comment>
    <if>if <condition>(<expr><name>termch</name> &amp;&amp; (<name>termarg</name> == (<name>stat</name> ? 1 : 0))
               &amp;&amp; <name>head_present</name> &amp;&amp; <name>head</name> + <name>headlen</name> &gt; <name>termch</name></expr>)</condition><then> <block>{
        <return>return <expr><name>ate</name> + <name>termch</name> - <name>head</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>ate</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnWriteClient</name><parameter_list>(<param><decl><type><name>isapi_cid</name>    *</type><name>cid</name></decl></param>,
                                            <param><decl><type><name>void</name>         *</type><name>buf_ptr</name></decl></param>,
                                            <param><decl><type><name>apr_uint32_t</name> *</type><name>size_arg</name></decl></param>,
                                            <param><decl><type><name>apr_uint32_t</name></type>  <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>buf_size</name> <init>= <expr>*<name>size_arg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf_data</name> <init>= <expr>(<name>char</name>*)<name>buf_ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>headers_set</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* It appears that the foxisapi module and other clients
         * presume that WriteClient("headers\n\nbody") will work.
         * Parse them out, or die trying.
         */</comment>
        <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>buf_data</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>buf_data</name> += <name>ate</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>buf_size</name> -= <name>ate</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>buf_size</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02984</expr></argument>)</argument_list></call>
                          "WriteClient ap_pass_brigade failed: %s"</expr></argument>,
                          <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>flags</name> &amp; <name>HSE_IO_ASYNC</name>) &amp;&amp; <name><name>cid</name>-&gt;<name>completion</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
                            <argument><expr>*<name>size_arg</name></expr></argument>, <argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
                            <argument><expr>*<name>size_arg</name></expr></argument>, <argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    <return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>APR_THREAD_FUNC</name></type> <name>regfnServerSupportFunction</name><parameter_list>(<param><decl><type><name>isapi_cid</name>    *</type><name>cid</name></decl></param>,
                                                      <param><decl><type><name>apr_uint32_t</name></type>  <name>HSE_code</name></decl></param>,
                                                      <param><decl><type><name>void</name>         *</type><name>buf_ptr</name></decl></param>,
                                                      <param><decl><type><name>apr_uint32_t</name> *</type><name>buf_size</name></decl></param>,
                                                      <param><decl><type><name>apr_uint32_t</name> *</type><name>data_type</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>cid</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>buf_data</name> <init>= <expr>(<name>char</name>*)<name>buf_ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>subreq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>HSE_code</name></expr>)</condition> <block>{
    <case>case <expr><name>HSE_REQ_SEND_URL_REDIRECT_RESP</name></expr>:
        <comment type="block">/* Set the status to be returned when the HttpExtensionProc()
         * is done.
         * WARNING: Microsoft now advertises HSE_REQ_SEND_URL_REDIRECT_RESP
         *          and HSE_REQ_SEND_URL as equivalent per the Jan 2000 SDK.
         *          They most definitely are not, even in their own samples.
         */</comment>
        <expr_stmt><expr><call><name>apr_table_set</name> <argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Location"</expr></argument>, <argument><expr><name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = <name>HTTP_MOVED_TEMPORARILY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status_line</name></name> = <call><name>ap_get_status_line</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>headers_set</name></name> = 1</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_SEND_URL</name></expr>:
        <comment type="block">/* Soak up remaining input */</comment>
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name><name>argsbuffer</name><index>[<expr><name>HUGE_STRING_LEN</name></expr>]</index></name></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>argsbuffer</name></expr></argument>, <argument><expr><name>HUGE_STRING_LEN</name></expr></argument>)</argument_list></call></expr>)</condition><empty_stmt>;</empty_stmt></while>
        }</block></then></if>

        <comment type="block">/* Reset the method to GET */</comment>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>method</name></name> = "GET"</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>r</name>-&gt;<name>method_number</name></name> = <name>M_GET</name></expr>;</expr_stmt>

        <comment type="block">/* Don't let anyone think there's still data */</comment>
        <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* AV fault per PR3598 - redirected path is lost! */</comment>
        <expr_stmt><expr><name>buf_data</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>char</name>*)<name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_internal_redirect</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_SEND_RESPONSE_HEADER</name></expr>:
    <block>{
        <comment type="block">/* Parse them out, or die trying */</comment>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>statlen</name> <init>= <expr>0</expr></init>, <name>headlen</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>buf_data</name></expr>)</condition><then>
            <expr_stmt><expr><name>statlen</name> = <call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><name>data_type</name></expr>)</condition><then>
            <expr_stmt><expr><name>headlen</name> = <call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name>*) <name>data_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>,
                                   <argument><expr>(<name>char</name>*) <name>data_type</name></expr></argument>,
                                   <argument><expr><name>statlen</name></expr></argument>, <argument><expr><name>headlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr>(<name>apr_size_t</name>)<name>ate</name> &lt; <name>headlen</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(<name>char</name>*) <name>data_type</name> + <name>ate</name></expr></argument>,
                                           <argument><expr><name>headlen</name> - <name>ate</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03177</expr></argument>)</argument_list></call>
                              "ServerSupportFunction "
                              "HSE_REQ_SEND_RESPONSE_HEADER "
                              "ap_pass_brigade failed: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
        }</block></then></if></else></if>
        <comment type="block">/* Deliberately hold off sending 'just the headers' to begin to
         * accumulate the body and speed up the overall response, or at
         * least wait for the end the session.
         */</comment>
        <return>return <expr>1</expr>;</return>
    }</block>

    </case><case>case <expr><name>HSE_REQ_DONE_WITH_SESSION</name></expr>:
        <comment type="block">/* Signal to resume the thread completing this request,
         * leave it to the pool cleanup to dispose of our mutex.
         */</comment>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completed</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr>(<name>void</name>)<call><name>apr_thread_mutex_unlock</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>1</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02671</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_DONE_WITH_SESSION is not supported: %s"</expr></argument>,
                          <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_MAP_URL_TO_PATH</name></expr>:
    <block>{
        <comment type="block">/* Map a URL to a filename */</comment>
        <decl_stmt><decl><type><name>char</name> *</type><name>file</name> <init>= <expr>(<name>char</name> *)<name>buf_data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>subreq</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(
                     <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>!<name><name>subreq</name>-&gt;<name>filename</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>subreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>len</name> = (<name>apr_uint32_t</name>)<call><name>strlen</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr>(<name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>)
              &amp;&amp; (!<name><name>subreq</name>-&gt;<name>path_info</name></name>)
              &amp;&amp; (<name><name>file</name><index>[<expr><name>len</name> - 1</expr>]</index></name> != '/')</expr>)</condition><then>
            <expr_stmt><expr><name>file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>subreq</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>"/"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>file</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>subreq</name>-&gt;<name>filename</name></name></expr></argument>,
                                              <argument><expr><name><name>subreq</name>-&gt;<name>path_info</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>

        <expr_stmt><expr><call><name>ap_destroy_sub_req</name><argument_list>(<argument><expr><name>subreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
        <comment type="block">/* We need to make this a real Windows path name */</comment>
        <expr_stmt><expr><call><name>apr_filepath_merge</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>APR_FILEPATH_NATIVE</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr>*<name>buf_size</name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf_data</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call> - <name>buf_data</name></expr>;</expr_stmt>

        <return>return <expr>1</expr>;</return>
    }</block>

    </case><case>case <expr><name>HSE_REQ_GET_SSPI_INFO</name></expr>:
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02672</expr></argument>)</argument_list></call>
                           "ServerSupportFunction HSE_REQ_GET_SSPI_INFO "
                           "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_APPEND_LOG_PARAMETER</name></expr>:
        <comment type="block">/* Log buf_data, of buf_size bytes, in the URI Query (cs-uri-query) field
         */</comment>
        <expr_stmt><expr><call><name>apr_table_set</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"isapi-parameter"</expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_query</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name><name>r</name>-&gt;<name>args</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_errlog</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02985</expr></argument>)</argument_list></call>
                          "%s: %s"</expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>filename</name></name></expr></argument>,
                          <argument><expr>(<name>char</name>*) <name>buf_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <return>return <expr>1</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_IO_COMPLETION</name></expr>:
        <comment type="block">/* Emulates a completion port...  Record callback address and
         * user defined arg, we will call this after any async request
         * (e.g. transmitfile) as if the request executed async.
         * Per MS docs... HSE_REQ_IO_COMPLETION replaces any prior call
         * to HSE_REQ_IO_COMPLETION, and buf_data may be set to NULL.
         */</comment>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>completion</name></name> = (<name>PFN_HSE_IO_COMPLETION</name>) <name>buf_data</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name> = (<name>void</name> *) <name>data_type</name></expr>;</expr_stmt>
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02673</expr></argument>)</argument_list></call>
                      "ServerSupportFunction HSE_REQ_IO_COMPLETION "
                      "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_TRANSMIT_FILE</name></expr>:
    <block>{
        <comment type="block">/* we do nothing with (tf-&gt;dwFlags &amp; HSE_DISCONNECT_AFTER_SEND)
         */</comment>
        <decl_stmt><decl><type><name>HSE_TF_INFO</name> *</type><name>tf</name> <init>= <expr>(<name>HSE_TF_INFO</name>*)<name>buf_data</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>sent</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_off_t</name></type> <name>fsize</name></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name> &amp;&amp; (<name><name>tf</name>-&gt;<name>dwFlags</name></name> &amp; <name>HSE_IO_ASYNC</name>)</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02674</expr></argument>)</argument_list></call>
                         "ServerSupportFunction HSE_REQ_TRANSMIT_FILE "
                         "as HSE_IO_ASYNC is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <comment type="block">/* Presume the handle was opened with the CORRECT semantics
         * for TransmitFile
         */</comment>
        <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_os_file_put</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr>&amp;<name><name>tf</name>-&gt;<name>hFile</name></name></expr></argument>,
                                  <argument><expr><name>APR_READ</name> | <name>APR_XTHREAD</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call>)
                != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <return>return <expr>0</expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>tf</name>-&gt;<name>BytesToWrite</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>fsize</name> = <name><name>tf</name>-&gt;<name>BytesToWrite</name></name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>fi</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>apr_file_info_get</name><argument_list>(<argument><expr>&amp;<name>fi</name></expr></argument>, <argument><expr><name>APR_FINFO_SIZE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>fsize</name> = <name><name>fi</name>.<name>size</name></name> - <name><name>tf</name>-&gt;<name>Offset</name></name></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="block">/* apr_dupfile_oshandle (&amp;fd, tf-&gt;hFile, r-&gt;pool); */</comment>
        <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* According to MS: if calling HSE_REQ_TRANSMIT_FILE with the
         * HSE_IO_SEND_HEADERS flag, then you can't otherwise call any
         * HSE_SEND_RESPONSE_HEADERS* fn, but if you don't use the flag,
         * you must have done so.  They document that the pHead headers
         * option is valid only for HSE_IO_SEND_HEADERS - we are a bit
         * more flexible and assume with the flag, pHead are the
         * response headers, and without, pHead simply contains text
         * (handled after this case).
         */</comment>
        <if>if <condition>(<expr>(<name><name>tf</name>-&gt;<name>dwFlags</name></name> &amp; <name>HSE_IO_SEND_HEADERS</name>) &amp;&amp; <name><name>tf</name>-&gt;<name>pszStatusCode</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>pszStatusCode</name></name></expr></argument>,
                                            <argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name></expr></argument>,
                                            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>tf</name>-&gt;<name>pszStatusCode</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><name><name>tf</name>-&gt;<name>HeadLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>headers_set</name></name> &amp;&amp; <name><name>tf</name>-&gt;<name>pHead</name></name> &amp;&amp; <name><name>tf</name>-&gt;<name>HeadLength</name></name>
                                   &amp;&amp; *(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ate</name> = <call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name></expr></argument>,
                                            <argument><expr>0</expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>HeadLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>0</expr>;</return>
            }</block></then></if>
        }</block></then></if></else></if>

        <if>if <condition>(<expr><name><name>tf</name>-&gt;<name>pHead</name></name> &amp;&amp; (<name>apr_size_t</name>)<name>ate</name> &lt; <name><name>tf</name>-&gt;<name>HeadLength</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pHead</name></name> + <name>ate</name></expr></argument>,
                                            <argument><expr><name><name>tf</name>-&gt;<name>HeadLength</name></name> - <name>ate</name></expr></argument>,
                                            <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sent</name> = <name><name>tf</name>-&gt;<name>HeadLength</name></name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>sent</name> += (<name>apr_uint32_t</name>)<name>fsize</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_insert_file</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>Offset</name></name></expr></argument>, <argument><expr><name>fsize</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>tf</name>-&gt;<name>pTail</name></name> &amp;&amp; <name><name>tf</name>-&gt;<name>TailLength</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sent</name> += <name><name>tf</name>-&gt;<name>TailLength</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>tf</name>-&gt;<name>pTail</name></name></expr></argument>,
                                            <argument><expr><name><name>tf</name>-&gt;<name>TailLength</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03178</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_TRANSMIT_FILE "
                          "ap_pass_brigade failed: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

        <comment type="block">/* Use tf-&gt;pfnHseIO + tf-&gt;pContext, or if NULL, then use cid-&gt;fnIOComplete
         * pass pContect to the HseIO callback.
         */</comment>
        <if>if <condition>(<expr><name><name>tf</name>-&gt;<name>dwFlags</name></name> &amp; <name>HSE_IO_ASYNC</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>tf</name>-&gt;<name>pfnHseIO</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tf</name>-&gt;<name>pfnHseIO</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>pContext</name></name></expr></argument>,
                                 <argument><expr><name>ERROR_SUCCESS</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>tf</name>-&gt;<name>pfnHseIO</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>tf</name>-&gt;<name>pContext</name></name></expr></argument>,
                                 <argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>, <argument><expr><name>sent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completion</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
                                    <argument><expr><name>sent</name></expr></argument>, <argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
                                    <argument><expr><name>sent</name></expr></argument>, <argument><expr><name>ERROR_WRITE_FAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if></else></if>
        }</block></then></if>
        <return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
    }</block>

    </case><case>case <expr><name>HSE_REQ_REFRESH_ISAPI_ACL</name></expr>:
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02675</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_REFRESH_ISAPI_ACL "
                          "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_IS_KEEP_CONN</name></expr>:
        <expr_stmt><expr>*((<name>int</name> *)<name>buf_data</name>) = (<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>keepalive</name></name> == <name>AP_CONN_KEEPALIVE</name>)</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_ASYNC_READ_CLIENT</name></expr>:
    <block>{
        <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>read</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02986</expr></argument>)</argument_list></call>
                              "asynchronous I/O not supported: %s"</expr></argument>,
                              <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name> &lt; *<name>buf_size</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>buf_size</name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
        }</block></then></if>

        <while>while <condition>(<expr><name>read</name> &lt; *<name>buf_size</name> &amp;&amp;
            ((<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>buf_data</name> + <name>read</name></expr></argument>,
                                        <argument><expr>*<name>buf_size</name> - <name>read</name></expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition> <block>{
            <expr_stmt><expr><name>read</name> += <name>res</name></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr>(*<name>data_type</name> &amp; <name>HSE_IO_ASYNC</name>) &amp;&amp; <name><name>cid</name>-&gt;<name>completion</name></name></expr>)</condition><then> <block>{
            <comment type="block">/* XXX: Many authors issue their next HSE_REQ_ASYNC_READ_CLIENT
             * within the completion logic.  An example is MS's own PSDK
             * sample web/iis/extensions/io/ASyncRead.  This potentially
             * leads to stack exhaustion.  To refactor, the notification
             * logic needs to move to isapi_handler() - differentiating
             * the cid-&gt;completed event with a new flag to indicate
             * an async-notice versus the async request completed.
             */</comment>
            <if>if <condition>(<expr><name>res</name> &gt;= 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
                                <argument><expr><name>read</name></expr></argument>, <argument><expr><name>ERROR_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>cid</name>-&gt;<name>completion</name></name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>completion_arg</name></name></expr></argument>,
                                <argument><expr><name>read</name></expr></argument>, <argument><expr><name>ERROR_READ_FAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <return>return <expr>(<name>res</name> &gt;= 0)</expr>;</return>
    }</block>

    </case><case>case <expr><name>HSE_REQ_GET_IMPERSONATION_TOKEN</name></expr>:  <comment type="block">/* Added in ISAPI 4.0 */</comment>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02676</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_GET_IMPERSONATION_TOKEN "
                          "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_MAP_URL_TO_PATH_EX</name></expr>:
    <block>{
        <comment type="block">/* Map a URL to a filename */</comment>
        <decl_stmt><decl><type><name>HSE_URL_MAPEX_INFO</name> *</type><name>info</name> <init>= <expr>(<name>HSE_URL_MAPEX_INFO</name>*)<name>data_type</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>*</type> <name>test_uri</name> <init>= <expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>char</name> *)<name>buf_data</name></expr></argument>, <argument><expr>*<name>buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>subreq</name> = <call><name>ap_sub_req_lookup_uri</name><argument_list>(<argument><expr><name>test_uri</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name>-&gt;<name>cchMatchingURL</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>test_uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name> = <call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>, <argument><expr><name><name>subreq</name>-&gt;<name>filename</name></name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> - <name><name>info</name>-&gt;<name>lpszPath</name></name></expr>;</expr_stmt>

        <comment type="block">/* Mapping started with assuming both strings matched.
         * Now roll on the path_info as a mismatch and handle
         * terminating slashes for directory matches.
         */</comment>
        <if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>subreq</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name> + <name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr></argument>,
                        <argument><expr><name><name>subreq</name>-&gt;<name>path_info</name></name></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof> - <name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>info</name>-&gt;<name>cchMatchingURL</name></name> -= <call><name>strlen</name><argument_list>(<argument><expr><name><name>subreq</name>-&gt;<name>path_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>
                 &amp;&amp; <name><name>info</name>-&gt;<name>cchMatchingPath</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
                <comment type="block">/* roll forward over path_info's first slash */</comment>
                <expr_stmt><expr>++<name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr>;</expr_stmt>
                <expr_stmt><expr>++<name><name>info</name>-&gt;<name>cchMatchingURL</name></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_DIR</name>
                 &amp;&amp; <name><name>info</name>-&gt;<name>cchMatchingPath</name></name> &lt; <sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name>-&gt;<name>lpszPath</name></name></expr></argument>)</argument_list></sizeof> - 1</expr>)</condition><then> <block>{
            <comment type="block">/* Add a trailing slash for directory */</comment>
            <expr_stmt><expr><name><name>info</name>-&gt;<name>lpszPath</name><index>[<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name>++</expr>]</index></name> = '/'</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>info</name>-&gt;<name>lpszPath</name><index>[<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
        }</block></then></if></else></if>

        <comment type="block">/* If the matched isn't a file, roll match back to the prior slash */</comment>
        <if>if <condition>(<expr><name><name>subreq</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name> &amp;&amp; <name><name>info</name>-&gt;<name>cchMatchingURL</name></name></expr>)</condition> <block>{
                <if>if <condition>(<expr><name><name>info</name>-&gt;<name>lpszPath</name><index>[<expr><name><name>info</name>-&gt;<name>cchMatchingPath</name></name> - 1</expr>]</index></name> == '/'</expr>)</condition><then>
                    <break>break;</break></then></if>
                <expr_stmt><expr>--<name><name>info</name>-&gt;<name>cchMatchingPath</name></name></expr>;</expr_stmt>
                <expr_stmt><expr>--<name><name>info</name>-&gt;<name>cchMatchingURL</name></name></expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>

        <comment type="block">/* Paths returned with back slashes */</comment>
        <for>for (<init><expr><name>test_uri</name> = <name><name>info</name>-&gt;<name>lpszPath</name></name></expr>;</init> <condition><expr>*<name>test_uri</name></expr>;</condition> <incr><expr>++<name>test_uri</name></expr></incr>)
            <if>if <condition>(<expr>*<name>test_uri</name> == '/'</expr>)</condition><then>
                <expr_stmt><expr>*<name>test_uri</name> = '\\'</expr>;</expr_stmt></then></if></for>

        <comment type="block">/* is a combination of:
         * HSE_URL_FLAGS_READ         0x001 Allow read
         * HSE_URL_FLAGS_WRITE        0x002 Allow write
         * HSE_URL_FLAGS_EXECUTE      0x004 Allow execute
         * HSE_URL_FLAGS_SSL          0x008 Require SSL
         * HSE_URL_FLAGS_DONT_CACHE   0x010 Don't cache (VRoot only)
         * HSE_URL_FLAGS_NEGO_CERT    0x020 Allow client SSL cert
         * HSE_URL_FLAGS_REQUIRE_CERT 0x040 Require client SSL cert
         * HSE_URL_FLAGS_MAP_CERT     0x080 Map client SSL cert to account
         * HSE_URL_FLAGS_SSL128       0x100 Require 128-bit SSL cert
         * HSE_URL_FLAGS_SCRIPT       0x200 Allow script execution
         *
         * XxX: As everywhere, EXEC flags could use some work...
         *      and this could go further with more flags, as desired.
         */</comment>
        <expr_stmt><expr><name><name>info</name>-&gt;<name>dwFlags</name></name> = (<name><name>subreq</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UREAD</name>    ? 0x001 : 0)
                      | (<name><name>subreq</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UWRITE</name>   ? 0x002 : 0)
                      | (<name><name>subreq</name>-&gt;<name>finfo</name>.<name>protection</name></name> &amp; <name>APR_UEXECUTE</name> ? 0x204 : 0)</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block>

    </case><case>case <expr><name>HSE_REQ_ABORTIVE_CLOSE</name></expr>:
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02677</expr></argument>)</argument_list></call>
                          "ServerSupportFunction HSE_REQ_ABORTIVE_CLOSE"
                          " is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_GET_CERT_INFO_EX</name></expr>:  <comment type="block">/* Added in ISAPI 4.0 */</comment>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02678</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_GET_CERT_INFO_EX "
                          "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_SEND_RESPONSE_HEADER_EX</name></expr>:  <comment type="block">/* Added in ISAPI 4.0 */</comment>
    <block>{
        <decl_stmt><decl><type><name>HSE_SEND_HEADER_EX_INFO</name> *</type><name>shi</name> <init>= <expr>(<name>HSE_SEND_HEADER_EX_INFO</name>*)<name>buf_data</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/*  Ignore shi-&gt;fKeepConn - we don't want the advise
         */</comment>
        <decl_stmt><decl><type><name>apr_ssize_t</name></type> <name>ate</name> <init>= <expr><call><name>send_response_header</name><argument_list>(<argument><expr><name>cid</name></expr></argument>, <argument><expr><name><name>shi</name>-&gt;<name>pszStatus</name></name></expr></argument>,
                                               <argument><expr><name><name>shi</name>-&gt;<name>pszHeader</name></name></expr></argument>,
                                               <argument><expr><name><name>shi</name>-&gt;<name>cchStatus</name></name></expr></argument>,
                                               <argument><expr><name><name>shi</name>-&gt;<name>cchHeader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ate</name> &lt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>0</expr>;</return>
        }</block></then>
        <else>else <if>if <condition>(<expr>(<name>apr_size_t</name>)<name>ate</name> &lt; <name><name>shi</name>-&gt;<name>cchHeader</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name><name>shi</name>-&gt;<name>pszHeader</name></name> + <name>ate</name></expr></argument>,
                                            <argument><expr><name><name>shi</name>-&gt;<name>cchHeader</name></name> - <name>ate</name></expr></argument>,
                                            <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03179</expr></argument>)</argument_list></call>
                              "ServerSupportFunction "
                              "HSE_REQ_SEND_RESPONSE_HEADER_EX "
                              "ap_pass_brigade failed: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <return>return <expr>(<name>rv</name> == <name>APR_SUCCESS</name>)</expr>;</return>
        }</block></then></if></else></if>
        <comment type="block">/* Deliberately hold off sending 'just the headers' to begin to
         * accumulate the body and speed up the overall response, or at
         * least wait for the end the session.
         */</comment>
        <return>return <expr>1</expr>;</return>
    }</block>

    </case><case>case <expr><name>HSE_REQ_CLOSE_CONNECTION</name></expr>:  <comment type="block">/* Added after ISAPI 4.0 */</comment>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02679</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_CLOSE_CONNECTION "
                          "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_IS_CONNECTED</name></expr>:  <comment type="block">/* Added after ISAPI 4.0 */</comment>
        <comment type="block">/* Returns True if client is connected c.f. MSKB Q188346
         * assuming the identical return mechanism as HSE_REQ_IS_KEEP_CONN
         */</comment>
        <expr_stmt><expr>*((<name>int</name> *)<name>buf_data</name>) = (<name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> == 0)</expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>

    </case><case>case <expr><name>HSE_REQ_EXTENSION_TRIGGER</name></expr>:  <comment type="block">/* Added after ISAPI 4.0 */</comment>
        <comment type="block">/*  Undocumented - defined by the Microsoft Jan '00 Platform SDK
         */</comment>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02680</expr></argument>)</argument_list></call>
                          "ServerSupportFunction "
                          "HSE_REQ_EXTENSION_TRIGGER "
                          "is not supported: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>

    </case><default>default:
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02681</expr></argument>)</argument_list></call>
                          "ServerSupportFunction (%d) not supported: "
                          "%s"</expr></argument>, <argument><expr><name>HSE_code</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <expr_stmt><expr><call><name>apr_set_os_error</name><argument_list>(<argument><expr><call><name>APR_FROM_OS_ERROR</name><argument_list>(<argument><expr><name>ERROR_INVALID_PARAMETER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>0</expr>;</return>
    </default>}</block></switch>
}</block></function>

<comment type="block">/**********************************************************
 *
 *  ISAPI Module request invocation section
 *
 **********************************************************/</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>isapi_handler</name> <parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>isapi_dir_conf</name> *</type><name>dconf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isapi_loaded</name> *</type><name>isa</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>isapi_cid</name> *</type><name>cid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"isapi-isa"</expr></argument>)</argument_list></call>
        &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"isapi-handler"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Hang on to the isapi-isa for compatibility with older docs
         * (wtf did '-isa' mean in the first place?) but introduce
         * a newer and clearer "isapi-handler" name.
         */</comment>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>dconf</name> = <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>isapi_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> = <name><name>r</name>-&gt;<name>subprocess_env</name></name></expr>;</expr_stmt>

    <comment type="block">/* Use similar restrictions as CGIs
     *
     * If this fails, it's pointless to load the isapi dll.
     */</comment>
    <if>if <condition>(<expr>!(<call><name>ap_allow_options</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> &amp; <name>OPT_EXECCGI</name>)</expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> == <name>APR_NOFILE</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_FORBIDDEN</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>used_path_info</name></name> == <name>AP_REQ_REJECT_PATH_INFO</name>) &amp;&amp;
        <name><name>r</name>-&gt;<name>path_info</name></name> &amp;&amp; *<name><name>r</name>-&gt;<name>path_info</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* default to accept */</comment>
        <return>return <expr><name>HTTP_NOT_FOUND</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>isapi_lookup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>&amp;<name>isa</name></expr></argument>)</argument_list></call>
           != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
    }</block></then></if>
    <comment type="block">/* Set up variables */</comment>
    <expr_stmt><expr><call><name>ap_add_common_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_add_cgi_vars</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"UNMAPPED_REMOTE_USER"</expr></argument>, <argument><expr>"REMOTE_USER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>(<name>val</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"HTTPS"</expr></argument>)</argument_list></call>) &amp;&amp; (<call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr>"on"</expr></argument>)</argument_list></call> == 0)</expr>)</condition><then>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_PORT_SECURE"</expr></argument>, <argument><expr>"1"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"SERVER_PORT_SECURE"</expr></argument>, <argument><expr>"0"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"URL"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set up connection structure and ecb,
     * NULL or zero out most fields.
     */</comment>
    <expr_stmt><expr><name>cid</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isapi_cid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Fixup defaults for dconf */</comment>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name> = (<name><name>dconf</name>-&gt;<name>read_ahead_buflen</name></name> == <name>ISAPI_UNDEF</name>)
                                     ? 49152 : <name><name>dconf</name>-&gt;<name>read_ahead_buflen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name>   = (<name><name>dconf</name>-&gt;<name>log_unsupported</name></name> == <name>ISAPI_UNDEF</name>)
                                     ? 0 : <name><name>dconf</name>-&gt;<name>log_unsupported</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_errlog</name></name>     = (<name><name>dconf</name>-&gt;<name>log_to_errlog</name></name> == <name>ISAPI_UNDEF</name>)
                                     ? 0 : <name><name>dconf</name>-&gt;<name>log_to_errlog</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_to_query</name></name>      = (<name><name>dconf</name>-&gt;<name>log_to_query</name></name> == <name>ISAPI_UNDEF</name>)
                                     ? 1 : <name><name>dconf</name>-&gt;<name>log_to_query</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name>        = (<name><name>dconf</name>-&gt;<name>fake_async</name></name> == <name>ISAPI_UNDEF</name>)
                                     ? 0 : <name><name>dconf</name>-&gt;<name>fake_async</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>EXTENSION_CONTROL_BLOCK</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>ConnID</name></name> = <name>cid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>isa</name></name> = <name>isa</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = 0</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbSize</name></name> = <sizeof>sizeof<argument_list>(<argument><expr><name>EXTENSION_CONTROL_BLOCK</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwVersion</name></name> = <name><name>isa</name>-&gt;<name>report_version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszLogData</name></name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* TODO: are copies really needed here?
     */</comment>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszMethod</name></name> = (<name>char</name>*) <name><name>r</name>-&gt;<name>method</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszQueryString</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"QUERY_STRING"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszPathInfo</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_INFO"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszPathTranslated</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"PATH_TRANSLATED"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszContentType</name></name> = (<name>char</name>*) <call><name>apr_table_get</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>"CONTENT_TYPE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set up the callbacks */</comment>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>GetServerVariable</name></name> = <name>regfnGetServerVariable</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>WriteClient</name></name> = <name>regfnWriteClient</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>ReadClient</name></name> = <name>regfnReadClient</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>ServerSupportFunction</name></name> = <name>regfnServerSupportFunction</name></expr>;</expr_stmt>

    <comment type="block">/* Set up client input */</comment>
    <expr_stmt><expr><name>res</name> = <call><name>ap_setup_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>REQUEST_CHUNKED_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>res</name></expr>)</condition><then> <block>{
        <return>return <expr><name>res</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>ap_should_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/* Time to start reading the appropriate amount of data,
         * and allow the administrator to tweak the number
         */</comment>
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = (<name>apr_size_t</name>)<name><name>r</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> &gt; (<name>apr_uint32_t</name>)<name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name></expr>)</condition><then>
                <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name></expr>;</expr_stmt></then>
            <else>else
                <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name></expr>;</expr_stmt></else></if>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = 0xffffffff</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>dconf</name>.<name>read_ahead_buflen</name></name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>read</name> = 0</expr>;</expr_stmt>
        <while>while <condition>(<expr><name>read</name> &lt; <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> &amp;&amp;
               ((<name>res</name> = <call><name>ap_get_client_block</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>(<name>char</name>*)<name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name></name> + <name>read</name></expr></argument>,
                                        <argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> - <name>read</name></expr></argument>)</argument_list></call>) &gt; 0)</expr>)</condition> <block>{
            <expr_stmt><expr><name>read</name> += <name>res</name></expr>;</expr_stmt>
        }</block></while>

        <if>if <condition>(<expr><name>res</name> &lt; 0</expr>)</condition><then> <block>{
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* Although it's not to spec, IIS seems to null-terminate
         * its lpdData string. So we will too.
         */</comment>
        <if>if <condition>(<expr><name>res</name> == 0</expr>)</condition><then>
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = <name>read</name></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = <name>read</name></expr>;</expr_stmt></else></if>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name><index>[<expr><name>read</name></expr>]</index></name> = '\0'</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbTotalBytes</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>cbAvailable</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpbData</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* To emulate async behavior...
     *
     * We create a cid-&gt;completed mutex and lock on it so that the
     * app can believe is it running async.
     *
     * This request completes upon a notification through
     * ServerSupportFunction(HSE_REQ_DONE_WITH_SESSION), which
     * unlocks this mutex.  If the HttpExtensionProc() returns
     * HSE_STATUS_PENDING, we will attempt to gain this lock again
     * which may *only* happen once HSE_REQ_DONE_WITH_SESSION has
     * unlocked the mutex.
     */</comment>
    <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>fake_async</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>,
                                     <argument><expr><name>APR_THREAD_MUTEX_UNNESTED</name></expr></argument>,
                                     <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completed</name></name> &amp;&amp; (<name>rv</name> == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<name><name>cid</name>-&gt;<name>completed</name></name> || (<name>rv</name> != <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02112</expr></argument>)</argument_list></call>
                          "Failed to create completion mutex"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* All right... try and run the sucker */</comment>
    <expr_stmt><expr><name>rv</name> = <call>(*<name><name>isa</name>-&gt;<name>HttpExtensionProc</name></name>)<argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>ecb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check for a log message - and log it */</comment>
    <if>if <condition>(<expr>*<name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszLogData</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02113</expr></argument>)</argument_list></call>
                      "%s: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>lpszLogData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <switch>switch<condition>(<expr><name>rv</name></expr>)</condition> <block>{
        <case>case <expr>0</expr>:  <comment type="block">/* Strange, but MS isapi accepts this as success */</comment>
        </case><case>case <expr><name>HSE_STATUS_SUCCESS</name></expr>:
        </case><case>case <expr><name>HSE_STATUS_SUCCESS_AND_KEEP_CONN</name></expr>:
            <comment type="block">/* Ignore the keepalive stuff; Apache handles it just fine without
             * the ISAPI Handler's "advice".
             * Per Microsoft: "In IIS versions 4.0 and later, the return
             * values HSE_STATUS_SUCCESS and HSE_STATUS_SUCCESS_AND_KEEP_CONN
             * are functionally identical: Keep-Alive connections are
             * maintained, if supported by the client."
             * ... so we were pat all this time
             */</comment>
            <break>break;</break>

        </case><case>case <expr><name>HSE_STATUS_PENDING</name></expr>:
            <comment type="block">/* emulating async behavior...
             */</comment>
            <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>completed</name></name></expr>)</condition><then> <block>{
                <comment type="block">/* The completion port was locked prior to invoking
                 * HttpExtensionProc().  Once we can regain the lock,
                 * when ServerSupportFunction(HSE_REQ_DONE_WITH_SESSION)
                 * is called by the extension to release the lock,
                 * we may finally destroy the request.
                 */</comment>
                <expr_stmt><expr>(<name>void</name>)<call><name>apr_thread_mutex_lock</name><argument_list>(<argument><expr><name><name>cid</name>-&gt;<name>completed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then>
            <else>else <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>dconf</name>.<name>log_unsupported</name></name></expr>)</condition><then> <block>{
                 <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02114</expr></argument>)</argument_list></call>
                               "asynch I/O result HSE_STATUS_PENDING "
                               "from HttpExtensionProc() is not supported: %s"</expr></argument>,
                               <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
            }</block></then></if></else></if>
            <break>break;</break>

        </case><case>case <expr><name>HSE_STATUS_ERROR</name></expr>:
            <comment type="block">/* end response if we have yet to do so.
             */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02115</expr></argument>)</argument_list></call>
                          "HSE_STATUS_ERROR result from "
                          "HttpExtensionProc(): %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>

        </case><default>default:
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><call><name>apr_get_os_error</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02116</expr></argument>)</argument_list></call>
                          "unrecognized result code %d "
                          "from HttpExtensionProc(): %s "</expr></argument>,
                          <argument><expr><name>rv</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name>HTTP_INTERNAL_SERVER_ERROR</name></expr>;</expr_stmt>
            <break>break;</break>
    </default>}</block></switch>

    <comment type="block">/* Flush the response now, including headers-only responses */</comment>
    <if>if <condition>(<expr><name><name>cid</name>-&gt;<name>headers_set</name></name> || <name><name>cid</name>-&gt;<name>response_sent</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>conn_rec</name> *</type><name>c</name> <init>= <expr><name><name>r</name>-&gt;<name>connection</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>bb</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cid</name>-&gt;<name>response_sent</name></name> = 1</expr>;</expr_stmt>

        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02117</expr></argument>)</argument_list></call>
                          "ap_pass_brigade failed to "
                          "complete the response: %s "</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>OK</name></expr>;</return> <comment type="block">/* NOT r-&gt;status, even if it has changed. */</comment>
    }</block></then></if>

    <comment type="block">/* As the client returned no error, and if we did not error out
     * ourselves, trust dwHttpStatusCode to say something relevant.
     */</comment>
    <if>if <condition>(<expr>!<call><name>ap_is_HTTP_SERVER_ERROR</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>status</name></name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>r</name>-&gt;<name>status</name></name> = <name><name>cid</name>-&gt;<name>ecb</name>-&gt;<name>dwHttpStatusCode</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* For all missing-response situations simply return the status,
     * and let the core respond to the client.
     */</comment>
    <return>return <expr><name><name>r</name>-&gt;<name>status</name></name></expr>;</return>
}</block></function>

<comment type="block">/**********************************************************
 *
 *  ISAPI Module Setup Hooks
 *
 **********************************************************/</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>isapi_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_pool_create_ex</name><argument_list>(<argument><expr>&amp;<name><name>loaded</name>.<name>pool</name></name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>loaded</name>.<name>pool</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>APR_EGENERAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02118</expr></argument>)</argument_list></call>
                     "could not create the isapi cache pool"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>loaded</name>.<name>hash</name></name> = <call><name>apr_hash_make</name><argument_list>(<argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>loaded</name>.<name>hash</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02119</expr></argument>)</argument_list></call>
                     "Failed to create module cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_thread_mutex_create</name><argument_list>(<argument><expr>&amp;<name><name>loaded</name>.<name>lock</name></name></expr></argument>, <argument><expr><name>APR_THREAD_MUTEX_DEFAULT</name></expr></argument>,
                                 <argument><expr><name><name>loaded</name>.<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02682</expr></argument>)</argument_list></call>
                     "Failed to create module cache lock"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>isapi_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>cont</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>isapi_pre_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>isapi_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>isapi</name></expr></argument>)</argument_list></call> = <block>{
   <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
   <expr><name>create_isapi_dir_config</name></expr>,     <comment type="block">/* create per-dir config */</comment>
   <expr><name>merge_isapi_dir_configs</name></expr>,     <comment type="block">/* merge per-dir config */</comment>
   <expr><name>NULL</name></expr>,                        <comment type="block">/* server config */</comment>
   <expr><name>NULL</name></expr>,                        <comment type="block">/* merge server config */</comment>
   <expr><name>isapi_cmds</name></expr>,                  <comment type="block">/* command apr_table_t */</comment>
   <expr><name>isapi_hooks</name></expr>                  <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
