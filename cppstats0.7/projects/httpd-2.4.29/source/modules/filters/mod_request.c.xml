<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/filters/mod_request.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_request.c --- HTTP routines to set aside or process request bodies.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>           <comment type="block">/* For errors detected in basic auth common
                                 * support code... */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_request.h"</cpp:file></cpp:include>

<comment type="block">/* Handles for core filters */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>keep_body_input_filter_handle</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ap_filter_rec_t</name> *</type><name>kept_body_input_filter_handle</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>bail_out_on_error</name><parameter_list>(<param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
                                      <param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
                                      <param><decl><type><name>int</name></type> <name>http_error</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> = <call><name>ap_bucket_error_create</name><argument_list>(<argument><expr><name>http_error</name></expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                               <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_eos_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>output_filters</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<typedef>typedef <type><struct>struct <name>keep_body_filter_ctx</name> <block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>remaining</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>keep_body</name></decl>;</decl_stmt>
}</block></struct></type> <name>keep_body_ctx_t</name>;</typedef>

<comment type="block">/**
 * This is the KEEP_BODY_INPUT filter for HTTP requests, for times when the
 * body should be set aside for future use by other modules.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>keep_body_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>,
                                     <param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
                                     <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
                                     <param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>keep_body_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>bucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>


    <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lenp</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>endstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                       <argument><expr>&amp;<name>request_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* must we step out of the way? */</comment>
        <if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>keep_body</name></name> || <name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* fail fast if the content length exceeds keep body */</comment>
        <expr_stmt><expr><name>lenp</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>lenp</name></expr>)</condition><then> <block>{

            <comment type="block">/* Protects against over/underflow, non-digit chars in the
             * string (excluding leading space) (the endstr checks)
             * and a negative number. */</comment>
            <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>remaining</name></name></expr></argument>, <argument><expr><name>lenp</name></expr></argument>, <argument><expr>&amp;<name>endstr</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
                || <name>endstr</name> == <name>lenp</name> || *<name>endstr</name> || <name><name>ctx</name>-&gt;<name>remaining</name></name> &lt; 0</expr>)</condition><then> <block>{

                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01411</expr></argument>)</argument_list></call>
                              "Invalid Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

            <comment type="block">/* If we have a limit in effect and we know the C-L ahead of
             * time, stop it here if it is invalid.
             */</comment>
            <if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>keep_body</name></name> &lt; <name><name>ctx</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01412</expr></argument>)</argument_list></call>
                          "Requested content-length of %" <name>APR_OFF_T_FMT</name>
                          " is larger than the configured limit"
                          " of %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>remaining</name></name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>keep_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></then></if>

        }</block></then></if>

        <expr_stmt><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> = <name><name>dconf</name>-&gt;<name>keep_body</name></name></expr>;</expr_stmt>

    }</block></then></if>

    <comment type="block">/* get the brigade from upstream, and read it in to get its length */</comment>
    <expr_stmt><expr><name>rv</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* does the length take us over the limit? */</comment>
    <if>if <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name> &amp;&amp; <name>len</name> &gt; <name><name>ctx</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01413</expr></argument>)</argument_list></call>
                      "Requested content-length of %" <name>APR_OFF_T_FMT</name>
                      " is larger than the configured limit"
                      " of %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>keep_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>bail_out_on_error</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>HTTP_REQUEST_ENTITY_TOO_LARGE</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> -= <name>len</name></expr>;</expr_stmt>

    <comment type="block">/* pass any errors downstream */</comment>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name> = <name>NULL</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* all is well, set aside the buckets */</comment>
    <for>for (<init><expr><name>bucket</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr><name>bucket</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</condition>
         <incr><expr><name>bucket</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></incr>)
    <block>{
        <expr_stmt><expr><call><name>apr_bucket_copy</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>kept_body</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>


<typedef>typedef <type><struct>struct <name>kept_body_filter_ctx</name> <block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>remaining</name></decl>;</decl_stmt>
}</block></struct></type> <name>kept_body_ctx_t</name>;</typedef>

<comment type="block">/**
 * Initialisation of filter to handle a kept body on subrequests.
 *
 * If a body is to be reinserted into a subrequest, any chunking will have
 * been removed from the body during storage. We need to change the request
 * from Transfer-Encoding: chunked to an explicit Content-Length.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kept_body_filter_init</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>length</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>kept_body</name> <init>= <expr><name><name>r</name>-&gt;<name>kept_body</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>kept_body</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Transfer-Encoding"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>kept_body</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>, <argument><expr><call><name>apr_off_t_toa</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Filter to handle a kept body on subrequests.
 *
 * If a body has been previously kept by the request, and if a subrequest wants
 * to re-insert the body into the request, this input filter makes it happen.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>kept_body_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>b</name></decl></param>,
                                     <param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
                                     <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
                                     <param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>kept_body</name> <init>= <expr><name><name>r</name>-&gt;<name>kept_body</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>kept_body_ctx_t</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>ec</name></decl>, *<decl><type ref="prev"/><name>e2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <comment type="block">/* just get out of the way of things we don't want. */</comment>
    <if>if <condition>(<expr>!<name>kept_body</name> || (<name>mode</name> != <name>AP_MODE_READBYTES</name> &amp;&amp; <name>mode</name> != <name>AP_MODE_GETLINE</name>)</expr>)</condition><then> <block>{
        <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* set up the context if it does not already exist */</comment>
    <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_length</name><argument_list>(<argument><expr><name>kept_body</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* kept_body is finished, send next filter */</comment>
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>remaining</name></name> &lt;= 0</expr>)</condition><then> <block>{
        <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/* send all of the kept_body, but no more */</comment>
    <if>if <condition>(<expr><name>readbytes</name> &gt; <name><name>ctx</name>-&gt;<name>remaining</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>readbytes</name> = <name><name>ctx</name>-&gt;<name>remaining</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* send part of the kept_body */</comment>
    <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name>kept_body</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>offset</name></name></expr></argument>, <argument><expr>&amp;<name>ec</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01414</expr></argument>)</argument_list></call>
                      "apr_brigade_partition() failed on kept_body at %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>(<name>rv</name> = <call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name>kept_body</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>offset</name></name> + <name>readbytes</name></expr></argument>, <argument><expr>&amp;<name>e2</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01415</expr></argument>)</argument_list></call>
                      "apr_brigade_partition() failed on kept_body at %" <name>APR_OFF_T_FMT</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>offset</name></name> + <name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <do>do <block>{
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>foo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>apr_bucket_copy</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr>&amp;<name>foo</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <comment type="block">/* As above; this should not fail since the bucket has
             * a known length, but just to be sure, this takes
             * care of uncopyable buckets that do somehow manage
             * to slip through.  */</comment>
            <comment type="block">/* XXX: check for failure? */</comment>
            <expr_stmt><expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_bucket_copy</name><argument_list>(<argument><expr><name>ec</name></expr></argument>, <argument><expr>&amp;<name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>foo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ec</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>ec</name> != <name>e2</name></expr>)</condition>;</do>

    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>remaining</name></name> -= <name>readbytes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>offset</name></name> += <name>readbytes</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * Check whether this filter is not already present.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>request_is_filter_present</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>ap_filter_rec_t</name> *</type><name>fn</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_filter_t</name> *</type> <name>f</name> <init>= <expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>f</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>f</name>-&gt;<name>frec</name></name> == <name>fn</name></expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>f</name> = <name><name>f</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/**
 * Insert filter hook.
 *
 * Add the KEEP_BODY filter to the request, if the admin wants to keep
 * the body using the KeptBodySize directive.
 *
 * As a precaution, any pre-existing instances of either the kept_body or
 * keep_body filters will be removed before the filter is added.
 *
 * @param r The request
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_request_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                  <argument><expr>&amp;<name>request_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>kept_body</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>request_is_filter_present</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>kept_body_input_filter_handle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_add_input_filter_handle</name><argument_list>(<argument><expr><name>kept_body_input_filter_handle</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>keep_body</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>request_is_filter_present</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>kept_body_input_filter_handle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_add_input_filter_handle</name><argument_list>(<argument><expr><name>keep_body_input_filter_handle</name></expr></argument>,
                                       <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></else></if>

}</block></function>

<comment type="block">/**
 * Remove the kept_body and keep body filters from this specific request.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>ap_request_remove_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_filter_t</name> *</type> <name>f</name> <init>= <expr><name><name>r</name>-&gt;<name>input_filters</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>f</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>f</name>-&gt;<name>frec</name>-&gt;<name>filter_func</name>.<name>in_func</name></name> == <name>kept_body_filter</name> ||
                <name><name>f</name>-&gt;<name>frec</name>-&gt;<name>filter_func</name>.<name>in_func</name></name> == <name>keep_body_filter</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>f</name> = <name><name>f</name>-&gt;<name>next</name></name></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_request_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>new</name> <init>=
        <expr>(<name>request_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>keep_body_set</name></name> = 0</expr>;</expr_stmt> <comment type="block">/* unset */</comment>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>keep_body</name></name> = 0</expr>;</expr_stmt> <comment type="block">/* don't by default */</comment>

    <return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_request_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>request_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>request_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>request_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>request_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>keep_body</name></name> = (<name><name>add</name>-&gt;<name>keep_body_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>keep_body</name></name> : <name><name>add</name>-&gt;<name>keep_body</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>keep_body_set</name></name> = <name><name>add</name>-&gt;<name>keep_body_set</name></name> || <name><name>base</name>-&gt;<name>keep_body_set</name></name></expr>;</expr_stmt>

    <return>return <expr><name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_kept_body_size</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>,
                                      <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;(<name><name>conf</name>-&gt;<name>keep_body</name></name>)</expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call>
            || <name><name>conf</name>-&gt;<name>keep_body</name></name> &lt; 0 || *<name>end</name></expr>)</condition><then> <block>{
        <return>return <expr>"KeptBodySize must be a valid size in bytes, or zero."</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>keep_body_set</name></name> = 1</expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>request_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"KeptBodySize"</expr></argument>, <argument><expr><name>set_kept_body_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ACCESS_CONF</name></expr></argument>,
                  <argument><expr>"Maximum size of request bodies kept aside for use by filters"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>keep_body_input_filter_handle</name> =
        <call><name>ap_register_input_filter</name><argument_list>(<argument><expr><name>KEEP_BODY_FILTER</name></expr></argument>, <argument><expr><name>keep_body_filter</name></expr></argument>,
                                 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>kept_body_input_filter_handle</name> =
        <call><name>ap_register_input_filter</name><argument_list>(<argument><expr><name>KEPT_BODY_FILTER</name></expr></argument>, <argument><expr><name>kept_body_filter</name></expr></argument>,
                                 <argument><expr><name>kept_body_filter_init</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>ap_request_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_LAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_request_insert_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_request_remove_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_request_dir_config</name></expr>, <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>merge_request_dir_config</name></expr>,  <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* create per-server config structure */</comment>
    <expr><name>NULL</name></expr>,                      <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>request_cmds</name></expr>,              <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>             <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
