<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/filters/mod_substitute.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * mod_substitute.c: Perform content rewriting on the fly
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strmatch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_varbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<comment type="block">/*
 * We want to limit the memory usage in a way that is predictable.
 * Therefore we limit the resulting length of the line.
 * This is the default value.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_SUBST_MAX_LINE_LENGTH</name></cpp:macro> <cpp:value>(1024*1024)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>substitute_filter_name</name><index>[]</index></name> <init>= <expr>"SUBSTITUTE"</expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>substitute_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>subst_pattern_t</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>apr_strmatch_pattern</name> *</type><name>pattern</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_regex_t</name> *</type><name>regexp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>replacement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>replen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>patlen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flatten</name></decl>;</decl_stmt>
}</block></struct></type> <name>subst_pattern_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>patterns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>max_line_length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_line_length_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>inherit_before</name></decl>;</decl_stmt>
}</block></struct></type> <name>subst_dir_conf</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>linebb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>linesbb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>passbb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>pattbb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tpool</name></decl>;</decl_stmt>
}</block></struct></type> <name>substitute_module_ctx</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_substitute_dcfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>d</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>dcfg</name> <init>=
        <expr>(<name>subst_dir_conf</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subst_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>dcfg</name>-&gt;<name>patterns</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subst_pattern_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dcfg</name>-&gt;<name>max_line_length</name></name> = <name>AP_SUBST_MAX_LINE_LENGTH</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dcfg</name>-&gt;<name>max_line_length_set</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dcfg</name>-&gt;<name>inherit_before</name></name> = -1</expr>;</expr_stmt>
    <return>return <expr><name>dcfg</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_substitute_dcfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>a</name> <init>=
        <expr>(<name>subst_dir_conf</name> *) <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subst_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>subst_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>over</name> <init>= <expr>(<name>subst_dir_conf</name> *) <name>overv</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>a</name>-&gt;<name>inherit_before</name></name> = (<name><name>over</name>-&gt;<name>inherit_before</name></name> != -1)
                            ? <name><name>over</name>-&gt;<name>inherit_before</name></name>
                            : <name><name>base</name>-&gt;<name>inherit_before</name></name></expr>;</expr_stmt>
    <comment type="block">/* SubstituteInheritBefore wasn't the default behavior until 2.5.x,
     * and may be re-disabled as desired; the original default behavior
     * was to apply inherited subst patterns after locally scoped patterns.
     * In later 2.2 and 2.4 versions, SubstituteInheritBefore may be toggled
     * 'on' to follow the corrected/expected behavior, without violating POLS.
     */</comment>
    <if>if <condition>(<expr><name><name>a</name>-&gt;<name>inherit_before</name></name> == 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>a</name>-&gt;<name>patterns</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>patterns</name></name></expr></argument>,
                                          <argument><expr><name><name>over</name>-&gt;<name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>a</name>-&gt;<name>patterns</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>over</name>-&gt;<name>patterns</name></name></expr></argument>,
                                          <argument><expr><name><name>base</name>-&gt;<name>patterns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>a</name>-&gt;<name>max_line_length</name></name> = <name><name>over</name>-&gt;<name>max_line_length_set</name></name> ?
                             <name><name>over</name>-&gt;<name>max_line_length</name></name> : <name><name>base</name>-&gt;<name>max_line_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>a</name>-&gt;<name>max_line_length_set</name></name> = <name><name>over</name>-&gt;<name>max_line_length_set</name></name>
                           | <name><name>base</name>-&gt;<name>max_line_length_set</name></name></expr>;</expr_stmt>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_MAX_BUCKETS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDRMPATBCKT</name><parameter_list>(<param><type><name>b</name></type></param>, <param><type><name>offset</name></type></param>, <param><type><name>tmp_b</name></type></param>, <param><type><name>patlen</name></type></param>)</parameter_list></cpp:macro> <cpp:value>do {  \
    apr_bucket_split(b, offset);                     \
    tmp_b = APR_BUCKET_NEXT(b);                      \
    apr_bucket_split(tmp_b, patlen);                 \
    b = APR_BUCKET_NEXT(tmp_b);                      \
    apr_bucket_delete(tmp_b);                        \
} while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>do_pattmatch</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket</name> *</type><name>inb</name></decl></param>,
                                 <param><decl><type><name>apr_bucket_brigade</name> *</type><name>mybb</name></decl></param>,
                                 <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>force_quick</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regmatch_t</name></type> <name><name>regm</name><index>[<expr><name>AP_MAX_REG_MATCH</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type>struct <name>ap_varbuf</name></type> <name>vb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_b</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>cfg</name> <init>=
    <expr>(<name>subst_dir_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                             <argument><expr>&amp;<name>substitute_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>subst_pattern_t</name> *</type><name>script</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>mybb</name></expr></argument>, <argument><expr><name>inb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_varbuf_init</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>script</name> = (<name>subst_pattern_t</name> *) <name><name>cfg</name>-&gt;<name>patterns</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
    <comment type="block">/*
     * Simple optimization. If we only have one pattern, then
     * we can safely avoid the overhead of flattening
     */</comment>
    <if>if <condition>(<expr><name><name>cfg</name>-&gt;<name>patterns</name>-&gt;<name>nelts</name></name> == 1</expr>)</condition><then> <block>{
       <expr_stmt><expr><name>force_quick</name> = 1</expr>;</expr_stmt>
    }</block></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>cfg</name>-&gt;<name>patterns</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>mybb</name></expr></argument>)</argument_list></call></expr>;</init>
             <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>mybb</name></expr></argument>)</argument_list></call></expr>;</condition>
             <incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
            <if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="block">/*
                 * we should NEVER see this, because we should never
                 * be passed any, but "handle" it just in case.
                 */</comment>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>buff</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call>
                    == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>have_match</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>vb</name>.<name>strlen</name></name> = 0</expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>script</name>-&gt;<name>pattern</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>repl</name></decl>;</decl_stmt>
                    <comment type="block">/*
                     * space_left counts how many bytes we have left until the
                     * line length reaches max_line_length.
                     */</comment>
                    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>space_left</name> <init>= <expr><name><name>cfg</name>-&gt;<name>max_line_length</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>repl_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>replacement</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr>(<name>repl</name> = <call><name>apr_strmatch</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>pattern</name></name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call>)</expr>)</condition>
                    <block>{
                        <expr_stmt><expr><name>have_match</name> = 1</expr>;</expr_stmt>
                        <comment type="block">/* get offset into buff for pattern */</comment>
                        <expr_stmt><expr><name>len</name> = <call>(<name>apr_size_t</name>) <argument_list>(<argument><expr><name>repl</name> - <name>buff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name><name>script</name>-&gt;<name>flatten</name></name> &amp;&amp; !<name>force_quick</name></expr>)</condition><then> <block>{
                            <comment type="block">/*
                             * We are flattening the buckets here, meaning
                             * that we don't do the fast bucket splits.
                             * Instead we copy over what the buckets would
                             * contain and use them. This is slow, since we
                             * are constanting allocing space and copying
                             * strings.
                             */</comment>
                            <if>if <condition>(<expr><name><name>vb</name>.<name>strlen</name></name> + <name>len</name> + <name>repl_len</name> &gt; <name><name>cfg</name>-&gt;<name>max_line_length</name></name></expr>)</condition><then>
                                <return>return <expr><name>APR_ENOMEM</name></expr>;</return></then></if>
                            <expr_stmt><expr><call><name>ap_varbuf_strmemcat</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>ap_varbuf_strmemcat</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>replacement</name></name></expr></argument>, <argument><expr><name>repl_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <comment type="block">/*
                             * The string before the match but after the
                             * previous match (if any) has length 'len'.
                             * Check if we still have space for this string and
                             * the replacement string.
                             */</comment>
                            <if>if <condition>(<expr><name>space_left</name> &lt; <name>len</name> + <name>repl_len</name></expr>)</condition><then>
                                <return>return <expr><name>APR_ENOMEM</name></expr>;</return></then></if>
                            <expr_stmt><expr><name>space_left</name> -= <name>len</name> + <name>repl_len</name></expr>;</expr_stmt>
                            <comment type="block">/*
                             * We now split off the string before the match
                             * as its own bucket, then isolate the matched
                             * string and delete it.
                             */</comment>
                            <expr_stmt><expr><call><name>SEDRMPATBCKT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>patlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="block">/*
                             * Finally, we create a bucket that contains the
                             * replacement...
                             */</comment>
                            <expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>replacement</name></name></expr></argument>,
                                      <argument><expr><name><name>script</name>-&gt;<name>replen</name></name></expr></argument>,
                                      <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <comment type="block">/* ... and insert it */</comment>
                            <expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <comment type="block">/* now we need to adjust buff for all these changes */</comment>
                        <expr_stmt><expr><name>len</name> += <name><name>script</name>-&gt;<name>patlen</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>bytes</name> -= <name>len</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>buff</name> += <name>len</name></expr>;</expr_stmt>
                    }</block></while>
                    <if>if <condition>(<expr><name>have_match</name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name><name>script</name>-&gt;<name>flatten</name></name> &amp;&amp; !<name>force_quick</name></expr>)</condition><then> <block>{
                            <comment type="block">/* XXX: we should check for AP_MAX_BUCKETS here and
                             * XXX: call ap_pass_brigade accordingly
                             */</comment>
                            <decl_stmt><decl><type><name>char</name> *</type><name>copy</name> <init>= <expr><call><name>ap_varbuf_pdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>,
                                                        <argument><expr><name>buff</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                                           <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>b</name> = <name>tmp_b</name></expr>;</expr_stmt>
                        }</block></then>
                        <else>else <block>{
                            <comment type="block">/*
                             * We want the behaviour to be predictable.
                             * Therefore we try to always error out if the
                             * line length is larger than the limit,
                             * regardless of the content of the line. So,
                             * let's check if the remaining non-matching
                             * string does not exceed the limit.
                             */</comment>
                            <if>if <condition>(<expr><name>space_left</name> &lt; <name><name>b</name>-&gt;<name>length</name></name></expr>)</condition><then>
                                <return>return <expr><name>APR_ENOMEM</name></expr>;</return></then></if>
                        }</block></else></if>
                    }</block></then></if>
                }</block></then>
                <else>else <if>if <condition>(<expr><name><name>script</name>-&gt;<name>regexp</name></name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>bytes</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pos</name> <init>= <expr><name>buff</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>char</name> *</type><name>repl</name></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>space_left</name> <init>= <expr><name><name>cfg</name>-&gt;<name>max_line_length</name></name></expr></init></decl>;</decl_stmt>
                    <while>while <condition>(<expr>!<call><name>ap_regexec_len</name><argument_list>(<argument><expr><name><name>script</name>-&gt;<name>regexp</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>left</name></expr></argument>,
                                       <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>)</condition> <block>{
                        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
                        <expr_stmt><expr><name>have_match</name> = 1</expr>;</expr_stmt>
                        <if>if <condition>(<expr><name><name>script</name>-&gt;<name>flatten</name></name> &amp;&amp; !<name>force_quick</name></expr>)</condition><then> <block>{
                            <comment type="block">/* check remaining buffer size */</comment>
                            <comment type="block">/* Note that the last param in ap_varbuf_regsub below
                             * must stay positive. If it gets 0, it would mean
                             * unlimited space available. */</comment>
                            <if>if <condition>(<expr><name><name>vb</name>.<name>strlen</name></name> + <name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name> &gt;= <name><name>cfg</name>-&gt;<name>max_line_length</name></name></expr>)</condition><then>
                                <return>return <expr><name>APR_ENOMEM</name></expr>;</return></then></if>
                            <comment type="block">/* copy bytes before the match */</comment>
                            <if>if <condition>(<expr><name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name> &gt; 0</expr>)</condition><then>
                                <expr_stmt><expr><call><name>ap_varbuf_strmemcat</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                            <comment type="block">/* add replacement string, last argument is unsigned! */</comment>
                            <expr_stmt><expr><name>rv</name> = <call><name>ap_varbuf_regsub</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name><name>script</name>-&gt;<name>replacement</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
                                                  <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>,
                                                  <argument><expr><name><name>cfg</name>-&gt;<name>max_line_length</name></name> - <name><name>vb</name>.<name>strlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                                <return>return <expr><name>rv</name></expr>;</return></then></if>
                        }</block></then>
                        <else>else <block>{
                            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>repl_len</name></decl>;</decl_stmt>
                            <comment type="block">/* acount for string before the match */</comment>
                            <if>if <condition>(<expr><name>space_left</name> &lt;= <name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>)</condition><then>
                                <return>return <expr><name>APR_ENOMEM</name></expr>;</return></then></if>
                            <expr_stmt><expr><name>space_left</name> -= <name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rv</name> = <call><name>ap_pregsub_ex</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>repl</name></expr></argument>,
                                               <argument><expr><name><name>script</name>-&gt;<name>replacement</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>,
                                               <argument><expr><name>AP_MAX_REG_MATCH</name></expr></argument>, <argument><expr><name>regm</name></expr></argument>,
                                               <argument><expr><name>space_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                                <return>return <expr><name>rv</name></expr>;</return></then></if>
                            <expr_stmt><expr><name>repl_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>repl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>space_left</name> -= <name>repl_len</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>len</name> = <call>(<name>apr_size_t</name>) <argument_list>(<argument><expr><name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name> - <name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>SEDRMPATBCKT</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_so</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>repl</name></expr></argument>, <argument><expr><name>repl_len</name></expr></argument>,
                                                <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                        <comment type="block">/*
                         * reset to past what we just did. pos now maps to b
                         * again
                         */</comment>
                        <expr_stmt><expr><name>pos</name> += <name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>left</name> -= <name><name>regm</name><index>[<expr>0</expr>]</index></name>.<name>rm_eo</name></expr>;</expr_stmt>
                    }</block></while>
                    <if>if <condition>(<expr><name>have_match</name> &amp;&amp; <name><name>script</name>-&gt;<name>flatten</name></name> &amp;&amp; !<name>force_quick</name></expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>char</name> *</type><name>copy</name></decl>;</decl_stmt>
                        <comment type="block">/* Copy result plus the part after the last match into
                         * a bucket.
                         */</comment>
                        <expr_stmt><expr><name>copy</name> = <call><name>ap_varbuf_pdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr>&amp;<name>vb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>left</name></expr></argument>,
                                              <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>,
                                           <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>APR_BUCKET_INSERT_BEFORE</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b</name> = <name>tmp_b</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><call><name>ap_assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <continue>continue;</continue>
                }</block></else></if></else></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>script</name>++</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>ap_varbuf_free</name><argument_list>(<argument><expr>&amp;<name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>substitute_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>fbytes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>bflat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>tmp_b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>tmp_bb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>cfg</name> <init>=
    <expr>(<name>subst_dir_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                             <argument><expr>&amp;<name>substitute_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>substitute_module_ctx</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
     * First time around? Create the saved bb that we used for each pass
     * through. Note that we can also get here when we explicitly clear ctx,
     * for error handling
     */</comment>
    <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * Create all the temporary brigades we need and reuse them to avoid
         * creating them over and over again from r-&gt;pool which would cost a
         * lot of memory in some cases.
         */</comment>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>linebb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>linesbb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/*
         * Everything to be passed to the next filter goes in
         * here, our pass brigade.
         */</comment>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>passbb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Create our temporary pool only once */</comment>
        <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>tpool</name></name>)</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Shortcircuit processing
     */</comment>
    <if>if <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>

    <comment type="block">/*
     * Here's the concept:
     *  Read in the data and look for newlines. Once we
     *  find a full "line", add it to our working brigade.
     *  If we've finished reading the brigade and we have
     *  any left over data (not a "full" line), store that
     *  for the next pass.
     *
     * Note: anything stored in ctx-&gt;linebb for sure does not have
     * a newline char, so we don't concat that bb with the
     * new bb, since we would spending time searching for the newline
     * in data we know it doesn't exist. So instead, we simply scan
     * our current bb and, if we see a newline, prepend ctx-&gt;linebb
     * to the front of it. This makes the code much less straight-
     * forward (otherwise we could APR_BRIGADE_CONCAT(ctx-&gt;linebb, bb)
     * and just scan for newlines and not bother with needing to know
     * when ctx-&gt;linebb needs to be reset) but also faster. We'll take
     * the speed.
     *
     * Note: apr_brigade_split_line would be nice here, but we
     * really can't use it since we need more control and we want
     * to re-use already read bucket data.
     *
     * See mod_include if still confused :)
     */</comment>

    <while>while <condition>(<expr>(<name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>) &amp;&amp; (<name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call>)</expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/*
             * if we see the EOS, then we need to pass along everything we
             * have. But if the ctx-&gt;linebb isn't empty, then we need to add
             * that to the end of what we'll be passing.
             */</comment>
            <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_pflatten</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>, <argument><expr>&amp;<name>bflat</name></expr></argument>,
                                          <argument><expr>&amp;<name>fbytes</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                    <goto>goto <name>err</name>;</goto></then></if>
                <if>if <condition>(<expr><name>fbytes</name> &gt; <name><name>cfg</name>-&gt;<name>max_line_length</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>rv</name> = <name>APR_ENOMEM</name></expr>;</expr_stmt>
                    <goto>goto <name>err</name>;</goto>
                }</block></then></if>
                <expr_stmt><expr><name>tmp_b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>bflat</name></expr></argument>, <argument><expr><name>fbytes</name></expr></argument>,
                                                <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rv</name> = <call><name>do_pattmatch</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>tmp_b</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                    <goto>goto <name>err</name>;</goto></then></if>
                <expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <comment type="block">/*
         * No need to handle FLUSH buckets separately as we call
         * ap_pass_brigade anyway at the end of the loop.
         */</comment>
        <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <comment type="block">/*
             * We have actual "data" so read in as much as we can and start
             * scanning and splitting from our read buffer
             */</comment>
            <expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>buff</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>bytes</name> == 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>bytes</name> &gt; 0</expr>)</condition> <block>{
                    <expr_stmt><expr><name>nl</name> = <call><name>memchr</name><argument_list>(<argument><expr><name>buff</name></expr></argument>, <argument><expr>'\n'</expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>nl</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>len</name> = <call>(<name>apr_size_t</name>) <argument_list>(<argument><expr><name>nl</name> - <name>buff</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
                        <comment type="block">/* split *after* the newline */</comment>
                        <expr_stmt><expr><call><name>apr_bucket_split</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/*
                         * We've likely read more data, so bypass rereading
                         * bucket data and continue scanning through this
                         * buffer
                         */</comment>
                        <expr_stmt><expr><name>bytes</name> -= <name>len</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>buff</name> += <name>len</name></expr>;</expr_stmt>
                        <comment type="block">/*
                         * we need b to be updated for future potential
                         * splitting
                         */</comment>
                        <expr_stmt><expr><name>tmp_b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/*
                         * Hey, we found a newline! Don't forget the old
                         * stuff that needs to be added to the front. So we
                         * add the split bucket to the end, flatten the whole
                         * bb, morph the whole shebang into a bucket which is
                         * then added to the tail of the newline bb.
                         */</comment>
                        <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rv</name> = <call><name>apr_brigade_pflatten</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>, <argument><expr>&amp;<name>bflat</name></expr></argument>,
                                                      <argument><expr>&amp;<name>fbytes</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                                <goto>goto <name>err</name>;</goto></then></if>
                            <if>if <condition>(<expr><name>fbytes</name> &gt; <name><name>cfg</name>-&gt;<name>max_line_length</name></name></expr>)</condition><then> <block>{
                                <comment type="block">/* Avoid pflattening further lines, we will
                                 * abort later on anyway.
                                 */</comment>
                                <expr_stmt><expr><name>rv</name> = <name>APR_ENOMEM</name></expr>;</expr_stmt>
                                <goto>goto <name>err</name>;</goto>
                            }</block></then></if>
                            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>bflat</name></expr></argument>, <argument><expr><name>fbytes</name></expr></argument>,
                                            <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><name>rv</name> = <call><name>do_pattmatch</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                            <goto>goto <name>err</name>;</goto></then></if>
                        <comment type="block">/*
                         * Count how many buckets we have in ctx-&gt;passbb
                         * so far. Yes, this is correct we count ctx-&gt;passbb
                         * and not ctx-&gt;pattbb as we do not reset num on every
                         * iteration.
                         */</comment>
                        <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name></expr></argument>)</argument_list></call></expr>;</init>
                             <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name></expr></argument>)</argument_list></call></expr>;</condition>
                             <incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
                            <expr_stmt><expr><name>num</name>++</expr>;</expr_stmt>
                        }</block></for>
                        <expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>pattbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="block">/*
                         * If the number of buckets in ctx-&gt;passbb reaches an
                         * "insane" level, we consume much memory for all the
                         * buckets as such. So lets flush them down the chain
                         * in this case and thus clear ctx-&gt;passbb. This frees
                         * the buckets memory for further processing.
                         * Usually this condition should not become true, but
                         * it is a safety measure for edge cases.
                         */</comment>
                        <if>if <condition>(<expr><name>num</name> &gt; <name>AP_MAX_BUCKETS</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(
                                                <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>num</name> = 0</expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                                <goto>goto <name>err</name>;</goto></then></if>
                        }</block></then></if>
                        <expr_stmt><expr><name>b</name> = <name>tmp_b</name></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <comment type="block">/*
                         * no newline in whatever is left of this buffer so
                         * tuck data away and get next bucket
                         */</comment>
                        <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>bytes</name> = 0</expr>;</expr_stmt>
                    }</block></else></if>
                }</block></while>
            }</block></else></if>
        }</block></else></if></else></if>
        <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>passbb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                <goto>goto <name>err</name>;</goto></then></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <comment type="block">/* Anything left we want to save/setaside for the next go-around */</comment>
    <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>linebb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <comment type="block">/*
         * Provide ap_save_brigade with an existing empty brigade
         * (ctx-&gt;linesbb) to avoid creating a new one.
         */</comment>
        <expr_stmt><expr><call><name>ap_save_brigade</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>linesbb</name></name>)</expr></argument>, <argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>linebb</name></name>)</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tmp_bb</name> = <name><name>ctx</name>-&gt;<name>linebb</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>linebb</name></name> = <name><name>ctx</name>-&gt;<name>linesbb</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>linesbb</name></name> = <name>tmp_bb</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
<label><name>err</name>:</label>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_ENOMEM</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01328</expr></argument>)</argument_list></call> "Line too long, URI %s"</expr></argument>,
                      <argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_pattern</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>line</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>from</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>to</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>flags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>ourline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>delim</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>subst_pattern_t</name> *</type><name>nscript</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>is_pattern</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ignore_case</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flatten</name> <init>= <expr>1</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_regex_t</name> *</type><name>r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>line</name></expr></argument>)</argument_list></call> != 's'</expr>)</condition><then> <block>{
        <return>return <expr>"Bad Substitute format, must be an s/// pattern"</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>ourline</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>delim</name> = *++<name>ourline</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>delim</name></expr>)</condition><then>
        <expr_stmt><expr><name>from</name> = ++<name>ourline</name></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>from</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>*<name>ourline</name> != <name>delim</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr>*++<name>ourline</name> &amp;&amp; *<name>ourline</name> != <name>delim</name></expr>)</condition><empty_stmt>;</empty_stmt></while>
        }</block></then></if>
        <if>if <condition>(<expr>*<name>ourline</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>ourline</name> = '\0'</expr>;</expr_stmt>
            <expr_stmt><expr><name>to</name> = ++<name>ourline</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>to</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>*<name>ourline</name> != <name>delim</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr>*++<name>ourline</name> &amp;&amp; *<name>ourline</name> != <name>delim</name></expr>)</condition><empty_stmt>;</empty_stmt></while>
        }</block></then></if>
        <if>if <condition>(<expr>*<name>ourline</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>ourline</name> = '\0'</expr>;</expr_stmt>
            <expr_stmt><expr><name>flags</name> = ++<name>ourline</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>delim</name> || !<name>from</name> || !*<name>from</name> || !<name>to</name></expr>)</condition><then> <block>{
        <return>return <expr>"Bad Substitute format, must be a complete s/// pattern"</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>flags</name></expr>)</condition><then> <block>{
        <while>while <condition>(<expr>*<name>flags</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>delim</name> = <call><name>apr_tolower</name><argument_list>(<argument><expr>*<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* re-use */</comment>
            <if>if <condition>(<expr><name>delim</name> == 'i'</expr>)</condition><then>
                <expr_stmt><expr><name>ignore_case</name> = 1</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>delim</name> == 'n'</expr>)</condition><then>
                <expr_stmt><expr><name>is_pattern</name> = 1</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>delim</name> == 'f'</expr>)</condition><then>
                <expr_stmt><expr><name>flatten</name> = 1</expr>;</expr_stmt></then>
            <else>else <if>if <condition>(<expr><name>delim</name> == 'q'</expr>)</condition><then>
                <expr_stmt><expr><name>flatten</name> = 0</expr>;</expr_stmt></then>
            <else>else
                <return>return <expr>"Bad Substitute flag, only s///[infq] are supported"</expr>;</return></else></if></else></if></else></if></else></if>
            <expr_stmt><expr><name>flags</name>++</expr>;</expr_stmt>
        }</block></while>
    }</block></then></if>

    <comment type="block">/* first see if we can compile the regex */</comment>
    <if>if <condition>(<expr>!<name>is_pattern</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>r</name> = <call><name>ap_pregcomp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>AP_REG_EXTENDED</name> |
                        (<name>ignore_case</name> ? <name>AP_REG_ICASE</name> : 0)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>r</name></expr>)</condition><then>
            <return>return <expr>"Substitute could not compile regex"</expr>;</return></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>nscript</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr>((<name>subst_dir_conf</name> *) <name>cfg</name>)-&gt;<name>patterns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* init the new entries */</comment>
    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>pattern</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>regexp</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>replacement</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>patlen</name></name> = 0</expr>;</expr_stmt>

    <if>if <condition>(<expr><name>is_pattern</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>nscript</name>-&gt;<name>patlen</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nscript</name>-&gt;<name>pattern</name></name> = <call><name>apr_strmatch_precompile</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>,
                                                   <argument><expr>!<name>ignore_case</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>nscript</name>-&gt;<name>regexp</name></name> = <name>r</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>replacement</name></name> = <name>to</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>replen</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>nscript</name>-&gt;<name>flatten</name></name> = <name>flatten</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KBYTE</name></cpp:macro>         <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MBYTE</name></cpp:macro>         <cpp:value>1048576</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GBYTE</name></cpp:macro>         <cpp:value>1073741824</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_max_line_length</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>subst_dir_conf</name> *</type><name>dcfg</name> <init>= <expr>(<name>subst_dir_conf</name> *)<name>cfg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>max</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>end</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>max</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr>&amp;<name>end</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>(*<name>end</name> == 'K' || *<name>end</name> == 'k') &amp;&amp; !<name><name>end</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> *= <name>KBYTE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>(*<name>end</name> == 'M' || *<name>end</name> == 'm') &amp;&amp; !<name><name>end</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> *= <name>MBYTE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>(*<name>end</name> == 'G' || *<name>end</name> == 'g') &amp;&amp; !<name><name>end</name><index>[<expr>1</expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>max</name> *= <name>GBYTE</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr>*<name>end</name> &amp;&amp; <comment type="block">/* neither empty nor [Bb] */</comment>
                 ((*<name>end</name> != 'B' &amp;&amp; *<name>end</name> != 'b') || <name><name>end</name><index>[<expr>1</expr>]</index></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>rv</name> = <name>APR_EGENERAL</name></expr>;</expr_stmt>
        }</block></then></if></else></if></else></if></else></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name> || <name>max</name> &lt; 0</expr>)</condition><then>
    <block>{
        <return>return <expr>"SubstituteMaxLineLength must be a non-negative integer optionally "
               "suffixed with 'b', 'k', 'm' or 'g'."</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dcfg</name>-&gt;<name>max_line_length</name></name> = (<name>apr_size_t</name>)<name>max</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dcfg</name>-&gt;<name>max_line_length_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTO_FLAGS</name></cpp:macro> <cpp:value>AP_FILTER_PROTO_CHANGE|AP_FILTER_PROTO_CHANGE_LENGTH</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr><name>substitute_filter_name</name></expr></argument>, <argument><expr><name>substitute_filter</name></expr></argument>,
                              <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>substitute_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"Substitute"</expr></argument>, <argument><expr><name>set_pattern</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
                  <argument><expr>"Pattern to filter the response content (s/foo/bar/[inf])"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SubstituteMaxLineLength"</expr></argument>, <argument><expr><name>set_max_line_length</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
                  <argument><expr>"Maximum line length"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SubstituteInheritBefore"</expr></argument>, <argument><expr><name>ap_set_flag_slot</name></expr></argument>,
                 <argument><expr>(<name>void</name> *)<call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>subst_dir_conf</name></expr></argument>, <argument><expr><name>inherit_before</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OR_FILEINFO</name></expr></argument>,
                 <argument><expr>"Apply inherited patterns before those of the current context"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>substitute</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_substitute_dcfg</name></expr>,     <comment type="block">/* dir config creater */</comment>
    <expr><name>merge_substitute_dcfg</name></expr>,      <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge server config */</comment>
    <expr><name>substitute_cmds</name></expr>,            <comment type="block">/* command table */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
