<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/filters/mod_include.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file mod_include.h
 * @brief Server Side Include Filter Extension Module for Apache
 *
 * @defgroup MOD_INCLUDE mod_include
 * @ingroup APACHE_MODS
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MOD_INCLUDE_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MOD_INCLUDE_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Constants used for ap_ssi_get_tag_and_value's decode parameter
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_VALUE_DECODED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_VALUE_RAW</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/*
 * Constants used for ap_ssi_parse_string's leave_name parameter
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_EXPAND_LEAVE_NAME</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_EXPAND_DROP_NAME</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/*
 * This macro creates a bucket which contains an error message and appends it
 * to the current pass brigade
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_CREATE_ERROR_BUCKET</name><parameter_list>(<param><type><name>ctx</name></type></param>, <param><type><name>f</name></type></param>, <param><type><name>bb</name></type></param>)</parameter_list></cpp:macro> <cpp:value>APR_BRIGADE_INSERT_TAIL((bb), \
    apr_bucket_pool_create(apr_pstrdup((ctx)-&gt;pool, (ctx)-&gt;error_str),    \
                           strlen((ctx)-&gt;error_str), (ctx)-&gt;pool,         \
                           (f)-&gt;c-&gt;bucket_alloc))</cpp:value></cpp:define>

<comment type="block">/*
 * These constants are used to set or clear flag bits.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_PRINTING</name></cpp:macro>         <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>  <comment type="block">/* Printing conditional lines. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_COND_TRUE</name></cpp:macro>        <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>  <comment type="block">/* Conditional eval'd to true. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_SIZE_IN_BYTES</name></cpp:macro>    <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>  <comment type="block">/* Sizes displayed in bytes.   */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_NO_EXEC</name></cpp:macro>          <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>  <comment type="block">/* No Exec in current context. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_SIZE_ABBREV</name></cpp:macro>      <cpp:value>(~(SSI_FLAG_SIZE_IN_BYTES))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_CLEAR_PRINT_COND</name></cpp:macro> <cpp:value>(~((SSI_FLAG_PRINTING) | \
                                     (SSI_FLAG_COND_TRUE)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSI_FLAG_CLEAR_PRINTING</name></cpp:macro>   <cpp:value>(~(SSI_FLAG_PRINTING))</cpp:value></cpp:define>

<comment type="block">/*
 * The public SSI context structure
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* permanent pool, use this for creating bucket data */</comment>
    <decl_stmt><decl><type><name>apr_pool_t</name>  *</type><name>pool</name></decl>;</decl_stmt>

    <comment type="block">/* temp pool; will be cleared after the execution of every directive */</comment>
    <decl_stmt><decl><type><name>apr_pool_t</name>  *</type><name>dpool</name></decl>;</decl_stmt>

    <comment type="block">/* See the SSI_FLAG_XXXXX definitions. */</comment>
    <decl_stmt><decl><type><name>int</name></type>          <name>flags</name></decl>;</decl_stmt>

    <comment type="block">/* nesting of *invisible* ifs */</comment>
    <decl_stmt><decl><type><name>int</name></type>          <name>if_nesting_level</name></decl>;</decl_stmt>

    <comment type="block">/* if true, the current buffer will be passed down the filter chain before
     * continuing with next input bucket and the variable will be reset to
     * false.
     */</comment>
    <decl_stmt><decl><type><name>int</name></type>          <name>flush_now</name></decl>;</decl_stmt>

    <comment type="block">/* argument counter (of the current directive) */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type>     <name>argc</name></decl>;</decl_stmt>

    <comment type="block">/* currently configured error string */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>error_str</name></decl>;</decl_stmt>

    <comment type="block">/* currently configured time format */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>  *</type><name>time_str</name></decl>;</decl_stmt>

    <comment type="block">/* the current request */</comment>
    <decl_stmt><decl><type><name>request_rec</name>  *</type><name>r</name></decl>;</decl_stmt>

    <comment type="block">/* pointer to internal (non-public) data, don't touch */</comment>
    <decl_stmt><decl><type>struct <name>ssi_internal_ctx</name> *</type><name>intern</name></decl>;</decl_stmt>

}</block></struct></type> <name>include_ctx_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>apr_status_t</name></type> (<name>include_handler_fn_t</name>)<parameter_list>(<param><decl><type><name>include_ctx_t</name> *</type></decl></param>, <param><decl><type><name>ap_filter_t</name> *</type></decl></param>,
                                            <param><decl><type><name>apr_bucket_brigade</name> *</type></decl></param>)</parameter_list>;</function_decl></typedef>

<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_ssi_get_tag_and_value</name></expr></argument>,
                        <argument><expr>(<name>include_ctx_t</name> *<name>ctx</name>, <name>char</name> **<name>tag</name>, <name>char</name> **<name>tag_val</name>,
                         <name>int</name> <name>dodecode</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>char</name>*</expr></argument>, <argument><expr><name>ap_ssi_parse_string</name></expr></argument>,
                        <argument><expr>(<name>include_ctx_t</name> *<name>ctx</name>, const <name>char</name> *<name>in</name>, <name>char</name> *<name>out</name>,
                         <name>apr_size_t</name> <name>length</name>, <name>int</name> <name>leave_name</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_register_include_handler</name></expr></argument>,
                        <argument><expr>(<name>char</name> *<name>tag</name>, <name>include_handler_fn_t</name> *<name>func</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOD_INCLUDE */</comment>
<comment type="block">/** @} */</comment>
</unit>
