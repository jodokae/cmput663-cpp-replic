<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/filters/regexp.h"><comment type="block">/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 *      Copyright (c) 1984, 1986, 1987, 1988, 1989 AT&amp;T
 *        All Rights Reserved
 *
 * University Copyright- Copyright (c) 1982, 1986, 1988
 * The Regents of the University of California
 * All Rights Reserved
 *
 * University Acknowledgment- Portions of this document are derived from
 * software developed by the University of California, Berkeley, and its
 * contributors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_REGEXP_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_REGEXP_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsed.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
<extern>extern "C" <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CBRA</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CCHR</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CDOT</name></cpp:macro>    <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CCL</name></cpp:macro>    <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CXCL</name></cpp:macro>    <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CDOL</name></cpp:macro>    <cpp:value>20</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CCEOF</name></cpp:macro>    <cpp:value>22</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CKET</name></cpp:macro>    <cpp:value>24</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>CBACK</name></cpp:macro>    <cpp:value>36</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>NCCL</name></cpp:macro>    <cpp:value>40</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>STAR</name></cpp:macro>    <cpp:value>01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>RNGE</name></cpp:macro>    <cpp:value>03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>NBRA</name></cpp:macro>    <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>PLACE</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>ep[c &gt;&gt; 3] |= bittab[c &amp; 07]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>ISTHERE</name><parameter_list>(<param><type><name>c</name></type></param>)</parameter_list></cpp:macro>    <cpp:value>(ep[c &gt;&gt; 3] &amp; bittab[c &amp; 07])</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_step_vars_storage</name> <block>{
    <decl_stmt><decl><type><name>char</name>    *</type><name>loc1</name></decl>, *<name>loc2</name>, *<name>locs</name>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    *</type><name><name>braslist</name><index>[<expr><name>NBRA</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>    *</type><name><name>braelist</name><index>[<expr><name>NBRA</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>low</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>size</name></decl>;</decl_stmt>
}</block></struct></type> <name>step_vars_storage</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_sed_comp_args</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>circf</name></decl>;</decl_stmt> <comment type="block">/* Regular expression starts with ^ */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nbra</name></decl>;</decl_stmt> <comment type="block">/* braces count */</comment>
}</block></struct></type> <name>sed_comp_args</name>;</typedef>

<function_decl><type><specifier>extern</specifier> <name>char</name> *</type><name>sed_compile</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><name>sed_comp_args</name> *</type><name>compargs</name></decl></param>,
                         <param><decl><type><name>char</name> *</type><name>ep</name></decl></param>, <param><decl><type><name>char</name> *</type><name>endbuf</name></decl></param>, <param><decl><type><name>int</name></type> <name>seof</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>command_errf</name><parameter_list>(<param><decl><type><name>sed_commands_t</name> *</type><name>commands</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fmt</name></decl></param>, <param><decl><type>...</type></decl></param>)</parameter_list>
                         __attribute__<parameter_list>(<param/></parameter_list>(format<parameter_list>(<param><decl><type><name>printf</name></type></decl></param>,<param/></parameter_list>2,3</function_decl>)</block></extern>))<empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_CGMES</name></cpp:macro> <cpp:value>"command garbled: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_SMMES</name></cpp:macro> <cpp:value>"Space missing before filename: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMMES</name></cpp:macro> <cpp:value>"too much command text: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_LTLMES</name></cpp:macro> <cpp:value>"label too long: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_ULMES</name></cpp:macro> <cpp:value>"undefined label: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_DLMES</name></cpp:macro> <cpp:value>"duplicate labels: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMLMES</name></cpp:macro> <cpp:value>"too many labels: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_AD0MES</name></cpp:macro> <cpp:value>"no addresses allowed: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_AD1MES</name></cpp:macro> <cpp:value>"only one address allowed: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TOOBIG</name></cpp:macro> <cpp:value>"suffix too large: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_OOMMES</name></cpp:macro> <cpp:value>"out of memory"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_COPFMES</name></cpp:macro> <cpp:value>"cannot open pattern file: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_COIFMES</name></cpp:macro> <cpp:value>"cannot open input file: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMOMES</name></cpp:macro> <cpp:value>"too many {'s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMCMES</name></cpp:macro> <cpp:value>"too many }'s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_NRMES</name></cpp:macro> <cpp:value>"first RE may not be null"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_UCMES</name></cpp:macro> <cpp:value>"unrecognized command: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMWFMES</name></cpp:macro> <cpp:value>"too many files in w commands"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_COMES</name></cpp:macro> <cpp:value>"cannot open %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_CCMES</name></cpp:macro> <cpp:value>"cannot create %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMLNMES</name></cpp:macro> <cpp:value>"too many line numbers"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMAMES</name></cpp:macro> <cpp:value>"too many appends after line %lld"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TMRMES</name></cpp:macro> <cpp:value>"too many reads after line %lld"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_DOORNG</name></cpp:macro> <cpp:value>"``\\digit'' out of range: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_EDMOSUB</name></cpp:macro> <cpp:value>"ending delimiter missing on substitution: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_EDMOSTR</name></cpp:macro> <cpp:value>"ending delimiter missing on string: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_FNTL</name></cpp:macro> <cpp:value>"file name too long: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_CLTL</name></cpp:macro> <cpp:value>"command line too long"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_TSNTSS</name></cpp:macro> <cpp:value>"transform strings not the same size: %s"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_OLTL</name></cpp:macro> <cpp:value>"output line too long."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_HSOVERFLOW</name></cpp:macro> <cpp:value>"hold space overflowed."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEDERR_INTERNAL</name></cpp:macro> <cpp:value>"internal sed error"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__cplusplus</name></cpp:ifdef>
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _REGEXP_H */</comment>
</unit>
