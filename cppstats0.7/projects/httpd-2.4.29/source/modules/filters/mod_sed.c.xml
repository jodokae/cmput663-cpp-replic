<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/filters/mod_sed.c"><comment type="block">/*
 * Copyright (c) 2005, 2008 Sun Microsystems, Inc. All Rights Reserved.
 * Use is subject to license terms.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_general.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libsed.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>sed_filter_name</name> <init>= <expr>"Sed"</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODSED_OUTBUF_SIZE</name></cpp:macro> <cpp:value>8000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRANSIENT_BUCKETS</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>sed_expr_config</name>
<block>{
    <decl_stmt><decl><type><name>sed_commands_t</name> *</type><name>sed_cmds</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>last_error</name></decl>;</decl_stmt>
}</block></struct></type> <name>sed_expr_config</name>;</typedef>

<typedef>typedef <type><struct>struct <name>sed_config</name>
<block>{
    <decl_stmt><decl><type><name>sed_expr_config</name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_expr_config</name></type> <name>input</name></decl>;</decl_stmt>
}</block></struct></type> <name>sed_config</name>;</typedef>

<comment type="block">/* Context for filter invocation for single HTTP request */</comment>
<typedef>typedef <type><struct>struct <name>sed_filter_ctxt</name>
<block>{
    <decl_stmt><decl><type><name>sed_eval_t</name></type> <name>eval</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bbinp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>outbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>curoutbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bufsize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>tpool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>numbuckets</name></decl>;</decl_stmt>
}</block></struct></type> <name>sed_filter_ctxt</name>;</typedef>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>sed_module</name></decl>;</decl_stmt>

<comment type="block">/* This function will be call back from libsed functions if there is any error
 * happend during execution of sed scripts
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>log_sed_errf</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr>(<name>request_rec</name> *) <name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02998</expr></argument>)</argument_list></call> "%s"</expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/* This function will be call back from libsed functions if there is any
 * compilation error.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sed_compile_errf</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>sed_expr_config</name> *</type><name>sed_cfg</name> <init>= <expr>(<name>sed_expr_config</name> *) <name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sed_cfg</name>-&gt;<name>last_error</name></name> = <name>error</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/* clear the temporary pool (used for transient buckets)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_ctxpool</name><parameter_list>(<param><decl><type><name>sed_filter_ctxt</name>*</type> <name>ctx</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>apr_pool_clear</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>outbuf</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>numbuckets</name></name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block">/* alloc_outbuf
 * allocate output buffer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>alloc_outbuf</name><parameter_list>(<param><decl><type><name>sed_filter_ctxt</name>*</type> <name>ctx</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>outbuf</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bufsize</name></name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> = <name><name>ctx</name>-&gt;<name>outbuf</name></name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/* append_bucket
 * Allocate a new bucket from buf and sz and append to ctx-&gt;bb
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>append_bucket</name><parameter_list>(<param><decl><type><name>sed_filter_ctxt</name>*</type> <name>ctx</name></decl></param>, <param><decl><type><name>char</name>*</type> <name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>sz</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>tpool</name></name> == <name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* We are not using transient bucket */</comment>
        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_pool_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                                   <argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* We are using transient bucket */</comment>
        <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_transient_create</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>,
                                        <argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>numbuckets</name></name>++</expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>numbuckets</name></name> &gt;= <name>MAX_TRANSIENT_BUCKETS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> = <call><name>apr_bucket_flush_create</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>clear_ctxpool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * flush_output_buffer
 * Flush the  output data (stored in ctx-&gt;outbuf)
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>flush_output_buffer</name><parameter_list>(<param><decl><type><name>sed_filter_ctxt</name> *</type><name>ctx</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> - <name><name>ctx</name>-&gt;<name>outbuf</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>(<name><name>ctx</name>-&gt;<name>outbuf</name></name> == <name>NULL</name>) || (<name>size</name> &lt;=0)</expr>)</condition><then>
        <return>return <expr><name>status</name></expr>;</return></then></if>
    <expr_stmt><expr><name>out</name> = <call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>append_bucket</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> = <name><name>ctx</name>-&gt;<name>outbuf</name></name></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/* This is a call back function. When libsed wants to generate the output,
 * this function will be invoked.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sed_write_output</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>sz</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* dummy is basically filter context. Context is passed during invocation
     * of sed_eval_buffer
     */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>remainbytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_filter_ctxt</name> *</type><name>ctx</name> <init>= <expr>(<name>sed_filter_ctxt</name> *) <name>dummy</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>outbuf</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>alloc_outbuf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>remainbytes</name> = <name><name>ctx</name>-&gt;<name>bufsize</name></name> - (<name><name>ctx</name>-&gt;<name>curoutbuf</name></name> - <name><name>ctx</name>-&gt;<name>outbuf</name></name>)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name>sz</name> &gt;= <name>remainbytes</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>remainbytes</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>remainbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>buf</name> += <name>remainbytes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sz</name> -= <name>remainbytes</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> += <name>remainbytes</name></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* buffer is now full */</comment>
        <expr_stmt><expr><name>status</name> = <call><name>append_bucket</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>outbuf</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* old buffer is now used so allocate new buffer */</comment>
        <expr_stmt><expr><call><name>alloc_outbuf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* if size is bigger than the allocated buffer directly add to output
         * brigade */</comment>
        <if>if <condition>(<expr>(<name>status</name> == <name>APR_SUCCESS</name>) &amp;&amp; (<name>sz</name> &gt;= <name><name>ctx</name>-&gt;<name>bufsize</name></name>)</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name>*</type> <name>newbuf</name> <init>= <expr><call><name>apr_pmemdup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>tpool</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>status</name> = <call><name>append_bucket</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>newbuf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* pool might get clear after append_bucket */</comment>
            <if>if <condition>(<expr><name><name>ctx</name>-&gt;<name>outbuf</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>alloc_outbuf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> += <name>sz</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>curoutbuf</name></name> += <name>sz</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/* Compile a sed expression. Compiled context is saved in sed_cfg-&gt;sed_cmds.
 * Memory required for compilation context is allocated from cmd-&gt;pool.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>compile_sed_expr</name><parameter_list>(<param><decl><type><name>sed_expr_config</name> *</type><name>sed_cfg</name></decl></param>,
                                     <param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>sed_commands_t</name> *</type><name>sed_cmds</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>sed_cmds</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sed_commands_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = <call><name>sed_init_commands</name><argument_list>(<argument><expr><name>sed_cmds</name></expr></argument>, <argument><expr><name>sed_compile_errf</name></expr></argument>, <argument><expr><name>sed_cfg</name></expr></argument>,
                                   <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sed_destroy_commands</name><argument_list>(<argument><expr><name>sed_cmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name> = <name>sed_cmds</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>status</name> = <call><name>sed_compile_string</name><argument_list>(<argument><expr><name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name></expr></argument>, <argument><expr><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>sed_destroy_commands</name><argument_list>(<argument><expr><name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/* sed eval cleanup function */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sed_eval_cleanup</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>sed_eval_t</name> *</type><name>eval</name> <init>= <expr>(<name>sed_eval_t</name> *) <name>data</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sed_destroy_eval</name><argument_list>(<argument><expr><name>eval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/* Initialize sed filter context. If successful then context is set in f-&gt;ctx
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>init_context</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>, <param><decl><type><name>sed_expr_config</name> *</type><name>sed_cfg</name></decl></param>, <param><decl><type><name>int</name></type> <name>usetpool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_filter_ctxt</name>*</type> <name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>r</name> <init>= <expr><name><name>f</name>-&gt;<name>r</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* Create the context. Call sed_init_eval. libsed will generated
     * output by calling sed_write_output and generates any error by
     * invoking log_sed_errf.
     */</comment>
    <expr_stmt><expr><name>ctx</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sed_filter_ctxt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>r</name></name> = <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>numbuckets</name></name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>f</name></name> = <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>sed_init_eval</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>eval</name></name></expr></argument>, <argument><expr><name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name></expr></argument>, <argument><expr><name>log_sed_errf</name></expr></argument>,
                           <argument><expr><name>r</name></expr></argument>, <argument><expr>&amp;<name>sed_write_output</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>&amp;<name><name>ctx</name>-&gt;<name>eval</name></name></expr></argument>, <argument><expr><name>sed_eval_cleanup</name></expr></argument>,
                              <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>bufsize</name></name> = <name>MODSED_OUTBUF_SIZE</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>usetpool</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;(<name><name>ctx</name>-&gt;<name>tpool</name></name>)</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>tpool</name></name> = <name><name>r</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>alloc_outbuf</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name>-&gt;<name>ctx</name></name> = <name>ctx</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/* Entry function for Sed output filter */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sed_response_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
                                        <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_config</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                           <argument><expr>&amp;<name>sed_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_filter_ctxt</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_expr_config</name> *</type><name>sed_cfg</name> <init>= <expr>&amp;<name><name>cfg</name>-&gt;<name>output</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>sed_cfg</name> == <name>NULL</name>) || (<name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name> == <name>NULL</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* No sed expressions */</comment>
        <expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>ctx</name> == <name>NULL</name></expr>)</condition><then> <block>{

        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <comment type="block">/* no need to run sed filter for Head requests */</comment>
            <expr_stmt><expr><call><name>ap_remove_output_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>status</name> = <call><name>init_context</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>sed_cfg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
             <return>return <expr><name>status</name></expr>;</return></then></if>
        <expr_stmt><expr><name>ctx</name> = <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_table_unset</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Here is the main logic. Iterate through all the buckets, read the
     * content of the bucket, call sed_eval_buffer on the data.
     * sed_eval_buffer will read the data line by line, run filters on each
     * line. sed_eval_buffer will generates the output by calling
     * sed_write_output which will add the output to ctx-&gt;bb. At the end of
     * the loop, ctx-&gt;bb is passed to the next filter in chain. At the end of
     * the data, if new line is not found then sed_eval_buffer will store the
     * data in its own buffer.
     *
     * Once eos bucket is found then sed_finalize_eval will flush the rest of
     * the data. If there is no new line in last line of data, new line is
     * appended (that is a solaris sed behavior). libsed's internal memory for
     * evaluation is allocated on request's pool so it will be cleared once
     * request is over.
     *
     * If flush bucket is found then append the flush bucket to ctx-&gt;bb
     * and pass it to next filter. There may be some data which will still be
     * in sed's internal buffer which can't be flushed until new line
     * character is arrived.
     */</comment>
    <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</condition><incr/>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b1</name> <init>= <expr><call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="block">/* Now clean up the internal sed buffer */</comment>
            <expr_stmt><expr><call><name>sed_finalize_eval</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>eval</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>status</name> = <call><name>flush_output_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>clear_ctxpool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>status</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Insert the eos bucket to ctx-&gt;bb brigade */</comment>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <name>b1</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b1</name> <init>= <expr><call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>status</name> = <call><name>flush_output_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>clear_ctxpool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>status</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <name>b1</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call>
                 == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b1</name> <init>= <expr><call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>status</name> = <call><name>sed_eval_buffer</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>eval</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>clear_ctxpool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>status</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_bucket_delete</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <name>b1</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b1</name> <init>= <expr><call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> = <name>b1</name></expr>;</expr_stmt>
        }</block></else></if></else></if></else></if></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>status</name> = <call><name>flush_output_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>clear_ctxpool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>status</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>ap_pass_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>clear_ctxpool</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>status</name></expr>;</return>
}</block></function>

<comment type="block">/* Entry function for Sed input filter */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>sed_request_filter</name><parameter_list>(<param><decl><type><name>ap_filter_t</name> *</type><name>f</name></decl></param>,
                                       <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>,
                                       <param><decl><type><name>ap_input_mode_t</name></type> <name>mode</name></decl></param>,
                                       <param><decl><type><name>apr_read_type_e</name></type> <name>block</name></decl></param>,
                                       <param><decl><type><name>apr_off_t</name></type> <name>readbytes</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>sed_config</name> *</type><name>cfg</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                           <argument><expr>&amp;<name>sed_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_filter_ctxt</name> *</type><name>ctx</name> <init>= <expr><name><name>f</name>-&gt;<name>ctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>bbinp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_expr_config</name> *</type><name>sed_cfg</name> <init>= <expr>&amp;<name><name>cfg</name>-&gt;<name>input</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>mode</name> != <name>AP_MODE_READBYTES</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>(<name>sed_cfg</name> == <name>NULL</name>) || (<name><name>sed_cfg</name>-&gt;<name>sed_cmds</name></name> == <name>NULL</name>)</expr>)</condition><then> <block>{
        <comment type="block">/* No sed expression */</comment>
        <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>ctx</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<call><name>ap_is_initial_req</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_remove_input_filter</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* XXX : Should we filter the sub requests too */</comment>
            <return>return <expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bb</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>status</name> = <call><name>init_context</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>sed_cfg</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
             <return>return <expr><name>status</name></expr>;</return></then></if>
        <expr_stmt><expr><name>ctx</name> = <name><name>f</name>-&gt;<name>ctx</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>bb</name></name>    = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name>-&gt;<name>bbinp</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>f</name>-&gt;<name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>bbinp</name> = <name><name>ctx</name>-&gt;<name>bbinp</name></name></expr>;</expr_stmt>

    <comment type="block">/* Here is the logic :
     * Read the readbytes data from next level fiter into bbinp. Loop through
     * the buckets in bbinp and read the data from buckets and invoke
     * sed_eval_buffer on the data. libsed will generate its output using
     * sed_write_output which will add data in ctx-&gt;bb. Do it until it have
     * atleast one bucket in ctx-&gt;bb. At the end of data eos bucket
     * should be there.
     *
     * Once eos bucket is seen, then invoke sed_finalize_eval to clear the
     * output. If the last byte of data is not a new line character then sed
     * will add a new line to the data that is default sed behaviour. Note
     * that using this filter with POST data, caller may not expect this
     * behaviour.
     *
     * If next level fiter generate the flush bucket, we can't do much about
     * it. If we want to return the flush bucket in brigade bb (to the caller)
     * the question is where to add it?
     */</comment>
    <while>while <condition>(<expr><call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name></decl>;</decl_stmt>

        <comment type="block">/* read the bytes from next level filter */</comment>
        <expr_stmt><expr><call><name>apr_brigade_cleanup</name><argument_list>(<argument><expr><name>bbinp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>status</name> = <call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>f</name>-&gt;<name>next</name></name></expr></argument>, <argument><expr><name>bbinp</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
        <for>for (<init><expr><name>b</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>bbinp</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>b</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name>bbinp</name></expr></argument>)</argument_list></call></expr>;</condition>
             <incr><expr><name>b</name> = <call><name>APR_BUCKET_NEXT</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></incr>) <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>bytes</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="block">/* eos bucket. Clear the internal sed buffers */</comment>
                <expr_stmt><expr><call><name>sed_finalize_eval</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>eval</name></name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>flush_output_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then>
            <else>else <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="block">/* What should we do with flush bucket */</comment>
                <continue>continue;</continue>
            }</block></then></if></else></if>
            <if>if <condition>(<expr><call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call>
                     == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>status</name> = <call><name>sed_eval_buffer</name><argument_list>(<argument><expr>&amp;<name><name>ctx</name>-&gt;<name>eval</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then>
                    <return>return <expr><name>status</name></expr>;</return></then></if>
                <expr_stmt><expr><call><name>flush_output_buffer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>

    <if>if <condition>(<expr>!<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>b</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>, <argument><expr><name>readbytes</name></expr></argument>, <argument><expr>&amp;<name>b</name></expr></argument>)</argument_list></call> == <name>APR_INCOMPLETE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>APR_BRIGADE_CONCAT</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_brigade_split_ex</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>ctx</name>-&gt;<name>bb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>sed_add_expr</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>cfg</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr>(<name>int</name>) (<name>long</name>) <name><name>cmd</name>-&gt;<name>info</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sed_expr_config</name> *</type><name>sed_cfg</name> <init>=
                <expr><call>(<name>sed_expr_config</name> *) <argument_list>(<argument><expr>((<name>char</name> *) <name>cfg</name>) + <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>compile_sed_expr</name><argument_list>(<argument><expr><name>sed_cfg</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>,
                            <argument><expr>"Failed to compile sed expression. %s"</expr></argument>,
                            <argument><expr><name><name>sed_cfg</name>-&gt;<name>last_error</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_sed_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>sed_config</name> *</type><name>cfg</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sed_config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>cfg</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>sed_filter_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"OutputSed"</expr></argument>, <argument><expr><name>sed_add_expr</name></expr></argument>,
                  <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>sed_config</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name>ACCESS_CONF</name></expr></argument>,
                  <argument><expr>"Sed regular expression for Response"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"InputSed"</expr></argument>, <argument><expr><name>sed_add_expr</name></expr></argument>,
                  <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>sed_config</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name>ACCESS_CONF</name></expr></argument>,
                  <argument><expr>"Sed regular expression for Request"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_register_output_filter</name><argument_list>(<argument><expr><name>sed_filter_name</name></expr></argument>, <argument><expr><name>sed_response_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                              <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_register_input_filter</name><argument_list>(<argument><expr><name>sed_filter_name</name></expr></argument>, <argument><expr><name>sed_request_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                             <argument><expr><name>AP_FTYPE_RESOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>sed</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_sed_dir_config</name></expr>,      <comment type="block">/* dir config creater */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge server config */</comment>
    <expr><name>sed_filter_cmds</name></expr>,            <comment type="block">/* command table */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
