<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/generators/mod_cgi.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file  mod_cgi.h
 * @brief CGI Script Execution Extension Module for Apache
 *
 * @defgroup MOD_CGI mod_cgi
 * @ingroup APACHE_MODS
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MOD_CGI_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MOD_CGI_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_include.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{<decl><name>RUN_AS_SSI</name></decl>, <decl><name>RUN_AS_CGI</name></decl>}</block></enum></type> <name>prog_types</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_int32_t</name></type>          <name>in_pipe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int32_t</name></type>          <name>out_pipe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int32_t</name></type>          <name>err_pipe</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                  <name>process_cgi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_cmdtype_e</name></type>        <name>cmd_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int32_t</name></type>          <name>detached</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>prog_types</name></type>           <name>prog_type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> **</type><name>bb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>include_ctx_t</name>       *</type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_filter_t</name>         *</type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int32_t</name></type>          <name>addrspace</name></decl>;</decl_stmt>
}</block></struct></type> <name>cgi_exec_info_t</name>;</typedef>

<comment type="block">/**
 * Registerable optional function to override CGI behavior;
 * Reprocess the command and arguments to execute the given CGI script.
 * @param cmd Pointer to the command to execute (may be overridden)
 * @param argv Pointer to the arguments to pass (may be overridden)
 * @param r The current request
 * @param p The pool to allocate correct cmd/argv elements within.
 * @param e_info pass e_info.cmd_type (Set to APR_SHELLCMD or APR_PROGRAM on entry)
                      and e_info.detached (Should the child start in detached state?)
 * @remark This callback may be registered by the os-specific module
 * to correct the command and arguments for apr_proc_create invocation
 * on a given os.  mod_cgi will call the function if registered.
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_cgi_build_command</name></expr></argument>,
                        <argument><expr>(const <name>char</name> **<name>cmd</name>, const <name>char</name> ***<name>argv</name>,
                         <name>request_rec</name> *<name>r</name>, <name>apr_pool_t</name> *<name>p</name>,
                         <name>cgi_exec_info_t</name> *<name>e_info</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _MOD_CGI_H */</comment>
<comment type="block">/** @} */</comment>

</unit>
