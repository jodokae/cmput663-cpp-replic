<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/generators/mod_info.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * Info Module.  Display configuration information for the server and
 * all included modules.
 *
 * &lt;Location /server-info&gt;
 * SetHandler server-info
 * &lt;/Location&gt;
 *
 * GET /server-info - Returns full configuration page for server and all modules
 * GET /server-info?server - Returns server configuration only
 * GET /server-info?module_name - Returns configuration for a single module
 * GET /server-info?list - Returns quick list of included modules
 * GET /server-info?config - Returns full configuration
 * GET /server-info?hooks - Returns a listing of the modules active for each hook
 *
 * Original Author:
 *   Rasmus Lerdorf &lt;rasmus vex.net&gt;, May 1996
 *
 * Modified By:
 *   Lou Langholtz &lt;ldl usi.utah.edu&gt;, July 1997
 *
 * Apache 2.0 Port:
 *   Ryan Morgan &lt;rmorgan covalent.net&gt;, August 2000
 *
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_version.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &lt; 2</expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apu_version.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_mpm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>           <comment type="block">/* matching module name */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>info</name></decl>;</decl_stmt>           <comment type="block">/* additional info */</comment>
}</block></struct></type> <name>info_entry</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>more_info</name></decl>;</decl_stmt>
}</block></struct></type> <name>info_svr_conf</name>;</typedef>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>info_module</name></decl>;</decl_stmt>

<comment type="block">/* current file name when doing -DDUMP_CONFIG */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dump_config_fn_info</name></decl>;</decl_stmt>
<comment type="block">/* file handle when doing -DDUMP_CONFIG */</comment>
<decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_info_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type> <name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>info_svr_conf</name> *</type><name>conf</name> <init>=
        <expr>(<name>info_svr_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info_svr_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>more_info</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>20</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_info_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>info_svr_conf</name> *</type><name>new</name> <init>=
        <expr>(<name>info_svr_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info_svr_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>info_svr_conf</name> *</type><name>base</name> <init>= <expr>(<name>info_svr_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>info_svr_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>info_svr_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>more_info</name></name> =
        <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>overrides</name>-&gt;<name>more_info</name></name></expr></argument>, <argument><expr><name><name>base</name>-&gt;<name>more_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_int_flush_right</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>, <param><decl><type><name>int</name></type> <name>field</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>field</name> &gt; 1 || <name>i</name> &gt; 9</expr>)</condition><then>
        <expr_stmt><expr><call><name>put_int_flush_right</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name> / 10</expr></argument>, <argument><expr><name>field</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_rputc</name><argument_list>(<argument><expr>'0' + <name>i</name> % 10</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>apr_file_putc</name><argument_list>(<argument><expr><call>(<name>char</name>)<argument_list>(<argument><expr>'0' + <name>i</name> % 10</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
    <else>else <block>{
        <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;nbsp;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" "</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_fn_info</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_set_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>info_module</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><name>dump_config_fn_info</name> = <name>name</name></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>get_fn_info</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
        <return>return <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>request_config</name></name></expr></argument>, <argument><expr>&amp;<name>info_module</name></expr></argument>)</argument_list></call></expr>;</return></then>
    <else>else
        <return>return <expr><name>dump_config_fn_info</name></expr>;</return></else></if>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_info_indent</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>nest</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>thisfn</name></decl></param>, <param><decl><type><name>int</name></type> <name>linenum</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prevfn</name> <init>= <expr><call><name>get_fn_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>thisfn</name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name>thisfn</name> = "*UNKNOWN*"</expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>prevfn</name> == <name>NULL</name> || 0 != <call><name>strcmp</name><argument_list>(<argument><expr><name>prevfn</name></expr></argument>, <argument><expr><name>thisfn</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>thisfn</name> = <call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>thisfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dd&gt;&lt;tt&gt;&lt;strong&gt;In file: %s&lt;/strong&gt;&lt;/tt&gt;&lt;/dd&gt;\n"</expr></argument>,
                   <argument><expr><name>thisfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"# In file: %s\n"</expr></argument>, <argument><expr><name>thisfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>set_fn_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>thisfn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dd&gt;&lt;tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put_int_flush_right</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>linenum</name> &gt; 0 ? <name>linenum</name> : 0</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>":&amp;nbsp;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name>linenum</name> &gt; 0</expr>)</condition><then> <block>{
        <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name>nest</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>)
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt></for>
        <expr_stmt><expr><call><name>apr_file_putc</name><argument_list>(<argument><expr>'#'</expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put_int_flush_right</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>linenum</name></expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>":\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name>nest</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&amp;nbsp;&amp;nbsp;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"  "</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_info_show_cmd</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type> <name>dir</name></decl></param>,
                              <param><decl><type><name>int</name></type> <name>nest</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>mod_info_indent</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>nest</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%s &lt;i&gt;%s&lt;/i&gt;&lt;/tt&gt;&lt;/dd&gt;\n"</expr></argument>,
                   <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"%s %s\n"</expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_info_show_open</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type> <name>dir</name></decl></param>,
                               <param><decl><type><name>int</name></type> <name>nest</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>mod_info_indent</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>nest</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>line_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"%s %s&lt;/tt&gt;&lt;/dd&gt;\n"</expr></argument>,
                   <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
    <else>else
        <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"%s %s\n"</expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_info_show_close</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>ap_directive_t</name> *</type> <name>dir</name></decl></param>,
                                <param><decl><type><name>int</name></type> <name>nest</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>dirname</name> <init>= <expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mod_info_indent</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>nest</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>filename</name></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>*<name>dirname</name> == '&lt;'</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&amp;lt;/%s&amp;gt;&lt;/tt&gt;&lt;/dd&gt;"</expr></argument>,
                       <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dirname</name> + 1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"&lt;/%s&gt;\n"</expr></argument>, <argument><expr><name>dirname</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></then>
    <else>else <block>{
        <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"/%s&lt;/tt&gt;&lt;/dd&gt;"</expr></argument>, <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"/%s\n"</expr></argument>, <argument><expr><name>dirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></else></if>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mod_info_has_cmd</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>command_rec</name> *</type> <name>cmds</name></decl></param>, <param><decl><type><name>ap_directive_t</name> *</type> <name>dir</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>cmds</name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr>1</expr>;</return></then></if>
    <for>for (<init><expr><name>cmd</name> = <name>cmds</name></expr>;</init> <condition><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr>;</condition> <incr><expr>++<name>cmd</name></expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>directive</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
            <return>return <expr>1</expr>;</return></then></if>
    }</block></for>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mod_info_show_parents</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>ap_directive_t</name> *</type> <name>node</name></decl></param>,
                                  <param><decl><type><name>int</name></type> <name>from</name></decl></param>, <param><decl><type><name>int</name></type> <name>to</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>from</name> &lt; <name>to</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>mod_info_show_parents</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>node</name>-&gt;<name>parent</name></name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>mod_info_show_open</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mod_info_module_cmds</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>command_rec</name> *</type> <name>cmds</name></decl></param>,
                                <param><decl><type><name>ap_directive_t</name> *</type> <name>node</name></decl></param>, <param><decl><type><name>int</name></type> <name>from</name></decl></param>, <param><decl><type><name>int</name></type> <name>level</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>shown</name> <init>= <expr><name>from</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_directive_t</name> *</type><name>dir</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>level</name> == 0</expr>)</condition><then>
        <expr_stmt><expr><call><name>set_fn_info</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <for>for (<init><expr><name>dir</name> = <name>node</name></expr>;</init> <condition><expr><name>dir</name></expr>;</condition> <incr><expr><name>dir</name> = <name><name>dir</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>dir</name>-&gt;<name>first_child</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>level</name> &lt; <call><name>mod_info_module_cmds</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cmds</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>first_child</name></name></expr></argument>,
                                             <argument><expr><name>shown</name></expr></argument>, <argument><expr><name>level</name> + 1</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>shown</name> = <name>level</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>mod_info_show_close</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>mod_info_has_cmd</name><argument_list>(<argument><expr><name>cmds</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>shown</name> &lt; <name>level</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>mod_info_show_parents</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>dir</name>-&gt;<name>parent</name></name></expr></argument>, <argument><expr><name>shown</name></expr></argument>, <argument><expr><name>level</name> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>shown</name> = <name>level</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>mod_info_show_cmd</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></else></if>
    }</block></for>
    <return>return <expr><name>shown</name></expr>;</return>
}</block></function>

<typedef>typedef <type><struct>struct
<block>{                               <comment type="block">/*XXX: should get something from apr_hooks.h instead */</comment>
    <function_decl><type><name>void</name></type> (*<name>pFunc</name>) <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>       <comment type="block">/* just to get the right size */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>szName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *<specifier>const</specifier> *</type><name>aszPredecessors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *<specifier>const</specifier> *</type><name>aszSuccessors</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nOrder</name></decl>;</decl_stmt>
}</block></struct></type> <name>hook_struct_t</name>;</typedef>

<comment type="block">/*
 * hook_get_t is a pointer to a function that takes void as an argument and
 * returns a pointer to an apr_array_header_t.  The nasty WIN32 ifdef
 * is required to account for the fact that the ap_hook* calls all use
 * STDCALL calling convention.
 */</comment>
<typedef>typedef <function_decl><type><name>apr_array_header_t</name> *</type>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
                                <name>__stdcall</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                                * <name>hook_get_t</name>)      <parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>hook_get_t</name></type> <name>get</name></decl>;</decl_stmt>
}</block></struct></type> <name>hook_lookup_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>hook_lookup_t</name></type> <name><name>startup_hooks</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"Pre-Config"</expr>, <expr><name>ap_hook_get_pre_config</name></expr>}</block></expr>,
    <expr><block>{<expr>"Check Configuration"</expr>, <expr><name>ap_hook_get_check_config</name></expr>}</block></expr>,
    <expr><block>{<expr>"Test Configuration"</expr>, <expr><name>ap_hook_get_test_config</name></expr>}</block></expr>,
    <expr><block>{<expr>"Post Configuration"</expr>, <expr><name>ap_hook_get_post_config</name></expr>}</block></expr>,
    <expr><block>{<expr>"Open Logs"</expr>, <expr><name>ap_hook_get_open_logs</name></expr>}</block></expr>,
    <expr><block>{<expr>"Pre-MPM"</expr>, <expr><name>ap_hook_get_pre_mpm</name></expr>}</block></expr>,
    <expr><block>{<expr>"MPM"</expr>, <expr><name>ap_hook_get_mpm</name></expr>}</block></expr>,
    <expr><block>{<expr>"Drop Privileges"</expr>, <expr><name>ap_hook_get_drop_privileges</name></expr>}</block></expr>,
    <expr><block>{<expr>"Retrieve Optional Functions"</expr>, <expr><name>ap_hook_get_optional_fn_retrieve</name></expr>}</block></expr>,
    <expr><block>{<expr>"Child Init"</expr>, <expr><name>ap_hook_get_child_init</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>hook_lookup_t</name></type> <name><name>request_hooks</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"Pre-Connection"</expr>, <expr><name>ap_hook_get_pre_connection</name></expr>}</block></expr>,
    <expr><block>{<expr>"Create Connection"</expr>, <expr><name>ap_hook_get_create_connection</name></expr>}</block></expr>,
    <expr><block>{<expr>"Process Connection"</expr>, <expr><name>ap_hook_get_process_connection</name></expr>}</block></expr>,
    <expr><block>{<expr>"Create Request"</expr>, <expr><name>ap_hook_get_create_request</name></expr>}</block></expr>,
    <expr><block>{<expr>"Pre-Read Request"</expr>, <expr><name>ap_hook_get_pre_read_request</name></expr>}</block></expr>,
    <expr><block>{<expr>"Post-Read Request"</expr>, <expr><name>ap_hook_get_post_read_request</name></expr>}</block></expr>,
    <expr><block>{<expr>"Header Parse"</expr>, <expr><name>ap_hook_get_header_parser</name></expr>}</block></expr>,
    <expr><block>{<expr>"HTTP Scheme"</expr>, <expr><name>ap_hook_get_http_scheme</name></expr>}</block></expr>,
    <expr><block>{<expr>"Default Port"</expr>, <expr><name>ap_hook_get_default_port</name></expr>}</block></expr>,
    <expr><block>{<expr>"Quick Handler"</expr>, <expr><name>ap_hook_get_quick_handler</name></expr>}</block></expr>,
    <expr><block>{<expr>"Translate Name"</expr>, <expr><name>ap_hook_get_translate_name</name></expr>}</block></expr>,
    <expr><block>{<expr>"Map to Storage"</expr>, <expr><name>ap_hook_get_map_to_storage</name></expr>}</block></expr>,
    <expr><block>{<expr>"Check Access"</expr>, <expr><name>ap_hook_get_access_checker_ex</name></expr>}</block></expr>,
    <expr><block>{<expr>"Check Access (legacy)"</expr>, <expr><name>ap_hook_get_access_checker</name></expr>}</block></expr>,
    <expr><block>{<expr>"Verify User ID"</expr>, <expr><name>ap_hook_get_check_user_id</name></expr>}</block></expr>,
    <expr><block>{<expr>"Note Authentication Failure"</expr>, <expr><name>ap_hook_get_note_auth_failure</name></expr>}</block></expr>,
    <expr><block>{<expr>"Verify User Access"</expr>, <expr><name>ap_hook_get_auth_checker</name></expr>}</block></expr>,
    <expr><block>{<expr>"Check Type"</expr>, <expr><name>ap_hook_get_type_checker</name></expr>}</block></expr>,
    <expr><block>{<expr>"Fixups"</expr>, <expr><name>ap_hook_get_fixups</name></expr>}</block></expr>,
    <expr><block>{<expr>"Insert Filters"</expr>, <expr><name>ap_hook_get_insert_filter</name></expr>}</block></expr>,
    <expr><block>{<expr>"Content Handlers"</expr>, <expr><name>ap_hook_get_handler</name></expr>}</block></expr>,
    <expr><block>{<expr>"Transaction Logging"</expr>, <expr><name>ap_hook_get_log_transaction</name></expr>}</block></expr>,
    <expr><block>{<expr>"Insert Errors"</expr>, <expr><name>ap_hook_get_insert_error_filter</name></expr>}</block></expr>,
    <expr><block>{<expr>"Generate Log ID"</expr>, <expr><name>ap_hook_get_generate_log_id</name></expr>}</block></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>hook_lookup_t</name></type> <name><name>other_hooks</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr>"Monitor"</expr>, <expr><name>ap_hook_get_monitor</name></expr>}</block></expr>,
    <expr><block>{<expr>"Child Status"</expr>, <expr><name>ap_hook_get_child_status</name></expr>}</block></expr>,
    <expr><block>{<expr>"End Generation"</expr>, <expr><name>ap_hook_get_end_generation</name></expr>}</block></expr>,
    <expr><block>{<expr>"Error Logging"</expr>, <expr><name>ap_hook_get_error_log</name></expr>}</block></expr>,
    <expr><block>{<expr>"Query MPM Attributes"</expr>, <expr><name>ap_hook_get_mpm_query</name></expr>}</block></expr>,
    <expr><block>{<expr>"Query MPM Name"</expr>, <expr><name>ap_hook_get_mpm_get_name</name></expr>}</block></expr>,
    <expr><block>{<expr>"Register Timed Callback"</expr>, <expr><name>ap_hook_get_mpm_register_timed_callback</name></expr>}</block></expr>,
    <expr><block>{<expr>"Extend Expression Parser"</expr>, <expr><name>ap_hook_get_expr_lookup</name></expr>}</block></expr>,
    <expr><block>{<expr>"Set Management Items"</expr>, <expr><name>ap_hook_get_get_mgmt_items</name></expr>}</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>AP_ENABLE_EXCEPTION_HOOK</name></expr></cpp:if>
    <expr><block>{<expr>"Handle Fatal Exceptions"</expr>, <expr><name>ap_hook_get_fatal_exception</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>module_find_hook</name><parameter_list>(<param><decl><type><name>module</name> *</type> <name>modp</name></decl></param>, <param><decl><type><name>hook_get_t</name></type> <name>hook_get</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>hooks</name> <init>= <expr><call><name>hook_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>hook_struct_t</name> *</type><name>elts</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>hooks</name></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>elts</name> = (<name>hook_struct_t</name> *) <name><name>hooks</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hooks</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szName</name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
    }</block></for>

    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>module_participate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
                               <param><decl><type><name>module</name> *</type> <name>modp</name></decl></param>,
                               <param><decl><type><name>hook_lookup_t</name> *</type> <name>lookup</name></decl></param>, <param><decl><type><name>int</name> *</type><name>comma</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>module_find_hook</name><argument_list>(<argument><expr><name>modp</name></expr></argument>, <argument><expr><name><name>lookup</name>-&gt;<name>get</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>*<name>comma</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>", "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>ap_rvputs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tt&gt;"</expr></argument>, <argument><expr><name><name>lookup</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"&lt;/tt&gt;"</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>comma</name> = 1</expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>module_request_hook_participate</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>module</name> *</type> <name>modp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>comma</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Request Phase Participation:&lt;/strong&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>request_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>module_participate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>modp</name></expr></argument>, <argument><expr>&amp;<name><name>request_hooks</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>comma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if <condition>(<expr>!<name>comma</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt; &lt;em&gt;none&lt;/em&gt;&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>find_more_info</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type> <name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>module_name</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>info_svr_conf</name> *</type><name>conf</name> <init>=
        <expr>(<name>info_svr_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
                                               <argument><expr>&amp;<name>info_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>info_entry</name> *</type><name>entry</name> <init>= <expr>(<name>info_entry</name> *) <name><name>conf</name>-&gt;<name>more_info</name>-&gt;<name>elts</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>module_name</name></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>conf</name>-&gt;<name>more_info</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr>!<call><name>strcmp</name><argument_list>(<argument><expr><name>module_name</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name><name>entry</name>-&gt;<name>info</name></name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>entry</name>++</expr>;</expr_stmt>
    }</block></for>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_server_settings</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>serv</name> <init>= <expr><name><name>r</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>max_daemons</name></decl>, <decl><type ref="prev"/><name>forked</name></decl>, <decl><type ref="prev"/><name>threaded</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h2&gt;&lt;a name=\"server\"&gt;Server Settings&lt;/a&gt;&lt;/h2&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dl&gt;&lt;dt&gt;&lt;strong&gt;Server Version:&lt;/strong&gt; "
               "&lt;font size=\"+1\"&gt;&lt;tt&gt;%s&lt;/tt&gt;&lt;/font&gt;&lt;/dt&gt;\n"</expr></argument>,
               <argument><expr><call><name>ap_get_server_description</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Server Built:&lt;/strong&gt; "
               "&lt;font size=\"+1\"&gt;&lt;tt&gt;%s&lt;/tt&gt;&lt;/font&gt;&lt;/dt&gt;\n"</expr></argument>,
               <argument><expr><call><name>ap_get_server_built</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Server loaded APR Version:&lt;/strong&gt; "
               "&lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><call><name>apr_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Compiled with APR Version:&lt;/strong&gt; "
               "&lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>APR_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_MAJOR_VERSION</name> &lt; 2</expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Server loaded APU Version:&lt;/strong&gt; "
               "&lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><call><name>apu_version_string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Compiled with APU Version:&lt;/strong&gt; "
               "&lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>APU_VERSION_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Module Magic Number:&lt;/strong&gt; "
               "&lt;tt&gt;%d:%d&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>MODULE_MAGIC_NUMBER_MAJOR</name></expr></argument>,
               <argument><expr><name>MODULE_MAGIC_NUMBER_MINOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Hostname/port:&lt;/strong&gt; "
               "&lt;tt&gt;%s:%u&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>,
               <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>ap_get_server_name</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call><name>ap_get_server_port</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Timeouts:&lt;/strong&gt; "
               "&lt;tt&gt;connection: %d &amp;nbsp;&amp;nbsp; "
               "keep-alive: %d&lt;/tt&gt;&lt;/dt&gt;"</expr></argument>,
               <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>serv</name>-&gt;<name>timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>serv</name>-&gt;<name>keep_alive_timeout</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_MAX_DAEMON_USED</name></expr></argument>, <argument><expr>&amp;<name>max_daemons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_THREADED</name></expr></argument>, <argument><expr>&amp;<name>threaded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_mpm_query</name><argument_list>(<argument><expr><name>AP_MPMQ_IS_FORKED</name></expr></argument>, <argument><expr>&amp;<name>forked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;&lt;strong&gt;MPM Name:&lt;/strong&gt; &lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>,
               <argument><expr><call><name>ap_show_mpm</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;MPM Information:&lt;/strong&gt; "
               "&lt;tt&gt;Max Daemons: %d Threaded: %s Forked: %s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>,
               <argument><expr><name>max_daemons</name></expr></argument>, <argument><expr><name>threaded</name> ? "yes" : "no"</expr></argument>, <argument><expr><name>forked</name> ? "yes" : "no"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Server Architecture:&lt;/strong&gt; "
               "&lt;tt&gt;%ld-bit&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr>8 * (<name>long</name>) <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Server Root:&lt;/strong&gt; "
               "&lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>ap_server_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
               <argument><expr>"&lt;dt&gt;&lt;strong&gt;Config File:&lt;/strong&gt; "
               "&lt;tt&gt;%s&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name><name>ap_conftree</name>-&gt;<name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Server Built With:&lt;/strong&gt;\n"
             "&lt;tt style=\"white-space: pre;\"&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* TODO: Not all of these defines are getting set like they do in main.c.
     *       Missing some headers?
     */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BIG_SECURITY_HOLE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D BIG_SECURITY_HOLE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SECURITY_HOLE_PASS_AUTHORIZATION</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D SECURITY_HOLE_PASS_AUTHORIZATION\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D OS=\"" <name>OS</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SHMGET</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D HAVE_SHMGET\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_FILE_BASED_SHM</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_FILE_BASED_SHM\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_SENDFILE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_HAS_SENDFILE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_MMAP</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_HAS_MMAP\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_WRITEV</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D NO_WRITEV\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NO_LINGCLOSE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D NO_LINGCLOSE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAVE_IPV6</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_HAVE_IPV6 (IPv4-mapped addresses "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AP_ENABLE_V4_MAPPED</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"enabled)\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"disabled)\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_FLOCK_SERIALIZE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_USE_FLOCK_SERIALIZE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_SYSVSEM_SERIALIZE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_USE_SYSVSEM_SERIALIZE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_POSIXSEM_SERIALIZE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_USE_POSIXSEM_SERIALIZE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_FCNTL_SERIALIZE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_USE_FCNTL_SERIALIZE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_USE_PROC_PTHREAD_SERIALIZE</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_USE_PROC_PTHREAD_SERIALIZE\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_PROCESS_LOCK_IS_GLOBAL</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_PROCESS_LOCK_IS_GLOBAL\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SINGLE_LISTEN_UNSERIALIZED_ACCEPT</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D SINGLE_LISTEN_UNSERIALIZED_ACCEPT\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_OTHER_CHILD</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_HAS_OTHER_CHILD\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AP_HAVE_RELIABLE_PIPED_LOGS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D AP_HAVE_RELIABLE_PIPED_LOGS\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>BUFFERED_LOGS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D BUFFERED_LOGS\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PIPE_BUF</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D PIPE_BUF=%ld\n"</expr></argument>, <argument><expr>(<name>long</name>) <name>PIPE_BUF</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_CHARSET_EBCDIC</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D APR_CHARSET_EBCDIC\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NEED_HASHBANG_EMUL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D NEED_HASHBANG_EMUL\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* This list displays the compiled in default paths: */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HTTPD_ROOT</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D HTTPD_ROOT=\"" <name>HTTPD_ROOT</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SUEXEC_BIN</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D SUEXEC_BIN=\"" <name>SUEXEC_BIN</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEFAULT_PIDLOG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D DEFAULT_PIDLOG=\"" <name>DEFAULT_PIDLOG</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEFAULT_SCOREBOARD</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D DEFAULT_SCOREBOARD=\"" <name>DEFAULT_SCOREBOARD</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEFAULT_ERRORLOG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D DEFAULT_ERRORLOG=\"" <name>DEFAULT_ERRORLOG</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>AP_TYPES_CONFIG_FILE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D AP_TYPES_CONFIG_FILE=\"" <name>AP_TYPES_CONFIG_FILE</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SERVER_CONFIG_FILE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>" -D SERVER_CONFIG_FILE=\"" <name>SERVER_CONFIG_FILE</name> "\"\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tt&gt;&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;&lt;hr /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_a_hook</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>hook_get_t</name></type> <name>hook_get</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>qs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>hook_struct_t</name> *</type><name>elts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>hooks</name> <init>= <expr><call><name>hook_get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>hooks</name></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"hooks"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><name>qs</name> = '?'</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>qs</name> = '#'</expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>elts</name> = (<name>hook_struct_t</name> *) <name><name>hooks</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>hooks</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                   <argument><expr>"&amp;nbsp;&amp;nbsp; %02d &lt;a href=\"%c%s\"&gt;%s&lt;/a&gt; &lt;br/&gt;"</expr></argument>,
                   <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>nOrder</name></expr></argument>, <argument><expr><name>qs</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szName</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>szName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>show_active_hooks</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h2&gt;&lt;a name=\"startup_hooks\"&gt;Startup Hooks&lt;/a&gt;&lt;/h2&gt;\n&lt;dl&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>startup_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;&lt;strong&gt;%s:&lt;/strong&gt;\n &lt;br /&gt;&lt;tt&gt;\n"</expr></argument>,
                   <argument><expr><name><name>startup_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dump_a_hook</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>startup_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n  &lt;/tt&gt;\n&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>ap_rputs</name>
        <argument_list>(<argument><expr>"&lt;/dl&gt;\n&lt;hr /&gt;\n&lt;h2&gt;&lt;a name=\"request_hooks\"&gt;Request Hooks&lt;/a&gt;&lt;/h2&gt;\n&lt;dl&gt;"</expr></argument>,
         <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>request_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;&lt;strong&gt;%s:&lt;/strong&gt;\n &lt;br /&gt;&lt;tt&gt;\n"</expr></argument>,
                   <argument><expr><name><name>request_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dump_a_hook</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>request_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n  &lt;/tt&gt;\n&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>ap_rputs</name>
        <argument_list>(<argument><expr>"&lt;/dl&gt;\n&lt;hr /&gt;\n&lt;h2&gt;&lt;a name=\"other_hooks\"&gt;Other Hooks&lt;/a&gt;&lt;/h2&gt;\n&lt;dl&gt;"</expr></argument>,
         <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>other_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;&lt;strong&gt;%s:&lt;/strong&gt;\n &lt;br /&gt;&lt;tt&gt;\n"</expr></argument>,
                   <argument><expr><name><name>other_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dump_a_hook</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>other_hooks</name><index>[<expr><name>i</name></expr>]</index></name>.<name>get</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n  &lt;/tt&gt;\n&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;\n&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_provider_groups</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b_</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_list_provider_groups_t</name> *</type><name>a</name> <init>= <expr><name>a_</name></expr></init>, *<name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>provider_group</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>provider_group</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>ret</name></expr>)</condition><then>
        <expr_stmt><expr><name>ret</name> = <call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>provider_version</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>provider_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_provider_names</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b_</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>ap_list_provider_names_t</name> *</type><name>a</name> <init>= <expr><name>a_</name></expr></init>, *<name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>a</name>-&gt;<name>provider_name</name></name></expr></argument>, <argument><expr><name><name>b</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>show_providers</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>groups</name> <init>= <expr><call><name>ap_list_provider_groups</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_list_provider_groups_t</name> *</type><name>group</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>names</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_list_provider_names_t</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cur_group</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>groups</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>groups</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_list_provider_groups_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
          <argument><expr><name>cmp_provider_groups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h2&gt;&lt;a name=\"providers\"&gt;Providers&lt;/a&gt;&lt;/h2&gt;\n&lt;dl&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>groups</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>group</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>groups</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>ap_list_provider_groups_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>cur_group</name> || <call><name>strcmp</name><argument_list>(<argument><expr><name>cur_group</name></expr></argument>, <argument><expr><name><name>group</name>-&gt;<name>provider_group</name></name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>cur_group</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <expr_stmt><expr><name>cur_group</name> = <name><name>group</name>-&gt;<name>provider_group</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dt&gt;&lt;strong&gt;%s&lt;/strong&gt; (version &lt;tt&gt;%s&lt;/tt&gt;):"
                          "\n &lt;br /&gt;\n"</expr></argument>, <argument><expr><name>cur_group</name></expr></argument>, <argument><expr><name><name>group</name>-&gt;<name>provider_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>names</name> = <call><name>ap_list_provider_names</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>group</name>-&gt;<name>provider_group</name></name></expr></argument>,
                                       <argument><expr><name><name>group</name>-&gt;<name>provider_version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>names</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>names</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_list_provider_names_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
              <argument><expr><name>cmp_provider_names</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <name><name>names</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>name</name> = &amp;<call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>ap_list_provider_names_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;tt&gt;&amp;nbsp;&amp;nbsp;%s&lt;/tt&gt;&lt;br/&gt;"</expr></argument>, <argument><expr><name><name>name</name>-&gt;<name>provider_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <if>if <condition>(<expr><name>cur_group</name></expr>)</condition><then>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"\n&lt;/dt&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;\n&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_module_name</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>a_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>b_</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>module</name> * <specifier>const</specifier> *</type><name>a</name> <init>= <expr><name>a_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>module</name> * <specifier>const</specifier> *</type><name>b</name> <init>= <expr><name>b_</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>(*<name>a</name>)-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>(*<name>b</name>)-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_array_header_t</name> *</type><name>get_sorted_modules</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>arr</name> <init>= <expr><call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>64</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>module</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>, **<decl><type ref="prev"/><name>entry</name></decl>;</decl_stmt>
    <for>for (<init><expr><name>modp</name> = <name>ap_top_module</name></expr>;</init> <condition><expr><name>modp</name></expr>;</condition> <incr><expr><name>modp</name> = <name><name>modp</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <expr_stmt><expr><name>entry</name> = &amp;<call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>module</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>entry</name> = <name>modp</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>arr</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>arr</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>module</name> *</expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmp_module_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>arr</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>display_info</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>module</name> *</type><name>modp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>more_info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>command_rec</name> *</type><name>cmd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>modules</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>handler</name></name></expr></argument>, <argument><expr>"server-info"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>r</name>-&gt;<name>allowed</name></name> |= (<name>AP_METHOD_BIT</name> &lt;&lt; <name>M_GET</name>)</expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>method_number</name></name> != <name>M_GET</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_set_content_type</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"text/html; charset=ISO-8859-1"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>DOCTYPE_XHTML_1_0T</name>
             "&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n"
             "&lt;head&gt;\n"
             "  &lt;title&gt;Server Information&lt;/title&gt;\n" "&lt;/head&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;body&gt;&lt;h1 style=\"text-align: center\"&gt;"
             "Apache Server Information&lt;/h1&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>args</name></name> || <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"list"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dl&gt;&lt;dt&gt;&lt;tt&gt;Subpages:&lt;br /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;a href=\"?config\"&gt;Configuration Files&lt;/a&gt;, "
                     "&lt;a href=\"?server\"&gt;Server Settings&lt;/a&gt;, "
                     "&lt;a href=\"?list\"&gt;Module List&lt;/a&gt;, "
                     "&lt;a href=\"?hooks\"&gt;Active Hooks&lt;/a&gt;, "
                     "&lt;a href=\"?providers\"&gt;Available Providers&lt;/a&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tt&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;hr /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dl&gt;&lt;dt&gt;&lt;tt&gt;Sections:&lt;br /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;a href=\"#modules\"&gt;Loaded Modules&lt;/a&gt;, "
                     "&lt;a href=\"#server\"&gt;Server Settings&lt;/a&gt;, "
                     "&lt;a href=\"#startup_hooks\"&gt;Startup Hooks&lt;/a&gt;, "
                     "&lt;a href=\"#request_hooks\"&gt;Request Hooks&lt;/a&gt;, "
                     "&lt;a href=\"#other_hooks\"&gt;Other Hooks&lt;/a&gt;, "
                     "&lt;a href=\"#providers\"&gt;Providers&lt;/a&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tt&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;hr /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;h2&gt;&lt;a name=\"modules\"&gt;Loaded Modules&lt;/a&gt;&lt;/h2&gt;"
                    "&lt;dl&gt;&lt;dt&gt;&lt;tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>modules</name> = <call><name>get_sorted_modules</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>modules</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>modp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>modules</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>module</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;a href=\"#%s\"&gt;%s&lt;/a&gt;"</expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>,
                           <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>i</name> &lt; <name><name>modules</name>-&gt;<name>nelts</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>", "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/tt&gt;&lt;/dt&gt;&lt;/dl&gt;&lt;hr /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>args</name></name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"server"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>show_server_settings</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>args</name></name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"hooks"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>show_active_hooks</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>args</name></name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"providers"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>show_providers</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; 0 == <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"config"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dl&gt;&lt;dt&gt;&lt;strong&gt;Configuration:&lt;/strong&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>mod_info_module_cmds</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;&lt;hr /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>comma</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr>!<name>modules</name></expr>)</condition><then>
                 <expr_stmt><expr><name>modules</name> = <call><name>get_sorted_modules</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>modules</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <expr_stmt><expr><name>modp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>modules</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>module</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>args</name></name> || !<call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>,
                               <argument><expr>"&lt;dl&gt;&lt;dt&gt;&lt;a name=\"%s\"&gt;&lt;strong&gt;Module Name:&lt;/strong&gt;&lt;/a&gt; "
                               "&lt;font size=\"+1\"&gt;&lt;tt&gt;&lt;a href=\"?%s\"&gt;%s&lt;/a&gt;&lt;/tt&gt;&lt;/font&gt;&lt;/dt&gt;\n"</expr></argument>,
                               <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Content handlers:&lt;/strong&gt; "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><call><name>module_find_hook</name><argument_list>(<argument><expr><name>modp</name></expr></argument>, <argument><expr><name>ap_hook_get_handler</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt; &lt;em&gt;yes&lt;/em&gt;&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt; &lt;em&gt;none&lt;/em&gt;&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>

                    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ap_rputs</name>
                        <argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Configuration Phase Participation:&lt;/strong&gt;\n"</expr></argument>,
                         <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>modp</name>-&gt;<name>create_dir_config</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>comma</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>", "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt;Create Directory Config&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>comma</name> = 1</expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>modp</name>-&gt;<name>merge_dir_config</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>comma</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>", "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt;Merge Directory Configs&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>comma</name> = 1</expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>modp</name>-&gt;<name>create_server_config</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>comma</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>", "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt;Create Server Config&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>comma</name> = 1</expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr><name><name>modp</name>-&gt;<name>merge_server_config</name></name></expr>)</condition><then> <block>{
                        <if>if <condition>(<expr><name>comma</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>", "</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then></if>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt;Merge Server Configs&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>comma</name> = 1</expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if <condition>(<expr>!<name>comma</name></expr>)</condition><then>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;tt&gt; &lt;em&gt;none&lt;/em&gt;&lt;/tt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
                    <expr_stmt><expr><name>comma</name> = 0</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>module_request_hook_participate</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>modp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>cmd</name> = <name><name>modp</name>-&gt;<name>cmds</name></name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>cmd</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_rputs</name>
                            <argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Module Directives:&lt;/strong&gt;&lt;/dt&gt;"</expr></argument>,
                             <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <while>while <condition>(<expr><name>cmd</name></expr>)</condition> <block>{
                            <if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>name</name></name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><call><name>ap_rprintf</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>"&lt;dd&gt;&lt;tt&gt;%s%s - &lt;i&gt;"</expr></argument>,
                                           <argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                           <argument><expr><name><name>cmd</name>-&gt;<name>name</name><index>[<expr>0</expr>]</index></name> == '&lt;' ? "&amp;gt;" : ""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr>)</condition><then> <block>{
                                    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_escape_html</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>errmsg</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                                <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/i&gt;&lt;/tt&gt;&lt;/dd&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then>
                            <else>else <block>{
                                <break>break;</break>
                            }</block></else></if>
                            <expr_stmt><expr><name>cmd</name>++</expr>;</expr_stmt>
                        }</block></while>
                        <expr_stmt><expr><call><name>ap_rputs</name>
                            <argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Current Configuration:&lt;/strong&gt;&lt;/dt&gt;\n"</expr></argument>,
                             <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>mod_info_module_cmds</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>cmds</name></name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>, <argument><expr>0</expr></argument>,
                                             <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block>{
                        <expr_stmt><expr><call><name>ap_rputs</name>
                            <argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Module Directives:&lt;/strong&gt; &lt;tt&gt;none&lt;/tt&gt;&lt;/dt&gt;"</expr></argument>,
                             <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <expr_stmt><expr><name>more_info</name> = <call><name>find_more_info</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>more_info</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>ap_rputs</name>
                            <argument_list>(<argument><expr>"&lt;dt&gt;&lt;strong&gt;Additional Information:&lt;/strong&gt;\n&lt;/dt&gt;&lt;dd&gt;"</expr></argument>,
                             <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name>more_info</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dd&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;&lt;hr /&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>args</name></name></expr>)</condition><then> <block>{
                        <break>break;</break>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr>!<name>modp</name> &amp;&amp; <name><name>r</name>-&gt;<name>args</name></name> &amp;&amp; <call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr>"server"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;p&gt;&lt;b&gt;No such module&lt;/b&gt;&lt;/p&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dl&gt;&lt;dt&gt;Server Module List&lt;/dt&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>modules</name> = <call><name>get_sorted_modules</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>modules</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name>modp</name> = <call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name>modules</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>module</name> *</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;dd&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dd&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/dl&gt;&lt;hr /&gt;"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr><call><name>ap_psignature</name><argument_list>(<argument><expr>""</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/body&gt;&lt;/html&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Done, turn off timeout, close file and return */</comment>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>add_module_info</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>info_svr_conf</name> *</type><name>conf</name> <init>=
        <expr>(<name>info_svr_conf</name> *) <call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
                                               <argument><expr>&amp;<name>info_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>info_entry</name> *</type><name>new</name> <init>= <expr><call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>more_info</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = <name>name</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>info</name></name> = <name>info</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>info_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"AddModuleInfo"</expr></argument>, <argument><expr><name>add_module_info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
                  <argument><expr>"a module name and additional information on that module"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>,
                        <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_CONFIG"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>ptemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>mod_info_module_cmds</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ap_conftree</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>display_info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_config</name><argument_list>(<argument><expr><name>check_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call> = <block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir config creater */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* dir merger --- default is to override */</comment>
    <expr><name>create_info_config</name></expr>,         <comment type="block">/* server config */</comment>
    <expr><name>merge_info_config</name></expr>,          <comment type="block">/* merge server config */</comment>
    <expr><name>info_cmds</name></expr>,                  <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>
}</block></expr>;</expr_stmt>
</unit>
