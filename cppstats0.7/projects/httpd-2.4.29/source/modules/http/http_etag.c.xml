<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/http/http_etag.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_thread_proc.h"</cpp:file></cpp:include>    <comment type="block">/* for RLIMIT stuff */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APR_WANT_STRFUNC</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_want.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>   <comment type="block">/* For index_of_response().  Grump. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>

<comment type="block">/* Generate the human-readable hex representation of an apr_uint64_t
 * (basically a faster version of 'sprintf("%llx")')
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX_DIGITS</name></cpp:macro> <cpp:value>"0123456789abcdef"</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>char</name> *</type><name>etag_uint64_to_hex</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>next</name></decl></param>, <param><decl><type><name>apr_uint64_t</name></type> <name>u</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>printing</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uint64_t</name></expr></argument>)</argument_list></sizeof> * 8 - 4</expr></init></decl>;</decl_stmt>
    <do>do <block>{
        <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>next_digit</name> <init>= <expr><call>(<name>unsigned</name> <name>short</name>)
                                    <argument_list>(<argument><expr>(<name>u</name> &gt;&gt; <name>shift</name>) &amp; (<name>apr_uint64_t</name>)0xf</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>next_digit</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>next</name>++ = <name><name>HEX_DIGITS</name><index>[<expr><name>next_digit</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>printing</name> = 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name>printing</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>next</name>++ = <name><name>HEX_DIGITS</name><index>[<expr><name>next_digit</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if></else></if>
        <expr_stmt><expr><name>shift</name> -= 4</expr>;</expr_stmt>
    }</block> while <condition>(<expr><name>shift</name></expr>)</condition>;</do>
    <expr_stmt><expr>*<name>next</name>++ = <name><name>HEX_DIGITS</name><index>[<expr><name>u</name> &amp; (<name>apr_uint64_t</name>)0xf</expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>next</name></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ETAG_WEAK</name></cpp:macro> <cpp:value>"W/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHARS_PER_UINT64</name></cpp:macro> <cpp:value>(sizeof(apr_uint64_t) * 2)</cpp:value></cpp:define>
<comment type="block">/*
 * Construct an entity tag (ETag) from resource information.  If it's a real
 * file, build in some of the file characteristics.  If the modification time
 * is newer than (request-time minus 1 second), mark the ETag as weak - it
 * could be modified again in as short an interval.  We rationalize the
 * modification time we're given to keep it from being in the future.
 */</comment>
<macro><name>AP_DECLARE</name><argument_list>(<argument>char *</argument>)</argument_list></macro> <macro><name>ap_make_etag</name><argument_list>(<argument>request_rec *r</argument>, <argument>int force_weak</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>weak</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>weak_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>etag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>next</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>core_dir_config</name> *</type><name>cfg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>etag_components_t</name></type> <name>etag_bits</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>etag_components_t</name></type> <name>bits_added</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cfg</name> = (<name>core_dir_config</name> *)<call><name>ap_get_core_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>etag_bits</name> = (<name><name>cfg</name>-&gt;<name>etag_bits</name></name> &amp; (~ <name><name>cfg</name>-&gt;<name>etag_remove</name></name>)) | <name><name>cfg</name>-&gt;<name>etag_add</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * If it's a file (or we wouldn't be here) and no ETags
     * should be set for files, return an empty string and
     * note it for the header-sender to ignore.
     */</comment>
    <if>if <condition>(<expr><name>etag_bits</name> &amp; <name>ETAG_NONE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr>"no-etag"</expr></argument>, <argument><expr>"omit"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>""</expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>etag_bits</name> == <name>ETAG_UNSET</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>etag_bits</name> = <name>ETAG_BACKWARD</name></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="block">/*
     * Make an ETag header out of various pieces of information. We use
     * the last-modified date and, if we have a real file, the
     * length and inode number - note that this doesn't have to match
     * the content-length (i.e. includes), it just has to be unique
     * for the file.
     *
     * If the request was made within a second of the last-modified date,
     * we send a weak tag instead of a strong one, since it could
     * be modified again later in the second, and the validation
     * would be incorrect.
     */</comment>
    <if>if <condition>(<expr>(<name><name>r</name>-&gt;<name>request_time</name></name> - <name><name>r</name>-&gt;<name>mtime</name></name> &gt; (1 * <name>APR_USEC_PER_SEC</name>)) &amp;&amp;
        !<name>force_weak</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>weak</name> = <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>weak_len</name> = 0</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>weak</name> = <name>ETAG_WEAK</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>weak_len</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>ETAG_WEAK</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>finfo</name>.<name>filetype</name></name> != <name>APR_NOFILE</name></expr>)</condition><then> <block>{
        <comment type="block">/*
         * ETag gets set to [W/]"inode-size-mtime", modulo any
         * FileETag keywords.
         */</comment>
        <expr_stmt><expr><name>etag</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>weak_len</name> + <sizeof>sizeof<argument_list>(<argument><expr>"\"--\""</expr></argument>)</argument_list></sizeof> +
                          3 * <name>CHARS_PER_UINT64</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> = <name>etag</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>weak</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr>*<name>weak</name></expr>)</condition> <block>{
                <expr_stmt><expr>*<name>next</name>++ = *<name>weak</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr>*<name>next</name>++ = '"'</expr>;</expr_stmt>
        <expr_stmt><expr><name>bits_added</name> = 0</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>etag_bits</name> &amp; <name>ETAG_INODE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>next</name> = <call><name>etag_uint64_to_hex</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>inode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits_added</name> |= <name>ETAG_INODE</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>etag_bits</name> &amp; <name>ETAG_SIZE</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>bits_added</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>next</name>++ = '-'</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>next</name> = <call><name>etag_uint64_to_hex</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>finfo</name>.<name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bits_added</name> |= <name>ETAG_SIZE</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>etag_bits</name> &amp; <name>ETAG_MTIME</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>bits_added</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr>*<name>next</name>++ = '-'</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>next</name> = <call><name>etag_uint64_to_hex</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>next</name>++ = '"'</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>next</name> = '\0'</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <comment type="block">/*
         * Not a file document, so just use the mtime: [W/]"mtime"
         */</comment>
        <expr_stmt><expr><name>etag</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>weak_len</name> + <sizeof>sizeof<argument_list>(<argument><expr>"\"\""</expr></argument>)</argument_list></sizeof> +
                          <name>CHARS_PER_UINT64</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> = <name>etag</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>weak</name></expr>)</condition><then> <block>{
            <while>while <condition>(<expr>*<name>weak</name></expr>)</condition> <block>{
                <expr_stmt><expr>*<name>next</name>++ = *<name>weak</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></then></if>
        <expr_stmt><expr>*<name>next</name>++ = '"'</expr>;</expr_stmt>
        <expr_stmt><expr><name>next</name> = <call><name>etag_uint64_to_hex</name><argument_list>(<argument><expr><name>next</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>next</name>++ = '"'</expr>;</expr_stmt>
        <expr_stmt><expr>*<name>next</name> = '\0'</expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>etag</name></expr>;</return>
}</block>

<macro><name>AP_DECLARE</name><argument_list>(<argument>void</argument>)</argument_list></macro> <macro><name>ap_set_etag</name><argument_list>(<argument>request_rec *r</argument>)</argument_list></macro>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>etag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>variant_etag</name></decl>, *<decl><type ref="prev"/><name>vlv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>vlv_weak</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>r</name>-&gt;<name>vlist_validator</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>etag</name> = <call><name>ap_make_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* If we get a blank etag back, don't set the header. */</comment>
        <if>if <condition>(<expr>!<name><name>etag</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
    }</block></then>
    <else>else <block>{
        <comment type="block">/* If we have a variant list validator (vlv) due to the
         * response being negotiated, then we create a structured
         * entity tag which merges the variant etag with the variant
         * list validator (vlv).  This merging makes revalidation
         * somewhat safer, ensures that caches which can deal with
         * Vary will (eventually) be updated if the set of variants is
         * changed, and is also a protocol requirement for transparent
         * content negotiation.
         */</comment>

        <comment type="block">/* if the variant list validator is weak, we make the whole
         * structured etag weak.  If we would not, then clients could
         * have problems merging range responses if we have different
         * variants with the same non-globally-unique strong etag.
         */</comment>

        <expr_stmt><expr><name>vlv</name> = <name><name>r</name>-&gt;<name>vlist_validator</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>vlv_weak</name> = (<name><name>vlv</name><index>[<expr>0</expr>]</index></name> == 'W')</expr>;</expr_stmt>

        <expr_stmt><expr><name>variant_etag</name> = <call><name>ap_make_etag</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>vlv_weak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* If we get a blank etag back, don't append vlv and stop now. */</comment>
        <if>if <condition>(<expr>!<name><name>variant_etag</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <comment type="block">/* merge variant_etag and vlv into a structured etag */</comment>
        <expr_stmt><expr><name><name>variant_etag</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>variant_etag</name></expr></argument>)</argument_list></call> - 1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
        <if>if <condition>(<expr><name>vlv_weak</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>vlv</name> += 3</expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>vlv</name>++</expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>etag</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>variant_etag</name></expr></argument>, <argument><expr>";"</expr></argument>, <argument><expr><name>vlv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"ETag"</expr></argument>, <argument><expr><name>etag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block>
</unit>
