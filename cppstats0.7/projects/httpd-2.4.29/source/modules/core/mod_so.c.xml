<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/core/mod_so.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*
 * This module is used to load Apache modules at runtime. This means that the
 * server functionality can be extended without recompiling and even without
 * taking the server down at all. Only a HUP or AP_SIG_GRACEFUL signal
 * needs to be sent to the server to reload the dynamically loaded modules.
 *
 * To use, you'll first need to build your module as a shared library, then
 * update your configuration (httpd.conf) to get the Apache core to load the
 * module at start-up.
 *
 * The easiest way to build a module as a shared library is to use the
 * `SharedModule' command in the Configuration file, instead of `AddModule'.
 * You should also change the file extension from `.o' to `.so'. So, for
 * example, to build the status module as a shared library edit Configuration
 * and change
 *   AddModule    modules/standard/mod_status.o
 * to
 *   SharedModule modules/standard/mod_status.so
 *
 * Run Configure and make. Now Apache's httpd binary will _not_ include
 * mod_status. Instead a shared object called mod_status.so will be build, in
 * the modules/standard directory. You can build most of the modules as shared
 * libraries like this.
 *
 * To use the shared module, move the .so file(s) into an appropriate
 * directory. You might like to create a directory called "modules" under you
 * server root for this (e.g. /usr/local/httpd/modules).
 *
 * Then edit your conf/httpd.conf file, and add LoadModule lines. For
 * example
 *   LoadModule  status_module   modules/mod_status.so
 *
 * The first argument is the module's structure name (look at the end of the
 * module source to find this). The second option is the path to the module
 * file, relative to the server root.  Put these directives right at the top
 * of your httpd.conf file.
 *
 * Now you can start Apache. A message will be logged at "debug" level to your
 * error_log to confirm that the module(s) are loaded (use "LogLevel debug"
 * directive to get these log messages).
 *
 * If you edit the LoadModule directives while the server is live you can get
 * Apache to re-load the modules by sending it a HUP or AP_SIG_GRACEFUL
 * signal as normal.  You can use this to dynamically change the capability
 * of your server without bringing it down.
 *
 * Because currently there is only limited builtin support in the Configure
 * script for creating the shared library files (`.so'), please consult your
 * vendors cc(1), ld(1) and dlopen(3) manpages to find out the appropriate
 * compiler and linker flags and insert them manually into the Configuration
 * file under CFLAGS_SHLIB, LDFLAGS_SHLIB and LDFLAGS_SHLIB_EXPORT.
 *
 * If you still have problems figuring out the flags both try the paper
 *     http://developer.netscape.com/library/documentation/enterprise
 *                                          /unix/svrplug.htm#1013807
 * or install a Perl 5 interpreter on your platform and then run the command
 *
 *     $ perl -V:usedl -V:ccdlflags -V:cccdlflags -V:lddlflags
 *
 * This gives you what type of dynamic loading Perl 5 uses on your platform
 * and which compiler and linker flags Perl 5 uses to create the shared object
 * files.
 *
 * Another location where you can find useful hints is the `ltconfig' script
 * of the GNU libtool 1.2 package. Search for your platform name inside the
 * various "case" constructs.
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dso.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_errno.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_so.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>so_module</name></decl>;</decl_stmt>


<comment type="block">/*
 * Server configuration to keep track of actually
 * loaded modules and the corresponding module name.
 */</comment>

<typedef>typedef <type><struct>struct <name>so_server_conf</name> <block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>loaded_modules</name></decl>;</decl_stmt>
}</block></struct></type> <name>so_server_conf</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>so_sconf_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>so_server_conf</name> *</type><name>soc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>soc</name> = (<name>so_server_conf</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>so_server_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>soc</name>-&gt;<name>loaded_modules</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>DYNAMIC_MODULE_LIMIT</name></expr></argument>,
                                     <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ap_module_symbol_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr>(<name>void</name> *)<name>soc</name></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_DLOPEN</name></cpp:ifndef>

<comment type="block">/*
 * This is the cleanup for a loaded shared object. It unloads the module.
 * This is called as a cleanup function from the core.
 */</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>unload_module</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modi</name> <init>= <expr>(<name>ap_module_symbol_t</name>*)<name>data</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* only unload if module information is still existing */</comment>
    <if>if <condition>(<expr><name><name>modi</name>-&gt;<name>modp</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return></then></if>

    <comment type="block">/* remove the module pointer from the core structure */</comment>
    <expr_stmt><expr><call><name>ap_remove_loaded_module</name><argument_list>(<argument><expr><name><name>modi</name>-&gt;<name>modp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* destroy the module information */</comment>
    <expr_stmt><expr><name><name>modi</name>-&gt;<name>modp</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>modi</name>-&gt;<name>name</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>dso_load</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>apr_dso_handle_t</name> **</type><name>modhandlep</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>used_filename</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>retry</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fullname</name> <init>= <expr><call><name>ap_server_root_relative</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>my_error</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>filename</name> != <name>NULL</name> &amp;&amp; <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr>'/'</expr></argument>)</argument_list></call> == <name>NULL</name></expr>)</condition><then> <block>{
        <comment type="block">/* retry on error without path to use dlopen()'s search path */</comment>
        <expr_stmt><expr><name>retry</name> = 1</expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>fullname</name> == <name>NULL</name> &amp;&amp; !<name>retry</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Invalid %s path %s"</expr></argument>,
                            <argument><expr><name><name>cmd</name>-&gt;<name>cmd</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr>*<name>used_filename</name> = <name>fullname</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>apr_dso_load</name><argument_list>(<argument><expr><name>modhandlep</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>retry</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>used_filename</name> = <name>filename</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>apr_dso_load</name><argument_list>(<argument><expr><name>modhandlep</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call> == <name>APR_SUCCESS</name></expr>)</condition><then>
            <return>return <expr><name>NULL</name></expr>;</return></then></if>
    }</block></then></if>

    <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>temp_pool</name></name></expr></argument>, <argument><expr>"Cannot load "</expr></argument>, <argument><expr><name>filename</name></expr></argument>,
                        <argument><expr>" into server: "</expr></argument>,
                        <argument><expr><call><name>apr_dso_error</name><argument_list>(<argument><expr>*<name>modhandlep</name></expr></argument>, <argument><expr><name>my_error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>my_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
 * This is called for the directive LoadModule and actually loads
 * a shared object file into the address space of the server process.
 */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>load_module</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_dso_handle_t</name> *</type><name>modhandle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dso_handle_sym_t</name></type> <name>modsym</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>module</name> *</type><name>modp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>module_file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>so_server_conf</name> *</type><name>sconf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>error</name></decl>;</decl_stmt>

    <comment type="block">/* we need to setup this value for dummy to make sure that we don't try
     * to add a non-existent tree into the build when we return to
     * execute_now.
     */</comment>
    <expr_stmt><expr>*(<name>ap_directive_t</name> **)<name>dummy</name> = <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/*
     * check for already existing module
     * If it already exists, we have nothing to do
     * Check both dynamically-loaded modules and statically-linked modules.
     */</comment>
    <expr_stmt><expr><name>sconf</name> = (<name>so_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                <argument><expr>&amp;<name>so_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>modie</name> = (<name>ap_module_symbol_t</name> *)<name><name>sconf</name>-&gt;<name>loaded_modules</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sconf</name>-&gt;<name>loaded_modules</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>modi</name> = &amp;<name><name>modie</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>modi</name>-&gt;<name>name</name></name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>modi</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01574</expr></argument>)</argument_list></call>
                          "module %s is already loaded, skipping"</expr></argument>,
                          <argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        }</block></then></if>
    }</block></for>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name><name>ap_preloaded_modules</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>preload_name</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>preload_len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>thismod_len</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>modp</name> = <name><name>ap_preloaded_modules</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block">/* make sure we're comparing apples with apples
         * make sure name of preloaded module is mod_FOO.c
         * make sure name of structure being loaded is FOO_module
         */</comment>

        <if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>modp</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"mod_"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name>preload_name</name> = <name><name>modp</name>-&gt;<name>name</name></name> + <call><name>strlen</name><argument_list>(<argument><expr>"mod_"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>preload_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>preload_name</name></expr></argument>)</argument_list></call> - 2</expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>modname</name></expr></argument>)</argument_list></call> &lt;= <call><name>strlen</name><argument_list>(<argument><expr>"_module"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>thismod_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>modname</name></expr></argument>)</argument_list></call> - <call><name>strlen</name><argument_list>(<argument><expr>"_module"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>modname</name> + <name>thismod_len</name></expr></argument>, <argument><expr>"_module"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr><name>thismod_len</name> != <name>preload_len</name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr>!<call><name>memcmp</name><argument_list>(<argument><expr><name>modname</name></expr></argument>, <argument><expr><name>preload_name</name></expr></argument>, <argument><expr><name>preload_len</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"module "</expr></argument>, <argument><expr><name>modname</name></expr></argument>,
                               <argument><expr>" is built-in and can't be loaded"</expr></argument>,
                               <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>modi</name> = <call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>sconf</name>-&gt;<name>loaded_modules</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>modi</name>-&gt;<name>name</name></name> = <name>modname</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Load the file into the Apache address space
     */</comment>
    <expr_stmt><expr><name>error</name> = <call><name>dso_load</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>modhandle</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>&amp;<name>module_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>error</name></expr>)</condition><then>
        <return>return <expr><name>error</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01575</expr></argument>)</argument_list></call>
                 "loaded module %s from %s"</expr></argument>, <argument><expr><name>modname</name></expr></argument>, <argument><expr><name>module_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Retrieve the pointer to the module structure through the module name:
     * First with the hidden variant (prefix `AP_') and then with the plain
     * symbol name.
     */</comment>
    <if>if <condition>(<expr><call><name>apr_dso_sym</name><argument_list>(<argument><expr>&amp;<name>modsym</name></expr></argument>, <argument><expr><name>modhandle</name></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name><name>my_error</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>

        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Can't locate API module structure `"</expr></argument>,
                          <argument><expr><name>modname</name></expr></argument>, <argument><expr>"' in file "</expr></argument>, <argument><expr><name>module_file</name></expr></argument>, <argument><expr>": "</expr></argument>,
                          <argument><expr><call><name>apr_dso_error</name><argument_list>(<argument><expr><name>modhandle</name></expr></argument>, <argument><expr><name>my_error</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>my_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>modp</name> = (<name>module</name>*) <name>modsym</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>modp</name>-&gt;<name>dynamic_load_handle</name></name> = (<name>apr_dso_handle_t</name> *)<name>modhandle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>modi</name>-&gt;<name>modp</name></name> = <name>modp</name></expr>;</expr_stmt>

    <comment type="block">/*
     * Make sure the found module structure is really a module structure
     *
     */</comment>
    <if>if <condition>(<expr><name><name>modp</name>-&gt;<name>magic</name></name> != <name>MODULE_MAGIC_COOKIE</name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"API module structure '%s' in file %s "
                            "is garbled - expected signature %08lx but saw "
                            "%08lx - perhaps this is not an Apache module DSO, "
                            "or was compiled for a different Apache version?"</expr></argument>,
                            <argument><expr><name>modname</name></expr></argument>, <argument><expr><name>module_file</name></expr></argument>,
                            <argument><expr><name>MODULE_MAGIC_COOKIE</name></expr></argument>, <argument><expr><name><name>modp</name>-&gt;<name>magic</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Add this module to the Apache core structures
     */</comment>
    <expr_stmt><expr><name>error</name> = <call><name>ap_add_loaded_module</name><argument_list>(<argument><expr><name>modp</name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>error</name></expr>)</condition><then> <block>{
        <return>return <expr><name>error</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Register a cleanup in the config apr_pool_t (normally pconf). When
     * we do a restart (or shutdown) this cleanup will cause the
     * shared object to be unloaded.
     */</comment>
    <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>modi</name></expr></argument>, <argument><expr><name>unload_module</name></expr></argument>, <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Finally we need to run the configuration process for the module
     */</comment>
    <expr_stmt><expr><call><name>ap_single_module_configure</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr><name>modp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * This implements the LoadFile directive and loads an arbitrary
 * shared object file into the address space of the server process.
 */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>load_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_dso_handle_t</name> *</type><name>handle</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>used_file</name></decl>, *<decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>error</name> = <call><name>dso_load</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr>&amp;<name>handle</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr>&amp;<name>used_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>error</name></expr>)</condition><then>
        <return>return <expr><name>error</name></expr>;</return></then></if>

    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01576</expr></argument>)</argument_list></call>
                 "loaded file %s"</expr></argument>, <argument><expr><name>used_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>module</name> *</type><name>ap_find_loaded_module_symbol</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modname</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>so_server_conf</name> *</type><name>sconf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sconf</name> = (<name>so_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                   <argument><expr>&amp;<name>so_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>modie</name> = (<name>ap_module_symbol_t</name> *)<name><name>sconf</name>-&gt;<name>loaded_modules</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sconf</name>-&gt;<name>loaded_modules</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>modi</name> = &amp;<name><name>modie</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>modi</name>-&gt;<name>name</name></name> != <name>NULL</name> &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr><name><name>modi</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>modname</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr><name><name>modi</name>-&gt;<name>modp</name></name></expr>;</return>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_loaded_modules</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modie</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_module_symbol_t</name> *</type><name>modi</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>so_server_conf</name> *</type><name>sconf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<call><name>ap_exists_config_define</name><argument_list>(<argument><expr>"DUMP_MODULES"</expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>out</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>"Loaded Modules:\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sconf</name> = (<name>so_server_conf</name> *)<call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                   <argument><expr>&amp;<name>so_module</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>modi</name> = &amp;<name><name>ap_prelinked_module_symbols</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>modi</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" %s (static)\n"</expr></argument>, <argument><expr><name><name>modi</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <break>break;</break>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><name>modie</name> = (<name>ap_module_symbol_t</name> *)<name><name>sconf</name>-&gt;<name>loaded_modules</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>sconf</name>-&gt;<name>loaded_modules</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>modi</name> = &amp;<name><name>modie</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>modi</name>-&gt;<name>name</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr>" %s (shared)\n"</expr></argument>, <argument><expr><name><name>modi</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* not NO_DLOPEN */</comment>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>load_file</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01577</expr></argument>)</argument_list></call>
                 "WARNING: LoadFile not supported on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>load_module</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dummy</name></decl></param>,
                               <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>modname</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>filename</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_STARTUP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01578</expr></argument>)</argument_list></call>
                 "WARNING: LoadModule not supported on this platform"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* NO_DLOPEN */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_DLOPEN</name></cpp:ifndef>
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_find_loaded_module_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_test_config</name><argument_list>(<argument><expr><name>dump_loaded_modules</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>so_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>AP_INIT_TAKE2</name><argument_list>(<argument><expr>"LoadModule"</expr></argument>, <argument><expr><name>load_module</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>EXEC_ON_READ</name></expr></argument>,
      <argument><expr>"a module name and the name of a shared object file to load it from"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_ITERATE</name><argument_list>(<argument><expr>"LoadFile"</expr></argument>, <argument><expr><name>load_file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>  | <name>EXEC_ON_READ</name></expr></argument>,
      <argument><expr>"shared object file or library to load into the server at runtime"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>so</name></expr></argument>)</argument_list></call> = <block>{
   <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
   <expr><name>NULL</name></expr>,                 <comment type="block">/* create per-dir config */</comment>
   <expr><name>NULL</name></expr>,                 <comment type="block">/* merge per-dir config */</comment>
   <expr><name>so_sconf_create</name></expr>,      <comment type="block">/* server config */</comment>
   <expr><name>NULL</name></expr>,                 <comment type="block">/* merge server config */</comment>
   <expr><name>so_cmds</name></expr>,              <comment type="block">/* command apr_table_t */</comment>
   <expr><name>register_hooks</name></expr>        <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
