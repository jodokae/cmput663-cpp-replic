<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/session/mod_session_dbd.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_cookies.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_dbd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpm_common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_DBD</name></cpp:macro> <cpp:value>"mod_session_dbd"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>session_dbd_module</name></decl>;</decl_stmt>

<comment type="block">/**
 * Structure to carry the per-dir session config.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>name_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name_attrs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>name2_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name2_attrs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>peruser</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>peruser_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remove</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>remove_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>selectlabel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>insertlabel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>updatelabel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>deletelabel</name></decl>;</decl_stmt>
}</block></struct></type> <name>session_dbd_dir_conf</name>;</typedef>

<comment type="block">/* optional function - look it up once in post_config */</comment>
<expr_stmt><expr>static <call><call><name>ap_dbd_t</name> *<argument_list>(<argument><expr>*<name>session_dbd_acquire_fn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>request_rec</name> *</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr>static <call><call><name>void</name> <argument_list>(<argument><expr>*<name>session_dbd_prepare_fn</name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>server_rec</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>, <argument><expr>const <name>char</name> *</expr></argument>)</argument_list></call> = <name>NULL</name></expr>;</expr_stmt>

<comment type="block">/**
 * Initialise the database.
 *
 * If the mod_dbd module is missing, this method will return APR_EGENERAL.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_init</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>query</name></decl></param>, <param><decl><type><name>ap_dbd_t</name> **</type><name>dbdp</name></decl></param>,
                             <param><decl><type><name>apr_dbd_prepared_t</name> **</type><name>statementp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>statement</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>session_dbd_prepare_fn</name> || !<name>session_dbd_acquire_fn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>session_dbd_prepare_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_prepare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>session_dbd_acquire_fn</name> = <call><name>APR_RETRIEVE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_dbd_acquire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>session_dbd_prepare_fn</name> || !<name>session_dbd_acquire_fn</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01850</expr></argument>)</argument_list></call>
                          "You must load mod_dbd to enable AuthDBD functions"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name>dbd</name> = <call><name>session_dbd_acquire_fn</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>dbd</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01851</expr></argument>)</argument_list></call>
                      "failed to acquire database connection"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>statement</name> = <call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>prepared</name></name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>statement</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01852</expr></argument>)</argument_list></call>
                      "failed to find the prepared statement called '%s'"</expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr>*<name>dbdp</name> = <name>dbd</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>statementp</name> = <name>statement</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Load the session by the key specified.
 *
 * The session value is allocated using the passed apr_pool_t.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_load</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>,
                             <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>val</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>statement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbd_results_t</name> *</type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbd_row_t</name> *</type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>expiry</name> <init>= <expr>(<name>apr_int64_t</name>) <call><name>apr_time_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>session_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>selectlabel</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01853</expr></argument>)</argument_list></call>
                      "no SessionDBDselectlabel has been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>dbd_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>selectlabel</name></name></expr></argument>, <argument><expr>&amp;<name>dbd</name></expr></argument>, <argument><expr>&amp;<name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_pvbselect</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>,
                          <argument><expr>0</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01854</expr></argument>)</argument_list></call>
                      "query execution error saving session '%s' "
                      "in database using query '%s': %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>selectlabel</name></name></expr></argument>,
                      <argument><expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>
    <for>for (<init><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr><name>rv</name> != -1</expr>;</condition>
         <incr><expr><name>rv</name> = <call><name>apr_dbd_get_row</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr>&amp;<name>row</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></incr>) <block>{
        <if>if <condition>(<expr><name>rv</name> != 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01855</expr></argument>)</argument_list></call>
                          "error retrieving results while saving '%s' "
                          "in database using query '%s': %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>selectlabel</name></name></expr></argument>,
                           <argument><expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr>*<name>val</name> == <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>val</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>apr_dbd_get_entry</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <comment type="block">/* we can't break out here or row won't get cleaned up */</comment>
    }</block></for>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * Load the session by firing off a dbd query.
 *
 * If the session is anonymous, the session key will be extracted from
 * the cookie specified. Failing that, the session key will be extracted
 * from the GET parameters.
 *
 * If the session is keyed by the username, the session will be extracted
 * by that.
 *
 * If no session is found, an empty session will be created.
 *
 * On success, this returns OK.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_dbd_load</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>session_rec</name> **</type> <name>z</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>session_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>session_rec</name> *</type><name>zz</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>note</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>request_rec</name> *</type><name>m</name> <init>= <expr><name><name>r</name>-&gt;<name/></name>main ? <name><name>r</name>-&gt;<name/></name>main : <name>r</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* is our session in a cookie? */</comment>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>conf</name>-&gt;<name>name2</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>conf</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>peruser_set</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <name><name>r</name>-&gt;<name>user</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></else></if></else></if></else></if>

    <comment type="block">/* first look in the notes */</comment>
    <expr_stmt><expr><name>note</name> = <call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>MOD_SESSION_DBD</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zz</name> = (<name>session_rec</name> *)<call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>zz</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>z</name> = <name>zz</name></expr>;</expr_stmt>
        <return>return <expr><name>OK</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* load anonymous sessions */</comment>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name> || <name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{

        <comment type="block">/* load an RFC2109 or RFC2965 compliant cookie */</comment>
        <expr_stmt><expr><call><name>ap_cookie_read</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>&amp;<name>key</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>key</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> = <call><name>dbd_load</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <return>return <expr><name>ret</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

    }</block></then>

    <comment type="block">/* load named session */</comment>
    <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>peruser</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> = <call><name>dbd_load</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <return>return <expr><name>ret</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></then>

    <comment type="block">/* otherwise not for us */</comment>
    <else>else <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></else></if></else></if>

    <comment type="block">/* create a new session and return it */</comment>
    <expr_stmt><expr><name>zz</name> = (<name>session_rec</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_rec</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zz</name>-&gt;<name>pool</name></name> = <name><name>m</name>-&gt;<name>pool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zz</name>-&gt;<name>entries</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>zz</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>key</name> &amp;&amp; <name>val</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_uuid_t</name> *</type><name>uuid</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>zz</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>APR_SUCCESS</name> == <call><name>apr_uuid_parse</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>zz</name>-&gt;<name>uuid</name></name> = <name>uuid</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name><name>zz</name>-&gt;<name>encoded</name></name> = <name>val</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>z</name> = <name>zz</name></expr>;</expr_stmt>

    <comment type="block">/* put the session in the notes so we don't have to parse it again */</comment>
    <expr_stmt><expr><call><name>apr_table_setn</name><argument_list>(<argument><expr><name><name>m</name>-&gt;<name>notes</name></name></expr></argument>, <argument><expr><name>note</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * Save the session by the key specified.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_save</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>oldkey</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>newkey</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>val</name></decl></param>, <param><decl><type><name>apr_int64_t</name></type> <name>expiry</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>statement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>session_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>updatelabel</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01856</expr></argument>)</argument_list></call>
                      "no SessionDBDupdatelabel has been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>dbd_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>updatelabel</name></name></expr></argument>, <argument><expr>&amp;<name>dbd</name></expr></argument>, <argument><expr>&amp;<name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldkey</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_pvbquery</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>rows</name></expr></argument>,
                <argument><expr><name>statement</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name>oldkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(
                    <argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01857</expr></argument>)</argument_list></call> "query execution error updating session '%s' "
                    "using database query '%s': %s/%s"</expr></argument>, <argument><expr><name>oldkey</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>updatelabel</name></name></expr></argument>, <argument><expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/*
         * if some rows were updated it means a session existed and was updated,
         * so we are done.
         */</comment>
        <if>if <condition>(<expr><name>rows</name> != 0</expr>)</condition><then> <block>{
            <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>insertlabel</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01858</expr></argument>)</argument_list></call>
                      "no SessionDBDinsertlabel has been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>dbd_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>insertlabel</name></name></expr></argument>, <argument><expr>&amp;<name>dbd</name></expr></argument>, <argument><expr>&amp;<name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_pvbquery</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>rows</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>,
                          <argument><expr><name>val</name></expr></argument>, <argument><expr>&amp;<name>expiry</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01859</expr></argument>)</argument_list></call>
                      "query execution error inserting session '%s' "
                      "in database with '%s': %s"</expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>insertlabel</name></name></expr></argument>,
                      <argument><expr><call><name>apr_dbd_error</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr><name>rv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * if some rows were inserted it means a session was inserted, so we are
     * done.
     */</comment>
    <if>if <condition>(<expr><name>rows</name> != 0</expr>)</condition><then> <block>{
        <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01860</expr></argument>)</argument_list></call>
                  "the session insert query did not cause any rows to be added "
                  "to the database for session '%s', session not inserted"</expr></argument>, <argument><expr><name>newkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>APR_EGENERAL</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * Remove the session by the key specified.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_remove</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_dbd_t</name> *</type><name>dbd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dbd_prepared_t</name> *</type><name>statement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>session_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>deletelabel</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01862</expr></argument>)</argument_list></call>
                      "no SessionDBDdeletelabel has been specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>dbd_init</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>deletelabel</name></name></expr></argument>, <argument><expr>&amp;<name>dbd</name></expr></argument>, <argument><expr>&amp;<name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <comment type="block">/* No need to do additional error logging here, it has already
           been done in dbd_init if needed */</comment>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_dbd_pvbquery</name><argument_list>(<argument><expr><name><name>dbd</name>-&gt;<name>driver</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dbd</name>-&gt;<name>handle</name></name></expr></argument>, <argument><expr>&amp;<name>rows</name></expr></argument>, <argument><expr><name>statement</name></expr></argument>,
                          <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01864</expr></argument>)</argument_list></call>
                      "query execution error removing session '%s' "
                      "from database"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>rv</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * Clean out expired sessions.
 *
 * TODO: We need to figure out a way to clean out expired sessions from the database.
 * The monitor hook doesn't help us that much, as we have no handle into the
 * server, and so we need to come up with a way to do this safely.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>dbd_clean</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{

    <return>return <expr><name>APR_ENOTIMPL</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * Save the session by firing off a dbd query.
 *
 * If the session is anonymous, save the session and write a cookie
 * containing the uuid.
 *
 * If the session is keyed to the username, save the session using
 * the username as a key.
 *
 * On success, this method will return APR_SUCCESS.
 *
 * @param r The request pointer.
 * @param z A pointer to where the session will be written.
 */</comment>
<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>session_dbd_save</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type> <name>r</name></decl></param>, <param><decl><type><name>session_rec</name> *</type> <name>z</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>ret</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>,
                                                      <argument><expr>&amp;<name>session_dbd_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* support anonymous sessions */</comment>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name> || <name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>oldkey</name> <init>= <expr><name>NULL</name></expr></init>, *<name>newkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="block">/* don't cache pages with a session */</comment>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* if the session is new or changed, make a new session ID */</comment>
        <if>if <condition>(<expr><name><name>z</name>-&gt;<name>uuid</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>oldkey</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_UUID_FORMATTED_LENGTH</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_uuid_format</name><argument_list>(<argument><expr><name>oldkey</name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>z</name>-&gt;<name>dirty</name></name> || !<name>oldkey</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>z</name>-&gt;<name>uuid</name></name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>z</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>apr_uuid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_uuid_get</name><argument_list>(<argument><expr><name><name>z</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>newkey</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>APR_UUID_FORMATTED_LENGTH</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_uuid_format</name><argument_list>(<argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>uuid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>newkey</name> = <name>oldkey</name></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="block">/* save the session with the uuid as key */</comment>
        <if>if <condition>(<expr><name><name>z</name>-&gt;<name>encoded</name></name> &amp;&amp; <name><name>z</name>-&gt;<name>encoded</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> = <call><name>dbd_save</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oldkey</name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>expiry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>ret</name> = <call><name>dbd_remove</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>oldkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <return>return <expr><name>ret</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* create RFC2109 compliant cookie */</comment>
        <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name_set</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_cookie_write</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name_attrs</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>maxage</name></name></expr></argument>,
                            <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* create RFC2965 compliant cookie */</comment>
        <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>name2_set</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_cookie_write2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name2</name></name></expr></argument>, <argument><expr><name>newkey</name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>name2_attrs</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>maxage</name></name></expr></argument>,
                             <argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>err_headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>OK</name></expr>;</return>

    }</block></then>

    <comment type="block">/* save named session */</comment>
    <else>else <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>peruser</name></name></expr>)</condition><then> <block>{

        <comment type="block">/* don't cache pages with a session */</comment>
        <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Cache-Control"</expr></argument>, <argument><expr>"no-cache"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>user</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> = <call><name>dbd_save</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>user</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>encoded</name></name></expr></argument>, <argument><expr><name><name>z</name>-&gt;<name>expiry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ret</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <return>return <expr><name>ret</name></expr>;</return>
            }</block></then></if>
            <return>return <expr><name>OK</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01865</expr></argument>)</argument_list></call>
               "peruser sessions can only be saved if a user is logged in, "
                          "session not saved: %s"</expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then></if></else></if>

    <return>return <expr><name>DECLINED</name></expr>;</return>

}</block></function>

<comment type="block">/**
 * This function performs housekeeping on the database, deleting expired
 * sessions.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>session_dbd_monitor</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* TODO handle housekeeping */</comment>
    <expr_stmt><expr><call><name>dbd_clean</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>


<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_session_dbd_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>new</name> <init>=
    <expr>(<name>session_dbd_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_dbd_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>remove</name></name> = 1</expr>;</expr_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>selectlabel</name></name> = "selectsession"</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>insertlabel</name></name> = "insertsession"</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>updatelabel</name></name> = "updatesession"</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>deletelabel</name></name> = "deletesession"</expr>;</expr_stmt>

    <return>return <expr>(<name>void</name> *) <name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_session_dbd_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>new</name> <init>= <expr>(<name>session_dbd_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>session_dbd_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>session_dbd_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>session_dbd_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>name</name></name> = (<name><name>add</name>-&gt;<name>name_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name</name></name> : <name><name>add</name>-&gt;<name>name</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name_attrs</name></name> = (<name><name>add</name>-&gt;<name>name_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name_attrs</name></name> : <name><name>add</name>-&gt;<name>name_attrs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name_set</name></name> = <name><name>add</name>-&gt;<name>name_set</name></name> || <name><name>base</name>-&gt;<name>name_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name2</name></name> = (<name><name>add</name>-&gt;<name>name2_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name2</name></name> : <name><name>add</name>-&gt;<name>name2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name2_attrs</name></name> = (<name><name>add</name>-&gt;<name>name2_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>name2_attrs</name></name> : <name><name>add</name>-&gt;<name>name2_attrs</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>name2_set</name></name> = <name><name>add</name>-&gt;<name>name2_set</name></name> || <name><name>base</name>-&gt;<name>name2_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>peruser</name></name> = (<name><name>add</name>-&gt;<name>peruser_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>peruser</name></name> : <name><name>add</name>-&gt;<name>peruser</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>peruser_set</name></name> = <name><name>add</name>-&gt;<name>peruser_set</name></name> || <name><name>base</name>-&gt;<name>peruser_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>remove</name></name> = (<name><name>add</name>-&gt;<name>remove_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>remove</name></name> : <name><name>add</name>-&gt;<name>remove</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>remove_set</name></name> = <name><name>add</name>-&gt;<name>remove_set</name></name> || <name><name>base</name>-&gt;<name>remove_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>selectlabel</name></name> = (!<name><name>add</name>-&gt;<name>selectlabel</name></name>) ? <name><name>base</name>-&gt;<name>selectlabel</name></name> : <name><name>add</name>-&gt;<name>selectlabel</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>updatelabel</name></name> = (!<name><name>add</name>-&gt;<name>updatelabel</name></name>) ? <name><name>base</name>-&gt;<name>updatelabel</name></name> : <name><name>add</name>-&gt;<name>updatelabel</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>insertlabel</name></name> = (!<name><name>add</name>-&gt;<name>insertlabel</name></name>) ? <name><name>base</name>-&gt;<name>insertlabel</name></name> : <name><name>add</name>-&gt;<name>insertlabel</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>deletelabel</name></name> = (!<name><name>add</name>-&gt;<name>deletelabel</name></name>) ? <name><name>base</name>-&gt;<name>deletelabel</name></name> : <name><name>add</name>-&gt;<name>deletelabel</name></name></expr>;</expr_stmt>

    <return>return <expr><name>new</name></expr>;</return>
}</block></function>

<comment type="block">/**
 * Sanity check a given string that it exists, is not empty,
 * and does not contain special characters.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>check_string</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>string</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>ap_cookie_check_string</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name>apr_pstrcat</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>cmd</name>-&gt;<name>directive</name>-&gt;<name>directive</name></name></expr></argument>,
                           <argument><expr>" cannot be empty, or contain '=', ';' or '&amp;'."</expr></argument>,
                           <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
     <name>set_dbd_peruser</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>peruser</name></name> = <name>flag</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>peruser_set</name></name> = 1</expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type>
     <name>set_dbd_cookie_remove</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf</name></decl></param>, <param><decl><type><name>int</name></type> <name>flag</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr><name>dconf</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>conf</name>-&gt;<name>remove</name></name> = <name>flag</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>remove_set</name></name> = 1</expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_name</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>last</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>line</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>session_dbd_dir_conf</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>cookie</name> <init>= <expr><call><name>apr_strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>" \t"</expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>name</name></name> = <name>cookie</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>name_set</name></name> = 1</expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><name>last</name>++</expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>name_attrs</name></name> = <name>last</name></expr>;</expr_stmt>
    <return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cookie_name2</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type> <name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>config</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>last</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>line</name> <init>= <expr><call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>session_dbd_dir_conf</name> *</type><name>conf</name> <init>= <expr>(<name>session_dbd_dir_conf</name> *) <name>config</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>cookie</name> <init>= <expr><call><name>apr_strtok</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr>" \t"</expr></argument>, <argument><expr>&amp;<name>last</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>name2</name></name> = <name>cookie</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>name2_set</name></name> = 1</expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr>*<name>last</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><name>last</name>++</expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name><name>conf</name>-&gt;<name>name2_attrs</name></name> = <name>last</name></expr>;</expr_stmt>
    <return>return <expr><call><name>check_string</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cookie</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>session_dbd_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SessionDBDSelectLabel"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
      <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>session_dbd_dir_conf</name></expr></argument>, <argument><expr><name>selectlabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Query label used to select a new session"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SessionDBDInsertLabel"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
      <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>session_dbd_dir_conf</name></expr></argument>, <argument><expr><name>insertlabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Query label used to insert a new session"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SessionDBDUpdateLabel"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
      <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>session_dbd_dir_conf</name></expr></argument>, <argument><expr><name>updatelabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Query label used to update an existing session"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"SessionDBDDeleteLabel"</expr></argument>, <argument><expr><name>ap_set_string_slot</name></expr></argument>,
      <argument><expr>(<name>void</name> *) <call><name>APR_OFFSETOF</name><argument_list>(<argument><expr><name>session_dbd_dir_conf</name></expr></argument>, <argument><expr><name>deletelabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                  <argument><expr>"Query label used to delete an existing session"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SessionDBDPerUser"</expr></argument>, <argument><expr><name>set_dbd_peruser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"Save the session per user"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_FLAG</name><argument_list>(<argument><expr>"SessionDBDCookieRemove"</expr></argument>, <argument><expr><name>set_dbd_cookie_remove</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"Remove the session cookie after session load. On by default."</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SessionDBDCookieName"</expr></argument>, <argument><expr><name>set_cookie_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"The name of the RFC2109 cookie carrying the session key"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SessionDBDCookieName2"</expr></argument>, <argument><expr><name>set_cookie_name2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>OR_AUTHCFG</name></expr></argument>,
                 <argument><expr>"The name of the RFC2965 cookie carrying the session key"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type> <name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_session_load</name><argument_list>(<argument><expr><name>session_dbd_load</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_session_save</name><argument_list>(<argument><expr><name>session_dbd_save</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_monitor</name><argument_list>(<argument><expr><name>session_dbd_monitor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>session_dbd</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_session_dbd_dir_config</name></expr>, <comment type="block">/* dir config creater */</comment>
    <expr><name>merge_session_dbd_dir_config</name></expr>,  <comment type="block">/* dir merger --- default is to
                                    * override */</comment>
    <expr><name>NULL</name></expr>,                          <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                          <comment type="block">/* merge server config */</comment>
    <expr><name>session_dbd_cmds</name></expr>,              <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>                 <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
