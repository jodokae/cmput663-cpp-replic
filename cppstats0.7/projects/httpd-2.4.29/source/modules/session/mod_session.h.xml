<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/session/mod_session.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MOD_SESSION_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_H</name></cpp:macro></cpp:define>

<comment type="block">/* Create a set of SESSION_DECLARE(type), SESSION_DECLARE_NONSTD(type) and
 * SESSION_DECLARE_DATA with appropriate export and import tags for the platform
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SESSION_DECLARE_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SESSION_DECLARE_EXPORT</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>__declspec(dllexport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllexport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro>         <cpp:value>__declspec(dllexport)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro>        <cpp:value>__declspec(dllimport) type __stdcall</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_NONSTD</name><parameter_list>(<param><type><name>type</name></type></param>)</parameter_list></cpp:macro> <cpp:value>__declspec(dllimport) type</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SESSION_DECLARE_DATA</name></cpp:macro>         <cpp:value>__declspec(dllimport)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * @file  mod_session.h
 * @brief Session Module for Apache
 *
 * @defgroup MOD_SESSION mod_session
 * @ingroup  APACHE_MODS
 * @{
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_hooks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_uuid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_pools.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_NOTES_KEY</name></cpp:macro> <cpp:value>"mod_session_key"</cpp:value></cpp:define>

<comment type="block">/**
 * Define the name of a username stored in the session, so that modules interested
 * in the username can find it in a standard place.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_USER</name></cpp:macro> <cpp:value>"user"</cpp:value></cpp:define>

<comment type="block">/**
 * Define the name of a password stored in the session, so that modules interested
 * in the password can find it in a standard place.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_SESSION_PW</name></cpp:macro> <cpp:value>"pw"</cpp:value></cpp:define>

<comment type="block">/**
 * A session structure.
 *
 * At the core of the session is a set of name value pairs making up the
 * session.
 *
 * The session might be uniquely identified by an anonymous uuid, or
 * a remote_user value, or both.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>             <comment type="block">/* pool to be used for this session */</comment>
    <decl_stmt><decl><type><name>apr_uuid_t</name> *</type><name>uuid</name></decl>;</decl_stmt>             <comment type="block">/* anonymous uuid of this particular session */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>remote_user</name></decl>;</decl_stmt>      <comment type="block">/* user who owns this particular session */</comment>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>entries</name></decl>;</decl_stmt>         <comment type="block">/* key value pairs */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>encoded</name></decl>;</decl_stmt>          <comment type="block">/* the encoded version of the key value pairs */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>expiry</name></decl>;</decl_stmt>            <comment type="block">/* if &gt; 0, the time of expiry of this session */</comment>
    <decl_stmt><decl><type><name>long</name></type> <name>maxage</name></decl>;</decl_stmt>                  <comment type="block">/* if &gt; 0, the maxage of the session, from
                                   * which expiry is calculated */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>dirty</name></decl>;</decl_stmt>                    <comment type="block">/* dirty flag */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>cached</name></decl>;</decl_stmt>                   <comment type="block">/* true if this session was loaded from a
                                   * cache of some kind */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>written</name></decl>;</decl_stmt>                  <comment type="block">/* true if this session has already been
                                   * written */</comment>
}</block></struct></type> <name>session_rec</name>;</typedef>

<comment type="block">/**
 * Structure to carry the per-dir session config.
 */</comment>
<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>enabled</name></decl>;</decl_stmt>                  <comment type="block">/* whether the session has been enabled for
                                   * this directory */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>enabled_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>maxage</name></decl>;</decl_stmt>                  <comment type="block">/* seconds until session expiry */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>maxage_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl>;</decl_stmt>           <comment type="block">/* header to inject session */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>header_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>env</name></decl>;</decl_stmt>                      <comment type="block">/* whether the session has been enabled for
                                   * this directory */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>env_set</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>includes</name></decl>;</decl_stmt> <comment type="block">/* URL prefixes to be included. All
                                   * URLs included if empty */</comment>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>excludes</name></decl>;</decl_stmt> <comment type="block">/* URL prefixes to be excluded. No
                                   * URLs excluded if empty */</comment>
}</block></struct></type> <name>session_dir_conf</name>;</typedef>

<comment type="block">/**
 * Hook to load the session.
 *
 * If the session doesn't exist, a blank one will be created.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_load</argument>,
        <argument>(request_rec * r, session_rec ** z)</argument>)</argument_list></macro>

<comment type="block">/**
 * Hook to save the session.
 *
 * In most implementations the session is only saved if the dirty flag is
 * true. This prevents the session being saved unnecessarily.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_save</argument>,
        <argument>(request_rec * r, session_rec * z)</argument>)</argument_list></macro>

<comment type="block">/**
 * Hook to encode the session.
 *
 * In the default implementation, the key value pairs are encoded using
 * key value pairs separated by equals, in turn separated by ampersand,
 * like a web form.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_encode</argument>,
        <argument>(request_rec * r, session_rec * z)</argument>)</argument_list></macro>

<comment type="block">/**
 * Hook to decode the session.
 *
 * In the default implementation, the key value pairs are encoded using
 * key value pairs separated by equals, in turn separated by ampersand,
 * like a web form.
 *
 * @param r The request
 * @param z A pointer to where the session will be written.
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ap</argument>, <argument>SESSION</argument>, <argument>apr_status_t</argument>, <argument>session_decode</argument>,
        <argument>(request_rec * r, session_rec * z)</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(
        <argument><expr><name>apr_status_t</name></expr></argument>,
        <argument><expr><name>ap_session_get</name></expr></argument>,
        <argument><expr>(<name>request_rec</name> * <name>r</name>, <name>session_rec</name> * <name>z</name>, const <name>char</name> *<name>key</name>, const <name>char</name> **<name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_session_set</name></expr></argument>,
        <argument><expr>(<name>request_rec</name> * <name>r</name>, <name>session_rec</name> * <name>z</name>, const <name>char</name> *<name>key</name>, const <name>char</name> *<name>value</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_session_load</name></expr></argument>,
        <argument><expr>(<name>request_rec</name> *, <name>session_rec</name> **)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>apr_status_t</name></expr></argument>, <argument><expr><name>ap_session_save</name></expr></argument>,
        <argument><expr>(<name>request_rec</name> *, <name>session_rec</name> *)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/**
 * The name of the module.
 */</comment>
<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>session_module</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOD_SESSION_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
