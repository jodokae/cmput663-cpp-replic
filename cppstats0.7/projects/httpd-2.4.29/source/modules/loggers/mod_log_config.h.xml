<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/loggers/mod_log_config.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file mod_log_config.h
 * @brief Logging Configuration Extension Module for Apache
 *
 * @defgroup MOD_LOG_CONFIG mod_log_config
 * @ingroup APACHE_MODS
 * @{
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_optional.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"scoreboard.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_MOD_LOG_CONFIG_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_MOD_LOG_CONFIG_H</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/**
 * callback function prototype for a external log handler
 */</comment>
<typedef>typedef <function_decl><type><specifier>const</specifier> <name>char</name> *</type><name>ap_log_handler_fn_t</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>char</name> *</type><name>a</name></decl></param>)</parameter_list>;</function_decl></typedef>

<comment type="block">/**
 * callback function prototype for external writer initialization.
 */</comment>
<typedef>typedef <function_decl><type><name>void</name> *</type><name>ap_log_writer_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                                 <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl></typedef>
<comment type="block">/**
 * callback which gets called where there is a log line to write.
 */</comment>
<typedef>typedef <function_decl><type><name>apr_status_t</name></type> <name>ap_log_writer</name><parameter_list>(
                            <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
                            <param><decl><type><name>void</name> *</type><name>handle</name></decl></param>,
                            <param><decl><type><specifier>const</specifier> <name>char</name> **</type><name>portions</name></decl></param>,
                            <param><decl><type><name>int</name> *</type><name>lengths</name></decl></param>,
                            <param><decl><type><name>int</name></type> <name>nelts</name></decl></param>,
                            <param><decl><type><name>apr_size_t</name></type> <name>len</name></decl></param>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <name>ap_log_handler</name> <block>{
    <decl_stmt><decl><type><name>ap_log_handler_fn_t</name> *</type><name>func</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>want_orig_default</name></decl>;</decl_stmt>
}</block></struct></type> <name>ap_log_handler</name>;</typedef>

<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>ap_register_log_handler</name></expr></argument>,
                        <argument><expr>(<name>apr_pool_t</name> *<name>p</name>, <name>char</name> *<name>tag</name>, <name>ap_log_handler_fn_t</name> *<name>func</name>,
                         <name>int</name> <name>def</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/**
 * you will need to set your init handler *BEFORE* the open_logs
 * in mod_log_config gets executed
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_log_writer_init</name>*</expr></argument>, <argument><expr><name>ap_log_set_writer_init</name></expr></argument>,<argument><expr>(<name>ap_log_writer_init</name> *<name>func</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/**
 * you should probably set the writer at the same time (ie..before open_logs)
 */</comment>
<expr_stmt><expr><call><name>APR_DECLARE_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ap_log_writer</name>*</expr></argument>, <argument><expr><name>ap_log_set_writer</name></expr></argument>, <argument><expr>(<name>ap_log_writer</name>* <name>func</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* MOD_LOG_CONFIG */</comment>
<comment type="block">/** @} */</comment>

</unit>
