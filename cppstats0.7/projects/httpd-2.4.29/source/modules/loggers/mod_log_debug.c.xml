<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/loggers/mod_log_debug.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_expr.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>log_debug_module</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>msg_expr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_expr_info_t</name> *</type><name>condition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hook</name></decl>;</decl_stmt>
}</block></struct></type> <name>msg_entry</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>entries</name></decl>;</decl_stmt>
}</block></struct></type> <name>log_debug_dirconf</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>allhooks</name> <init>= <expr>"all"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name><name>hooks</name><index>[]</index></name> <init>= <expr><block>{
    <expr>"log_transaction"</expr>,      <comment type="block">/*  0 */</comment>
    <expr>"quick_handler"</expr>,        <comment type="block">/*  1 */</comment>
    <expr>"handler"</expr>,              <comment type="block">/*  2 */</comment>
    <expr>"translate_name"</expr>,       <comment type="block">/*  3 */</comment>
    <expr>"map_to_storage"</expr>,       <comment type="block">/*  4 */</comment>
    <expr>"fixups"</expr>,               <comment type="block">/*  5 */</comment>
    <expr>"type_checker"</expr>,         <comment type="block">/*  6 */</comment>
    <expr>"check_access"</expr>,         <comment type="block">/*  7 */</comment>
    <expr>"check_access_ex"</expr>,      <comment type="block">/*  8 */</comment>
    <expr>"check_authn"</expr>,          <comment type="block">/*  9 */</comment>
    <expr>"check_authz"</expr>,          <comment type="block">/* 10 */</comment>
    <expr>"insert_filter"</expr>,        <comment type="block">/* 11 */</comment>
    <expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_debug_log</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hookname</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>log_debug_dirconf</name> *</type><name>dconf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>log_debug_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>dconf</name>-&gt;<name>entries</name></name> == <name>NULL</name></expr>)</condition><then>
        <return>return;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>dconf</name>-&gt;<name>entries</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>msg</name></decl>, *<decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>msg_entry</name> *</type><name>entry</name> <init>= <expr><call><name>APR_ARRAY_IDX</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>msg_entry</name> *</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>hook</name></name> != <name>allhooks</name> &amp;&amp; <name><name>entry</name>-&gt;<name>hook</name></name> != <name>hookname</name></expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>condition</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>ap_expr_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>condition</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>err</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00640</expr></argument>)</argument_list></call>
                              "Can't evaluate condition: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>ret</name></expr>)</condition><then>
                <continue>continue;</continue></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>msg</name> = <call><name>ap_expr_str_exec</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>msg_expr</name></name></expr></argument>, <argument><expr>&amp;<name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>00641</expr></argument>)</argument_list></call>
                          "Can't evaluate message expression: %s"</expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
        <if>if <condition>(<expr><call><name>APLOGrdebug</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <comment type="block">/* Intentional no APLOGNO */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
                           <argument><expr>"%s (%s hook, %s:%d)"</expr></argument>,
                           <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>hookname</name></expr></argument>, <argument><expr><name><name>entry</name>-&gt;<name>msg_expr</name>-&gt;<name>filename</name></name></expr></argument>,
                           <argument><expr><name><name>entry</name>-&gt;<name>msg_expr</name>-&gt;<name>line_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <comment type="block">/* Intentional no APLOGNO */</comment>
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>,
                          <argument><expr>"%s"</expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
    }</block></for>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_log_transaction</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_quick_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>lookup_uri</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_handler</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_translate_name</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_map_to_storage</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_fixups</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>5</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_type_checker</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>6</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_check_access</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>7</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_check_access_ex</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>8</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_check_authn</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>9</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>log_debug_check_authz</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>10</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_debug_insert_filter</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>do_debug_log</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>hooks</name><index>[<expr>11</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>log_debug_create_dconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dirspec</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>log_debug_dirconf</name> *</type><name>dconf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_debug_dirconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>dconf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>log_debug_merge_dconf</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>parent_conf</name></decl></param>, <param><decl><type><name>void</name> *</type><name>new_conf</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>log_debug_dirconf</name> *</type><name>merged</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_debug_dirconf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>log_debug_dirconf</name> *</type><name>parent</name> <init>= <expr><name>parent_conf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>log_debug_dirconf</name> *</type><name>new</name> <init>= <expr><name>new_conf</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>parent</name>-&gt;<name>entries</name></name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>merged</name>-&gt;<name>entries</name></name> = <name><name>new</name>-&gt;<name>entries</name></name></expr>;</expr_stmt></then>
    <else>else <if>if <condition>(<expr><name><name>new</name>-&gt;<name>entries</name></name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>merged</name>-&gt;<name>entries</name></name> = <name><name>parent</name>-&gt;<name>entries</name></name></expr>;</expr_stmt></then>
    <else>else
        <comment type="block">/* apr_array_append actually creates a new array */</comment>
        <expr_stmt><expr><name><name>merged</name>-&gt;<name>entries</name></name> = <call><name>apr_array_append</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>parent</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name><name>new</name>-&gt;<name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>

    <return>return <expr><name>merged</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>cmd_log_message</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>dconf_</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg1</name></decl></param>,
                                   <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg2</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg3</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>msg_entry</name> *</type><name>entry</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>log_debug_dirconf</name> *</type><name>dconf</name> <init>= <expr><name>dconf_</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name><name>args</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>args</name><index>[<expr>0</expr>]</index></name> = <name>arg2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>args</name><index>[<expr>1</expr>]</index></name> = <name>arg3</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>entry</name>-&gt;<name>msg_expr</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>AP_EXPR_FLAG_STRING_RESULT</name>|
                                                   <name>AP_EXPR_FLAG_DONT_VARY</name></expr></argument>,
                                        <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
        <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                            <argument><expr>"Could not parse message expression '%s': %s"</expr></argument>,
                            <argument><expr><name>arg1</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; 2</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> == <name>NULL</name></expr>)</condition><then>
            <break>break;</break></then></if>

        <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"hook="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name> <init>= <expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> + 5</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>j</name> = 0</expr>;</expr_stmt>
            <while>while <condition>(<expr><name><name>hooks</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{
                <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>hooks</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>entry</name>-&gt;<name>hook</name></name> = <name><name>hooks</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
                <expr_stmt><expr><name>j</name>++</expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>hook</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>"*"</expr></argument>)</argument_list></call> == 0 || <call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>allhooks</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then>
                    <expr_stmt><expr><name><name>entry</name>-&gt;<name>hook</name></name> = <name>allhooks</name></expr>;</expr_stmt></then>
                <else>else
                    <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid hook name: %s"</expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></else></if>
            }</block></then></if>
        }</block></then>
        <else>else <if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>"expr="</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>expr</name> <init>= <expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name> + 5</expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>entry</name>-&gt;<name>condition</name></name> = <call><name>ap_expr_parse_cmd</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>expr</name></expr></argument>,
                                                 <argument><expr><name>AP_EXPR_FLAG_DONT_VARY</name></expr></argument>,
                                                 <argument><expr>&amp;<name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>err</name></expr>)</condition><then>
                <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                                    <argument><expr>"Could not parse expression '%s': %s"</expr></argument>,
                                    <argument><expr><name>expr</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</return></then></if>
        }</block></then>
        <else>else <block>{
            <return>return <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>"Invalid argument %s"</expr></argument>, <argument><expr><name><name>args</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if></else></if>
    }</block></for>
    <if>if <condition>(<expr><name><name>entry</name>-&gt;<name>hook</name></name> == <name>NULL</name></expr>)</condition><then>
        <expr_stmt><expr><name><name>entry</name>-&gt;<name>hook</name></name> = <name><name>hooks</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></then></if>

    <if>if <condition>(<expr>!<name><name>dconf</name>-&gt;<name>entries</name></name></expr>)</condition><then>
        <expr_stmt><expr><name><name>dconf</name>-&gt;<name>entries</name></name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>msg_entry</name> *</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

    <expr_stmt><expr><call><name>APR_ARRAY_PUSH</name><argument_list>(<argument><expr><name><name>dconf</name>-&gt;<name>entries</name></name></expr></argument>, <argument><expr><name>msg_entry</name> *</expr></argument>)</argument_list></call> = <name>entry</name></expr>;</expr_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>log_debug_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE123</name><argument_list>(<argument><expr>"LogMessage"</expr></argument>, <argument><expr><name>cmd_log_message</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name>|<name>ACCESS_CONF</name></expr></argument>,
        <argument><expr>"Log a debug message to the error log if this config block is used for "
        " a request"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{<expr><name>NULL</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ap_hook_log_transaction</name><argument_list>(<argument><expr><name>log_debug_log_transaction</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_quick_handler</name><argument_list>(<argument><expr><name>log_debug_quick_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_handler</name><argument_list>(<argument><expr><name>log_debug_handler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_translate_name</name><argument_list>(<argument><expr><name>log_debug_translate_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_map_to_storage</name><argument_list>(<argument><expr><name>log_debug_map_to_storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_fixups</name><argument_list>(<argument><expr><name>log_debug_fixups</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_type_checker</name><argument_list>(<argument><expr><name>log_debug_type_checker</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_access</name><argument_list>(<argument><expr><name>log_debug_check_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_access_ex</name><argument_list>(<argument><expr><name>log_debug_check_access_ex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_authn</name><argument_list>(<argument><expr><name>log_debug_check_authn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_authz</name><argument_list>(<argument><expr><name>log_debug_check_authz</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>, <argument><expr><name>AP_AUTH_INTERNAL_PER_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_insert_filter</name><argument_list>(<argument><expr><name>log_debug_insert_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>log_debug</name></expr></argument>)</argument_list></call> =
<block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>log_debug_create_dconf</name></expr>,     <comment type="block">/* create per-dir config */</comment>
    <expr><name>log_debug_merge_dconf</name></expr>,      <comment type="block">/* merge per-dir config */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* server config */</comment>
    <expr><name>NULL</name></expr>,                       <comment type="block">/* merge server config */</comment>
    <expr><name>log_debug_cmds</name></expr>,             <comment type="block">/* command apr_table_t */</comment>
    <expr><name>register_hooks</name></expr>              <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>

</unit>
