<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/cache/cache_common.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file cache_common.h
 * @brief Common Cache structs
 *
 * @defgroup Cache_cache  Cache Functions
 * @ingroup  MOD_CACHE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CACHE_COMMON_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_COMMON_H</name></cpp:macro></cpp:define>

<comment type="block">/* a cache control header breakdown */</comment>
<typedef>typedef <type><struct>struct <name>cache_control</name> <block>{
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>parsed</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>cache_control</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>pragma</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>no_cache</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>no_cache_header</name>:1</expr>;</expr_stmt> <comment type="block">/* no cache by header match */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>no_store</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>max_age</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>max_stale</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>min_fresh</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>no_transform</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>only_if_cached</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>public</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>private</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>private_header</name>:1</expr>;</expr_stmt> <comment type="block">/* private by header match */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>must_revalidate</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>proxy_revalidate</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>s_maxage</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>invalidated</name>:1</expr>;</expr_stmt> <comment type="block">/* has this entity been invalidated? */</comment>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>max_age_value</name></decl>;</decl_stmt> <comment type="block">/* if positive, then set */</comment>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>max_stale_value</name></decl>;</decl_stmt> <comment type="block">/* if positive, then set */</comment>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>min_fresh_value</name></decl>;</decl_stmt> <comment type="block">/* if positive, then set */</comment>
    <decl_stmt><decl><type><name>apr_int64_t</name></type> <name>s_maxage_value</name></decl>;</decl_stmt> <comment type="block">/* if positive, then set */</comment>
}</block></struct></type> <name>cache_control_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CACHE_COMMON_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
