<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/cache/mod_cache_socache.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_strings.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_buckets.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"httpd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_core.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_socache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_script.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_charset.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_status.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_socache_common.h"</cpp:file></cpp:include>

<comment type="block">/*
 * mod_cache_socache: Shared Object Cache Based HTTP 1.1 Cache.
 *
 * Flow to Find the entry:
 *   Incoming client requests URI /foo/bar/baz
 *   Fetch URI key (may contain Format #1 or Format #2)
 *   If format #1 (Contains a list of Vary Headers):
 *      Use each header name (from .header) with our request values (headers_in) to
 *      regenerate key using HeaderName+HeaderValue+.../foo/bar/baz
 *      re-read in key (must be format #2)
 *
 * Format #1:
 *   apr_uint32_t format;
 *   apr_time_t expire;
 *   apr_array_t vary_headers (delimited by CRLF)
 *
 * Format #2:
 *   cache_socache_info_t (first sizeof(apr_uint32_t) bytes is the format)
 *   entity name (sobj-&gt;name) [length is in cache_socache_info_t-&gt;name_len]
 *   r-&gt;headers_out (delimited by CRLF)
 *   CRLF
 *   r-&gt;headers_in (delimited by CRLF)
 *   CRLF
 */</comment>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>cache_socache_module</name></decl>;</decl_stmt>

<comment type="block">/*
 * cache_socache_object_t
 * Pointed to by cache_object_t::vobj
 */</comment>
<typedef>typedef <type><struct>struct <name>cache_socache_object_t</name>
<block>{
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt> <comment type="block">/* pool */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>buffer</name></decl>;</decl_stmt> <comment type="block">/* the cache buffer */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>buffer_len</name></decl>;</decl_stmt> <comment type="block">/* size of the buffer */</comment>
    <decl_stmt><decl><type><name>apr_bucket_brigade</name> *</type><name>body</name></decl>;</decl_stmt> <comment type="block">/* brigade containing the body, if any */</comment>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers_in</name></decl>;</decl_stmt> <comment type="block">/* Input headers to save */</comment>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers_out</name></decl>;</decl_stmt> <comment type="block">/* Output headers to save */</comment>
    <decl_stmt><decl><type><name>cache_socache_info_t</name></type> <name>socache_info</name></decl>;</decl_stmt> <comment type="block">/* Header information. */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>body_offset</name></decl>;</decl_stmt> <comment type="block">/* offset to the start of the body */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>body_length</name></decl>;</decl_stmt> <comment type="block">/* length of the cached entity body */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>expire</name></decl>;</decl_stmt> <comment type="block">/* when to expire the entry */</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt> <comment type="block">/* Requested URI without vary bits - suitable for mortals. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt> <comment type="block">/* On-disk prefix; URI with Vary bits (if present) */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt> <comment type="block">/* Max size to set aside */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>timeout</name></decl>;</decl_stmt> <comment type="block">/* Max time to set aside */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>newbody</name> :1</expr>;</expr_stmt> <comment type="block">/* whether a new body is present */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>done</name> :1</expr>;</expr_stmt> <comment type="block">/* Is the attempt to cache complete? */</comment>
}</block></struct></type> <name>cache_socache_object_t</name>;</typedef>

<comment type="block">/*
 * mod_cache_socache configuration
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_FILE_SIZE</name></cpp:macro> <cpp:value>100*1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAXTIME</name></cpp:macro> <cpp:value>86400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MINTIME</name></cpp:macro> <cpp:value>600</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_READSIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_READTIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>cache_socache_provider_conf</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>args</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_socache_provider_t</name> *</type><name>socache_provider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ap_socache_instance_t</name> *</type><name>socache_instance</name></decl>;</decl_stmt>
}</block></struct></type> <name>cache_socache_provider_conf</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cache_socache_conf</name>
<block>{
    <decl_stmt><decl><type><name>cache_socache_provider_conf</name> *</type><name>provider</name></decl>;</decl_stmt>
}</block></struct></type> <name>cache_socache_conf</name>;</typedef>

<typedef>typedef <type><struct>struct <name>cache_socache_dir_conf</name>
<block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>max</name></decl>;</decl_stmt> <comment type="block">/* maximum file size for cached files */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>maxtime</name></decl>;</decl_stmt> <comment type="block">/* maximum expiry time */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>mintime</name></decl>;</decl_stmt> <comment type="block">/* minimum expiry time */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>readsize</name></decl>;</decl_stmt> <comment type="block">/* maximum data to attempt to cache in one go */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>readtime</name></decl>;</decl_stmt> <comment type="block">/* maximum time taken to cache in one go */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>max_set</name> :1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>maxtime_set</name> :1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>mintime_set</name> :1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>readsize_set</name> :1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>readtime_set</name> :1</expr>;</expr_stmt>
}</block></struct></type> <name>cache_socache_dir_conf</name>;</typedef>

<comment type="block">/* Shared object cache and mutex */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> * <specifier>const</specifier></type> <name>cache_socache_id</name> <init>= <expr>"cache-socache"</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_global_mutex_t</name> *</type><name>socache_mutex</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Local static functions
 */</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_array</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>,
        <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>buffer_len</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>slider</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>val</name> <init>= <expr>*<name>slider</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr>*<name>slider</name> &lt; <name>buffer_len</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\r'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>val</name> == *<name>slider</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
                <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                    <argument><expr>(const <name>char</name> *) <name>buffer</name> + <name>val</name></expr></argument>, <argument><expr>*<name>slider</name> - <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
                <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>val</name> = *<name>slider</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
            <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
        }</block></else></if></else></if>
    }</block></while>

    <return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_array</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>buffer</name></decl></param>,
        <param><decl><type><name>apr_size_t</name></type> <name>buffer_len</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>slider</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>elts</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>elts</name> = (const <name>char</name> **) <name><name>arr</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>arr</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>e_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>e_len</name> + 3 &gt;= <name>buffer_len</name> - *<name>slider</name></expr>)</condition><then> <block>{
            <return>return <expr><name>APR_EOF</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name> ? (<name>char</name> *) <name>buffer</name> + *<name>slider</name> : <name>NULL</name></expr></argument>,
                <argument><expr><name>buffer</name> ? <name>buffer_len</name> - *<name>slider</name> : 0</expr></argument>, <argument><expr>"%s" <name>CRLF</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>slider</name> += <name>len</name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>buffer</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> + *<name>slider</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>*<name>slider</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>read_table</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>handle</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
        <param><decl><type><name>apr_table_t</name> *</type><name>table</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>buffer</name></decl></param>, <param><decl><type><name>apr_size_t</name></type> <name>buffer_len</name></decl></param>,
        <param><decl><type><name>apr_size_t</name> *</type><name>slider</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>key</name> <init>= <expr>*<name>slider</name></expr></init>, <name>colon</name> <init>= <expr>0</expr></init>, <name>len</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr>*<name>slider</name> &lt; <name>buffer_len</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == ':'</expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>colon</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>colon</name> = *<name>slider</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\r'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>len</name> = <name>colon</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>key</name> == *<name>slider</name></expr>)</condition><then> <block>{
                <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
                    <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
                }</block></then></if>
                <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr>!<name>colon</name> || <name><name>buffer</name><index>[<expr><name>colon</name>++</expr>]</index></name> != ':'</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02344</expr></argument>)</argument_list></call>
                        "Premature end of cache headers."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
            }</block></then></if>
            <while>while <condition>(<expr><call><name>apr_isspace</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>colon</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><name>colon</name>++</expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name>apr_table_addn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(const <name>char</name> *) <name>buffer</name>
                    + <name>key</name></expr></argument>, <argument><expr><name>len</name> - <name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>,
                    <argument><expr>(const <name>char</name> *) <name>buffer</name> + <name>colon</name></expr></argument>, <argument><expr>*<name>slider</name> - <name>colon</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\n'</expr>)</condition><then> <block>{
                <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>key</name> = *<name>slider</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>colon</name> = 0</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if <condition>(<expr><name><name>buffer</name><index>[<expr>*<name>slider</name></expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
            <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr>(*<name>slider</name>)++</expr>;</expr_stmt>
        }</block></else></if></else></if></else></if>
    }</block></while>

    <return>return <expr><name>APR_EOF</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_table</name><parameter_list>(<param><decl><type><name>apr_table_t</name> *</type><name>table</name></decl></param>, <param><decl><type><name>unsigned</name> <name>char</name> *</type><name>buffer</name></decl></param>,
        <param><decl><type><name>apr_size_t</name></type> <name>buffer_len</name></decl></param>, <param><decl><type><name>apr_size_t</name> *</type><name>slider</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_table_entry_t</name> *</type><name>elts</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>elts</name> = (<name>apr_table_entry_t</name> *) <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>-&gt;<name>elts</name></expr>;</expr_stmt>
    <for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <call><name>apr_table_elts</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>-&gt;<name>nelts</name></expr>;</condition> <incr><expr>++<name>i</name></expr></incr>) <block>{
        <if>if <condition>(<expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name> != <name>NULL</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>key_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_size_t</name></type> <name>val_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>key_len</name> + <name>val_len</name> + 5 &gt;= <name>buffer_len</name> - *<name>slider</name></expr>)</condition><then> <block>{
                <return>return <expr><name>APR_EOF</name></expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>len</name> = <call><name>apr_snprintf</name><argument_list>(<argument><expr><name>buffer</name> ? (<name>char</name> *) <name>buffer</name> + *<name>slider</name> : <name>NULL</name></expr></argument>,
                    <argument><expr><name>buffer</name> ? <name>buffer_len</name> - *<name>slider</name> : 0</expr></argument>, <argument><expr>"%s: %s" <name>CRLF</name></expr></argument>,
                    <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>key</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name>.<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr>*<name>slider</name> += <name>len</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr>3 &gt;= <name>buffer_len</name> - *<name>slider</name></expr>)</condition><then> <block>{
        <return>return <expr><name>APR_EOF</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>buffer</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> + *<name>slider</name></expr></argument>, <argument><expr><name>CRLF</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>*<name>slider</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>CRLF</name></expr></argument>)</argument_list></sizeof> - 1</expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name>*</type> <name>regen_key</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>apr_table_t</name> *</type><name>headers</name></decl></param>,
                             <param><decl><type><name>apr_array_header_t</name> *</type><name>varray</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>oldkey</name></decl></param>,
                             <param><decl><type><name>apr_size_t</name> *</type><name>newkeylen</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type>struct <name>iovec</name> *</type><name>iov</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nvec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>elts</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nvec</name> = (<name><name>varray</name>-&gt;<name>nelts</name></name> * 2) + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>iov</name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument>struct <expr><name>iovec</name></expr></argument>)</argument_list></sizeof> * <name>nvec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elts</name> = (const <name>char</name> **) <name><name>varray</name>-&gt;<name>elts</name></name></expr>;</expr_stmt>

    <comment type="block">/* TODO:
     *    - Handle multiple-value headers better. (sort them?)
     *    - Handle Case in-sensitive Values better.
     *        This isn't the end of the world, since it just lowers the cache
     *        hit rate, but it would be nice to fix.
     *
     * The majority are case insenstive if they are values (encoding etc).
     * Most of rfc2616 is case insensitive on header contents.
     *
     * So the better solution may be to identify headers which should be
     * treated case-sensitive?
     *  HTTP URI's (3.2.3) [host and scheme are insensitive]
     *  HTTP method (5.1.1)
     *  HTTP-date values (3.3.1)
     *  3.7 Media Types [exerpt]
     *     The type, subtype, and parameter attribute names are case-
     *     insensitive. Parameter values might or might not be case-sensitive,
     *     depending on the semantics of the parameter name.
     *  4.20 Except [exerpt]
     *     Comparison of expectation values is case-insensitive for unquoted
     *     tokens (including the 100-continue token), and is case-sensitive for
     *     quoted-string expectation-extensions.
     */</comment>

    <for>for (<init><expr><name>i</name> = 0</expr>, <expr><name>k</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name><name>varray</name>-&gt;<name>nelts</name></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><name>header</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name>headers</name></expr></argument>, <argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>header</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>header</name> = ""</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>elts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_base</name> = (<name>char</name>*) <name>oldkey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>iov</name><index>[<expr><name>k</name></expr>]</index></name>.<name>iov_len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>oldkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name>++</expr>;</expr_stmt>

    <return>return <expr><call><name>apr_pstrcatv</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>newkeylen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>array_alphasort</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fn1</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>void</name> *</type><name>fn2</name></decl></param>)</parameter_list>
<block>{
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr>*(<name>char</name>**) <name>fn1</name></expr></argument>, <argument><expr>*(<name>char</name>**) <name>fn2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tokens_to_array</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>data</name></decl></param>,
        <param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>token</name></decl>;</decl_stmt>

    <while>while <condition>(<expr>(<name>token</name> = <call><name>ap_get_list_item</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>data</name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition> <block>{
        <expr_stmt><expr>*((const <name>char</name> **) <call><name>apr_array_push</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call>) = <name>token</name></expr>;</expr_stmt>
    }</block></while>

    <comment type="block">/* Sort it so that "Vary: A, B" and "Vary: B, A" are stored the same. */</comment>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr>(<name>void</name> *) <name><name>arr</name>-&gt;<name>elts</name></name></expr></argument>, <argument><expr><name><name>arr</name>-&gt;<name>nelts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>array_alphasort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Hook and mod_cache callback functions
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>create_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>,
        <param><decl><type><name>apr_off_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>=
            <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
            <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_object_t</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>total</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* we don't support caching of range requests (yet) */</comment>
    <comment type="block">/* TODO: but we could */</comment>
    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>status</name></name> == <name>HTTP_PARTIAL_CONTENT</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02345</expr></argument>)</argument_list></call>
                "URL %s partial content response not cached"</expr></argument>,
                <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * We have a chicken and egg problem. We don't know until we
     * attempt to store_headers just how big the response will be
     * and whether it will fit in the cache limits set. But we
     * need to make a decision now as to whether we plan to try.
     * If we make the wrong decision, we could prevent another
     * cache implementation, such as cache_disk, from getting the
     * opportunity to cache, and that would be unfortunate.
     *
     * In a series of tests, from cheapest to most expensive,
     * decide whether or not to ignore this attempt to cache,
     * with a small margin just to be sure.
     */</comment>
    <if>if <condition>(<expr><name>len</name> &lt; 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02346</expr></argument>)</argument_list></call>
                "URL '%s' had no explicit size, ignoring"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>len</name> &gt; <name><name>dconf</name>-&gt;<name>max</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02347</expr></argument>)</argument_list></call>
                "URL '%s' body larger than limit, ignoring "
                "(%" <name>APR_OFF_T_FMT</name> " &gt; %" <name>APR_OFF_T_FMT</name> ")"</expr></argument>,
                <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* estimate the total cached size, given current headers */</comment>
    <expr_stmt><expr><name>total</name> = <name>len</name> + <sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_info_t</name></expr></argument>)</argument_list></sizeof> + <call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>store_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>, <argument><expr>&amp;<name>total</name></expr></argument>)</argument_list></call>
            || <name>APR_SUCCESS</name> != <call><name>store_table</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>,
                    <argument><expr>&amp;<name>total</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02348</expr></argument>)</argument_list></call>
                "URL '%s' estimated headers size larger than limit, ignoring "
                "(%" <name>APR_SIZE_T_FMT</name> " &gt; %" <name>APR_OFF_T_FMT</name> ")"</expr></argument>,
                <argument><expr><name>key</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>total</name> &gt;= <name><name>dconf</name>-&gt;<name>max</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02349</expr></argument>)</argument_list></call>
                "URL '%s' body and headers larger than limit, ignoring "
                "(%" <name>APR_OFF_T_FMT</name> " &gt; %" <name>APR_OFF_T_FMT</name> ")"</expr></argument>,
                <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Allocate and initialize cache_object_t and cache_socache_object_t */</comment>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>obj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>obj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obj</name>-&gt;<name>vobj</name></name> = <name>sobj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sobj</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>obj</name>-&gt;<name>key</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>key</name></name> = <name><name>obj</name>-&gt;<name>key</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>name</name></name> = <name><name>obj</name>-&gt;<name>key</name></name></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>=
            <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
            <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>format</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>slider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>nkey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_object_t</name> *</type><name>obj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_info</name> *</type><name>info</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>len</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nkey</name> = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>provider</name></name> || !<name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Create and init the cache object */</comment>
    <expr_stmt><expr><name>obj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sobj</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_object_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>info</name> = &amp;(<name><name>obj</name>-&gt;<name>info</name></name>)</expr>;</expr_stmt>

    <comment type="block">/* Create a temporary pool for the buffer, and destroy it if something
     * goes wrong so we don't have large buffers of unused memory hanging
     * about for the lifetime of the response.
     */</comment>
    <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>buffer</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>buffer_len</name></name> = <name><name>dconf</name>-&gt;<name>max</name></name></expr>;</expr_stmt>

    <comment type="block">/* attempt to retrieve the cached entry */</comment>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02350</expr></argument>)</argument_list></call>
                    "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>buffer_len</name> = <name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>retrieve</name></name><argument_list>(
            <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *) <name>key</name></expr></argument>,
            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>&amp;<name>buffer_len</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02351</expr></argument>)</argument_list></call>
                    "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02352</expr></argument>)</argument_list></call>
                "Key not found in cache: %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>buffer_len</name> &gt;= <name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02353</expr></argument>)</argument_list></call>
                "Key found in cache but too big, ignoring: %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* read the format from the cache file */</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slider</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>format</name> == <name>CACHE_SOCACHE_VARY_FORMAT_VERSION</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>varray</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_time_t</name></type> <name>expire</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>expire</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name> + <name>slider</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expire</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>slider</name> += <sizeof>sizeof<argument_list>(<argument><expr><name>expire</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt><expr><name>varray</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> = <call><name>read_array</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>varray</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>, <argument><expr>&amp;<name>slider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02354</expr></argument>)</argument_list></call>
                    "Cannot parse vary entry for key: %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>

        <expr_stmt><expr><name>nkey</name> = <call><name>regen_key</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>varray</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* attempt to retrieve the cached entry */</comment>
        <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02355</expr></argument>)</argument_list></call>
                        "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr><name>DECLINED</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>buffer_len</name> = <name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> = <call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>retrieve</name></name><argument_list>(
                <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
                <argument><expr>(<name>unsigned</name> <name>char</name> *) <name>nkey</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>,
                <argument><expr>&amp;<name>buffer_len</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02356</expr></argument>)</argument_list></call>
                        "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr><name>DECLINED</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02357</expr></argument>)</argument_list></call>
                    "Key not found in cache: %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>buffer_len</name> &gt;= <name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02358</expr></argument>)</argument_list></call>
                    "Key found in cache but too big, ignoring: %s"</expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>fail</name>;</goto>
        }</block></then></if>

    }</block></then>
    <else>else <if>if <condition>(<expr><name>format</name> != <name>CACHE_SOCACHE_DISK_FORMAT_VERSION</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02359</expr></argument>)</argument_list></call>
                "Key '%s' found in cache has version %d, expected %d, ignoring"</expr></argument>,
                <argument><expr><name>key</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>CACHE_SOCACHE_DISK_FORMAT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>nkey</name> = <name>key</name></expr>;</expr_stmt>
    }</block></else></if></else></if>

    <expr_stmt><expr><name><name>obj</name>-&gt;<name>key</name></name> = <name>nkey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>key</name></name> = <name>nkey</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>name</name></name> = <name>key</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>buffer_len</name> &gt;= <sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_info_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>sobj</name>-&gt;<name>socache_info</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02360</expr></argument>)</argument_list></call>
                "Cache entry for key '%s' too short, removing"</expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></else></if>
    <expr_stmt><expr><name>slider</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_info_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="block">/* Store it away so we can get it later. */</comment>
    <expr_stmt><expr><name><name>info</name>-&gt;<name>status</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>status</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name>-&gt;<name>date</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>date</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name>-&gt;<name>expire</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>expire</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name>-&gt;<name>request_time</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>request_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name>-&gt;<name>response_time</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>response_time</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>info</name>-&gt;<name>control</name></name></expr></argument>, <argument><expr>&amp;<name><name>sobj</name>-&gt;<name>socache_info</name>.<name>control</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>socache_info</name>.<name>name_len</name></name> &lt;= <name>buffer_len</name> - <name>slider</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(const <name>char</name> *) <name><name>sobj</name>-&gt;<name>buffer</name></name> + <name>slider</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>,
                <argument><expr><name><name>sobj</name>-&gt;<name>socache_info</name>.<name>name_len</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02361</expr></argument>)</argument_list></call>
                    "Cache entry for key '%s' URL mismatch, ignoring"</expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>slider</name> += <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>name_len</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02362</expr></argument>)</argument_list></call>
                "Cache entry for key '%s' too short, removing"</expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></else></if>

    <comment type="block">/* Is this a cached HEAD request? */</comment>
    <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>socache_info</name>.<name>header_only</name></name> &amp;&amp; !<name><name>r</name>-&gt;<name>header_only</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>APR_SUCCESS</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02363</expr></argument>)</argument_list></call>
                "HEAD request cached, non-HEAD requested, ignoring: %s"</expr></argument>,
                <argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>h</name>-&gt;<name>req_hdrs</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name> = <call><name>apr_table_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call routine to read the header lines/status line */</comment>
    <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>read_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>resp_hdrs</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>,
            <argument><expr>&amp;<name>slider</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02364</expr></argument>)</argument_list></call>
                "Cache entry for key '%s' response headers unreadable, removing"</expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></then></if>
    <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>read_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name><name>h</name>-&gt;<name>req_hdrs</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name>buffer_len</name></expr></argument>,
            <argument><expr>&amp;<name>slider</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02365</expr></argument>)</argument_list></call>
                "Cache entry for key '%s' request headers unreadable, removing"</expr></argument>, <argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></then></if>

    <comment type="block">/* Retrieve the body if we have one */</comment>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>body</name></name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> = <name>buffer_len</name> - <name>slider</name></expr>;</expr_stmt>

    <comment type="block">/*
     *  Optimisation: if the body is small, we want to make a
     *  copy of the body and free the temporary pool, as we
     *  don't want large blocks of unused memory hanging around
     *  to the end of the response. In contrast, if the body is
     *  large, we would rather leave the body where it is in the
     *  temporary pool, and save ourselves the copy.
     */</comment>
    <if>if <condition>(<expr><name>len</name> * 2 &gt; <name><name>dconf</name>-&gt;<name>max</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>

        <comment type="block">/* large - use the brigade as is, we're done */</comment>
        <expr_stmt><expr><name>e</name> = <call><name>apr_bucket_immortal_create</name><argument_list>(<argument><expr>(const <name>char</name> *) <name><name>sobj</name>-&gt;<name>buffer</name></name> + <name>slider</name></expr></argument>,
                <argument><expr><name>len</name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>body</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{

        <comment type="block">/* small - make a copy of the data... */</comment>
        <expr_stmt><expr><call><name>apr_brigade_write</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>body</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>(const <name>char</name> *) <name><name>sobj</name>-&gt;<name>buffer</name></name>
                + <name>slider</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* ...and get rid of the large memory buffer */</comment>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></else></if>

    <comment type="block">/* make the configuration stick */</comment>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>obj</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>obj</name>-&gt;<name>vobj</name></name> = <name>sobj</name></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>

<label><name>fail</name>:</label>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02366</expr></argument>)</argument_list></call>
                    "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>remove</name></name><argument_list>(
            <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
            <argument><expr>(<name>unsigned</name> <name>char</name> *) <name>nkey</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>nkey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02367</expr></argument>)</argument_list></call>
                    "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Null out the cache object pointer so next time we start from scratch  */</comment>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>remove_url</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
            <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>sobj</name> = (<name>cache_socache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>sobj</name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/* Remove the key from the cache */</comment>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02368</expr></argument>)</argument_list></call>
                    "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *) <name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02369</expr></argument>)</argument_list></call>
                    "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>DECLINED</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recall_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* we recalled the headers during open_entity, so do nothing */</comment>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>recall_body</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
        <param><decl><type><name>apr_bucket_brigade</name> *</type><name>bb</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name> <init>= <expr>(<name>cache_socache_object_t</name>*) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>e</name> != <call><name>APR_BRIGADE_SENTINEL</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>body</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>bb</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_headers</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
        <param><decl><type><name>cache_info</name> *</type><name>info</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>=
            <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
            <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>slider</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_object_t</name> *</type><name>obj</name> <init>= <expr><name><name>h</name>-&gt;<name>cache_obj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name> <init>= <expr>(<name>cache_socache_object_t</name>*) <name><name>obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_info_t</name> *</type><name>socache_info</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name></name></expr></argument>, <argument><expr><name>info</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>headers_out</name></name> = <call><name>ap_cache_cacheable_headers_out</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>headers_in</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>headers_in</name></name> = <call><name>ap_cache_cacheable_headers_in</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>expire</name></name>
            = <name><name>obj</name>-&gt;<name>info</name>.<name>expire</name></name> &gt; <name><name>r</name>-&gt;<name>request_time</name></name> + <name><name>dconf</name>-&gt;<name>maxtime</name></name> ? <name><name>r</name>-&gt;<name>request_time</name></name>
                    + <name><name>dconf</name>-&gt;<name>maxtime</name></name>
                    : <name><name>obj</name>-&gt;<name>info</name>.<name>expire</name></name> + <name><name>dconf</name>-&gt;<name>mintime</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>buffer</name></name> = <call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>buffer_len</name></name> = <name><name>dconf</name>-&gt;<name>max</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>socache_info</name> = (<name>cache_socache_info_t</name> *) <name><name>sobj</name>-&gt;<name>buffer</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>headers_out</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>vary</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>vary</name> = <call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Vary"</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>vary</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_array_header_t</name>*</type> <name>varray</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>format</name> <init>= <expr><name>CACHE_SOCACHE_VARY_FORMAT_VERSION</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>&amp;<name>format</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>slider</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name> + <name>slider</name></expr></argument>, <argument><expr>&amp;<name><name>obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr></argument>,
                    <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>slider</name> += <sizeof>sizeof<argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt><expr><name>varray</name> = <call><name>apr_array_make</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>tokens_to_array</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>vary</name></expr></argument>, <argument><expr><name>varray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>APR_SUCCESS</name> != (<name>rv</name> = <call><name>store_array</name><argument_list>(<argument><expr><name>varray</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>,
                    <argument><expr><name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr></argument>, <argument><expr>&amp;<name>slider</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02370</expr></argument>)</argument_list></call>
                        "buffer too small for Vary array, caching aborted: %s"</expr></argument>,
                        <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr><name>rv</name></expr>;</return>
            }</block></then></if>
            <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02371</expr></argument>)</argument_list></call>
                            "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
                    <return>return <expr><name>status</name></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>rv</name> = <call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>store</name></name><argument_list>(
                    <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
                    <argument><expr>(<name>unsigned</name> <name>char</name> *) <name><name>obj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>expire</name></name></expr></argument>,
                    <argument><expr>(<name>unsigned</name> <name>char</name> *) <name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>) <name>slider</name></expr></argument>,
                    <argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02372</expr></argument>)</argument_list></call>
                            "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02373</expr></argument>)</argument_list></call>
                        "Vary not written to cache, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr><name>rv</name></expr>;</return>
            }</block></then></if>

            <expr_stmt><expr><name><name>obj</name>-&gt;<name>key</name></name> = <name><name>sobj</name>-&gt;<name>key</name></name> = <call><name>regen_key</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name>varray</name></expr></argument>,
                                             <argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>format</name></name> = <name>CACHE_SOCACHE_DISK_FORMAT_VERSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>date</name></name> = <name><name>obj</name>-&gt;<name>info</name>.<name>date</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>expire</name></name> = <name><name>obj</name>-&gt;<name>info</name>.<name>expire</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>entity_version</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>entity_version</name></name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>request_time</name></name> = <name><name>obj</name>-&gt;<name>info</name>.<name>request_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>response_time</name></name> = <name><name>obj</name>-&gt;<name>info</name>.<name>response_time</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>status</name></name> = <name><name>obj</name>-&gt;<name>info</name>.<name>status</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>r</name>-&gt;<name>header_only</name></name> &amp;&amp; <name><name>r</name>-&gt;<name>status</name></name> != <name>HTTP_NOT_MODIFIED</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>header_only</name></name> = 1</expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>header_only</name></name> = <name><name>sobj</name>-&gt;<name>socache_info</name>.<name>header_only</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>socache_info</name>-&gt;<name>name_len</name></name> = <call><name>strlen</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>socache_info</name>-&gt;<name>control</name></name></expr></argument>, <argument><expr>&amp;<name><name>obj</name>-&gt;<name>info</name>.<name>control</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_control_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slider</name> = <sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_info_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>slider</name> + <name><name>socache_info</name>-&gt;<name>name_len</name></name> &gt;= <name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02374</expr></argument>)</argument_list></call>
                "cache buffer too small for name: %s"</expr></argument>,
                <argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name> + <name>slider</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr><name><name>socache_info</name>-&gt;<name>name_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>slider</name> += <name><name>socache_info</name>-&gt;<name>name_len</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>headers_out</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>store_table</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>,
                <argument><expr><name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr></argument>, <argument><expr>&amp;<name>slider</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02375</expr></argument>)</argument_list></call>
                    "out-headers didn't fit in buffer: %s"</expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Parse the vary header and dump those fields from the headers_in. */</comment>
    <comment type="block">/* TODO: Make call to the same thing cache_select calls to crack Vary. */</comment>
    <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>headers_in</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>APR_SUCCESS</name> != <call><name>store_table</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>headers_in</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>,
                <argument><expr><name><name>sobj</name>-&gt;<name>buffer_len</name></name></expr></argument>, <argument><expr>&amp;<name>slider</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02376</expr></argument>)</argument_list></call>
                    "in-headers didn't fit in buffer %s"</expr></argument>,
                    <argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>body_offset</name></name> = <name>slider</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>store_body</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>,
        <param><decl><type><name>apr_bucket_brigade</name> *</type><name>in</name></decl></param>, <param><decl><type><name>apr_bucket_brigade</name> *</type><name>out</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_bucket</name> *</type><name>e</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name> <init>=
            <expr>(<name>cache_socache_object_t</name> *) <name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>=
            <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>per_dir_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>seen_eos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name><name>sobj</name>-&gt;<name>offset</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>offset</name></name> = <name><name>dconf</name>-&gt;<name>readsize</name></name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr>!<name><name>sobj</name>-&gt;<name>timeout</name></name> &amp;&amp; <name><name>dconf</name>-&gt;<name>readtime</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>timeout</name></name> = <call><name>apr_time_now</name><argument_list>()</argument_list></call> + <name><name>dconf</name>-&gt;<name>readtime</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>sobj</name>-&gt;<name>newbody</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>body_length</name></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>newbody</name></name> = 1</expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>offset</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_brigade_partition</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>offset</name></name></expr></argument>, <argument><expr>&amp;<name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <while>while <condition>(<expr><name>APR_SUCCESS</name> == <name>rv</name> &amp;&amp; !<call><name>APR_BRIGADE_EMPTY</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>str</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>apr_size_t</name></type> <name>length</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>e</name> = <call><name>APR_BRIGADE_FIRST</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* are we done completely? if so, pass any trailing buckets right through */</comment>
        <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>done</name></name> || !<name><name>sobj</name>-&gt;<name>pool</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <comment type="block">/* have we seen eos yet? */</comment>
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_EOS</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>seen_eos</name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>done</name></name> = 1</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <comment type="block">/* honour flush buckets, we'll get called again */</comment>
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_FLUSH</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

        <comment type="block">/* metadata buckets are preserved as is */</comment>
        <if>if <condition>(<expr><call><name>APR_BUCKET_IS_METADATA</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <comment type="block">/* read the bucket, write to the cache */</comment>
        <expr_stmt><expr><name>rv</name> = <call><name>apr_bucket_read</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>length</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BUCKET_REMOVE</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>APR_BRIGADE_INSERT_TAIL</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02377</expr></argument>)</argument_list></call>
                    "Error when reading bucket for URL %s"</expr></argument>,
                    <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* Remove the intermediate cache file and return non-APR_SUCCESS */</comment>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>

        <comment type="block">/* don't write empty buckets to the cache */</comment>
        <if>if <condition>(<expr>!<name>length</name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>body_length</name></name> += <name>length</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>body_length</name></name> &gt;= <name><name>sobj</name>-&gt;<name>buffer_len</name></name> - <name><name>sobj</name>-&gt;<name>body_offset</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02378</expr></argument>)</argument_list></call>
                    "URL %s failed the buffer size check "
                    "(%" <name>APR_OFF_T_FMT</name> "&gt;=%" <name>APR_SIZE_T_FMT</name> ")"</expr></argument>,
                    <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>body_length</name></name></expr></argument>,
                    <argument><expr><name><name>sobj</name>-&gt;<name>buffer_len</name></name> - <name><name>sobj</name>-&gt;<name>body_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name> + <name><name>sobj</name>-&gt;<name>body_offset</name></name> + <name><name>sobj</name>-&gt;<name>body_length</name></name> - <name>length</name></expr></argument>,
               <argument><expr><name>str</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* have we reached the limit of how much we're prepared to write in one
         * go? If so, leave, we'll get called again. This prevents us from trying
         * to swallow too much data at once, or taking so long to write the data
         * the client times out.
         */</comment>
        <expr_stmt><expr><name><name>sobj</name>-&gt;<name>offset</name></name> -= <name>length</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>sobj</name>-&gt;<name>offset</name></name> &lt;= 0</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>offset</name></name> = 0</expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <if>if <condition>(<expr>(<name><name>dconf</name>-&gt;<name>readtime</name></name> &amp;&amp; <call><name>apr_time_now</name><argument_list>()</argument_list></call> &gt; <name><name>sobj</name>-&gt;<name>timeout</name></name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>timeout</name></name> = 0</expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>

    }</block></while>

    <comment type="block">/* Was this the final bucket? If yes, perform sanity checks.
     */</comment>
    <if>if <condition>(<expr><name>seen_eos</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cl_header</name> <init>= <expr><call><name>apr_table_get</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>headers_out</name></name></expr></argument>, <argument><expr>"Content-Length"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>r</name>-&gt;<name>connection</name>-&gt;<name>aborted</name></name> || <name><name>r</name>-&gt;<name>no_cache</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02380</expr></argument>)</argument_list></call>
                    "Discarding body for URL %s "
                    "because connection has been aborted."</expr></argument>,
                    <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>cl_header</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>apr_off_t</name></type> <name>cl</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> *</type><name>cl_endp</name></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>cl</name></expr></argument>, <argument><expr><name>cl_header</name></expr></argument>, <argument><expr>&amp;<name>cl_endp</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
                    || *<name>cl_endp</name> != '\0' || <name>cl</name> != <name><name>sobj</name>-&gt;<name>body_length</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02381</expr></argument>)</argument_list></call>
                        "URL %s didn't receive complete response, not caching"</expr></argument>,
                        <argument><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
                <return>return <expr><name>APR_EGENERAL</name></expr>;</return>
            }</block></then></if>
        }</block></then></if>

        <comment type="block">/* All checks were fine, we're good to go when the commit comes */</comment>

    }</block></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>commit_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
            <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_object_t</name> *</type><name>obj</name> <init>= <expr><name><name>h</name>-&gt;<name>cache_obj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_object_t</name> *</type><name>sobj</name> <init>= <expr>(<name>cache_socache_object_t</name> *) <name><name>obj</name>-&gt;<name>vobj</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02384</expr></argument>)</argument_list></call>
                    "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><name>rv</name> = <call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>store</name></name><argument_list>(
            <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>,
            <argument><expr>(<name>unsigned</name> <name>char</name> *) <name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>expire</name></name></expr></argument>,
            <argument><expr><name><name>sobj</name>-&gt;<name>buffer</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>body_offset</name></name> + <name><name>sobj</name>-&gt;<name>body_length</name></name></expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02385</expr></argument>)</argument_list></call>
                    "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>status</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_WARNING</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02386</expr></argument>)</argument_list></call>
                "could not write to cache, ignoring: %s"</expr></argument>, <argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>fail</name>;</goto>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02387</expr></argument>)</argument_list></call>
            "commit_entity: Headers and body for URL %s cached for maximum of %d seconds."</expr></argument>,
            <argument><expr><name><name>sobj</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>(<name>apr_uint32_t</name>)<call><name>apr_time_sec</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>expire</name></name> - <name><name>r</name>-&gt;<name>request_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>

<label><name>fail</name>:</label>
    <comment type="block">/* For safety, remove any existing entry on failure, just in case it could not
     * be revalidated successfully.
     */</comment>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02388</expr></argument>)</argument_list></call>
                    "could not acquire lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
            <return>return <expr><name>rv</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>remove</name></name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>,
            <argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *) <name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>r</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02389</expr></argument>)</argument_list></call>
                    "could not release lock, ignoring: %s"</expr></argument>, <argument><expr><name><name>obj</name>-&gt;<name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name><name>sobj</name>-&gt;<name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sobj</name>-&gt;<name>pool</name></name> = <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>rv</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>invalidate_entity</name><parameter_list>(<param><decl><type><name>cache_handle_t</name> *</type><name>h</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* mark the entity as invalidated */</comment>
    <expr_stmt><expr><name><name>h</name>-&gt;<name>cache_obj</name>-&gt;<name>info</name>.<name>control</name>.<name>invalidated</name></name> = 1</expr>;</expr_stmt>

    <return>return <expr><call><name>commit_entity</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>char</name> *</type><name>dummy</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>=
            <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>max</name></name> = <name>DEFAULT_MAX_FILE_SIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxtime</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>DEFAULT_MAXTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>mintime</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>DEFAULT_MINTIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>readsize</name></name> = <name>DEFAULT_READSIZE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>readtime</name></name> = <name>DEFAULT_READTIME</name></expr>;</expr_stmt>

    <return>return <expr><name>dconf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_dir_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name>
            *</type><name>new</name> <init>=
                    <expr>(<name>cache_socache_dir_conf</name> *) <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_dir_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>add</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>addv</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>base</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>new</name>-&gt;<name>max</name></name> = (<name><name>add</name>-&gt;<name>max_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>max</name></name> : <name><name>add</name>-&gt;<name>max</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>max_set</name></name> = <name><name>add</name>-&gt;<name>max_set</name></name> || <name><name>base</name>-&gt;<name>max_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>maxtime</name></name> = (<name><name>add</name>-&gt;<name>maxtime_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>maxtime</name></name> : <name><name>add</name>-&gt;<name>maxtime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>maxtime_set</name></name> = <name><name>add</name>-&gt;<name>maxtime_set</name></name> || <name><name>base</name>-&gt;<name>maxtime_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>mintime</name></name> = (<name><name>add</name>-&gt;<name>mintime_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>mintime</name></name> : <name><name>add</name>-&gt;<name>mintime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>mintime_set</name></name> = <name><name>add</name>-&gt;<name>mintime_set</name></name> || <name><name>base</name>-&gt;<name>mintime_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>readsize</name></name> = (<name><name>add</name>-&gt;<name>readsize_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>readsize</name></name> : <name><name>add</name>-&gt;<name>readsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>readsize_set</name></name> = <name><name>add</name>-&gt;<name>readsize_set</name></name> || <name><name>base</name>-&gt;<name>readsize_set</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>readtime</name></name> = (<name><name>add</name>-&gt;<name>readtime_set</name></name> == 0) ? <name><name>base</name>-&gt;<name>readtime</name></name> : <name><name>add</name>-&gt;<name>readtime</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new</name>-&gt;<name>readtime_set</name></name> = <name><name>add</name>-&gt;<name>readtime_set</name></name> || <name><name>base</name>-&gt;<name>readtime_set</name></name></expr>;</expr_stmt>

    <return>return <expr><name>new</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>create_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>conf</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name> *</type><name>merge_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>void</name> *</type><name>basev</name></decl></param>, <param><decl><type><name>void</name> *</type><name>overridesv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>ps</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>base</name> <init>= <expr>(<name>cache_socache_conf</name> *) <name>basev</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>overrides</name> <init>= <expr>(<name>cache_socache_conf</name> *) <name>overridesv</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* socache server config only has one field */</comment>
    <expr_stmt><expr><name>ps</name> = <name>overrides</name> ? <name>overrides</name> : <name>base</name></expr>;</expr_stmt>

    <return>return <expr><name>ps</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * mod_cache_socache configuration directives handlers.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_socache</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>cmd</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
            <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_provider_conf</name> *</type><name>provider</name> <init>= <expr><name><name>conf</name>-&gt;<name>provider</name></name>
            = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache_socache_provider_conf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>err</name> <init>= <expr><name>NULL</name></expr></init>, *<name>sep</name></decl>, *<decl><type ref="prev"/><name>name</name></decl>;</decl_stmt>

    <comment type="block">/* Argument is of form 'name:args' or just 'name'. */</comment>
    <expr_stmt><expr><name>sep</name> = <call><name>ap_strchr_c</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>sep</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>name</name> = <call><name>apr_pstrmemdup</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>sep</name> - <name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sep</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>provider</name>-&gt;<name>args</name></name> = <name>sep</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>name</name> = <name>arg</name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>provider</name>-&gt;<name>socache_provider</name></name> = <call><name>ap_lookup_provider</name><argument_list>(<argument><expr><name>AP_SOCACHE_PROVIDER_GROUP</name></expr></argument>,
            <argument><expr><name>name</name></expr></argument>, <argument><expr><name>AP_SOCACHE_PROVIDER_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>provider</name>-&gt;<name>socache_provider</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>err</name> = <call><name>apr_psprintf</name><argument_list>(<argument><expr><name><name>cmd</name>-&gt;<name>pool</name></name></expr></argument>,
                    <argument><expr>"Unknown socache provider '%s'. Maybe you need "
                    "to load the appropriate socache module "
                    "(mod_socache_%s?)"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>err</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_max</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>dconf</name>-&gt;<name>max</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
            || <name><name>dconf</name>-&gt;<name>max</name></name> &lt; 1024 || <name><name>dconf</name>-&gt;<name>max</name></name> &gt; <name>APR_UINT32_MAX</name></expr>)</condition><then> <block>{
        <return>return <expr>"CacheSocacheMaxSize argument must be a integer representing "
               "the max size of a cached entry (headers and body), at least 1024 "
               "and at most " <call><name>APR_STRINGIFY</name><argument_list>(<argument><expr><name>APR_UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>max_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_maxtime</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>seconds</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>seconds</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> || <name>seconds</name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr>"CacheSocacheMaxTime argument must be the maximum amount of time in seconds to cache an entry."</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxtime</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>maxtime_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_mintime</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>seconds</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>seconds</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name> || <name>seconds</name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr>"CacheSocacheMinTime argument must be the minimum amount of time in seconds to cache an entry."</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>mintime</name></name> = <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>mintime_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_readsize</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name><name>dconf</name>-&gt;<name>readsize</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
            || <name><name>dconf</name>-&gt;<name>readsize</name></name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr>"CacheSocacheReadSize argument must be a non-negative integer representing the max amount of data to cache in go."</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>readsize_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>set_cache_readtime</name><parameter_list>(<param><decl><type><name>cmd_parms</name> *</type><name>parms</name></decl></param>, <param><decl><type><name>void</name> *</type><name>in_struct_ptr</name></decl></param>,
        <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>arg</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>cache_socache_dir_conf</name> *</type><name>dconf</name> <init>= <expr>(<name>cache_socache_dir_conf</name> *) <name>in_struct_ptr</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>milliseconds</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>apr_strtoff</name><argument_list>(<argument><expr>&amp;<name>milliseconds</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call> != <name>APR_SUCCESS</name>
            || <name>milliseconds</name> &lt; 0</expr>)</condition><then> <block>{
        <return>return <expr>"CacheSocacheReadTime argument must be a non-negative integer representing the max amount of time taken to cache in go."</expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>readtime</name></name> = <call><name>apr_time_from_msec</name><argument_list>(<argument><expr><name>milliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dconf</name>-&gt;<name>readtime_set</name></name> = 1</expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>remove_lock</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_global_mutex_destroy</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>socache_mutex</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>destroy_cache</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>=
            <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>conf</name>-&gt;<name>provider</name></name> &amp;&amp; <name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>destroy</name></name><argument_list>(
                <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>socache_status_hook</name><parameter_list>(<param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>status</name> <init>= <expr><name>APR_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>= <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name>-&gt;<name>module_config</name></name></expr></argument>,
                                                    <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>provider</name></name> || !<name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name></name> ||
        !<name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;hr&gt;\n"
                 "&lt;table cellspacing=0 cellpadding=0&gt;\n"
                 "&lt;tr&gt;&lt;td bgcolor=\"#000000\"&gt;\n"
                 "&lt;b&gt;&lt;font color=\"#ffffff\" face=\"Arial,Helvetica\"&gt;"
                 "mod_cache_socache Status:&lt;/font&gt;&lt;/b&gt;\n"
                 "&lt;/td&gt;&lt;/tr&gt;\n"
                 "&lt;tr&gt;&lt;td bgcolor=\"#ffffff\"&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"ModCacheSocacheStatus\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>socache_mutex</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>apr_global_mutex_lock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02816</expr></argument>)</argument_list></call>
                    "could not acquire lock for cache status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"No cache status data available\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"NotAvailable\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>status</name></name><argument_list>(<argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>,
                                                 <argument><expr><name>r</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>socache_mutex</name> &amp;&amp; <name>status</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>status</name> = <call><name>apr_global_mutex_unlock</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>status</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_rerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02817</expr></argument>)</argument_list></call>
                    "could not release lock for cache status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr>!(<name>flags</name> &amp; <name>AP_STATUS_SHORT</name>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_rputs</name><argument_list>(<argument><expr>"&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n"</expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_status_register</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>APR_OPTIONAL_HOOK</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>status_hook</name></expr></argument>, <argument><expr><name>socache_status_hook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>socache_precfg</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>ptmp</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name> <init>= <expr><call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>cache_socache_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02390</expr></argument>)</argument_list></call>
                "failed to register %s mutex"</expr></argument>, <argument><expr><name>cache_socache_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>500</expr>;</return> <comment type="block">/* An HTTP status would be a misnomer! */</comment>
    }</block></then></if>

    <comment type="block">/* Register to handle mod_status status page generation */</comment>
    <expr_stmt><expr><call><name>socache_status_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>socache_post_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
        <param><decl><type><name>apr_pool_t</name> *</type><name>ptmp</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>base_server</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>errmsg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> struct <name>ap_socache_hints</name></type> <name>socache_hints</name> <init>=
    <expr><block>{ <expr>64</expr>, <expr>2048</expr>, <expr>60000000</expr> }</block></expr></init></decl>;</decl_stmt>

    <for>for (<init><expr><name>s</name> = <name>base_server</name></expr>;</init> <condition><expr><name>s</name></expr>;</condition> <incr><expr><name>s</name> = <name><name>s</name>-&gt;<name>next</name></name></expr></incr>) <block>{
        <decl_stmt><decl><type><name>cache_socache_conf</name> *</type><name>conf</name> <init>=
                <expr><call><name>ap_get_module_config</name><argument_list>(<argument><expr><name><name>s</name>-&gt;<name>module_config</name></name></expr></argument>, <argument><expr>&amp;<name>cache_socache_module</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr>!<name><name>conf</name>-&gt;<name>provider</name></name></expr>)</condition><then> <block>{
            <continue>continue;</continue>
        }</block></then></if>

        <if>if <condition>(<expr>!<name>socache_mutex</name> &amp;&amp; <name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>flags</name></name>
                &amp; <name>AP_SOCACHE_FLAG_NOTMPSAFE</name></expr>)</condition><then> <block>{

            <expr_stmt><expr><name>rv</name> = <call><name>ap_global_mutex_create</name><argument_list>(<argument><expr>&amp;<name>socache_mutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cache_socache_id</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02391</expr></argument>)</argument_list></call>
                        "failed to create %s mutex"</expr></argument>, <argument><expr><name>cache_socache_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>500</expr>;</return> <comment type="block">/* An HTTP status would be a misnomer! */</comment>
            }</block></then></if>
            <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>remove_lock</name></expr></argument>,
                    <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>errmsg</name> = <call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>create</name></name><argument_list>(
                <argument><expr>&amp;<name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>args</name></name></expr></argument>, <argument><expr><name>ptmp</name></expr></argument>,
                <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>errmsg</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>plog</name></expr></argument>,
                    <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02392</expr></argument>)</argument_list></call> "%s"</expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>500</expr>;</return> <comment type="block">/* An HTTP status would be a misnomer! */</comment>
        }</block></then></if>

        <expr_stmt><expr><name>rv</name> = <call><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_provider</name>-&gt;<name>init</name></name><argument_list>(
                <argument><expr><name><name>conf</name>-&gt;<name>provider</name>-&gt;<name>socache_instance</name></name></expr></argument>, <argument><expr><name>cache_socache_id</name></expr></argument>,
                <argument><expr>&amp;<name>socache_hints</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_perror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>plog</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02393</expr></argument>)</argument_list></call>
                    "failed to initialise %s cache"</expr></argument>, <argument><expr><name>cache_socache_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>500</expr>;</return> <comment type="block">/* An HTTP status would be a misnomer! */</comment>
        }</block></then></if>
        <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr>(<name>void</name> *) <name>s</name></expr></argument>, <argument><expr><name>destroy_cache</name></expr></argument>,
                <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></for>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>socache_child_init</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <if>if <condition>(<expr>!<name>socache_mutex</name></expr>)</condition><then> <block>{
        <return>return;</return> <comment type="block">/* don't waste the overhead of creating mutex &amp; cache */</comment>
    }</block></then></if>
    <expr_stmt><expr><name>lock</name> = <call><name>apr_global_mutex_lockfile</name><argument_list>(<argument><expr><name>socache_mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> = <call><name>apr_global_mutex_child_init</name><argument_list>(<argument><expr>&amp;<name>socache_mutex</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_CRIT</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02394</expr></argument>)</argument_list></call>
                "failed to initialise mutex in child_init"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>cache_socache_cmds</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheSocache"</expr></argument>, <argument><expr><name>set_cache_socache</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name></expr></argument>,
            <argument><expr>"The shared object cache to store cache files"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheSocacheMaxTime"</expr></argument>, <argument><expr><name>set_cache_maxtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
            <argument><expr>"The maximum cache expiry age to cache a document in seconds"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheSocacheMinTime"</expr></argument>, <argument><expr><name>set_cache_mintime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
            <argument><expr>"The minimum cache expiry age to cache a document in seconds"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheSocacheMaxSize"</expr></argument>, <argument><expr><name>set_cache_max</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
            <argument><expr>"The maximum cache entry size (headers and body) to cache a document"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheSocacheReadSize"</expr></argument>, <argument><expr><name>set_cache_readsize</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
            <argument><expr>"The maximum quantity of data to attempt to read and cache in one go"</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_TAKE1</name><argument_list>(<argument><expr>"CacheSocacheReadTime"</expr></argument>, <argument><expr><name>set_cache_readtime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>RSRC_CONF</name> | <name>ACCESS_CONF</name></expr></argument>,
            <argument><expr>"The maximum time taken to attempt to read and cache in go"</expr></argument>)</argument_list></call></expr>,
    <expr><block>{ <expr><name>NULL</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>cache_provider</name></type> <name>cache_socache_provider</name> <init>=
<expr><block>{
    <expr>&amp;<name>remove_entity</name></expr>, <expr>&amp;<name>store_headers</name></expr>, <expr>&amp;<name>store_body</name></expr>, <expr>&amp;<name>recall_headers</name></expr>, <expr>&amp;<name>recall_body</name></expr>,
    <expr>&amp;<name>create_entity</name></expr>, <expr>&amp;<name>open_entity</name></expr>, <expr>&amp;<name>remove_url</name></expr>, <expr>&amp;<name>commit_entity</name></expr>,
    <expr>&amp;<name>invalidate_entity</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cache_socache_register_hook</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* cache initializer */</comment>
    <expr_stmt><expr><call><name>ap_register_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>CACHE_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"socache"</expr></argument>, <argument><expr>"0"</expr></argument>,
            <argument><expr>&amp;<name>cache_socache_provider</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_pre_config</name><argument_list>(<argument><expr><name>socache_precfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_post_config</name><argument_list>(<argument><expr><name>socache_post_config</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_child_init</name><argument_list>(<argument><expr><name>socache_child_init</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<expr_stmt><expr><call><name>AP_DECLARE_MODULE</name><argument_list>(<argument><expr><name>cache_socache</name></expr></argument>)</argument_list></call> = <block>{ <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>create_dir_config</name></expr>,  <comment type="block">/* create per-directory config structure */</comment>
    <expr><name>merge_dir_config</name></expr>, <comment type="block">/* merge per-directory config structures */</comment>
    <expr><name>create_config</name></expr>, <comment type="block">/* create per-server config structure */</comment>
    <expr><name>merge_config</name></expr>, <comment type="block">/* merge per-server config structures */</comment>
    <expr><name>cache_socache_cmds</name></expr>, <comment type="block">/* command apr_table_t */</comment>
    <expr><name>cache_socache_register_hook</name></expr> <comment type="block">/* register hooks */</comment>
}</block></expr>;</expr_stmt>
</unit>
