<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/cache/cache_disk_common.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file cache_disk_common.h
 * @brief Common Disk Cache vars/structs
 *
 * @defgroup Cache_cache  Cache Functions
 * @ingroup  MOD_DISK_CACHE
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>CACHE_DIST_COMMON_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DIST_COMMON_H</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VARY_FORMAT_VERSION</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DISK_FORMAT_VERSION</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_HEADER_SUFFIX</name></cpp:macro> <cpp:value>".header"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_DATA_SUFFIX</name></cpp:macro>   <cpp:value>".data"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHE_VDIR_SUFFIX</name></cpp:macro>   <cpp:value>".vary"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TEMPFILE_PREFIX</name></cpp:macro> <cpp:value>"/"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TEMPFILE_BASE</name></cpp:macro>   <cpp:value>"aptmp"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TEMPFILE_SUFFIX</name></cpp:macro> <cpp:value>"XXXXXX"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TEMPFILE_BASELEN</name></cpp:macro> <cpp:value>strlen(AP_TEMPFILE_BASE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TEMPFILE_NAMELEN</name></cpp:macro> <cpp:value>strlen(AP_TEMPFILE_BASE AP_TEMPFILE_SUFFIX)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_TEMPFILE</name></cpp:macro> <cpp:value>AP_TEMPFILE_PREFIX AP_TEMPFILE_BASE AP_TEMPFILE_SUFFIX</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <comment type="block">/* Indicates the format of the header struct stored on-disk. */</comment>
    <decl_stmt><decl><type><name>apr_uint32_t</name></type> <name>format</name></decl>;</decl_stmt>
    <comment type="block">/* The HTTP status code returned for this response.  */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>
    <comment type="block">/* The size of the entity name that follows. */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>name_len</name></decl>;</decl_stmt>
    <comment type="block">/* The number of times we've cached this entity. */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>entity_version</name></decl>;</decl_stmt>
    <comment type="block">/* Miscellaneous time values. */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>date</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>expire</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>request_time</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>response_time</name></decl>;</decl_stmt>
    <comment type="block">/* The ident of the body file, so we can test the body matches the header */</comment>
    <decl_stmt><decl><type><name>apr_ino_t</name></type> <name>inode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_dev_t</name></type> <name>device</name></decl>;</decl_stmt>
    <comment type="block">/* Does this cached request have a body? */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>has_body</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>header_only</name>:1</expr>;</expr_stmt>
    <comment type="block">/* The parsed cache control header */</comment>
    <decl_stmt><decl><type><name>cache_control_t</name></type> <name>control</name></decl>;</decl_stmt>
}</block></struct></type> <name>disk_cache_info_t</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* CACHE_DIST_COMMON_H */</comment>
<comment type="block">/** @} */</comment>
</unit>
