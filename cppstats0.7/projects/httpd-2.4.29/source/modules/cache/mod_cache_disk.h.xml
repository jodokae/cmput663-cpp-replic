<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/cache/mod_cache_disk.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MOD_CACHE_DISK_H</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_CACHE_DISK_H</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_file_io.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cache_disk_common.h"</cpp:file></cpp:include>

<comment type="block">/*
 * include for mod_cache_disk: Disk Based HTTP 1.1 Cache.
 */</comment>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>tempfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>tempfd</name></decl>;</decl_stmt>
}</block></struct></type> <name>disk_cache_file_t</name>;</typedef>

<comment type="block">/*
 * disk_cache_object_t
 * Pointed to by cache_object_t::vobj
 */</comment>
<typedef>typedef <type><struct>struct <name>disk_cache_object</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>root</name></decl>;</decl_stmt>            <comment type="block">/* the location of the cache directory */</comment>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>root_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>prefix</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>disk_cache_file_t</name></type> <name>data</name></decl>;</decl_stmt>      <comment type="block">/* data file structure */</comment>
    <decl_stmt><decl><type><name>disk_cache_file_t</name></type> <name>hdrs</name></decl>;</decl_stmt>      <comment type="block">/* headers file structure */</comment>
    <decl_stmt><decl><type><name>disk_cache_file_t</name></type> <name>vary</name></decl>;</decl_stmt>      <comment type="block">/* vary file structure */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>hashfile</name></decl>;</decl_stmt>        <comment type="block">/* Computed hash key for this URI */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>name</name></decl>;</decl_stmt>            <comment type="block">/* Requested URI without vary bits - suitable for mortals. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key</name></decl>;</decl_stmt>             <comment type="block">/* On-disk prefix; URI with Vary bits (if present) */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>file_size</name></decl>;</decl_stmt>         <comment type="block">/*  File size of the cached data file  */</comment>
    <decl_stmt><decl><type><name>disk_cache_info_t</name></type> <name>disk_info</name></decl>;</decl_stmt> <comment type="block">/* Header information. */</comment>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers_in</name></decl>;</decl_stmt>     <comment type="block">/* Input headers to save */</comment>
    <decl_stmt><decl><type><name>apr_table_t</name> *</type><name>headers_out</name></decl>;</decl_stmt>    <comment type="block">/* Output headers to save */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>offset</name></decl>;</decl_stmt>            <comment type="block">/* Max size to set aside */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>timeout</name></decl>;</decl_stmt>          <comment type="block">/* Max time to set aside */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>done</name>:1</expr>;</expr_stmt>         <comment type="block">/* Is the attempt to cache complete? */</comment>
}</block></struct></type> <name>disk_cache_object_t</name>;</typedef>


<comment type="block">/*
 * mod_cache_disk configuration
 */</comment>
<comment type="block">/* TODO: Make defaults OS specific */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CACHEFILE_LEN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>        <comment type="block">/* must be less than HASH_LEN/2 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DIRLEVELS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_DIRLENGTH</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MIN_FILE_SIZE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_MAX_FILE_SIZE</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_READSIZE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_READTIME</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>*</type> <name>cache_root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>cache_root_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dirlevels</name></decl>;</decl_stmt>               <comment type="block">/* Number of levels of subdirectories */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>dirlength</name></decl>;</decl_stmt>               <comment type="block">/* Length of subdirectory names */</comment>
}</block></struct></type> <name>disk_cache_conf</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>minfs</name></decl>;</decl_stmt>             <comment type="block">/* minimum file size for cached files */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>maxfs</name></decl>;</decl_stmt>             <comment type="block">/* maximum file size for cached files */</comment>
    <decl_stmt><decl><type><name>apr_off_t</name></type> <name>readsize</name></decl>;</decl_stmt>          <comment type="block">/* maximum data to attempt to cache in one go */</comment>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>readtime</name></decl>;</decl_stmt>         <comment type="block">/* maximum time taken to cache in one go */</comment>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>minfs_set</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>maxfs_set</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>readsize_set</name>:1</expr>;</expr_stmt>
    <expr_stmt><expr><name>unsigned</name> <name>int</name> <name>readtime_set</name>:1</expr>;</expr_stmt>
}</block></struct></type> <name>disk_cache_dir_conf</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/*MOD_CACHE_DISK_H*/</comment>

</unit>
