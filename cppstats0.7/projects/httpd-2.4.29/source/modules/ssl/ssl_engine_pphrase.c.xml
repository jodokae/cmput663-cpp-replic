<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/ssl/ssl_engine_pphrase.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  ssl_engine_pphrase.c
 *  Pass Phrase Dialog
 */</comment>
                             <comment type="block">/* ``Treat your password like your
                                  toothbrush. Don't let anybody
                                  else use it, and get a new one
                                  every six months.''
                                           -- Clifford Stoll     */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>server_rec</name>         *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name>         *</type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_array_header_t</name> *</type><name>aPassPhrase</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>nPassPhraseCur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>               *</type><name>cpPassPhraseCur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>nPassPhraseDialog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                 <name>nPassPhraseDialogCur</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type>                <name>bPassPhraseDialogOnce</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         *</type><name>key_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name>         *</type><name>pkey_file</name></decl>;</decl_stmt>
}</block></struct></type> <name>pphrase_cb_arg_t</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_ECC</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>key_types</name><index>[]</index></name> <init>= <expr><block>{<expr>"RSA"</expr>, <expr>"DSA"</expr>, <expr>"ECC"</expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>key_types</name><index>[]</index></name> <init>= <expr><block>{<expr>"RSA"</expr>, <expr>"DSA"</expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Return true if the named file exists and is readable
 */</comment>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>exists_and_readable</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>,
                                        <param><decl><type><name>apr_time_t</name> *</type><name>mtime</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>stat</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_finfo_t</name></type> <name>sbuf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_file_t</name> *</type><name>fd</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>(<name>stat</name> = <call><name>apr_stat</name><argument_list>(<argument><expr>&amp;<name>sbuf</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_FINFO_MIN</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
        <return>return <expr><name>stat</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name><name>sbuf</name>.<name>filetype</name></name> != <name>APR_REG</name></expr>)</condition><then>
        <return>return <expr><name>APR_EGENERAL</name></expr>;</return></then></if>

    <if>if <condition>(<expr>(<name>stat</name> = <call><name>apr_file_open</name><argument_list>(<argument><expr>&amp;<name>fd</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>APR_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call>) != <name>APR_SUCCESS</name></expr>)</condition><then>
        <return>return <expr><name>stat</name></expr>;</return></then></if>

    <if>if <condition>(<expr><name>mtime</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>mtime</name> = <name><name>sbuf</name>.<name>mtime</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<comment type="block">/*
 * reuse vhost keys for asn1 tables where keys are allocated out
 * of s-&gt;process-&gt;pool to prevent "leaking" each time we format
 * a vhost key.  since the key is stored in a table with lifetime
 * of s-&gt;process-&gt;pool, the key needs to have the same lifetime.
 *
 * XXX: probably seems silly to use a hash table with keys and values
 * being the same, but it is easier than doing a linear search
 * and will make it easier to remove keys if needed in the future.
 * also have the problem with apr_array_header_t that if we
 * underestimate the number of vhost keys when we apr_array_make(),
 * the array will get resized when we push past the initial number
 * of elts.  this resizing in the s-&gt;process-&gt;pool means "leaking"
 * since apr_array_push() will apr_alloc arr-&gt;nalloc * 2 elts,
 * leaving the original arr-&gt;elts to waste.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>asn1_table_vhost_key</name><parameter_list>(<param><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
                                  <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>id</name></decl></param>, <param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* 'p' pool used here is cleared on restarts (or sooner) */</comment>
    <decl_stmt><decl><type><name>char</name> *</type><name>key</name> <init>= <expr><call><name>apr_psprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"%s:%d"</expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> *</type><name>keyptr</name> <init>= <expr><call><name>apr_hash_get</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>tVHostKeys</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
                                <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>keyptr</name></expr>)</condition><then> <block>{
        <comment type="block">/* make a copy out of s-&gt;process-&gt;pool */</comment>
        <expr_stmt><expr><name>keyptr</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>pPool</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_hash_set</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>tVHostKeys</name></name></expr></argument>, <argument><expr><name>keyptr</name></expr></argument>,
                     <argument><expr><name>APR_HASH_KEY_STRING</name></expr></argument>, <argument><expr><name>keyptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr>(<name>char</name> *)<name>keyptr</name></expr>;</return>
}</block></function>

<comment type="block">/*  _________________________________________________________________
**
**  Pass Phrase and Private Key Handling
**  _________________________________________________________________
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN_DIALOG_BACKOFF</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUILTIN_DIALOG_RETRIES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>apr_file_t</name> *</type><name>writetty</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>apr_file_t</name> *</type><name>readtty</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>ssl_pphrase_Handle_CB</name><parameter_list>(<param><decl><type><name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> *</type><name>pphrase_array_get</name><parameter_list>(<param><decl><type><name>apr_array_header_t</name> *</type><name>arr</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>)</parameter_list>
<block>{
    <if>if <condition>(<expr>(<name>idx</name> &lt; 0) || (<name>idx</name> &gt;= <name><name>arr</name>-&gt;<name>nelts</name></name>)</expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr>((<name>char</name> **)<name><name>arr</name>-&gt;<name>elts</name></name>)<index>[<expr><name>idx</name></expr>]</index></expr>;</return>
}</block></function>

<function><type><name>apr_status_t</name></type> <name>ssl_load_encrypted_pkey</name><parameter_list>(<param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>,
                                     <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>pkey_file</name></decl></param>,
                                     <param><decl><type><name>apr_array_header_t</name> **</type><name>pphrases</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLModConfigRec</name> *</type><name>mc</name> <init>= <expr><call><name>myModConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>key_id</name> <init>= <expr><call><name>asn1_table_vhost_key</name><argument_list>(<argument><expr><name>mc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EVP_PKEY</name> *</type><name>pPrivateKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssl_asn1_t</name> *</type><name>asn1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>ucp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BOOL</name></type> <name>bReadable</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nPassPhrase</name> <init>= <expr><name>(*<name>pphrases</name>)-&gt;<name>nelts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nPassPhraseRetry</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_time_t</name></type> <name>pkey_mtime</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pphrase_cb_arg_t</name></type> <name>ppcb_arg</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>pkey_file</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02573</expr></argument>)</argument_list></call>
                      "Init: No private key specified for %s"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr>(<name>rv</name> = <call><name>exists_and_readable</name><argument_list>(<argument><expr><name>pkey_file</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>pkey_mtime</name></expr></argument>)</argument_list></call>)
             != <name>APR_SUCCESS</name></expr> )</condition><then> <block>{
         <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02574</expr></argument>)</argument_list></call>
                      "Init: Can't open server private key file %s"</expr></argument>, <argument><expr><name>pkey_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></else></if>

    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>s</name></name>                     = <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>p</name></name>                     = <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>aPassPhrase</name></name>           = *<name>pphrases</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>nPassPhraseCur</name></name>        = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name>       = <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>nPassPhraseDialog</name></name>     = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>nPassPhraseDialogCur</name></name>  = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>bPassPhraseDialogOnce</name></name> = <name>TRUE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>key_id</name></name>                = <name>key_id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>.<name>pkey_file</name></name>             = <name>pkey_file</name></expr>;</expr_stmt>

    <comment type="block">/*
     * if the private key is encrypted and SSLPassPhraseDialog
     * is configured to "builtin" it isn't possible to prompt for
     * a password after httpd has detached from the tty.
     * in this case if we already have a private key and the
     * file name/mtime hasn't changed, then reuse the existing key.
     * we also reuse existing private keys that were encrypted for
     * exec: and pipe: dialogs to minimize chances to snoop the
     * password.  that and pipe: dialogs might prompt the user
     * for password, which on win32 for example could happen 4
     * times at startup.  twice for each child and twice within
     * each since apache "restarts itself" on startup.
     * of course this will not work for the builtin dialog if
     * the server was started without LoadModule ssl_module
     * configured, then restarted with it configured.
     * but we fall through with a chance of success if the key
     * is not encrypted or can be handled via exec or pipe dialog.
     * and in the case of fallthrough, pkey_mtime and isatty()
     * are used to give a better idea as to what failed.
     */</comment>
    <if>if <condition>(<expr><name>pkey_mtime</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ssl_asn1_t</name> *</type><name>asn1</name> <init>= <expr><call><name>ssl_asn1_table_get</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>tPrivateKey</name></name></expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>asn1</name> &amp;&amp; (<name><name>asn1</name>-&gt;<name>source_mtime</name></name> == <name>pkey_mtime</name>)</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02575</expr></argument>)</argument_list></call>
                         "Reusing existing private key from %s on restart"</expr></argument>,
                         <argument><expr><name><name>ppcb_arg</name>.<name>pkey_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
        }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02576</expr></argument>)</argument_list></call>
                 "Attempting to load encrypted (?) private key %s"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
        <comment type="block">/*
         * Try to read the private key file with the help of
         * the callback function which serves the pass
         * phrases to OpenSSL
         */</comment>

        <expr_stmt><expr><name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name> = <name>NULL</name></expr>;</expr_stmt>

        <comment type="block">/* Ensure that the error stack is empty; some SSL
         * functions will fail spuriously if the error stack
         * is not empty. */</comment>
        <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>bReadable</name> = ((<name>pPrivateKey</name> = <call><name>modssl_read_privatekey</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>.<name>pkey_file</name></name></expr></argument>,
                     <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ssl_pphrase_Handle_CB</name></expr></argument>, <argument><expr>&amp;<name>ppcb_arg</name></expr></argument>)</argument_list></call>) != <name>NULL</name> ?
                     <name>TRUE</name> : <name>FALSE</name>)</expr>;</expr_stmt>

        <comment type="block">/*
         * when the private key file now was readable,
         * it's fine and we go out of the loop
         */</comment>
        <if>if <condition>(<expr><name>bReadable</name></expr>)</condition><then>
           <break>break;</break></then></if>

        <comment type="block">/*
         * when we have more remembered pass phrases
         * try to reuse these first.
         */</comment>
        <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>nPassPhraseCur</name></name> &lt; <name>nPassPhrase</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ppcb_arg</name>.<name>nPassPhraseCur</name></name>++</expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <comment type="block">/*
         * else it's not readable and we have no more
         * remembered pass phrases. Then this has to mean
         * that the callback function popped up the dialog
         * but a wrong pass phrase was entered.  We give the
         * user (but not the dialog program) a few more
         * chances...
         */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
        <if>if <condition>(<expr>(<name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_BUILTIN</name>
             || <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_PIPE</name>)</expr></condition></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_PIPE</name>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            &amp;&amp; <name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name> != <name>NULL</name>
            &amp;&amp; <name>nPassPhraseRetry</name> &lt; <name>BUILTIN_DIALOG_RETRIES</name></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"Apache:mod_ssl:Error: Pass phrase incorrect "
                    "(%d more retr%s permitted).\n"</expr></argument>,
                    <argument><expr>(<name>BUILTIN_DIALOG_RETRIES</name>-<name>nPassPhraseRetry</name>)</expr></argument>,
                    <argument><expr>(<name>BUILTIN_DIALOG_RETRIES</name>-<name>nPassPhraseRetry</name>) == 1 ? "y" : "ies"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>nPassPhraseRetry</name>++</expr>;</expr_stmt>
            <if>if <condition>(<expr><name>nPassPhraseRetry</name> &gt; <name>BUILTIN_DIALOG_BACKOFF</name></expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_sleep</name><argument_list>(<argument><expr>(<name>nPassPhraseRetry</name>-<name>BUILTIN_DIALOG_BACKOFF</name>)
                            * 5 * <name>APR_USEC_PER_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
            <continue>continue;</continue>
        }</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
        <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_BUILTIN</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02577</expr></argument>)</argument_list></call>
                         "Init: SSLPassPhraseDialog builtin is not "
                         "supported on Win32 (key file "
                         "%s)"</expr></argument>, <argument><expr><name><name>ppcb_arg</name>.<name>pkey_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* WIN32 */</comment>

        <comment type="block">/*
         * Ok, anything else now means a fatal error.
         */</comment>
        <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name> == <name>NULL</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>nPassPhraseDialogCur</name></name> &amp;&amp; <name>pkey_mtime</name> &amp;&amp;
                !<call><name>isatty</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <comment type="block">/* XXX: apr_isatty() */</comment>
            <block>{
                <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02578</expr></argument>)</argument_list></call>
                             "Init: Unable to read pass phrase "
                             "[Hint: key introduced or changed "
                             "before restart?]"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>,
                             <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02579</expr></argument>)</argument_list></call> "Init: Private key not found"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>writetty</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"Apache:mod_ssl:Error: Private key not found.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"**Stopped\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02580</expr></argument>)</argument_list></call>
                         "Init: Pass phrase incorrect for key %s"</expr></argument>,
                         <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>writetty</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"Apache:mod_ssl:Error: Pass phrase incorrect.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"**Stopped\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
        <return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></for>

    <if>if <condition>(<expr><name>pPrivateKey</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02581</expr></argument>)</argument_list></call>
                     "Init: Unable to read server private key from file %s"</expr></argument>,
                     <argument><expr><name><name>ppcb_arg</name>.<name>pkey_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_EMERG</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>ssl_die</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Log the type of reading
     */</comment>
    <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>nPassPhraseDialogCur</name></name> == 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02582</expr></argument>)</argument_list></call>
                     "unencrypted %s private key - pass phrase not "
                     "required"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02583</expr></argument>)</argument_list></call>
                         "encrypted %s private key - pass phrase "
                         "requested"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>,
                         <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02584</expr></argument>)</argument_list></call>
                         "encrypted %s private key - pass phrase"
                         " reused"</expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>

    <comment type="block">/*
     * Ok, when we have one more pass phrase store it
     */</comment>
    <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name> != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*(const <name>char</name> **)<call><name>apr_array_push</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>.<name>aPassPhrase</name></name></expr></argument>)</argument_list></call> =
            <name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPassPhrase</name>++</expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Insert private key into the global module configuration
     * (we convert it to a stand-alone DER byte sequence
     * because the SSL library uses static variables inside a
     * RSA structure which do not survive DSO reloads!)
     */</comment>
    <expr_stmt><expr><name>length</name> = <call><name>i2d_PrivateKey</name><argument_list>(<argument><expr><name>pPrivateKey</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ucp</name> = <call><name>ssl_asn1_table_set</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>tPrivateKey</name></name></expr></argument>, <argument><expr><name>key_id</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr>(<name>void</name>)<call><name>i2d_PrivateKey</name><argument_list>(<argument><expr><name>pPrivateKey</name></expr></argument>, <argument><expr>&amp;<name>ucp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* 2nd arg increments */</comment>

    <if>if <condition>(<expr><name><name>ppcb_arg</name>.<name>nPassPhraseDialogCur</name></name> != 0</expr>)</condition><then> <block>{
        <comment type="block">/* remember mtime of encrypted keys */</comment>
        <expr_stmt><expr><name>asn1</name> = <call><name>ssl_asn1_table_get</name><argument_list>(<argument><expr><name><name>mc</name>-&gt;<name>tPrivateKey</name></name></expr></argument>, <argument><expr><name>key_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>asn1</name>-&gt;<name>source_mtime</name></name> = <name>pkey_mtime</name></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * Free the private key structure
     */</comment>
    <expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><name>pPrivateKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Let the user know when we're successful.
     */</comment>
    <if>if <condition>(<expr>(<name><name>ppcb_arg</name>.<name>nPassPhraseDialog</name></name> &gt; 0) &amp;&amp;
        (<name><name>ppcb_arg</name>.<name>cpPassPhraseCur</name></name> != <name>NULL</name>)</expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>writetty</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"\n"
                            "OK: Pass Phrase Dialog successful.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <comment type="block">/* Close the pipes if they were opened
     */</comment>
    <if>if <condition>(<expr><name>readtty</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>readtty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_file_close</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>readtty</name> = <name>writetty</name> = <name>NULL</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_pipe_child_create</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>, <param><decl><type><specifier>const</specifier> <name>char</name> *</type><name>progname</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* Child process code for 'ErrorLog "|..."';
     * may want a common framework for this, since I expect it will
     * be common for other foo-loggers to want this sort of thing...
     */</comment>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_procattr_t</name> *</type><name>procattr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_proc_t</name> *</type><name>procnew</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>((<name>rc</name> = <call><name>apr_procattr_create</name><argument_list>(<argument><expr>&amp;<name>procattr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>) &amp;&amp;
        ((<name>rc</name> = <call><name>apr_procattr_io_set</name><argument_list>(<argument><expr><name>procattr</name></expr></argument>,
                                   <argument><expr><name>APR_FULL_BLOCK</name></expr></argument>,
                                   <argument><expr><name>APR_FULL_BLOCK</name></expr></argument>,
                                   <argument><expr><name>APR_NO_PIPE</name></expr></argument>)</argument_list></call>) == <name>APR_SUCCESS</name>)</expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> **</type><name>args</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>apr_tokenize_to_argv</name><argument_list>(<argument><expr><name>progname</name></expr></argument>, <argument><expr>&amp;<name>args</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>procnew</name> = (<name>apr_proc_t</name> *)<call><name>apr_pcalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>procnew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> = <call><name>apr_proc_create</name><argument_list>(<argument><expr><name>procnew</name></expr></argument>, <argument><expr><name><name>args</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>(const <name>char</name> * const *)<name>args</name></expr></argument>,
                             <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>procattr</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rc</name> == <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
            <comment type="block">/* XXX: not sure if we aught to...
             * apr_pool_note_subprocess(p, procnew, APR_KILL_AFTER_TIMEOUT);
             */</comment>
            <expr_stmt><expr><name>writetty</name> = <name><name>procnew</name>-&gt;<name>in</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>readtty</name> = <name><name>procnew</name>-&gt;<name>out</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pipe_get_passwd_cb</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>length</name></decl></param>, <param><decl><type><name>char</name> *</type><name>prompt</name></decl></param>, <param><decl><type><name>int</name></type> <name>verify</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>p</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>writetty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name>='\0'</expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>apr_file_gets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>readtty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>APR_EOL_STR</name></expr></argument>, <argument><expr><name>writetty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>rc</name> != <name>APR_SUCCESS</name> || <call><name>apr_file_eof</name><argument_list>(<argument><expr><name>readtty</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>  <comment type="block">/* failure */</comment>
    }</block></then></if>
    <if>if <condition>(<expr>(<name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'\n'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
    }</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
    <comment type="block">/* XXX: apr_sometest */</comment>
    <if>if <condition>(<expr>(<name>p</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'\r'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ssl_pphrase_Handle_CB</name><parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>int</name></type> <name>bufsize</name></decl></param>, <param><decl><type><name>int</name></type> <name>verify</name></decl></param>, <param><decl><type><name>void</name> *</type><name>srv</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>pphrase_cb_arg_t</name> *</type><name>ppcb_arg</name> <init>= <expr>(<name>pphrase_cb_arg_t</name> *)<name>srv</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>cpp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr>-1</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>ppcb_arg</name>-&gt;<name>nPassPhraseDialog</name></name>++</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ppcb_arg</name>-&gt;<name>nPassPhraseDialogCur</name></name>++</expr>;</expr_stmt>

    <comment type="block">/*
     * When remembered pass phrases are available use them...
     */</comment>
    <if>if <condition>(<expr>(<name>cpp</name> = <call><name>pphrase_array_get</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>aPassPhrase</name></name></expr></argument>,
                                 <argument><expr><name><name>ppcb_arg</name>-&gt;<name>nPassPhraseCur</name></name></expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>cpp</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>len</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Builtin or Pipe dialog
     */</comment>
    <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_BUILTIN</name>
          || <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_PIPE</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>char</name> *</type><name>prompt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_PIPE</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr>!<name>readtty</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>,
                             <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01965</expr></argument>)</argument_list></call>
                             "Init: Creating pass phrase dialog pipe child "
                             "'%s'"</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><call><name>ssl_pipe_child_create</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>,
                                          <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr></argument>)</argument_list></call>
                        != <name>APR_SUCCESS</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>,
                                 <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01966</expr></argument>)</argument_list></call>
                                 "Init: Failed to create pass phrase pipe '%s'"</expr></argument>,
                                 <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>PEMerr</name><argument_list>(<argument><expr><name>PEM_F_PEM_DEF_CALLBACK</name></expr></argument>,
                           <argument><expr><name>PEM_R_PROBLEMS_GETTING_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>)<name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr>(-1)</expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01967</expr></argument>)</argument_list></call>
                         "Init: Requesting pass phrase via piped dialog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{ <comment type="block">/* sc-&gt;server-&gt;pphrase_dialog_type == SSL_PPTYPE_BUILTIN */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WIN32</name></cpp:ifdef>
            <expr_stmt><expr><call><name>PEMerr</name><argument_list>(<argument><expr><name>PEM_F_PEM_DEF_CALLBACK</name></expr></argument>, <argument><expr><name>PEM_R_PROBLEMS_GETTING_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>)<name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr>(-1)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <comment type="block">/*
             * stderr has already been redirected to the error_log.
             * rather than attempting to temporarily rehook it to the terminal,
             * we print the prompt to stdout before EVP_read_pw_string turns
             * off tty echo
             */</comment>
            <expr_stmt><expr><call><name>apr_file_open_stdout</name><argument_list>(<argument><expr>&amp;<name>writetty</name></expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01968</expr></argument>)</argument_list></call>
                         "Init: Requesting pass phrase via builtin terminal "
                         "dialog"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        }</block></else></if>

        <comment type="block">/*
         * The first time display a header to inform the user about what
         * program he actually speaks to, which module is responsible for
         * this terminal dialog and why to the hell he has to enter
         * something...
         */</comment>
        <if>if <condition>(<expr><name><name>ppcb_arg</name>-&gt;<name>nPassPhraseDialog</name></name> == 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"%s mod_ssl (Pass Phrase Dialog)\n"</expr></argument>,
                            <argument><expr><name>AP_SERVER_BASEVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"Some of your private key files are encrypted for security reasons.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"In order to read them you have to provide the pass phrases.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>ppcb_arg</name>-&gt;<name>bPassPhraseDialogOnce</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ppcb_arg</name>-&gt;<name>bPassPhraseDialogOnce</name></name> = <name>FALSE</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"Private key %s (%s)\n"</expr></argument>,
                            <argument><expr><name><name>ppcb_arg</name>-&gt;<name>key_id</name></name></expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>pkey_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/*
         * Emulate the OpenSSL internal pass phrase dialog
         * (see crypto/pem/pem_lib.c:def_callback() for details)
         */</comment>
        <expr_stmt><expr><name>prompt</name> = "Enter pass phrase:"</expr>;</expr_stmt>

        <for>for (<init>;</init><condition>;</condition><incr/>) <block>{
            <expr_stmt><expr><call><name>apr_file_puts</name><argument_list>(<argument><expr><name>prompt</name></expr></argument>, <argument><expr><name>writetty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_PIPE</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>i</name> = <call><name>pipe_get_passwd_cb</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{ <comment type="block">/* sc-&gt;server-&gt;pphrase_dialog_type == SSL_PPTYPE_BUILTIN */</comment>
                <expr_stmt><expr><name>i</name> = <call><name>EVP_read_pw_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr>""</expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <if>if <condition>(<expr><name>i</name> != 0</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>PEMerr</name><argument_list>(<argument><expr><name>PEM_F_PEM_DEF_CALLBACK</name></expr></argument>,<argument><expr><name>PEM_R_PROBLEMS_GETTING_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>unsigned</name> <name>int</name>)<name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr>(-1)</expr>;</return>
            }</block></then></if>
            <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>len</name> &lt; 1</expr>)</condition><then>
                <expr_stmt><expr><call><name>apr_file_printf</name><argument_list>(<argument><expr><name>writetty</name></expr></argument>, <argument><expr>"Apache:mod_ssl:Error: Pass phrase empty (needs to be at least 1 character).\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
            <else>else
                <break>break;</break></else></if>
        }</block></for>
    }</block></then>

    <comment type="block">/*
     * Filter program
     */</comment>
    <else>else <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_type</name></name> == <name>SSL_PPTYPE_FILTER</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>cmd</name> <init>= <expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>pphrase_dialog_path</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> **</type><name>argv</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> *</expr></argument>)</argument_list></sizeof> * 4</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>idx</name> <init>= <expr><call><name>ap_strrchr_c</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>key_id</name></name></expr></argument>, <argument><expr>':'</expr></argument>)</argument_list></call> + 1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01969</expr></argument>)</argument_list></call>
                     "Init: Requesting pass phrase from dialog filter "
                     "program (%s)"</expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name> = <name>cmd</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name> = <call><name>apr_pstrndup</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>key_id</name></name></expr></argument>,
                               <argument><expr><name>idx</name>-1 - <name><name>ppcb_arg</name>-&gt;<name>key_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call>) &lt; <name>CERTKEYS_IDX_MAX</name>+1</expr>)</condition><then> <block>{
            <comment type="block">/*
             * For compatibility with existing 2.4.x configurations, use
             * "RSA", "DSA" and "ECC" strings for the first two/three keys
             */</comment>
            <expr_stmt><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name> = <name><name>key_types</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="block">/* Four and above: use the integer index */</comment>
            <expr_stmt><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name> = <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> = <call><name>ssl_util_readfilter</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>s</name></name></expr></argument>, <argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_cpystrn</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></else></if>

    <comment type="block">/*
     * Ok, we now have the pass phrase, so give it back
     */</comment>
    <expr_stmt><expr><name><name>ppcb_arg</name>-&gt;<name>cpPassPhraseCur</name></name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name><name>ppcb_arg</name>-&gt;<name>p</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * And return its length to OpenSSL...
     */</comment>
    <return>return <expr>(<name>len</name>)</expr>;</return>
}</block></function>
</unit>
