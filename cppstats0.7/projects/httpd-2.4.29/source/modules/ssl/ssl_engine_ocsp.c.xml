<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/ssl/ssl_engine_ocsp.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_OCSP</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"apr_base64.h"</cpp:file></cpp:include>

<comment type="block">/* Return the responder URI specified in the given certificate, or
 * NULL if none specified. */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>extract_responder_uri</name><parameter_list>(<param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>ACCESS_DESCRIPTION</name></expr></argument>)</argument_list></call> *<name>values</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>values</name> = <call><name>X509_get_ext_d2i</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>NID_info_access</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>values</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <for>for (<init><expr><name>j</name> = 0</expr>;</init> <condition><expr><name>j</name> &lt; <call><name>sk_ACCESS_DESCRIPTION_num</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call> &amp;&amp; !<name>result</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>) <block>{
        <decl_stmt><decl><type><name>ACCESS_DESCRIPTION</name> *</type><name>value</name> <init>= <expr><call><name>sk_ACCESS_DESCRIPTION_value</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* Name found in extension, and is a URI: */</comment>
        <if>if <condition>(<expr><call><name>OBJ_obj2nid</name><argument_list>(<argument><expr><name><name>value</name>-&gt;<name>method</name></name></expr></argument>)</argument_list></call> == <name>NID_ad_OCSP</name>
            &amp;&amp; <name><name>value</name>-&gt;<name>location</name>-&gt;<name>type</name></name> == <name>GEN_URI</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>result</name> = <call><name>apr_pstrdup</name><argument_list>(<argument><expr><name>pool</name></expr></argument>,
                                 <argument><expr>(<name>char</name> *)<name><name>value</name>-&gt;<name>location</name>-&gt;<name>d</name>.<name>uniformResourceIdentifier</name>-&gt;<name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name>AUTHORITY_INFO_ACCESS_free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<comment type="block">/* Return the responder URI object which should be used in the given
 * configuration for the given certificate, or NULL if none can be
 * determined. */</comment>
<function><type><specifier>static</specifier> <name>apr_uri_t</name> *</type><name>determine_responder_uri</name><parameter_list>(<param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>,
                                          <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>u</name> <init>= <expr><call><name>apr_palloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>sizeof *<name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_status_t</name></type> <name>rv</name></decl>;</decl_stmt>

    <comment type="block">/* Use default responder URL if forced by configuration, else use
     * certificate-specified responder, falling back to default if
     * necessary and possible. */</comment>
    <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_force_default</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>s</name> = <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder</name></name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>s</name> = <call><name>extract_responder_uri</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>s</name> == <name>NULL</name> &amp;&amp; <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>s</name> = <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder</name></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>

    <if>if <condition>(<expr><name>s</name> == <name>NULL</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01918</expr></argument>)</argument_list></call>
                      "no OCSP responder specified in certificate and "
                      "no default configured"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>rv</name> = <call><name>apr_uri_parse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rv</name> || !<name><name>u</name>-&gt;<name>hostname</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01919</expr></argument>)</argument_list></call>
                      "failed to parse OCSP responder URI '%s'"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>u</name>-&gt;<name>scheme</name></name></expr></argument>, <argument><expr>"http"</expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_DEBUG</name></expr></argument>, <argument><expr><name>rv</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01920</expr></argument>)</argument_list></call>
                      "cannot handle OCSP responder URI '%s'"</expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr>!<name><name>u</name>-&gt;<name>port</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>u</name>-&gt;<name>port</name></name> = <call><name>apr_uri_port_of_scheme</name><argument_list>(<argument><expr><name><name>u</name>-&gt;<name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>u</name></expr>;</return>
}</block></function>

<comment type="block">/* Create an OCSP request for the given certificate; returning the
 * certificate ID in *certid and *issuer on success.  Returns the
 * request object on success, or NULL on error. */</comment>
<function><type><specifier>static</specifier> <name>OCSP_REQUEST</name> *</type><name>create_request</name><parameter_list>(<param><decl><type><name>X509_STORE_CTX</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>,
                                    <param><decl><type><name>OCSP_CERTID</name> **</type><name>certid</name></decl></param>,
                                    <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>,
                                    <param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>OCSP_REQUEST</name> *</type><name>req</name> <init>= <expr><call><name>OCSP_REQUEST_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr>*<name>certid</name> = <call><name>OCSP_cert_to_id</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name>X509_STORE_CTX_get0_current_issuer</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!*<name>certid</name> || !<call><name>OCSP_request_add0_id</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr>*<name>certid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01921</expr></argument>)</argument_list></call>
                     "could not retrieve certificate id"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_use_request_nonce</name></name> != <name>FALSE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>OCSP_request_add1_nonce</name><argument_list>(<argument><expr><name>req</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>req</name></expr>;</return>
}</block></function>

<comment type="block">/* Verify the OCSP status of given certificate.  Returns
 * V_OCSP_CERTSTATUS_* result code. */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>verify_ocsp_status</name><parameter_list>(<param><decl><type><name>X509</name> *</type><name>cert</name></decl></param>, <param><decl><type><name>X509_STORE_CTX</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>,
                              <param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>, <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>,
                              <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>V_OCSP_CERTSTATUS_GOOD</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OCSP_RESPONSE</name> *</type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OCSP_BASICRESP</name> *</type><name>basicResponse</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OCSP_REQUEST</name> *</type><name>request</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>OCSP_CERTID</name> *</type><name>certID</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_uri_t</name> *</type><name>ruri</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ruri</name> = <call><name>determine_responder_uri</name><argument_list>(<argument><expr><name>sc</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr>!<name>ruri</name></expr>)</condition><then> <block>{
        <return>return <expr><name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>request</name> = <call><name>create_request</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr>&amp;<name>certID</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>request</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>apr_interval_time_t</name></type> <name>to</name> <init>= <expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder_timeout</name></name> == <name>UNSET</name> ?
                                 <call><name>apr_time_from_sec</name><argument_list>(<argument><expr><name>DEFAULT_OCSP_TIMEOUT</name></expr></argument>)</argument_list></call> :
                                 <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_responder_timeout</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>response</name> = <call><name>modssl_dispatch_ocsp_request</name><argument_list>(<argument><expr><name>ruri</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>request</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr>!<name>request</name> || !<name>response</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>rc</name> == <name>V_OCSP_CERTSTATUS_GOOD</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>OCSP_response_status</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>r</name> != <name>OCSP_RESPONSE_STATUS_SUCCESSFUL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01922</expr></argument>)</argument_list></call>
                         "OCSP response not successful: %d"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>rc</name> == <name>V_OCSP_CERTSTATUS_GOOD</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>basicResponse</name> = <call><name>OCSP_response_get1_basic</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr>!<name>basicResponse</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01923</expr></argument>)</argument_list></call>
                          "could not retrieve OCSP basic response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>rc</name> == <name>V_OCSP_CERTSTATUS_GOOD</name> &amp;&amp;
            <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_use_request_nonce</name></name> != <name>FALSE</name> &amp;&amp;
            <call><name>OCSP_check_nonce</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>basicResponse</name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01924</expr></argument>)</argument_list></call>
                    "Bad OCSP responder answer (bad nonce)"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>rc</name> == <name>V_OCSP_CERTSTATUS_GOOD</name></expr>)</condition><then> <block>{
        <comment type="block">/* Check if OCSP certificate verification required */</comment>
        <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_noverify</name></name> != <name>TRUE</name></expr>)</condition><then> <block>{
            <comment type="block">/* Modify OCSP response verification to include OCSP Responder cert */</comment>
            <if>if <condition>(<expr><call><name>OCSP_basic_verify</name><argument_list>(<argument><expr><name>basicResponse</name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_certs</name></name></expr></argument>, <argument><expr><call><name>X509_STORE_CTX_get0_store</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>,
                                  <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_verify_flags</name></name></expr></argument>)</argument_list></call> != 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ap_log_error</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01925</expr></argument>)</argument_list></call>
                            "failed to verify the OCSP response"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>rc</name> == <name>V_OCSP_CERTSTATUS_GOOD</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>reason</name> <init>= <expr>-1</expr></init>, <name>status</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ASN1_GENERALIZEDTIME</name> *</type><name>thisup</name> <init>= <expr><name>NULL</name></expr></init>, *<name>nextup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>rc</name> = <call><name>OCSP_resp_find_status</name><argument_list>(<argument><expr><name>basicResponse</name></expr></argument>, <argument><expr><name>certID</name></expr></argument>, <argument><expr>&amp;<name>status</name></expr></argument>,
                                   <argument><expr>&amp;<name>reason</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>thisup</name></expr></argument>, <argument><expr>&amp;<name>nextup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rc</name> != 1</expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>ssl_log_cxerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02272</expr></argument>)</argument_list></call>
                            "failed to retrieve OCSP response status"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>rc</name> = <name>status</name></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="block">/* Check whether the response is inside the defined validity
         * period; otherwise fail.  */</comment>
        <if>if <condition>(<expr><name>rc</name> != <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>resptime_skew</name> <init>= <expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resptime_skew</name></name> == <name>UNSET</name> ?
                                 <name>DEFAULT_OCSP_MAX_SKEW</name> : <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resptime_skew</name></name></expr></init></decl>;</decl_stmt>
            <comment type="block">/* oscp_resp_maxage can be passed verbatim - UNSET (-1) means
             * that responses can be of any age as long as nextup is in the
             * future. */</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>vrc</name>  <init>= <expr><call><name>OCSP_check_validity</name><argument_list>(<argument><expr><name>thisup</name></expr></argument>, <argument><expr><name>nextup</name></expr></argument>, <argument><expr><name>resptime_skew</name></expr></argument>,
                                           <argument><expr><name><name>sc</name>-&gt;<name>server</name>-&gt;<name>ocsp_resp_maxage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>vrc</name> != 1</expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>ssl_log_cxerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>02273</expr></argument>)</argument_list></call>
                                "OCSP response outside validity period"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>rc</name> = <name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>level</name> <init>=
                <expr>(<name>status</name> == <name>V_OCSP_CERTSTATUS_GOOD</name>) ? <name>APLOG_INFO</name> : <name>APLOG_ERR</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> *</type><name>result</name> <init>=
                <expr><name>status</name> == <name>V_OCSP_CERTSTATUS_GOOD</name> ? "good" :
                (<name>status</name> == <name>V_OCSP_CERTSTATUS_REVOKED</name> ? "revoked" : "unknown")</expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>ssl_log_cxerror</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>cert</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>03239</expr></argument>)</argument_list></call>
                            "OCSP validation completed, "
                            "certificate status: %s (%d, %d)"</expr></argument>,
                            <argument><expr><name>result</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block></then></if>

    <if>if <condition>(<expr><name>request</name></expr>)</condition><then> <expr_stmt><expr><call><name>OCSP_REQUEST_free</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>response</name></expr>)</condition><then> <expr_stmt><expr><call><name>OCSP_RESPONSE_free</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <if>if <condition>(<expr><name>basicResponse</name></expr>)</condition><then> <expr_stmt><expr><call><name>OCSP_BASICRESP_free</name><argument_list>(<argument><expr><name>basicResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    <comment type="block">/* certID is freed when the request is freed */</comment>

    <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>modssl_verify_ocsp</name><parameter_list>(<param><decl><type><name>X509_STORE_CTX</name> *</type><name>ctx</name></decl></param>, <param><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl></param>,
                       <param><decl><type><name>server_rec</name> *</type><name>s</name></decl></param>, <param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>apr_pool_t</name> *</type><name>pool</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>X509</name> *</type><name>cert</name> <init>= <expr><call><name>X509_STORE_CTX_get_current_cert</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>apr_pool_t</name> *</type><name>vpool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rv</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>cert</name></expr>)</condition><then> <block>{
        <comment type="block">/* starting with OpenSSL 1.0, X509_STORE_CTX_get_current_cert()
         * may yield NULL. Return early, but leave the ctx error as is. */</comment>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr>"No cert available to check with OCSP"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then>
    <else>else <if>if <condition>(<expr><call><name>X509_check_issued</name><argument_list>(<argument><expr><name>cert</name></expr></argument>,<argument><expr><name>cert</name></expr></argument>)</argument_list></call> == <name>X509_V_OK</name></expr>)</condition><then> <block>{
        <comment type="block">/* don't do OCSP checking for valid self-issued certs */</comment>
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_TRACE2</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>,
                      <argument><expr>"Skipping OCSP check for valid self-issued cert"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>X509_STORE_CTX_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>X509_V_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr>1</expr>;</return>
    }</block></then></if></else></if>

    <comment type="block">/* Create a temporary pool to constrain memory use (the passed-in
     * pool may be e.g. a connection pool). */</comment>
    <expr_stmt><expr><call><name>apr_pool_create</name><argument_list>(<argument><expr>&amp;<name>vpool</name></expr></argument>, <argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rv</name> = <call><name>verify_ocsp_status</name><argument_list>(<argument><expr><name>cert</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>apr_pool_destroy</name><argument_list>(<argument><expr><name>vpool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Propagate the verification status back to the passed-in
     * context. */</comment>
    <switch>switch <condition>(<expr><name>rv</name></expr>)</condition> <block>{
    <case>case <expr><name>V_OCSP_CERTSTATUS_GOOD</name></expr>:
        <expr_stmt><expr><call><name>X509_STORE_CTX_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>X509_V_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>V_OCSP_CERTSTATUS_REVOKED</name></expr>:
        <expr_stmt><expr><call><name>X509_STORE_CTX_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>X509_V_ERR_CERT_REVOKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

    </case><case>case <expr><name>V_OCSP_CERTSTATUS_UNKNOWN</name></expr>:
        <comment type="block">/* correct error code for application errors? */</comment>
        <expr_stmt><expr><call><name>X509_STORE_CTX_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>X509_V_ERR_APPLICATION_VERIFICATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </case>}</block></switch>

    <return>return <expr><name>rv</name> == <name>V_OCSP_CERTSTATUS_GOOD</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_OCSP */</comment>
</unit>
