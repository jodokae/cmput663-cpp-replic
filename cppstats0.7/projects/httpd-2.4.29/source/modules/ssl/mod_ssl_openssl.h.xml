<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/ssl/mod_ssl_openssl.h"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/**
 * @file mod_ssl_openssl.h
 * @brief Interface to OpenSSL-specific APIs provided by mod_ssl
 *
 * @defgroup MOD_SSL mod_ssl_openssl
 * @ingroup  APACHE_MODS
 * @{
 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__MOD_SSL_OPENSSL_H__</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__MOD_SSL_OPENSSL_H__</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>

<comment type="block">/* OpenSSL headers */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SSL_PRIVATE_H</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/opensslv.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x10001000)</expr></cpp:if>
<comment type="block">/* must be defined before including ssl.h */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_NO_SSL_INTERN</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/**
 * init_server hook -- allow SSL_CTX-specific initialization to be performed by
 * a module for each SSL-enabled server (one at a time)
 * @param s SSL-enabled [virtual] server
 * @param p pconf pool
 * @param is_proxy 1 if this server supports backend connections
 * over SSL/TLS, 0 if it supports client connections over SSL/TLS
 * @param ctx OpenSSL SSL Context for the server
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ssl</argument>, <argument>SSL</argument>, <argument>int</argument>, <argument>init_server</argument>,
                          <argument>(server_rec *s, apr_pool_t *p, int is_proxy, SSL_CTX *ctx)</argument>)</argument_list></macro>

<comment type="block">/**
 * pre_handshake hook
 * @param c conn_rec for new connection from client or to backend server
 * @param ssl OpenSSL SSL Connection for the client or backend server
 * @param is_proxy 1 if this handshake is for a backend connection, 0 otherwise
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ssl</argument>, <argument>SSL</argument>, <argument>int</argument>, <argument>pre_handshake</argument>,
                          <argument>(conn_rec *c, SSL *ssl, int is_proxy)</argument>)</argument_list></macro>

<comment type="block">/**
 * proxy_post_handshake hook -- allow module to abort after successful
 * handshake with backend server and subsequent peer checks
 * @param c conn_rec for connection to backend server
 * @param ssl OpenSSL SSL Connection for the client or backend server
 */</comment>
<macro><name>APR_DECLARE_EXTERNAL_HOOK</name><argument_list>(<argument>ssl</argument>, <argument>SSL</argument>, <argument>int</argument>, <argument>proxy_post_handshake</argument>,
                          <argument>(conn_rec *c, SSL *ssl)</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __MOD_SSL_OPENSSL_H__ */</comment>
<comment type="block">/** @} */</comment>
</unit>
