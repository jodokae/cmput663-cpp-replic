<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="projects/httpd-2.4.29/modules/ssl/mod_ssl.c"><comment type="block">/* Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<comment type="block">/*                      _             _
 *  _ __ ___   ___   __| |    ___ ___| |  mod_ssl
 * | '_ ` _ \ / _ \ / _` |   / __/ __| |  Apache Interface to OpenSSL
 * | | | | | | (_) | (_| |   \__ \__ \ |
 * |_| |_| |_|\___/ \__,_|___|___/___/_|
 *                      |_____|
 *  mod_ssl.c
 *  Apache API interface structures
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ssl_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mod_ssl_openssl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_md5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util_mutex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ap_provider.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"http_config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>modssl_running_statically</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APR_IMPLEMENT_OPTIONAL_HOOK_RUN_ALL</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>SSL</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>pre_handshake</name></expr></argument>,
                                    <argument><expr>(<name>conn_rec</name> *<name>c</name>,<name>SSL</name> *<name>ssl</name>,<name>int</name> <name>is_proxy</name>)</expr></argument>,
                                    <argument><expr>(<name>c</name>,<name>ssl</name>,<name>is_proxy</name>)</expr></argument>, <argument><expr><name>OK</name></expr></argument>, <argument><expr><name>DECLINED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 *  the table of configuration directives we provide
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CMD_ALL</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>args</name></type></param>, <param><type><name>desc</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>AP_INIT_##args("SSL"#name, ssl_cmd_SSL##name, \
                       NULL, RSRC_CONF|OR_AUTHCFG, desc),</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CMD_SRV</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>args</name></type></param>, <param><type><name>desc</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>AP_INIT_##args("SSL"#name, ssl_cmd_SSL##name, \
                       NULL, RSRC_CONF, desc),</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_CMD_DIR</name><parameter_list>(<param><type><name>name</name></type></param>, <param><type><name>type</name></type></param>, <param><type><name>args</name></type></param>, <param><type><name>desc</name></type></param>)</parameter_list></cpp:macro> \
        <cpp:value>AP_INIT_##args("SSL"#name, ssl_cmd_SSL##name, \
                       NULL, OR_##type, desc),</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AP_END_CMD</name></cpp:macro> <cpp:value>{ NULL }</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>command_rec</name></type> <name><name>ssl_config_cmds</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/*
     * Global (main-server) context configuration directives
     */</comment>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>PassPhraseDialog</argument>, <argument>TAKE1</argument>,
                <argument>"SSL dialog mechanism for the pass phrase query "
                "('builtin', '|/path/to/pipe_program', "
                "or 'exec:/path/to/cgi_program')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>SessionCache</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Session Cache storage "
                "('none', 'nonenotnull', 'dbm:/path/to/file')"</argument>)</argument_list></macro>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_OPENSSL_ENGINE_H</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ENGINE_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CryptoDevice</argument>, <argument>TAKE1</argument>,
                <argument>"SSL external Crypto Device usage "
                "('builtin', '...')"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>RandomSeed</argument>, <argument>TAKE23</argument>,
                <argument>"SSL Pseudo Random Number Generator (PRNG) seeding source "
                "('startup|connect builtin|file:/path|exec:/path [bytes]')"</argument>)</argument_list></macro>

    <comment type="block">/*
     * Per-server context configuration directives
     */</comment>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>Engine</argument>, <argument>TAKE1</argument>,
                <argument>"SSL switch for the protocol engine "
                "('on', 'off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>FIPS</argument>, <argument>FLAG</argument>,
                <argument>"Enable FIPS-140 mode "
                "(`on', `off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_ALL</name><argument_list>(<argument>CipherSuite</argument>, <argument>TAKE1</argument>,
                <argument>"Colon-delimited list of permitted SSL Ciphers "
                "('XXX:...:XXX' - see manual)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CertificateFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Server Certificate file "
                "('/path/to/file' - PEM or DER encoded)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CertificateKeyFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Server Private Key file "
                "('/path/to/file' - PEM or DER encoded)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CertificateChainFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Server CA Certificate Chain file "
                "('/path/to/file' - PEM encoded)"</argument>)</argument_list></macro>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TLS_SESSION_TICKETS</name></cpp:ifdef>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>SessionTicketKeyFile</argument>, <argument>TAKE1</argument>,
                <argument>"TLS session ticket encryption/decryption key file (RFC 5077) "
                "('/path/to/file' - file with 48 bytes of random data)"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <macro><name>SSL_CMD_ALL</name><argument_list>(<argument>CACertificatePath</argument>, <argument>TAKE1</argument>,
                <argument>"SSL CA Certificate path "
                "('/path/to/dir' - contains PEM encoded files)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_ALL</name><argument_list>(<argument>CACertificateFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL CA Certificate file "
                "('/path/to/file' - PEM encoded)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CADNRequestPath</argument>, <argument>TAKE1</argument>,
                <argument>"SSL CA Distinguished Name path "
                "('/path/to/dir' - symlink hashes to PEM of acceptable CA names to request)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CADNRequestFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL CA Distinguished Name file "
                "('/path/to/file' - PEM encoded to derive acceptable CA names to request)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CARevocationPath</argument>, <argument>TAKE1</argument>,
                <argument>"SSL CA Certificate Revocation List (CRL) path "
                "('/path/to/dir' - contains PEM encoded files)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CARevocationFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL CA Certificate Revocation List (CRL) file "
                "('/path/to/file' - PEM encoded)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>CARevocationCheck</argument>, <argument>RAW_ARGS</argument>,
                <argument>"SSL CA Certificate Revocation List (CRL) checking mode"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_ALL</name><argument_list>(<argument>VerifyClient</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Client verify type "
                "('none', 'optional', 'require', 'optional_no_ca')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_ALL</name><argument_list>(<argument>VerifyDepth</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Client verify depth "
                "('N' - number of intermediate certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>SessionCacheTimeout</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Session Cache object lifetime "
                "('N' - number of seconds)"</argument>)</argument_list></macro>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>OPENSSL_NO_SSL3</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLv3_PROTO_PREFIX</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSLv3_PROTO_PREFIX</name></cpp:macro> <cpp:value>"SSLv3|"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TLSV1_X</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOLS</name></cpp:macro> <cpp:value>SSLv3_PROTO_PREFIX "TLSv1|TLSv1.1|TLSv1.2"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSL_PROTOCOLS</name></cpp:macro> <cpp:value>SSLv3_PROTO_PREFIX "TLSv1"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>Protocol</argument>, <argument>RAW_ARGS</argument>,
                <argument>"Enable or disable various SSL protocols "
                "('[+-][" SSL_PROTOCOLS "] ...' - see manual)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>HonorCipherOrder</argument>, <argument>FLAG</argument>,
                <argument>"Use the server's cipher ordering preference"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>Compression</argument>, <argument>FLAG</argument>,
                <argument>"Enable SSL level compression "
                "(`on', `off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>SessionTickets</argument>, <argument>FLAG</argument>,
                <argument>"Enable or disable TLS session tickets"
                "(`on', `off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>InsecureRenegotiation</argument>, <argument>FLAG</argument>,
                <argument>"Enable support for insecure renegotiation"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_ALL</name><argument_list>(<argument>UserName</argument>, <argument>TAKE1</argument>,
                <argument>"Set user name to SSL variable value"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StrictSNIVHostCheck</argument>, <argument>FLAG</argument>,
                <argument>"Strict SNI virtual host checking"</argument>)</argument_list></macro>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SRP</name></cpp:ifdef>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>SRPVerifierFile</argument>, <argument>TAKE1</argument>,
                <argument>"SRP verifier file "
                "('/path/to/file' - created by srptool)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>SRPUnknownUserSeed</argument>, <argument>TAKE1</argument>,
                <argument>"SRP seed for unknown users (to avoid leaking a user's existence) "
                "('some secret text')"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
     * Proxy configuration for remote SSL connections
     */</comment>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyEngine</argument>, <argument>FLAG</argument>,
                <argument>"SSL switch for the proxy protocol engine "
                "('on', 'off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyProtocol</argument>, <argument>RAW_ARGS</argument>,
               <argument>"SSL Proxy: enable or disable SSL protocol flavors "
                "('[+-][" SSL_PROTOCOLS "] ...' - see manual)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCipherSuite</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: colon-delimited list of permitted SSL ciphers "
               "('XXX:...:XXX' - see manual)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyVerify</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: whether to verify the remote certificate "
               "('on' or 'off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyVerifyDepth</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: maximum certificate verification depth "
               "('N' - number of intermediate certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCACertificateFile</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: file containing server certificates "
               "('/path/to/file' - PEM encoded certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCACertificatePath</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: directory containing server certificates "
               "('/path/to/dir' - contains PEM encoded certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCARevocationPath</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Proxy: CA Certificate Revocation List (CRL) path "
                "('/path/to/dir' - contains PEM encoded files)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCARevocationFile</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Proxy: CA Certificate Revocation List (CRL) file "
                "('/path/to/file' - PEM encoded)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCARevocationCheck</argument>, <argument>RAW_ARGS</argument>,
                <argument>"SSL Proxy: CA Certificate Revocation List (CRL) checking mode"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyMachineCertificateFile</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: file containing client certificates "
               "('/path/to/file' - PEM encoded certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyMachineCertificatePath</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: directory containing client certificates "
               "('/path/to/dir' - contains PEM encoded certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyMachineCertificateChainFile</argument>, <argument>TAKE1</argument>,
               <argument>"SSL Proxy: file containing issuing certificates "
               "of the client certificate "
               "(`/path/to/file' - PEM encoded certificates)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCheckPeerExpire</argument>, <argument>FLAG</argument>,
                <argument>"SSL Proxy: check the peer certificate's expiration date"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCheckPeerCN</argument>, <argument>FLAG</argument>,
                <argument>"SSL Proxy: check the peer certificate's CN"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>ProxyCheckPeerName</argument>, <argument>FLAG</argument>,
                <argument>"SSL Proxy: check the peer certificate's name "
                "(must be present in subjectAltName extension or CN"</argument>)</argument_list></macro>

    <comment type="block">/*
     * Per-directory context configuration directives
     */</comment>
    <macro><name>SSL_CMD_DIR</name><argument_list>(<argument>Options</argument>, <argument>OPTIONS</argument>, <argument>RAW_ARGS</argument>,
               <argument>"Set one or more options to configure the SSL engine"
               "('[+-]option[=value] ...' - see manual)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_DIR</name><argument_list>(<argument>RequireSSL</argument>, <argument>AUTHCFG</argument>, <argument>NO_ARGS</argument>,
               <argument>"Require the SSL protocol for the per-directory context "
               "(no arguments)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_DIR</name><argument_list>(<argument>Require</argument>, <argument>AUTHCFG</argument>, <argument>RAW_ARGS</argument>,
               <argument>"Require a boolean expression to evaluate to true for granting access"
               "(arbitrary complex boolean expression - see manual)"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_DIR</name><argument_list>(<argument>RenegBufferSize</argument>, <argument>AUTHCFG</argument>, <argument>TAKE1</argument>,
                <argument>"Configure the amount of memory that will be used for buffering the "
                "request body if a per-location SSL renegotiation is required due to "
                "changed access control requirements"</argument>)</argument_list></macro>

    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPEnable</argument>, <argument>FLAG</argument>,
               <argument>"Enable use of OCSP to verify certificate revocation ('on', 'off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPDefaultResponder</argument>, <argument>TAKE1</argument>,
               <argument>"URL of the default OCSP Responder"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPOverrideResponder</argument>, <argument>FLAG</argument>,
               <argument>"Force use of the default responder URL ('on', 'off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPResponseTimeSkew</argument>, <argument>TAKE1</argument>,
                <argument>"Maximum time difference in OCSP responses"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPResponseMaxAge</argument>, <argument>TAKE1</argument>,
                <argument>"Maximum age of OCSP responses"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPResponderTimeout</argument>, <argument>TAKE1</argument>,
                <argument>"OCSP responder query timeout"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPUseRequestNonce</argument>, <argument>FLAG</argument>,
                <argument>"Whether OCSP queries use a nonce or not ('on', 'off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPProxyURL</argument>, <argument>TAKE1</argument>,
                <argument>"Proxy URL to use for OCSP requests"</argument>)</argument_list></macro>

<comment type="block">/* Define OCSP Responder Certificate Verification Directive */</comment>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPNoVerify</argument>, <argument>FLAG</argument>,
                <argument>"Do not verify OCSP Responder certificate ('on', 'off')"</argument>)</argument_list></macro>
<comment type="block">/* Define OCSP Responder File Configuration Directive */</comment>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OCSPResponderCertificateFile</argument>, <argument>TAKE1</argument>,
               <argument>"Trusted OCSP responder certificates"
               "(`/path/to/file' - PEM encoded certificates)"</argument>)</argument_list></macro>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OCSP_STAPLING</name></cpp:ifdef>
    <comment type="block">/*
     * OCSP Stapling options
     */</comment>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingCache</argument>, <argument>TAKE1</argument>,
                <argument>"SSL Stapling Response Cache storage "
                "(`dbm:/path/to/file')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>UseStapling</argument>, <argument>FLAG</argument>,
                <argument>"SSL switch for the OCSP Stapling protocol " "(`on', `off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingResponseTimeSkew</argument>, <argument>TAKE1</argument>,
                <argument>"SSL stapling option for maximum time difference in OCSP responses"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingResponderTimeout</argument>, <argument>TAKE1</argument>,
                <argument>"SSL stapling option for OCSP responder timeout"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingResponseMaxAge</argument>, <argument>TAKE1</argument>,
                <argument>"SSL stapling option for maximum age of OCSP responses"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingStandardCacheTimeout</argument>, <argument>TAKE1</argument>,
                <argument>"SSL stapling option for normal OCSP Response Cache Lifetime"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingReturnResponderErrors</argument>, <argument>FLAG</argument>,
                <argument>"SSL stapling switch to return Status Errors Back to Client"
                "(`on', `off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingFakeTryLater</argument>, <argument>FLAG</argument>,
                <argument>"SSL stapling switch to send tryLater response to client on error "
                "(`on', `off')"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingErrorCacheTimeout</argument>, <argument>TAKE1</argument>,
                <argument>"SSL stapling option for OCSP Response Error Cache Lifetime"</argument>)</argument_list></macro>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>StaplingForceURL</argument>, <argument>TAKE1</argument>,
                <argument>"SSL stapling option to Force the OCSP Stapling URL"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SSL_CONF_CMD</name></cpp:ifdef>
    <macro><name>SSL_CMD_SRV</name><argument_list>(<argument>OpenSSLConfCmd</argument>, <argument>TAKE2</argument>,
                <argument>"OpenSSL configuration command"</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Deprecated directives. */</comment>
    <expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SSLLog"</expr></argument>, <argument><expr><name>ap_set_deprecated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
      <argument><expr>"SSLLog directive is no longer supported - use ErrorLog."</expr></argument>)</argument_list></call></expr>,
    <expr><call><name>AP_INIT_RAW_ARGS</name><argument_list>(<argument><expr>"SSLLogLevel"</expr></argument>, <argument><expr><name>ap_set_deprecated</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>OR_ALL</name></expr></argument>,
      <argument><expr>"SSLLogLevel directive is no longer supported - use LogLevel."</expr></argument>)</argument_list></call></expr>,

    <expr><name>AP_END_CMD</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 *  the various processing hooks
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>modssl_is_prelinked</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>apr_size_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>module</name> *</type><name>mod</name></decl>;</decl_stmt>
    <while>while <condition>(<expr>(<name>mod</name> = <name><name>ap_prelinked_modules</name><index>[<expr><name>i</name>++</expr>]</index></name>)</expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>mod</name>-&gt;<name>name</name></name></expr></argument>, <argument><expr>"mod_ssl.c"</expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <block>{
            <return>return <expr>1</expr>;</return>
        }</block></then></if>
    }</block></while>
    <return>return <expr>0</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_status_t</name></type> <name>ssl_cleanup_pre_config</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>data</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/*
     * Try to kill the internals of the SSL library.
     */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FIPS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>FIPS_mode_set</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* Corresponds to OBJ_create()s */</comment>
    <expr_stmt><expr><call><name>OBJ_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Corresponds to OPENSSL_load_builtin_modules() */</comment>
    <expr_stmt><expr><call><name>CONF_modules_free</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Corresponds to SSL_library_init: */</comment>
    <expr_stmt><expr><call><name>EVP_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ENGINE_LOAD_BUILTIN_ENGINES</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ENGINE_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x1000200fL</expr></cpp:if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>OPENSSL_NO_COMP</name></cpp:ifndef>
    <expr_stmt><expr><call><name>SSL_COMP_free_compression_methods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Usually needed per thread, but this parent process is single-threaded */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x1000000fL</expr></cpp:if>
    <expr_stmt><expr><call><name>ERR_remove_thread_state</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>ERR_remove_state</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Don't call ERR_free_strings in earlier versions, ERR_load_*_strings only
     * actually loaded the error strings once per process due to static
     * variable abuse in OpenSSL. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>OPENSSL_VERSION_NUMBER</name> &gt;= 0x00090805f)</expr></cpp:if>
    <expr_stmt><expr><call><name>ERR_free_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* Also don't call CRYPTO_cleanup_all_ex_data when linked statically here;
     * any registered ex_data indices may have been cached in static variables
     * in OpenSSL; removing them may cause havoc.  Notably, with OpenSSL
     * versions &gt;= 0.9.8f, COMP_CTX cleanups would not be run, which
     * could result in a per-connection memory leak (!). */</comment>
    <if>if <condition>(<expr>!<name>modssl_running_statically</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>CRYPTO_cleanup_all_ex_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/*
     * TODO: determine somewhere we can safely shove out diagnostics
     *       (when enabled) at this late stage in the game:
     * CRYPTO_mem_leaks_fp(stderr);
     */</comment>
    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_hook_pre_config</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>pconf</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>plog</name></decl></param>,
                               <param><decl><type><name>apr_pool_t</name> *</type><name>ptemp</name></decl></param>)</parameter_list>
<block>{
    <expr_stmt><expr><name>modssl_running_statically</name> = <call><name>modssl_is_prelinked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Some OpenSSL internals are allocated per-thread, make sure they
     * are associated to the/our same thread-id until cleaned up.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>APR_HAS_THREADS</name> &amp;&amp; <name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ssl_util_thread_id_setup</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* We must register the library in full, to ensure our configuration
     * code can successfully test the SSL environment.
     */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MODSSL_USE_OPENSSL_PRE_1_1_API</name></expr></cpp:if>
    <expr_stmt><expr>(<name>void</name>)<call><name>CRYPTO_malloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>OPENSSL_malloc_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>ERR_load_crypto_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_load_error_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SSL_library_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ENGINE_LOAD_BUILTIN_ENGINES</name></expr></cpp:if>
    <expr_stmt><expr><call><name>ENGINE_load_builtin_engines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>OpenSSL_add_all_algorithms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OPENSSL_load_builtin_modules</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>OBJ_txt2nid</name><argument_list>(<argument><expr>"id-on-dnsSRV"</expr></argument>)</argument_list></call> == <name>NID_undef</name></expr>)</condition><then> <block>{
        <expr_stmt><expr>(<name>void</name>)<call><name>OBJ_create</name><argument_list>(<argument><expr>"1.3.6.1.5.5.7.8.7"</expr></argument>, <argument><expr>"id-on-dnsSRV"</expr></argument>,
                         <argument><expr>"SRVName otherName form"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="block">/* Start w/o errors (e.g. OBJ_txt2nid() above) */</comment>
    <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Let us cleanup the ssl library when the module is unloaded
     */</comment>
    <expr_stmt><expr><call><name>apr_pool_cleanup_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ssl_cleanup_pre_config</name></expr></argument>,
                                           <argument><expr><name>apr_pool_cleanup_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Register us to handle mod_log_config %c/%x variables */</comment>
    <expr_stmt><expr><call><name>ssl_var_log_config_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Register to handle mod_status status page generation */</comment>
    <expr_stmt><expr><call><name>ssl_scache_status_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Register mutex type names so they can be configured with Mutex */</comment>
    <expr_stmt><expr><call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>SSL_CACHE_MUTEX_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OCSP_STAPLING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>SSL_STAPLING_CACHE_MUTEX_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                      <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_mutex_register</name><argument_list>(<argument><expr><name>pconf</name></expr></argument>, <argument><expr><name>SSL_STAPLING_REFRESH_MUTEX_TYPE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                      <argument><expr><name>APR_LOCK_DEFAULT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <return>return <expr><name>OK</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>SSLConnRec</name> *</type><name>ssl_init_connection_ctx</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sslconn</name></expr>)</condition><then> <block>{
        <return>return <expr><name>sslconn</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>sslconn</name> = <call><name>apr_pcalloc</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>*<name>sslconn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sslconn</name>-&gt;<name>server</name></name> = <name><name>c</name>-&gt;<name>base_server</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sslconn</name>-&gt;<name>verify_depth</name></name> = <name>UNSET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sslconn</name>-&gt;<name>cipher_suite</name></name> = <name><name>sc</name>-&gt;<name>server</name>-&gt;<name>auth</name>.<name>cipher_suite</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>myConnConfigSet</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>sslconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>sslconn</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ssl_proxy_enable</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>ssl_init_connection_ctx</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>sslconn</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<name><name>sc</name>-&gt;<name>proxy_enabled</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01961</expr></argument>)</argument_list></call>
                      "SSL Proxy requested for %s but not enabled "
                      "[Hint: SSLProxyEngine]"</expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>sslconn</name>-&gt;<name>is_proxy</name></name> = 1</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sslconn</name>-&gt;<name>disabled</name></name> = 0</expr>;</expr_stmt>

    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ssl_engine_disable</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sslconn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>sslconn</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_FALSE</name></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>sslconn</name> = <call><name>ssl_init_connection_ctx</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sslconn</name>-&gt;<name>disabled</name></name> = 1</expr>;</expr_stmt>

    <return>return <expr>1</expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ssl_init_ssl_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSL</name> *</type><name>ssl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>vhost_md5</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>modssl_ctx_t</name> *</type><name>mctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>server_rec</name> *</type><name>server</name></decl>;</decl_stmt>

    <if>if <condition>(<expr>!<name>sslconn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sslconn</name> = <call><name>ssl_init_connection_ctx</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>server</name> = <name><name>sslconn</name>-&gt;<name>server</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
     * Seed the Pseudo Random Number Generator (PRNG)
     */</comment>
    <expr_stmt><expr><call><name>ssl_rand_seed</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name>SSL_RSCTX_CONNECT</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mctx</name> = <name><name>sslconn</name>-&gt;<name>is_proxy</name></name> ? <name><name>sc</name>-&gt;<name>proxy</name></name> : <name><name>sc</name>-&gt;<name>server</name></name></expr>;</expr_stmt>

    <comment type="block">/*
     * Create a new SSL connection with the configured server SSL context and
     * attach this to the socket. Additionally we register this attachment
     * so we can detach later.
     */</comment>
    <if>if <condition>(<expr>!(<name><name>sslconn</name>-&gt;<name>ssl</name></name> = <name>ssl</name> = <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>mctx</name>-&gt;<name>ssl_ctx</name></name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01962</expr></argument>)</argument_list></call>
                      "Unable to create a new SSL connection from the SSL "
                      "context"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>

        <return>return <expr><name>DECLINED</name></expr>;</return> <comment type="block">/* XXX */</comment>
    }</block></then></if>

    <expr_stmt><expr><name>rc</name> = <call><name>ssl_run_pre_handshake</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>, <argument><expr><name><name>sslconn</name>-&gt;<name>is_proxy</name></name> ? 1 : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>rc</name> != <name>OK</name> &amp;&amp; <name>rc</name> != <name>DECLINED</name></expr>)</condition><then> <block>{
        <return>return <expr><name>rc</name></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><name>vhost_md5</name> = <call><name>ap_md5_binary</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *)<name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>,
                              <argument><expr><name><name>sc</name>-&gt;<name>vhost_id_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr>!<call><name>SSL_set_session_id_context</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr>(<name>unsigned</name> <name>char</name> *)<name>vhost_md5</name></expr></argument>,
                                    <argument><expr><name>APR_MD5_DIGESTSIZE</name>*2</expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01963</expr></argument>)</argument_list></call>
                      "Unable to set session id context to '%s'"</expr></argument>, <argument><expr><name>vhost_md5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ssl_log_ssl_error</name><argument_list>(<argument><expr><name>SSLLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_ERR</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>c</name>-&gt;<name>aborted</name></name> = 1</expr>;</expr_stmt>

        <return>return <expr><name>DECLINED</name></expr>;</return> <comment type="block">/* XXX */</comment>
    }</block></then></if>

    <expr_stmt><expr><call><name>SSL_set_app_data</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>modssl_set_app_data2</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* will be request_rec */</comment>

    <expr_stmt><expr><call><name>SSL_set_verify_result</name><argument_list>(<argument><expr><name>ssl</name></expr></argument>, <argument><expr><name>X509_V_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ssl_io_filter_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>ssl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>APR_SUCCESS</name></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name>ssl_hook_http_scheme</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_FALSE</name> || <name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_OPTIONAL</name></expr>)</condition><then> <block>{
        <return>return <expr><name>NULL</name></expr>;</return>
    }</block></then></if>

    <return>return <expr>"https"</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>apr_port_t</name></type> <name>ssl_hook_default_port</name><parameter_list>(<param><decl><type><specifier>const</specifier> <name>request_rec</name> *</type><name>r</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name> <init>= <expr><call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>r</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_FALSE</name> || <name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_OPTIONAL</name></expr>)</condition><then> <block>{
        <return>return <expr>0</expr>;</return>
    }</block></then></if>

    <return>return <expr>443</expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_hook_pre_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name> *</type><name>c</name></decl></param>, <param><decl><type><name>void</name> *</type><name>csd</name></decl></param>)</parameter_list>
<block>{

    <decl_stmt><decl><type><name>SSLSrvConfigRec</name> *</type><name>sc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sslconn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>sslconn</name>-&gt;<name>server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <expr_stmt><expr><name>sc</name> = <call><name>mySrvConfig</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>base_server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <comment type="block">/*
     * Immediately stop processing if SSL is disabled for this connection
     */</comment>
    <if>if <condition>(<expr><name><name>c</name>-&gt;<name>master</name></name> || !(<name>sc</name> &amp;&amp; (<name><name>sc</name>-&gt;<name>enabled</name></name> == <name>SSL_ENABLED_TRUE</name> ||
                              (<name>sslconn</name> &amp;&amp; <name><name>sslconn</name>-&gt;<name>is_proxy</name></name>)))</expr>)</condition><then>
    <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Create SSL context
     */</comment>
    <if>if <condition>(<expr>!<name>sslconn</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sslconn</name> = <call><name>ssl_init_connection_ctx</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>sslconn</name>-&gt;<name>disabled</name></name></expr>)</condition><then> <block>{
        <return>return <expr><name>DECLINED</name></expr>;</return>
    }</block></then></if>

    <comment type="block">/*
     * Remember the connection information for
     * later access inside callback functions
     */</comment>

    <expr_stmt><expr><call><name>ap_log_cerror</name><argument_list>(<argument><expr><name>APLOG_MARK</name></expr></argument>, <argument><expr><name>APLOG_INFO</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>APLOGNO</name><argument_list>(<argument><expr>01964</expr></argument>)</argument_list></call>
                  "Connection to child %ld established "
                  "(server %s)"</expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>id</name></name></expr></argument>, <argument><expr><name><name>sc</name>-&gt;<name>vhost_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>ssl_init_ssl_connection</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ssl_hook_process_connection</name><parameter_list>(<param><decl><type><name>conn_rec</name>*</type> <name>c</name></decl></param>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>SSLConnRec</name> *</type><name>sslconn</name> <init>= <expr><call><name>myConnConfig</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>sslconn</name> &amp;&amp; !<name><name>sslconn</name>-&gt;<name>disabled</name></name></expr>)</condition><then> <block>{
        <comment type="block">/* On an active SSL connection, let the input filters initialize
         * themselves which triggers the handshake, which again triggers
         * all kinds of useful things such as SNI and ALPN.
         */</comment>
        <decl_stmt><decl><type><name>apr_bucket_brigade</name>*</type> <name>temp</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>temp</name> = <call><name>apr_brigade_create</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>pool</name></name></expr></argument>, <argument><expr><name><name>c</name>-&gt;<name>bucket_alloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ap_get_brigade</name><argument_list>(<argument><expr><name><name>c</name>-&gt;<name>input_filters</name></name></expr></argument>, <argument><expr><name>temp</name></expr></argument>,
                       <argument><expr><name>AP_MODE_INIT</name></expr></argument>, <argument><expr><name>APR_BLOCK_READ</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>apr_brigade_destroy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <return>return <expr><name>DECLINED</name></expr>;</return>
}</block></function>

<comment type="block">/*
 *  the module registration phase
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ssl_register_hooks</name><parameter_list>(<param><decl><type><name>apr_pool_t</name> *</type><name>p</name></decl></param>)</parameter_list>
<block>{
    <comment type="block">/* ssl_hook_ReadReq needs to use the BrowserMatch settings so must
     * run after mod_setenvif's post_read_request hook. */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> *</type><name><name>pre_prr</name><index>[]</index></name> <init>= <expr><block>{ <expr>"mod_setenvif.c"</expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ssl_io_filter_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_hook_pre_connection</name><argument_list>(<argument><expr><name>ssl_hook_pre_connection</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_process_connection</name><argument_list>(<argument><expr><name>ssl_hook_process_connection</name></expr></argument>, 
                                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_test_config</name>   <argument_list>(<argument><expr><name>ssl_hook_ConfigTest</name></expr></argument>,    <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_post_config</name>   <argument_list>(<argument><expr><name>ssl_init_Module</name></expr></argument>,        <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_http_scheme</name>   <argument_list>(<argument><expr><name>ssl_hook_http_scheme</name></expr></argument>,   <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_default_port</name>  <argument_list>(<argument><expr><name>ssl_hook_default_port</name></expr></argument>,  <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_pre_config</name>    <argument_list>(<argument><expr><name>ssl_hook_pre_config</name></expr></argument>,    <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_child_init</name>    <argument_list>(<argument><expr><name>ssl_init_Child</name></expr></argument>,         <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_authn</name>   <argument_list>(<argument><expr><name>ssl_hook_UserCheck</name></expr></argument>,     <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_FIRST</name></expr></argument>,
                           <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_fixups</name>        <argument_list>(<argument><expr><name>ssl_hook_Fixup</name></expr></argument>,         <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_access</name>  <argument_list>(<argument><expr><name>ssl_hook_Access</name></expr></argument>,        <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
                           <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_check_authz</name>   <argument_list>(<argument><expr><name>ssl_hook_Auth</name></expr></argument>,          <argument><expr><name>NULL</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>,
                           <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ap_hook_post_read_request</name><argument_list>(<argument><expr><name>ssl_hook_ReadReq</name></expr></argument>, <argument><expr><name>pre_prr</name></expr></argument>,<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>APR_HOOK_MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ssl_var_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_proxy_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>APR_REGISTER_OPTIONAL_FN</name><argument_list>(<argument><expr><name>ssl_engine_disable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ssl"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>ssl_authz_provider_require_ssl</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ap_register_auth_provider</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>AUTHZ_PROVIDER_GROUP</name></expr></argument>, <argument><expr>"ssl-verify-client"</expr></argument>,
                              <argument><expr><name>AUTHZ_PROVIDER_VERSION</name></expr></argument>,
                              <argument><expr>&amp;<name>ssl_authz_provider_verify_client</name></expr></argument>,
                              <argument><expr><name>AP_AUTH_INTERNAL_PER_CONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<decl_stmt><decl><type><name>module</name> <name>AP_MODULE_DECLARE_DATA</name></type> <name>ssl_module</name> <init>= <expr><block>{
    <expr><name>STANDARD20_MODULE_STUFF</name></expr>,
    <expr><name>ssl_config_perdir_create</name></expr>,   <comment type="block">/* create per-dir    config structures */</comment>
    <expr><name>ssl_config_perdir_merge</name></expr>,    <comment type="block">/* merge  per-dir    config structures */</comment>
    <expr><name>ssl_config_server_create</name></expr>,   <comment type="block">/* create per-server config structures */</comment>
    <expr><name>ssl_config_server_merge</name></expr>,    <comment type="block">/* merge  per-server config structures */</comment>
    <expr><name>ssl_config_cmds</name></expr>,            <comment type="block">/* table of configuration directives   */</comment>
    <expr><name>ssl_register_hooks</name></expr>          <comment type="block">/* register hooks */</comment>
}</block></expr></init></decl>;</decl_stmt>
</unit>
